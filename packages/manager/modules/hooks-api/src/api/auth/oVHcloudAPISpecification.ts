/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiCredentialOVH,
  AuthCredentialOVH,
  AuthDetailsOVH,
  AuthShouldDisplayMFAEnrollmentEnumOVH,
  AuthTokenOVH,
  PostAuthCredentialBody
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Request a new credential for your application
 */
export const postAuthCredential = (
    postAuthCredentialBody: PostAuthCredentialBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuthCredentialOVH>(
      {url: `/auth/credential`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAuthCredentialBody, signal
    },
      options);
    }
  


export const getPostAuthCredentialMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthCredential>>, TError,{data: PostAuthCredentialBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthCredential>>, TError,{data: PostAuthCredentialBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthCredential>>, {data: PostAuthCredentialBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthCredential(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthCredentialMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthCredential>>>
    export type PostAuthCredentialMutationBody = PostAuthCredentialBody
    export type PostAuthCredentialMutationError = unknown

    /**
 * @summary Request a new credential for your application
 */
export const usePostAuthCredential = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthCredential>>, TError,{data: PostAuthCredentialBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthCredential>>,
        TError,
        {data: PostAuthCredentialBody},
        TContext
      > => {

      const mutationOptions = getPostAuthCredentialMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the current credential details
 */
export const getAuthCurrentCredential = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ApiCredentialOVH>(
      {url: `/auth/currentCredential`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAuthCurrentCredentialQueryKey = () => {
    return [`/auth/currentCredential`] as const;
    }

    
export const getGetAuthCurrentCredentialQueryOptions = <TData = Awaited<ReturnType<typeof getAuthCurrentCredential>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthCurrentCredential>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthCurrentCredentialQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthCurrentCredential>>> = ({ signal }) => getAuthCurrentCredential(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthCurrentCredential>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAuthCurrentCredentialQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthCurrentCredential>>>
export type GetAuthCurrentCredentialQueryError = unknown


export function useGetAuthCurrentCredential<TData = Awaited<ReturnType<typeof getAuthCurrentCredential>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthCurrentCredential>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthCurrentCredential>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAuthCurrentCredential<TData = Awaited<ReturnType<typeof getAuthCurrentCredential>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthCurrentCredential>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthCurrentCredential>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAuthCurrentCredential<TData = Awaited<ReturnType<typeof getAuthCurrentCredential>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthCurrentCredential>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the current credential details
 */

export function useGetAuthCurrentCredential<TData = Awaited<ReturnType<typeof getAuthCurrentCredential>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthCurrentCredential>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAuthCurrentCredentialQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Details about the current authentication
 */
export const getAuthDetails = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuthDetailsOVH>(
      {url: `/auth/details`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAuthDetailsQueryKey = () => {
    return [`/auth/details`] as const;
    }

    
export const getGetAuthDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getAuthDetails>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthDetailsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthDetails>>> = ({ signal }) => getAuthDetails(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAuthDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthDetails>>>
export type GetAuthDetailsQueryError = unknown


export function useGetAuthDetails<TData = Awaited<ReturnType<typeof getAuthDetails>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAuthDetails<TData = Awaited<ReturnType<typeof getAuthDetails>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAuthDetails<TData = Awaited<ReturnType<typeof getAuthDetails>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Details about the current authentication
 */

export function useGetAuthDetails<TData = Awaited<ReturnType<typeof getAuthDetails>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAuthDetailsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Expire current credential
 */
export const postAuthLogout = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/auth/logout`, method: 'POST', signal
    },
      options);
    }
  


export const getPostAuthLogoutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogout>>, void> = () => {
          

          return  postAuthLogout(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogout>>>
    
    export type PostAuthLogoutMutationError = unknown

    /**
 * @summary Expire current credential
 */
export const usePostAuthLogout = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostAuthLogoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Should we display the MFA Enrollment popup
 */
export const getAuthShouldDisplayMFAEnrollment = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuthShouldDisplayMFAEnrollmentEnumOVH>(
      {url: `/auth/shouldDisplayMFAEnrollment`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAuthShouldDisplayMFAEnrollmentQueryKey = () => {
    return [`/auth/shouldDisplayMFAEnrollment`] as const;
    }

    
export const getGetAuthShouldDisplayMFAEnrollmentQueryOptions = <TData = Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthShouldDisplayMFAEnrollmentQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>> = ({ signal }) => getAuthShouldDisplayMFAEnrollment(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAuthShouldDisplayMFAEnrollmentQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>>
export type GetAuthShouldDisplayMFAEnrollmentQueryError = unknown


export function useGetAuthShouldDisplayMFAEnrollment<TData = Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAuthShouldDisplayMFAEnrollment<TData = Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAuthShouldDisplayMFAEnrollment<TData = Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Should we display the MFA Enrollment popup
 */

export function useGetAuthShouldDisplayMFAEnrollment<TData = Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthShouldDisplayMFAEnrollment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAuthShouldDisplayMFAEnrollmentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the current time of the OVH servers, since UNIX epoch
 */
export const getAuthTime = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number>(
      {url: `/auth/time`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAuthTimeQueryKey = () => {
    return [`/auth/time`] as const;
    }

    
export const getGetAuthTimeQueryOptions = <TData = Awaited<ReturnType<typeof getAuthTime>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTime>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthTimeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthTime>>> = ({ signal }) => getAuthTime(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthTime>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAuthTimeQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthTime>>>
export type GetAuthTimeQueryError = unknown


export function useGetAuthTime<TData = Awaited<ReturnType<typeof getAuthTime>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTime>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthTime>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAuthTime<TData = Awaited<ReturnType<typeof getAuthTime>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTime>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthTime>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAuthTime<TData = Awaited<ReturnType<typeof getAuthTime>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTime>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the current time of the OVH servers, since UNIX epoch
 */

export function useGetAuthTime<TData = Awaited<ReturnType<typeof getAuthTime>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTime>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAuthTimeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate a one-time token to authenticate on OVHcloud's applications (only supported by chatbot for the moment)
 */
export const postAuthToken = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuthTokenOVH>(
      {url: `/auth/token`, method: 'POST', signal
    },
      options);
    }
  


export const getPostAuthTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthToken>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthToken>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthToken>>, void> = () => {
          

          return  postAuthToken(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthToken>>>
    
    export type PostAuthTokenMutationError = unknown

    /**
 * @summary Generate a one-time token to authenticate on OVHcloud's applications (only supported by chatbot for the moment)
 */
export const usePostAuthToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthToken>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthToken>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostAuthTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AllDomAllDomServiceWithIAMOVH,
  AllDomDomainOVH,
  GetAllDomDomainsParams,
  GetAllDomsParams,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available AllDom services
 */
export const getAllDoms = (
    params?: GetAllDomsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/allDom`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllDomsQueryKey = (params?: GetAllDomsParams,) => {
    return [`/allDom`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllDomsQueryOptions = <TData = Awaited<ReturnType<typeof getAllDoms>>, TError = unknown>(params?: GetAllDomsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllDomsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllDoms>>> = ({ signal }) => getAllDoms(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllDoms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAllDomsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllDoms>>>
export type GetAllDomsQueryError = unknown


export function useGetAllDoms<TData = Awaited<ReturnType<typeof getAllDoms>>, TError = unknown>(
 params: undefined |  GetAllDomsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDoms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAllDoms<TData = Awaited<ReturnType<typeof getAllDoms>>, TError = unknown>(
 params?: GetAllDomsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDoms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAllDoms<TData = Awaited<ReturnType<typeof getAllDoms>>, TError = unknown>(
 params?: GetAllDomsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available AllDom services
 */

export function useGetAllDoms<TData = Awaited<ReturnType<typeof getAllDoms>>, TError = unknown>(
 params?: GetAllDomsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAllDomsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this AllDom properties
 */
export const getAllDom = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AllDomAllDomServiceWithIAMOVH>(
      {url: `/allDom/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllDomQueryKey = (serviceName: string,) => {
    return [`/allDom/${serviceName}`] as const;
    }

    
export const getGetAllDomQueryOptions = <TData = Awaited<ReturnType<typeof getAllDom>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllDomQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllDom>>> = ({ signal }) => getAllDom(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllDom>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAllDomQueryResult = NonNullable<Awaited<ReturnType<typeof getAllDom>>>
export type GetAllDomQueryError = unknown


export function useGetAllDom<TData = Awaited<ReturnType<typeof getAllDom>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDom>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDom>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAllDom<TData = Awaited<ReturnType<typeof getAllDom>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDom>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDom>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAllDom<TData = Awaited<ReturnType<typeof getAllDom>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this AllDom properties
 */

export function useGetAllDom<TData = Awaited<ReturnType<typeof getAllDom>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAllDomQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all domains attached to this allDom
 */
export const getAllDomDomains = (
    serviceName: string,
    params?: GetAllDomDomainsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/allDom/${serviceName}/domain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllDomDomainsQueryKey = (serviceName: string,
    params?: GetAllDomDomainsParams,) => {
    return [`/allDom/${serviceName}/domain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllDomDomainsQueryOptions = <TData = Awaited<ReturnType<typeof getAllDomDomains>>, TError = unknown>(serviceName: string,
    params?: GetAllDomDomainsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllDomDomainsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllDomDomains>>> = ({ signal }) => getAllDomDomains(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllDomDomains>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAllDomDomainsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllDomDomains>>>
export type GetAllDomDomainsQueryError = unknown


export function useGetAllDomDomains<TData = Awaited<ReturnType<typeof getAllDomDomains>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetAllDomDomainsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomDomains>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDomDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAllDomDomains<TData = Awaited<ReturnType<typeof getAllDomDomains>>, TError = unknown>(
 serviceName: string,
    params?: GetAllDomDomainsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomDomains>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDomDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAllDomDomains<TData = Awaited<ReturnType<typeof getAllDomDomains>>, TError = unknown>(
 serviceName: string,
    params?: GetAllDomDomainsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all domains attached to this allDom
 */

export function useGetAllDomDomains<TData = Awaited<ReturnType<typeof getAllDomDomains>>, TError = unknown>(
 serviceName: string,
    params?: GetAllDomDomainsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAllDomDomainsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this AllDom domain properties
 */
export const getAllDomDomain = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AllDomDomainOVH>(
      {url: `/allDom/${serviceName}/domain/${domain}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllDomDomainQueryKey = (serviceName: string,
    domain: string,) => {
    return [`/allDom/${serviceName}/domain/${domain}`] as const;
    }

    
export const getGetAllDomDomainQueryOptions = <TData = Awaited<ReturnType<typeof getAllDomDomain>>, TError = unknown>(serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllDomDomainQueryKey(serviceName,domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllDomDomain>>> = ({ signal }) => getAllDomDomain(serviceName,domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllDomDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAllDomDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getAllDomDomain>>>
export type GetAllDomDomainQueryError = unknown


export function useGetAllDomDomain<TData = Awaited<ReturnType<typeof getAllDomDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDomDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAllDomDomain<TData = Awaited<ReturnType<typeof getAllDomDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDomDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAllDomDomain<TData = Awaited<ReturnType<typeof getAllDomDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this AllDom domain properties
 */

export function useGetAllDomDomain<TData = Awaited<ReturnType<typeof getAllDomDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAllDomDomainQueryOptions(serviceName,domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getAllDomServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/allDom/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllDomServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/allDom/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetAllDomServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllDomServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>> = ({ signal }) => getAllDomServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAllDomServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>>
export type GetAllDomServiceNameServiceInfosQueryError = unknown


export function useGetAllDomServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAllDomServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAllDomServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetAllDomServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDomServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAllDomServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putAllDomServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/allDom/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutAllDomServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAllDomServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putAllDomServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAllDomServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putAllDomServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAllDomServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putAllDomServiceNameServiceInfos>>>
    export type PutAllDomServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutAllDomServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutAllDomServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAllDomServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putAllDomServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutAllDomServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

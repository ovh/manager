/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLicenseOfficePrepaidParams,
  GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsParams,
  LicenseOfficePrepaidOfficeCurrentStatisticsNativeOVH,
  LicenseOfficePrepaidOfficeTaskNativeOVH,
  LicenseOfficePrepaidOfficeTenantNativeOVH,
  LicenseOfficePrepaidOfficeTenantPostChangePasswordOVH,
  LicenseOfficePrepaidOfficeTenantPutParentTenantOVH,
  LicenseOfficePrepaidOfficeUserNativeWithIAMOVH,
  LicenseOfficePrepaidPutOfficeUserNativeOVH,
  PostLicenseOfficePrepaidServiceNameConfirmTerminationBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getLicenseOfficePrepaid = (
    params?: GetLicenseOfficePrepaidParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/officePrepaid`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseOfficePrepaidQueryKey = (params?: GetLicenseOfficePrepaidParams,) => {
    return [`/license/officePrepaid`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseOfficePrepaidQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficePrepaid>>, TError = unknown>(params?: GetLicenseOfficePrepaidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficePrepaidQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficePrepaid>>> = ({ signal }) => getLicenseOfficePrepaid(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficePrepaidQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficePrepaid>>>
export type GetLicenseOfficePrepaidQueryError = unknown


export function useGetLicenseOfficePrepaid<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaid>>, TError = unknown>(
 params: undefined |  GetLicenseOfficePrepaidParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaid<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaid>>, TError = unknown>(
 params?: GetLicenseOfficePrepaidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaid<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaid>>, TError = unknown>(
 params?: GetLicenseOfficePrepaidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetLicenseOfficePrepaid<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaid>>, TError = unknown>(
 params?: GetLicenseOfficePrepaidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficePrepaidQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseOfficePrepaidServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficePrepaidOfficeUserNativeWithIAMOVH>(
      {url: `/license/officePrepaid/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficePrepaidServiceNameQueryKey = (serviceName: string,) => {
    return [`/license/officePrepaid/${serviceName}`] as const;
    }

    
export const getGetLicenseOfficePrepaidServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficePrepaidServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>> = ({ signal }) => getLicenseOfficePrepaidServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficePrepaidServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>>
export type GetLicenseOfficePrepaidServiceNameQueryError = unknown


export function useGetLicenseOfficePrepaidServiceName<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaidServiceName<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaidServiceName<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseOfficePrepaidServiceName<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficePrepaidServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify the office user
 */
export const putLicenseOfficePrepaidServiceName = (
    serviceName: string,
    licenseOfficePrepaidPutOfficeUserNativeOVH: LicenseOfficePrepaidPutOfficeUserNativeOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/officePrepaid/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: licenseOfficePrepaidPutOfficeUserNativeOVH
    },
      options);
    }
  


export const getPutLicenseOfficePrepaidServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceName>>, TError,{serviceName: string;data: LicenseOfficePrepaidPutOfficeUserNativeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceName>>, TError,{serviceName: string;data: LicenseOfficePrepaidPutOfficeUserNativeOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceName>>, {serviceName: string;data: LicenseOfficePrepaidPutOfficeUserNativeOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseOfficePrepaidServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseOfficePrepaidServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceName>>>
    export type PutLicenseOfficePrepaidServiceNameMutationBody = LicenseOfficePrepaidPutOfficeUserNativeOVH
    export type PutLicenseOfficePrepaidServiceNameMutationError = unknown

    /**
 * @summary Modify the office user
 */
export const usePutLicenseOfficePrepaidServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceName>>, TError,{serviceName: string;data: LicenseOfficePrepaidPutOfficeUserNativeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceName>>,
        TError,
        {serviceName: string;data: LicenseOfficePrepaidPutOfficeUserNativeOVH},
        TContext
      > => {

      const mutationOptions = getPutLicenseOfficePrepaidServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change password
 */
export const postLicenseOfficePrepaidServiceNameChangePassword = (
    serviceName: string,
    licenseOfficePrepaidOfficeTenantPostChangePasswordOVH: LicenseOfficePrepaidOfficeTenantPostChangePasswordOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficePrepaidOfficeTaskNativeOVH>(
      {url: `/license/officePrepaid/${serviceName}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: licenseOfficePrepaidOfficeTenantPostChangePasswordOVH, signal
    },
      options);
    }
  


export const getPostLicenseOfficePrepaidServiceNameChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameChangePassword>>, TError,{serviceName: string;data: LicenseOfficePrepaidOfficeTenantPostChangePasswordOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameChangePassword>>, TError,{serviceName: string;data: LicenseOfficePrepaidOfficeTenantPostChangePasswordOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameChangePassword>>, {serviceName: string;data: LicenseOfficePrepaidOfficeTenantPostChangePasswordOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseOfficePrepaidServiceNameChangePassword(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseOfficePrepaidServiceNameChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameChangePassword>>>
    export type PostLicenseOfficePrepaidServiceNameChangePasswordMutationBody = LicenseOfficePrepaidOfficeTenantPostChangePasswordOVH
    export type PostLicenseOfficePrepaidServiceNameChangePasswordMutationError = unknown

    /**
 * @summary Change password
 */
export const usePostLicenseOfficePrepaidServiceNameChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameChangePassword>>, TError,{serviceName: string;data: LicenseOfficePrepaidOfficeTenantPostChangePasswordOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameChangePassword>>,
        TError,
        {serviceName: string;data: LicenseOfficePrepaidOfficeTenantPostChangePasswordOVH},
        TContext
      > => {

      const mutationOptions = getPostLicenseOfficePrepaidServiceNameChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postLicenseOfficePrepaidServiceNameConfirmTermination = (
    serviceName: string,
    postLicenseOfficePrepaidServiceNameConfirmTerminationBody: PostLicenseOfficePrepaidServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/officePrepaid/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseOfficePrepaidServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostLicenseOfficePrepaidServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseOfficePrepaidServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseOfficePrepaidServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameConfirmTermination>>, {serviceName: string;data: PostLicenseOfficePrepaidServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseOfficePrepaidServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseOfficePrepaidServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameConfirmTermination>>>
    export type PostLicenseOfficePrepaidServiceNameConfirmTerminationMutationBody = PostLicenseOfficePrepaidServiceNameConfirmTerminationBody
    export type PostLicenseOfficePrepaidServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostLicenseOfficePrepaidServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseOfficePrepaidServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostLicenseOfficePrepaidServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseOfficePrepaidServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getLicenseOfficePrepaidServiceNameParentTenant = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficePrepaidOfficeTenantNativeOVH>(
      {url: `/license/officePrepaid/${serviceName}/parentTenant`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficePrepaidServiceNameParentTenantQueryKey = (serviceName: string,) => {
    return [`/license/officePrepaid/${serviceName}/parentTenant`] as const;
    }

    
export const getGetLicenseOfficePrepaidServiceNameParentTenantQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficePrepaidServiceNameParentTenantQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>> = ({ signal }) => getLicenseOfficePrepaidServiceNameParentTenant(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficePrepaidServiceNameParentTenantQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>>
export type GetLicenseOfficePrepaidServiceNameParentTenantQueryError = unknown


export function useGetLicenseOfficePrepaidServiceNameParentTenant<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaidServiceNameParentTenant<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaidServiceNameParentTenant<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseOfficePrepaidServiceNameParentTenant<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameParentTenant>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficePrepaidServiceNameParentTenantQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update parent tenant service
 */
export const putLicenseOfficePrepaidServiceNameParentTenant = (
    serviceName: string,
    licenseOfficePrepaidOfficeTenantPutParentTenantOVH: NonReadonly<LicenseOfficePrepaidOfficeTenantPutParentTenantOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/officePrepaid/${serviceName}/parentTenant`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: licenseOfficePrepaidOfficeTenantPutParentTenantOVH
    },
      options);
    }
  


export const getPutLicenseOfficePrepaidServiceNameParentTenantMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceNameParentTenant>>, TError,{serviceName: string;data: NonReadonly<LicenseOfficePrepaidOfficeTenantPutParentTenantOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceNameParentTenant>>, TError,{serviceName: string;data: NonReadonly<LicenseOfficePrepaidOfficeTenantPutParentTenantOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceNameParentTenant>>, {serviceName: string;data: NonReadonly<LicenseOfficePrepaidOfficeTenantPutParentTenantOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseOfficePrepaidServiceNameParentTenant(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseOfficePrepaidServiceNameParentTenantMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceNameParentTenant>>>
    export type PutLicenseOfficePrepaidServiceNameParentTenantMutationBody = NonReadonly<LicenseOfficePrepaidOfficeTenantPutParentTenantOVH>
    export type PutLicenseOfficePrepaidServiceNameParentTenantMutationError = unknown

    /**
 * @summary Update parent tenant service
 */
export const usePutLicenseOfficePrepaidServiceNameParentTenant = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceNameParentTenant>>, TError,{serviceName: string;data: NonReadonly<LicenseOfficePrepaidOfficeTenantPutParentTenantOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceNameParentTenant>>,
        TError,
        {serviceName: string;data: NonReadonly<LicenseOfficePrepaidOfficeTenantPutParentTenantOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseOfficePrepaidServiceNameParentTenantMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getLicenseOfficePrepaidServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/license/officePrepaid/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficePrepaidServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/license/officePrepaid/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetLicenseOfficePrepaidServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficePrepaidServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>> = ({ signal }) => getLicenseOfficePrepaidServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficePrepaidServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>>
export type GetLicenseOfficePrepaidServiceNameServiceInfosQueryError = unknown


export function useGetLicenseOfficePrepaidServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaidServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaidServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetLicenseOfficePrepaidServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficePrepaidServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putLicenseOfficePrepaidServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/officePrepaid/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutLicenseOfficePrepaidServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseOfficePrepaidServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseOfficePrepaidServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceNameServiceInfos>>>
    export type PutLicenseOfficePrepaidServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutLicenseOfficePrepaidServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutLicenseOfficePrepaidServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseOfficePrepaidServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseOfficePrepaidServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List pending task
 */
export const getLicenseOfficePrepaidServiceNameTenantPendingTask = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/license/officePrepaid/${serviceName}/tenantPendingTask`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficePrepaidServiceNameTenantPendingTaskQueryKey = (serviceName: string,) => {
    return [`/license/officePrepaid/${serviceName}/tenantPendingTask`] as const;
    }

    
export const getGetLicenseOfficePrepaidServiceNameTenantPendingTaskQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficePrepaidServiceNameTenantPendingTaskQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>> = ({ signal }) => getLicenseOfficePrepaidServiceNameTenantPendingTask(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficePrepaidServiceNameTenantPendingTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>>
export type GetLicenseOfficePrepaidServiceNameTenantPendingTaskQueryError = unknown


export function useGetLicenseOfficePrepaidServiceNameTenantPendingTask<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaidServiceNameTenantPendingTask<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaidServiceNameTenantPendingTask<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List pending task
 */

export function useGetLicenseOfficePrepaidServiceNameTenantPendingTask<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficePrepaidServiceNameTenantPendingTaskQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseOfficePrepaidServiceNameTenantPendingTaskId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficePrepaidOfficeTaskNativeOVH>(
      {url: `/license/officePrepaid/${serviceName}/tenantPendingTask/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficePrepaidServiceNameTenantPendingTaskIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/license/officePrepaid/${serviceName}/tenantPendingTask/${id}`] as const;
    }

    
export const getGetLicenseOfficePrepaidServiceNameTenantPendingTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficePrepaidServiceNameTenantPendingTaskIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>> = ({ signal }) => getLicenseOfficePrepaidServiceNameTenantPendingTaskId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficePrepaidServiceNameTenantPendingTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>>
export type GetLicenseOfficePrepaidServiceNameTenantPendingTaskIdQueryError = unknown


export function useGetLicenseOfficePrepaidServiceNameTenantPendingTaskId<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaidServiceNameTenantPendingTaskId<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaidServiceNameTenantPendingTaskId<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseOfficePrepaidServiceNameTenantPendingTaskId<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantPendingTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficePrepaidServiceNameTenantPendingTaskIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get day-to-day statistics of license usage and availability
 */
export const getLicenseOfficePrepaidServiceNameTenantUsageStatistics = (
    serviceName: string,
    params?: GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficePrepaidOfficeCurrentStatisticsNativeOVH[]>(
      {url: `/license/officePrepaid/${serviceName}/tenantUsageStatistics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseOfficePrepaidServiceNameTenantUsageStatisticsQueryKey = (serviceName: string,
    params?: GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsParams,) => {
    return [`/license/officePrepaid/${serviceName}/tenantUsageStatistics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseOfficePrepaidServiceNameTenantUsageStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>, TError = unknown>(serviceName: string,
    params?: GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficePrepaidServiceNameTenantUsageStatisticsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>> = ({ signal }) => getLicenseOfficePrepaidServiceNameTenantUsageStatistics(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>>
export type GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsQueryError = unknown


export function useGetLicenseOfficePrepaidServiceNameTenantUsageStatistics<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaidServiceNameTenantUsageStatistics<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficePrepaidServiceNameTenantUsageStatistics<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get day-to-day statistics of license usage and availability
 */

export function useGetLicenseOfficePrepaidServiceNameTenantUsageStatistics<TData = Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficePrepaidServiceNameTenantUsageStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficePrepaidServiceNameTenantUsageStatisticsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postLicenseOfficePrepaidServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/officePrepaid/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicenseOfficePrepaidServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicenseOfficePrepaidServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseOfficePrepaidServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameTerminate>>>
    
    export type PostLicenseOfficePrepaidServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostLicenseOfficePrepaidServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicenseOfficePrepaidServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Unconfigure the office user
 */
export const postLicenseOfficePrepaidServiceNameUnconfigure = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficePrepaidOfficeTaskNativeOVH>(
      {url: `/license/officePrepaid/${serviceName}/unconfigure`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicenseOfficePrepaidServiceNameUnconfigureMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameUnconfigure>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameUnconfigure>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameUnconfigure>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicenseOfficePrepaidServiceNameUnconfigure(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseOfficePrepaidServiceNameUnconfigureMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameUnconfigure>>>
    
    export type PostLicenseOfficePrepaidServiceNameUnconfigureMutationError = unknown

    /**
 * @summary Unconfigure the office user
 */
export const usePostLicenseOfficePrepaidServiceNameUnconfigure = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameUnconfigure>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseOfficePrepaidServiceNameUnconfigure>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicenseOfficePrepaidServiceNameUnconfigureMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsParams = {
/**
 * Period's start point.
 */
from?: string;
/**
 * Period's end point.
 */
to?: string;
};

export type GetLicenseOfficePrepaidParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

/**
 * All reasons you can provide for a service termination
 */
export type ServiceTerminationReasonEnumOVH = typeof ServiceTerminationReasonEnumOVH[keyof typeof ServiceTerminationReasonEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTerminationReasonEnumOVH = {
  FEATURES_DONT_SUIT_ME: 'FEATURES_DONT_SUIT_ME',
  LACK_OF_PERFORMANCES: 'LACK_OF_PERFORMANCES',
  MIGRATED_TO_ANOTHER_OVH_PRODUCT: 'MIGRATED_TO_ANOTHER_OVH_PRODUCT',
  MIGRATED_TO_COMPETITOR: 'MIGRATED_TO_COMPETITOR',
  NOT_ENOUGH_RECOGNITION: 'NOT_ENOUGH_RECOGNITION',
  NOT_NEEDED_ANYMORE: 'NOT_NEEDED_ANYMORE',
  NOT_RELIABLE: 'NOT_RELIABLE',
  NO_ANSWER: 'NO_ANSWER',
  OTHER: 'OTHER',
  PRODUCT_DIMENSION_DONT_SUIT_ME: 'PRODUCT_DIMENSION_DONT_SUIT_ME',
  PRODUCT_TOOLS_DONT_SUIT_ME: 'PRODUCT_TOOLS_DONT_SUIT_ME',
  TOO_EXPENSIVE: 'TOO_EXPENSIVE',
  TOO_HARD_TO_USE: 'TOO_HARD_TO_USE',
  UNSATIFIED_BY_CUSTOMER_SUPPORT: 'UNSATIFIED_BY_CUSTOMER_SUPPORT',
} as const;

/**
 * All future uses you can provide for a service termination
 */
export type ServiceTerminationFutureUseEnumOVH = typeof ServiceTerminationFutureUseEnumOVH[keyof typeof ServiceTerminationFutureUseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTerminationFutureUseEnumOVH = {
  NOT_REPLACING_SERVICE: 'NOT_REPLACING_SERVICE',
  OTHER: 'OTHER',
  SUBSCRIBE_AN_OTHER_SERVICE: 'SUBSCRIBE_AN_OTHER_SERVICE',
  SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR: 'SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR',
  SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR: 'SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR',
} as const;

export type PostLicenseOfficePrepaidServiceNameConfirmTerminationBody = {
  /** Commentary about your termination request */
  commentary?: string;
  /** What next after your termination request */
  futureUse?: ServiceTerminationFutureUseEnumOVH;
  /** Reason of your termination request */
  reason?: ServiceTerminationReasonEnumOVH;
  /** The termination token sent by email to the admin contact */
  token: string;
};

export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  automaticV2024: 'automaticV2024',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * Office tenant type
 */
export type LicenseOfficePrepaidUserStateEnumOVH = typeof LicenseOfficePrepaidUserStateEnumOVH[keyof typeof LicenseOfficePrepaidUserStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LicenseOfficePrepaidUserStateEnumOVH = {
  creating: 'creating',
  deleting: 'deleting',
  ok: 'ok',
  suspended: 'suspended',
  unspending: 'unspending',
} as const;

/**
 * Excahnge task status
 */
export type LicenseOfficePrepaidTaskStatusEnumOVH = typeof LicenseOfficePrepaidTaskStatusEnumOVH[keyof typeof LicenseOfficePrepaidTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LicenseOfficePrepaidTaskStatusEnumOVH = {
  cancelled: 'cancelled',
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * License usage statistics line.
 */
export interface LicenseOfficePrepaidStatisticsLineNativeOVH {
  /** Count of activated licenses at the end of the day. */
  readonly endOfDayCount?: number;
  /** Type of the Office license. */
  readonly licenceType?: LicenseOfficePrepaidLicenseEnumOVH;
  /** Maximum count of simultaneous activated licences. */
  readonly peakCount?: number;
}

/**
 * Office tenant type
 */
export type LicenseOfficePrepaidServiceTypeEnumOVH = typeof LicenseOfficePrepaidServiceTypeEnumOVH[keyof typeof LicenseOfficePrepaidServiceTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LicenseOfficePrepaidServiceTypeEnumOVH = {
  payAsYouGo: 'payAsYouGo',
  prepaid: 'prepaid',
} as const;

/**
 * Office tenant state
 */
export type LicenseOfficePrepaidServiceStateEnumOVH = typeof LicenseOfficePrepaidServiceStateEnumOVH[keyof typeof LicenseOfficePrepaidServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LicenseOfficePrepaidServiceStateEnumOVH = {
  creating: 'creating',
  inMaintenance: 'inMaintenance',
  ok: 'ok',
  reopening: 'reopening',
  suspended: 'suspended',
  suspending: 'suspending',
} as const;

/**
 * Office tenant
 */
export interface LicenseOfficePrepaidPutOfficeUserNativeOVH {
  /** Email used to activate Microsoft Office */
  activationEmail?: string;
  /** User's first name */
  firstName?: string;
  /** User's last name */
  lastName?: string;
  /** ISO 3166-1 alpha-2 country code where the user is using Office365 services */
  usageLocation?: LicenseOfficePrepaidCountryEnumOVH;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type LicenseOfficePrepaidOfficeUserWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Office user
 */
export interface LicenseOfficePrepaidOfficeUserWithIAMOVH {
  /** Email used to activate Microsoft Office */
  activationEmail?: string;
  /** User's first name */
  firstName?: string;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: LicenseOfficePrepaidOfficeUserWithIAMOVHIam;
  /** Specify if the user is actually a user slot (configureme) or a real user */
  readonly isVirtual?: boolean;
  /** User's last name */
  lastName?: string;
  /** Licenses attributed to the user */
  readonly licences?: readonly LicenseOfficeLicenceEnumOVH[];
  /** User service name, used in invoices */
  readonly serviceName?: string;
  /** User state */
  readonly status?: LicenseOfficeUserStateEnumOVH;
  /** Pending task id */
  readonly taskPendingId?: number;
  /** User's tenant service name, used in invoices */
  readonly tenantServiceName?: string;
  /** ISO 3166-1 alpha-2 country code where the user is using Office365 services */
  usageLocation?: CoreTypesCountryEnumOVH;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type LicenseOfficePrepaidOfficeUserNativeWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Office tenant
 */
export interface LicenseOfficePrepaidOfficeUserNativeOVH {
  /** Email used to activate Microsoft Office */
  readonly activationEmail?: string;
  /** User's first name */
  readonly firstName?: string;
  /** Specify if the user is actually a user slot (configureme) or a real user */
  readonly isVirtual?: boolean;
  /** User's last name */
  readonly lastName?: string;
  /** Licenses attributed to the user */
  readonly licences?: readonly LicenseOfficePrepaidLicenseEnumOVH[];
  /** User service name, used in invoices */
  readonly serviceName?: string;
  /** User state */
  readonly status?: LicenseOfficePrepaidUserStateEnumOVH;
  /** Pending task id */
  readonly taskPendingId?: number;
  /** User's tenant service name, used in invoices */
  readonly tenantServiceName?: string;
  /** ISO 3166-1 alpha-2 country code where the user is using Office365 services */
  readonly usageLocation?: LicenseOfficePrepaidCountryEnumOVH;
}

/**
 * Office user
 */
export interface LicenseOfficePrepaidOfficeUserOVH {
  /** Email used to activate Microsoft Office */
  activationEmail?: string;
  /** User's first name */
  firstName?: string;
  /** Specify if the user is actually a user slot (configureme) or a real user */
  readonly isVirtual?: boolean;
  /** User's last name */
  lastName?: string;
  /** Licenses attributed to the user */
  readonly licences?: readonly LicenseOfficeLicenceEnumOVH[];
  /** User service name, used in invoices */
  readonly serviceName?: string;
  /** User state */
  readonly status?: LicenseOfficeUserStateEnumOVH;
  /** Pending task id */
  readonly taskPendingId?: number;
  /** User's tenant service name, used in invoices */
  readonly tenantServiceName?: string;
  /** ISO 3166-1 alpha-2 country code where the user is using Office365 services */
  usageLocation?: CoreTypesCountryEnumOVH;
}

/**
 * Office tenant
 */
export interface LicenseOfficePrepaidOfficeTenantPutParentTenantOVH {
  /** Parent tenant display name */
  displayName?: string;
  /** Parent tenant name */
  readonly serviceName?: string;
}

/**
 * Office change password
 */
export interface LicenseOfficePrepaidOfficeTenantPostChangePasswordOVH {
  /**
   * Email to send the new password to. Default is nicAdmin's email
   * @nullable
   */
  notifyEmail?: string | null;
  /**
   * New password or empty to receive a generated password by email
   * @nullable
   */
  password?: string | null;
  /** Specify if the new password should be send via email or not */
  shouldSendMail: boolean;
}

/**
 * Office tenant
 */
export interface LicenseOfficePrepaidOfficeTenantNativeOVH {
  /** Contact's address line */
  readonly address?: string;
  /** Contact's city */
  readonly city?: string;
  /** Creation date */
  readonly creationDate?: string;
  /** Tenant's display name */
  readonly displayName?: string;
  /** Contact's first name */
  readonly firstName?: string;
  /** Contact's last name */
  readonly lastName?: string;
  /** Primary phone number */
  readonly phone?: PhoneNumberOVH;
  /** Tenant's service name */
  readonly serviceName?: string;
  /** Tenant's service type */
  readonly serviceType?: LicenseOfficePrepaidServiceTypeEnumOVH;
  /** Tenant's status */
  readonly status?: LicenseOfficePrepaidServiceStateEnumOVH;
  /** Contact's zip code */
  readonly zipCode?: string;
}

/**
 * Office tenant
 */
export interface LicenseOfficePrepaidOfficeTaskNativeOVH {
  /**
   * Completion date
   * @nullable
   */
  readonly finishDate?: string | null;
  /** Function name */
  readonly function?: string;
  /** Task's unique identifier */
  readonly id?: number;
  /** Task status */
  readonly status?: LicenseOfficePrepaidTaskStatusEnumOVH;
  /** Creation date */
  readonly todoDate?: string;
}

/**
 * Office Current Statisitics
 */
export interface LicenseOfficePrepaidOfficeCurrentStatisticsNativeOVH {
  /** Date of the statistics */
  readonly date?: string;
  /** List of lines associated to this statistics entity. */
  readonly lines?: readonly LicenseOfficePrepaidStatisticsLineNativeOVH[];
}

/**
 * Office tenant type
 */
export type LicenseOfficePrepaidLicenseEnumOVH = typeof LicenseOfficePrepaidLicenseEnumOVH[keyof typeof LicenseOfficePrepaidLicenseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LicenseOfficePrepaidLicenseEnumOVH = {
  officeBusiness: 'officeBusiness',
  officeProPlus: 'officeProPlus',
} as const;

/**
 * ISO country codes
 */
export type LicenseOfficePrepaidCountryEnumOVH = typeof LicenseOfficePrepaidCountryEnumOVH[keyof typeof LicenseOfficePrepaidCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LicenseOfficePrepaidCountryEnumOVH = {
  ac: 'ac',
  ad: 'ad',
  ae: 'ae',
  af: 'af',
  ag: 'ag',
  ai: 'ai',
  al: 'al',
  am: 'am',
  an: 'an',
  ao: 'ao',
  aq: 'aq',
  ar: 'ar',
  as: 'as',
  at: 'at',
  au: 'au',
  aw: 'aw',
  ax: 'ax',
  az: 'az',
  ba: 'ba',
  bb: 'bb',
  bd: 'bd',
  be: 'be',
  bf: 'bf',
  bg: 'bg',
  bh: 'bh',
  bi: 'bi',
  bj: 'bj',
  bl: 'bl',
  bm: 'bm',
  bn: 'bn',
  bo: 'bo',
  bq: 'bq',
  br: 'br',
  bs: 'bs',
  bt: 'bt',
  bv: 'bv',
  bw: 'bw',
  by: 'by',
  bz: 'bz',
  ca: 'ca',
  cc: 'cc',
  cd: 'cd',
  cf: 'cf',
  cg: 'cg',
  ch: 'ch',
  ci: 'ci',
  ck: 'ck',
  cl: 'cl',
  cm: 'cm',
  cn: 'cn',
  co: 'co',
  cr: 'cr',
  cs: 'cs',
  cu: 'cu',
  cv: 'cv',
  cw: 'cw',
  cx: 'cx',
  cy: 'cy',
  cz: 'cz',
  de: 'de',
  dj: 'dj',
  dk: 'dk',
  dm: 'dm',
  do: 'do',
  dz: 'dz',
  ec: 'ec',
  ee: 'ee',
  eg: 'eg',
  eh: 'eh',
  er: 'er',
  es: 'es',
  et: 'et',
  fc: 'fc',
  fd: 'fd',
  fi: 'fi',
  fj: 'fj',
  fk: 'fk',
  fm: 'fm',
  fo: 'fo',
  fr: 'fr',
  fx: 'fx',
  ga: 'ga',
  gb: 'gb',
  gd: 'gd',
  ge: 'ge',
  gf: 'gf',
  gg: 'gg',
  gh: 'gh',
  gi: 'gi',
  gl: 'gl',
  gm: 'gm',
  gn: 'gn',
  gp: 'gp',
  gq: 'gq',
  gr: 'gr',
  gs: 'gs',
  gt: 'gt',
  gu: 'gu',
  gw: 'gw',
  gy: 'gy',
  hk: 'hk',
  hm: 'hm',
  hn: 'hn',
  hr: 'hr',
  ht: 'ht',
  hu: 'hu',
  id: 'id',
  ie: 'ie',
  il: 'il',
  im: 'im',
  in: 'in',
  io: 'io',
  iq: 'iq',
  ir: 'ir',
  is: 'is',
  it: 'it',
  je: 'je',
  jm: 'jm',
  jo: 'jo',
  jp: 'jp',
  ke: 'ke',
  kg: 'kg',
  kh: 'kh',
  ki: 'ki',
  km: 'km',
  kn: 'kn',
  kp: 'kp',
  kr: 'kr',
  kw: 'kw',
  ky: 'ky',
  kz: 'kz',
  la: 'la',
  lb: 'lb',
  lc: 'lc',
  li: 'li',
  lk: 'lk',
  lr: 'lr',
  ls: 'ls',
  lt: 'lt',
  lu: 'lu',
  lv: 'lv',
  ly: 'ly',
  ma: 'ma',
  mc: 'mc',
  md: 'md',
  me: 'me',
  mf: 'mf',
  mg: 'mg',
  mh: 'mh',
  mk: 'mk',
  ml: 'ml',
  mm: 'mm',
  mn: 'mn',
  mo: 'mo',
  mp: 'mp',
  mq: 'mq',
  mr: 'mr',
  ms: 'ms',
  mt: 'mt',
  mu: 'mu',
  mv: 'mv',
  mw: 'mw',
  mx: 'mx',
  my: 'my',
  mz: 'mz',
  na: 'na',
  nc: 'nc',
  ne: 'ne',
  nf: 'nf',
  ng: 'ng',
  ni: 'ni',
  nl: 'nl',
  no: 'no',
  np: 'np',
  nr: 'nr',
  nu: 'nu',
  nz: 'nz',
  om: 'om',
  pa: 'pa',
  pe: 'pe',
  pf: 'pf',
  pg: 'pg',
  ph: 'ph',
  pk: 'pk',
  pl: 'pl',
  pm: 'pm',
  pn: 'pn',
  pr: 'pr',
  ps: 'ps',
  pt: 'pt',
  pw: 'pw',
  py: 'py',
  qa: 'qa',
  qc: 'qc',
  re: 're',
  ro: 'ro',
  rs: 'rs',
  ru: 'ru',
  rw: 'rw',
  sa: 'sa',
  sb: 'sb',
  sc: 'sc',
  sd: 'sd',
  se: 'se',
  sg: 'sg',
  sh: 'sh',
  si: 'si',
  sj: 'sj',
  sk: 'sk',
  sl: 'sl',
  sm: 'sm',
  sn: 'sn',
  so: 'so',
  sr: 'sr',
  ss: 'ss',
  st: 'st',
  sv: 'sv',
  sx: 'sx',
  sy: 'sy',
  sz: 'sz',
  tc: 'tc',
  td: 'td',
  tf: 'tf',
  tg: 'tg',
  th: 'th',
  tj: 'tj',
  tk: 'tk',
  tl: 'tl',
  tm: 'tm',
  tn: 'tn',
  to: 'to',
  tp: 'tp',
  tr: 'tr',
  tt: 'tt',
  tv: 'tv',
  tw: 'tw',
  tz: 'tz',
  ua: 'ua',
  ug: 'ug',
  uk: 'uk',
  um: 'um',
  us: 'us',
  uy: 'uy',
  uz: 'uz',
  va: 'va',
  vc: 'vc',
  ve: 've',
  vg: 'vg',
  vi: 'vi',
  vn: 'vn',
  vu: 'vu',
  we: 'we',
  wf: 'wf',
  ws: 'ws',
  ye: 'ye',
  yt: 'yt',
  yu: 'yu',
  za: 'za',
  zm: 'zm',
  zw: 'zw',
} as const;

/**
 * Office tenant
 */
export interface LicenseOfficePrepaidOfficeUserNativeWithIAMOVH {
  /** Email used to activate Microsoft Office */
  readonly activationEmail?: string;
  /** User's first name */
  readonly firstName?: string;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: LicenseOfficePrepaidOfficeUserNativeWithIAMOVHIam;
  /** Specify if the user is actually a user slot (configureme) or a real user */
  readonly isVirtual?: boolean;
  /** User's last name */
  readonly lastName?: string;
  /** Licenses attributed to the user */
  readonly licences?: readonly LicenseOfficePrepaidLicenseEnumOVH[];
  /** User service name, used in invoices */
  readonly serviceName?: string;
  /** User state */
  readonly status?: LicenseOfficePrepaidUserStateEnumOVH;
  /** Pending task id */
  readonly taskPendingId?: number;
  /** User's tenant service name, used in invoices */
  readonly tenantServiceName?: string;
  /** ISO 3166-1 alpha-2 country code where the user is using Office365 services */
  readonly usageLocation?: LicenseOfficePrepaidCountryEnumOVH;
}

/**
 * Office user  state
 */
export type LicenseOfficeUserStateEnumOVH = typeof LicenseOfficeUserStateEnumOVH[keyof typeof LicenseOfficeUserStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LicenseOfficeUserStateEnumOVH = {
  creating: 'creating',
  deleting: 'deleting',
  ok: 'ok',
} as const;

/**
 * Exchange task status
 */
export type LicenseOfficeTaskStatusEnumOVH = typeof LicenseOfficeTaskStatusEnumOVH[keyof typeof LicenseOfficeTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LicenseOfficeTaskStatusEnumOVH = {
  cancelled: 'cancelled',
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * License usage statistics.
 */
export interface LicenseOfficeStatisticsOVH {
  /** Date of the statistics. */
  date?: string;
  /** List of lines associated to this statistics entity. */
  lines?: LicenseOfficeStatisticsLineOVH[];
}

/**
 * Type of service
 */
export type LicenseOfficeServiceTypeEnumOVH = typeof LicenseOfficeServiceTypeEnumOVH[keyof typeof LicenseOfficeServiceTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LicenseOfficeServiceTypeEnumOVH = {
  payAsYouGo: 'payAsYouGo',
  prepaid: 'prepaid',
} as const;

/**
 * Office tenant state
 */
export type LicenseOfficeServiceStateEnumOVH = typeof LicenseOfficeServiceStateEnumOVH[keyof typeof LicenseOfficeServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LicenseOfficeServiceStateEnumOVH = {
  creating: 'creating',
  inMaintenance: 'inMaintenance',
  ok: 'ok',
  suspended: 'suspended',
} as const;

/**
 * Office tenant
 */
export interface LicenseOfficeOfficeTenantOVH {
  /** Contact's address line */
  address?: string;
  /** Contact's city */
  city?: string;
  /** Creation date */
  readonly creationDate?: string;
  /** Tenant's display name */
  displayName?: string;
  /** Contact's fisrt name */
  firstName?: string;
  /** Contact's fisrt name */
  lastName?: string;
  /** Primary phone number */
  phone?: PhoneNumberOVH;
  /** Internal service name */
  readonly serviceName?: string;
  /** Tenant's service type */
  readonly serviceType?: LicenseOfficeServiceTypeEnumOVH;
  readonly status?: LicenseOfficeServiceStateEnumOVH;
  /** Contact's zip code */
  zipCode?: string;
}

/**
 * Office task
 */
export interface LicenseOfficeOfficeTaskOVH {
  /**
   * Completion date
   * @nullable
   */
  readonly finishDate?: string | null;
  /** Function name */
  readonly function?: string;
  /** Task's unique identifier */
  readonly id?: number;
  /** Task state */
  readonly status?: LicenseOfficeTaskStatusEnumOVH;
  /** Creation date */
  readonly todoDate?: string;
}

/**
 * Office Licence
 */
export type LicenseOfficeLicenceEnumOVH = typeof LicenseOfficeLicenceEnumOVH[keyof typeof LicenseOfficeLicenceEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LicenseOfficeLicenceEnumOVH = {
  officeBusiness: 'officeBusiness',
  officeProPlus: 'officeProPlus',
} as const;

/**
 * License usage statistics line.
 */
export interface LicenseOfficeStatisticsLineOVH {
  /** Count of activated licenses at the end of the day. */
  endOfDayCount?: number;
  /** Type of the Office license. */
  licenceType?: LicenseOfficeLicenceEnumOVH;
  /** Maximum count of simultaneous activated licences. */
  peakCount?: number;
}

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;

/**
 * ISO country codes
 */
export type CoreTypesCountryEnumOVH = typeof CoreTypesCountryEnumOVH[keyof typeof CoreTypesCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoreTypesCountryEnumOVH = {
  ac: 'ac',
  ad: 'ad',
  ae: 'ae',
  af: 'af',
  ag: 'ag',
  ai: 'ai',
  al: 'al',
  am: 'am',
  an: 'an',
  ao: 'ao',
  aq: 'aq',
  ar: 'ar',
  as: 'as',
  at: 'at',
  au: 'au',
  aw: 'aw',
  ax: 'ax',
  az: 'az',
  ba: 'ba',
  bb: 'bb',
  bd: 'bd',
  be: 'be',
  bf: 'bf',
  bg: 'bg',
  bh: 'bh',
  bi: 'bi',
  bj: 'bj',
  bl: 'bl',
  bm: 'bm',
  bn: 'bn',
  bo: 'bo',
  bq: 'bq',
  br: 'br',
  bs: 'bs',
  bt: 'bt',
  bv: 'bv',
  bw: 'bw',
  by: 'by',
  bz: 'bz',
  ca: 'ca',
  cc: 'cc',
  cd: 'cd',
  cf: 'cf',
  cg: 'cg',
  ch: 'ch',
  ci: 'ci',
  ck: 'ck',
  cl: 'cl',
  cm: 'cm',
  cn: 'cn',
  co: 'co',
  cr: 'cr',
  cs: 'cs',
  cu: 'cu',
  cv: 'cv',
  cw: 'cw',
  cx: 'cx',
  cy: 'cy',
  cz: 'cz',
  de: 'de',
  dj: 'dj',
  dk: 'dk',
  dm: 'dm',
  do: 'do',
  dz: 'dz',
  ec: 'ec',
  ee: 'ee',
  eg: 'eg',
  eh: 'eh',
  er: 'er',
  es: 'es',
  et: 'et',
  fc: 'fc',
  fd: 'fd',
  fi: 'fi',
  fj: 'fj',
  fk: 'fk',
  fm: 'fm',
  fo: 'fo',
  fr: 'fr',
  fx: 'fx',
  ga: 'ga',
  gb: 'gb',
  gd: 'gd',
  ge: 'ge',
  gf: 'gf',
  gg: 'gg',
  gh: 'gh',
  gi: 'gi',
  gl: 'gl',
  gm: 'gm',
  gn: 'gn',
  gp: 'gp',
  gq: 'gq',
  gr: 'gr',
  gs: 'gs',
  gt: 'gt',
  gu: 'gu',
  gw: 'gw',
  gy: 'gy',
  hk: 'hk',
  hm: 'hm',
  hn: 'hn',
  hr: 'hr',
  ht: 'ht',
  hu: 'hu',
  id: 'id',
  ie: 'ie',
  il: 'il',
  im: 'im',
  in: 'in',
  io: 'io',
  iq: 'iq',
  ir: 'ir',
  is: 'is',
  it: 'it',
  je: 'je',
  jm: 'jm',
  jo: 'jo',
  jp: 'jp',
  ke: 'ke',
  kg: 'kg',
  kh: 'kh',
  ki: 'ki',
  km: 'km',
  kn: 'kn',
  kp: 'kp',
  kr: 'kr',
  kw: 'kw',
  ky: 'ky',
  kz: 'kz',
  la: 'la',
  lb: 'lb',
  lc: 'lc',
  li: 'li',
  lk: 'lk',
  lr: 'lr',
  ls: 'ls',
  lt: 'lt',
  lu: 'lu',
  lv: 'lv',
  ly: 'ly',
  ma: 'ma',
  mc: 'mc',
  md: 'md',
  me: 'me',
  mf: 'mf',
  mg: 'mg',
  mh: 'mh',
  mk: 'mk',
  ml: 'ml',
  mm: 'mm',
  mn: 'mn',
  mo: 'mo',
  mp: 'mp',
  mq: 'mq',
  mr: 'mr',
  ms: 'ms',
  mt: 'mt',
  mu: 'mu',
  mv: 'mv',
  mw: 'mw',
  mx: 'mx',
  my: 'my',
  mz: 'mz',
  na: 'na',
  nc: 'nc',
  ne: 'ne',
  nf: 'nf',
  ng: 'ng',
  ni: 'ni',
  nl: 'nl',
  no: 'no',
  np: 'np',
  nr: 'nr',
  nu: 'nu',
  nz: 'nz',
  om: 'om',
  pa: 'pa',
  pe: 'pe',
  pf: 'pf',
  pg: 'pg',
  ph: 'ph',
  pk: 'pk',
  pl: 'pl',
  pm: 'pm',
  pn: 'pn',
  pr: 'pr',
  ps: 'ps',
  pt: 'pt',
  pw: 'pw',
  py: 'py',
  qa: 'qa',
  qc: 'qc',
  re: 're',
  ro: 'ro',
  rs: 'rs',
  ru: 'ru',
  rw: 'rw',
  sa: 'sa',
  sb: 'sb',
  sc: 'sc',
  sd: 'sd',
  se: 'se',
  sg: 'sg',
  sh: 'sh',
  si: 'si',
  sj: 'sj',
  sk: 'sk',
  sl: 'sl',
  sm: 'sm',
  sn: 'sn',
  so: 'so',
  sr: 'sr',
  ss: 'ss',
  st: 'st',
  sv: 'sv',
  sx: 'sx',
  sy: 'sy',
  sz: 'sz',
  tc: 'tc',
  td: 'td',
  tf: 'tf',
  tg: 'tg',
  th: 'th',
  tj: 'tj',
  tk: 'tk',
  tl: 'tl',
  tm: 'tm',
  tn: 'tn',
  to: 'to',
  tp: 'tp',
  tr: 'tr',
  tt: 'tt',
  tv: 'tv',
  tw: 'tw',
  tz: 'tz',
  ua: 'ua',
  ug: 'ug',
  uk: 'uk',
  um: 'um',
  us: 'us',
  uy: 'uy',
  uz: 'uz',
  va: 'va',
  vc: 'vc',
  ve: 've',
  vg: 'vg',
  vi: 'vi',
  vn: 'vn',
  vu: 'vu',
  we: 'we',
  wf: 'wf',
  ws: 'ws',
  ye: 'ye',
  yt: 'yt',
  yu: 'yu',
  za: 'za',
  zm: 'zm',
  zw: 'zw',
} as const;


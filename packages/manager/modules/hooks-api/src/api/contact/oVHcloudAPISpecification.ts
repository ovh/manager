/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ContactFormCharacteristicOVH,
  PostContactFormSendBody
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get form characteristics
 */
export const getContactForm = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ContactFormCharacteristicOVH[]>(
      {url: `/contact/form`, method: 'GET', signal
    },
      options);
    }
  

export const getGetContactFormQueryKey = () => {
    return [`/contact/form`] as const;
    }

    
export const getGetContactFormQueryOptions = <TData = Awaited<ReturnType<typeof getContactForm>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactForm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContactFormQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContactForm>>> = ({ signal }) => getContactForm(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContactForm>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetContactFormQueryResult = NonNullable<Awaited<ReturnType<typeof getContactForm>>>
export type GetContactFormQueryError = unknown


export function useGetContactForm<TData = Awaited<ReturnType<typeof getContactForm>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactForm>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContactForm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetContactForm<TData = Awaited<ReturnType<typeof getContactForm>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactForm>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContactForm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetContactForm<TData = Awaited<ReturnType<typeof getContactForm>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactForm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get form characteristics
 */

export function useGetContactForm<TData = Awaited<ReturnType<typeof getContactForm>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactForm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetContactFormQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Send form following characteristics of /contact/form
 */
export const postContactFormSend = (
    postContactFormSendBody: PostContactFormSendBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/contact/form/send`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postContactFormSendBody, signal
    },
      options);
    }
  


export const getPostContactFormSendMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postContactFormSend>>, TError,{data: PostContactFormSendBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postContactFormSend>>, TError,{data: PostContactFormSendBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postContactFormSend>>, {data: PostContactFormSendBody}> = (props) => {
          const {data} = props ?? {};

          return  postContactFormSend(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostContactFormSendMutationResult = NonNullable<Awaited<ReturnType<typeof postContactFormSend>>>
    export type PostContactFormSendMutationBody = PostContactFormSendBody
    export type PostContactFormSendMutationError = unknown

    /**
 * @summary Send form following characteristics of /contact/form
 */
export const usePostContactFormSend = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postContactFormSend>>, TError,{data: PostContactFormSendBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postContactFormSend>>,
        TError,
        {data: PostContactFormSendBody},
        TContext
      > => {

      const mutationOptions = getPostContactFormSendMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

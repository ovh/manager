/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DbaasLogsLogKindOVH,
  DbaasLogsLogSubscriptionCreationOVH,
  DbaasLogsLogSubscriptionOVH,
  DbaasLogsLogSubscriptionResponseOVH,
  DbaasLogsLogUrlCreationOVH,
  DbaasLogsTemporaryLogsLinkOVH,
  EmailExchangeAccountOVH,
  EmailExchangeDailyLicenseOVH,
  EmailExchangeDisclaimerAttributeEnumOVH,
  EmailExchangeDisclaimerOVH,
  EmailExchangeDkimOVH,
  EmailExchangeDomainOVH,
  EmailExchangeExchangeAccountAliasOVH,
  EmailExchangeExchangeAccountArchiveOVH,
  EmailExchangeExchangeAccountDiagnosisOVH,
  EmailExchangeExchangeAccountFullAccessOVH,
  EmailExchangeExchangeAccountImpersonationOVH,
  EmailExchangeExchangeAccountProtocolOVH,
  EmailExchangeExchangeAccountSendAsOVH,
  EmailExchangeExchangeAccountSendOnBehalfToOVH,
  EmailExchangeExchangeCustomIsolationOVH,
  EmailExchangeExchangeDistributionGroupManagerOVH,
  EmailExchangeExchangeDistributionGroupMemberOVH,
  EmailExchangeExchangeDistributionGroupSendAsOVH,
  EmailExchangeExchangeDistributionGroupSendOnBehalfToOVH,
  EmailExchangeExchangeExternalContactOVH,
  EmailExchangeExchangeMailingListAliasOVH,
  EmailExchangeExchangePublicFolderPermissionOVH,
  EmailExchangeExchangeResourceAccountDelegateOVH,
  EmailExchangeExchangeServiceActiveSyncNotificationOVH,
  EmailExchangeExchangeServiceAuthenticationPolicyOVH,
  EmailExchangeExchangeServiceAuthorizedIpOVH,
  EmailExchangeExchangeServiceDeviceOVH,
  EmailExchangeExchangeServiceOVH,
  EmailExchangeExchangeServiceProtocolOVH,
  EmailExchangeExchangeServiceWithIAMOVH,
  EmailExchangeExchangeSharedAccountAliasOVH,
  EmailExchangeExchangeSharedAccountFullAccessOVH,
  EmailExchangeExchangeSharedAccountSendAsOVH,
  EmailExchangeExchangeSharedAccountSendOnBehalfToOVH,
  EmailExchangeExportOVH,
  EmailExchangeExportUrlOVH,
  EmailExchangeMailingListOVH,
  EmailExchangeOutlookUrlOVH,
  EmailExchangeOutlookVersionsOVH,
  EmailExchangePasswordPolicyOVH,
  EmailExchangePublicFolderOVH,
  EmailExchangePublicFolderQuotaOVH,
  EmailExchangeResourceAccountOVH,
  EmailExchangeSendConnectorOVH,
  EmailExchangeServerOVH,
  EmailExchangeSharedAccountOVH,
  EmailExchangeSharedAccountQuotaOVH,
  EmailExchangeTaskOVH,
  GetEmailExchangeOrganizationNameServiceExchangeServiceAccountParams,
  GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyParams,
  GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationParams,
  GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceParams,
  GetEmailExchangeOrganizationNameServiceExchangeServiceDomainParams,
  GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactParams,
  GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseParams,
  GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionParams,
  GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListParams,
  GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityParams,
  GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderParams,
  GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountParams,
  GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountParams,
  GetEmailExchangeOrganizationNameServiceParams,
  Ipv4BlockOVH,
  PostEmailExchangeOrganizationNameServiceExchangeServiceAccountBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceDomainBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationBody,
  PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderBody,
  PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsBody,
  PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToBody,
  PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getEmailExchange = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeQueryKey = () => {
    return [`/email/exchange`] as const;
    }

    
export const getGetEmailExchangeQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchange>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchange>>> = ({ signal }) => getEmailExchange(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchange>>>
export type GetEmailExchangeQueryError = unknown


export function useGetEmailExchange<TData = Awaited<ReturnType<typeof getEmailExchange>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchange<TData = Awaited<ReturnType<typeof getEmailExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchange<TData = Awaited<ReturnType<typeof getEmailExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetEmailExchange<TData = Awaited<ReturnType<typeof getEmailExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available services
 */
export const getEmailExchangeOrganizationNameService = (
    organizationName: string,
    params?: GetEmailExchangeOrganizationNameServiceParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceQueryKey = (organizationName: string,
    params?: GetEmailExchangeOrganizationNameServiceParams,) => {
    return [`/email/exchange/${organizationName}/service`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>, TError = unknown>(organizationName: string,
    params?: GetEmailExchangeOrganizationNameServiceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceQueryKey(organizationName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>> = ({ signal }) => getEmailExchangeOrganizationNameService(organizationName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>>
export type GetEmailExchangeOrganizationNameServiceQueryError = unknown


export function useGetEmailExchangeOrganizationNameService<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>, TError = unknown>(
 organizationName: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameService<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>, TError = unknown>(
 organizationName: string,
    params?: GetEmailExchangeOrganizationNameServiceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameService<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>, TError = unknown>(
 organizationName: string,
    params?: GetEmailExchangeOrganizationNameServiceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetEmailExchangeOrganizationNameService<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>, TError = unknown>(
 organizationName: string,
    params?: GetEmailExchangeOrganizationNameServiceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceQueryOptions(organizationName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeService = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeServiceWithIAMOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeService(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeService<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeService<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeService<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeService<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeService = (
    organizationName: string,
    exchangeService: string,
    emailExchangeExchangeServiceOVH: NonReadonly<EmailExchangeExchangeServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeExchangeServiceOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeService>>, TError,{organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeExchangeServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeService>>, TError,{organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeExchangeServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeService>>, {organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeExchangeServiceOVH>}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeService(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeService>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceMutationBody = NonReadonly<EmailExchangeExchangeServiceOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeService = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeService>>, TError,{organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeExchangeServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeService>>,
        TError,
        {organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeExchangeServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Accounts associated to this exchange service
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccount = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceAccountParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccount(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServiceAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Accounts associated to this exchange service
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new mailbox in exchange server
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAccount = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceAccountBody: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceAccountBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAccount(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccount>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceAccountBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountMutationError = unknown

    /**
 * @summary Create new mailbox in exchange server
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccount>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing mailbox in exchange server
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress(organizationName,exchangeService,primaryEmailAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressMutationError = unknown

    /**
 * @summary Delete existing mailbox in exchange server
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeAccountOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressQueryKey(organizationName,exchangeService,primaryEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress(organizationName,exchangeService,primaryEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressQueryOptions(organizationName,exchangeService,primaryEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    emailExchangeAccountOVH: NonReadonly<EmailExchangeAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeAccountOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeAccountOVH>}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress(organizationName,exchangeService,primaryEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressMutationBody = NonReadonly<EmailExchangeAccountOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddress>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Aliases associated to this mailbox
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/alias`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/alias`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasQueryKey(organizationName,exchangeService,primaryEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias(organizationName,exchangeService,primaryEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Aliases associated to this mailbox
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasQueryOptions(organizationName,exchangeService,primaryEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new alias
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasBody: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/alias`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasBody}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias(organizationName,exchangeService,primaryEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasMutationError = unknown

    /**
 * @summary Create new alias
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAlias>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing alias
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    alias: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/alias/${alias}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;alias: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;alias: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;alias: string}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,alias} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias(organizationName,exchangeService,primaryEmailAddress,alias,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasMutationError = unknown

    /**
 * @summary Delete existing alias
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;alias: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;alias: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    alias: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeAccountAliasOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/alias/${alias}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    alias: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/alias/${alias}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasQueryKey(organizationName,exchangeService,primaryEmailAddress,alias);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias(organizationName,exchangeService,primaryEmailAddress,alias, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress && alias), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    alias: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasQueryOptions(organizationName,exchangeService,primaryEmailAddress,alias,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete existing archive mailbox
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/archive`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive(organizationName,exchangeService,primaryEmailAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationError = unknown

    /**
 * @summary Delete existing archive mailbox
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeAccountArchiveOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/archive`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/archive`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveQueryKey(organizationName,exchangeService,primaryEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive(organizationName,exchangeService,primaryEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveQueryOptions(organizationName,exchangeService,primaryEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new archive mailbox
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveBody: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/archive`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveBody}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive(organizationName,exchangeService,primaryEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationError = unknown

    /**
 * @summary Create new archive mailbox
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    emailExchangeExchangeAccountArchiveOVH: NonReadonly<EmailExchangeExchangeAccountArchiveOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/archive`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeExchangeAccountArchiveOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeExchangeAccountArchiveOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeExchangeAccountArchiveOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeExchangeAccountArchiveOVH>}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive(organizationName,exchangeService,primaryEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationBody = NonReadonly<EmailExchangeExchangeAccountArchiveOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeExchangeAccountArchiveOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchive>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeExchangeAccountArchiveOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change mailbox password
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePassword = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordBody: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePassword>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePassword>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePassword>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordBody}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePassword(organizationName,exchangeService,primaryEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePassword>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordMutationError = unknown

    /**
 * @summary Change mailbox password
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePassword>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePassword>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeAccountDiagnosisOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/diagnostics`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/diagnostics`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsQueryKey(organizationName,exchangeService,primaryEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics(organizationName,exchangeService,primaryEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsQueryOptions(organizationName,exchangeService,primaryEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new diagnosis request
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsBody: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/diagnostics`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsBody}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics(organizationName,exchangeService,primaryEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsMutationError = unknown

    /**
 * @summary Create new diagnosis request
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnostics>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove request of PST file
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/export`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport(organizationName,exchangeService,primaryEmailAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportMutationError = unknown

    /**
 * @summary Remove request of PST file
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExportOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/export`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/export`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportQueryKey(organizationName,exchangeService,primaryEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport(organizationName,exchangeService,primaryEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportQueryOptions(organizationName,exchangeService,primaryEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request PST file for the account
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/export`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport(organizationName,exchangeService,primaryEmailAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>>
    
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportMutationError = unknown

    /**
 * @summary Request PST file for the account
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExport>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExportUrlOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/exportURL`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/exportURL`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLQueryKey(organizationName,exchangeService,primaryEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL(organizationName,exchangeService,primaryEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLQueryOptions(organizationName,exchangeService,primaryEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate temporary url to PST file
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/exportURL`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL(organizationName,exchangeService,primaryEmailAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>>
    
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLMutationError = unknown

    /**
 * @summary Generate temporary url to PST file
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURL>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Full access granted users for this mailbox
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/fullAccess`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/fullAccess`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessQueryKey(organizationName,exchangeService,primaryEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess(organizationName,exchangeService,primaryEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Full access granted users for this mailbox
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessQueryOptions(organizationName,exchangeService,primaryEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow full access to a user
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessBody: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/fullAccess`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessBody}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess(organizationName,exchangeService,primaryEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessMutationError = unknown

    /**
 * @summary Allow full access to a user
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccess>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Revoke full access
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/fullAccess/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,allowedAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId(organizationName,exchangeService,primaryEmailAddress,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdMutationError = unknown

    /**
 * @summary Revoke full access
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeAccountFullAccessOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/fullAccess/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/fullAccess/${allowedAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdQueryKey(organizationName,exchangeService,primaryEmailAddress,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId(organizationName,exchangeService,primaryEmailAddress,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdQueryOptions(organizationName,exchangeService,primaryEmailAddress,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeOutlookUrlOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/outlookURL`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/outlookURL`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLQueryKey(organizationName,exchangeService,primaryEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL(organizationName,exchangeService,primaryEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLQueryOptions(organizationName,exchangeService,primaryEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate outlook url
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLBody: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/outlookURL`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLBody}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL(organizationName,exchangeService,primaryEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLMutationError = unknown

    /**
 * @summary Generate outlook url
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURL>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeAccountProtocolOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/protocol`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/protocol`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolQueryKey(organizationName,exchangeService,primaryEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol(organizationName,exchangeService,primaryEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolQueryOptions(organizationName,exchangeService,primaryEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    emailExchangeExchangeAccountProtocolOVH: NonReadonly<EmailExchangeExchangeAccountProtocolOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/protocol`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeExchangeAccountProtocolOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeExchangeAccountProtocolOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeExchangeAccountProtocolOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeExchangeAccountProtocolOVH>}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol(organizationName,exchangeService,primaryEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolMutationBody = NonReadonly<EmailExchangeExchangeAccountProtocolOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeExchangeAccountProtocolOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocol>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: NonReadonly<EmailExchangeExchangeAccountProtocolOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Send as granted users for this mailbox
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/sendAs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/sendAs`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsQueryKey(organizationName,exchangeService,primaryEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs(organizationName,exchangeService,primaryEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Send as granted users for this mailbox
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsQueryOptions(organizationName,exchangeService,primaryEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow another user to send mails from this mailbox
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsBody: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/sendAs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsBody}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs(organizationName,exchangeService,primaryEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsMutationError = unknown

    /**
 * @summary Allow another user to send mails from this mailbox
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAs>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete allowed user for sendAs
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/sendAs/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,allowedAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId(organizationName,exchangeService,primaryEmailAddress,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdMutationError = unknown

    /**
 * @summary Delete allowed user for sendAs
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeAccountSendAsOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/sendAs/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/sendAs/${allowedAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdQueryKey(organizationName,exchangeService,primaryEmailAddress,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId(organizationName,exchangeService,primaryEmailAddress,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdQueryOptions(organizationName,exchangeService,primaryEmailAddress,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary SendOnBehalfTo granted users for this mailbox
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/sendOnBehalfTo`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/sendOnBehalfTo`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToQueryKey(organizationName,exchangeService,primaryEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo(organizationName,exchangeService,primaryEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary SendOnBehalfTo granted users for this mailbox
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToQueryOptions(organizationName,exchangeService,primaryEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow another user to Send On Behalf To mails from this mailbox
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToBody: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/sendOnBehalfTo`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToBody}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo(organizationName,exchangeService,primaryEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToMutationError = unknown

    /**
 * @summary Allow another user to Send On Behalf To mails from this mailbox
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfTo>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete allowed user for SendOnBehalfTo
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/sendOnBehalfTo/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress,allowedAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId(organizationName,exchangeService,primaryEmailAddress,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdMutationError = unknown

    /**
 * @summary Delete allowed user for SendOnBehalfTo
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeAccountSendOnBehalfToOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/sendOnBehalfTo/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/sendOnBehalfTo/${allowedAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdQueryKey(organizationName,exchangeService,primaryEmailAddress,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId(organizationName,exchangeService,primaryEmailAddress,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdQueryOptions(organizationName,exchangeService,primaryEmailAddress,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Pending task for this mailbox
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/tasks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/tasks`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksQueryKey(organizationName,exchangeService,primaryEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks(organizationName,exchangeService,primaryEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Pending task for this mailbox
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksQueryOptions(organizationName,exchangeService,primaryEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/tasks/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksIdQueryKey = (organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    id: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/tasks/${id}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksIdQueryKey(organizationName,exchangeService,primaryEmailAddress,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId(organizationName,exchangeService,primaryEmailAddress,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && primaryEmailAddress && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksIdQueryOptions(organizationName,exchangeService,primaryEmailAddress,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Terminate account at expiration date
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminate = (
    organizationName: string,
    exchangeService: string,
    primaryEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/account/${primaryEmailAddress}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminate>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminate>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminate>>, {organizationName: string;exchangeService: string;primaryEmailAddress: string}> = (props) => {
          const {organizationName,exchangeService,primaryEmailAddress} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminate(organizationName,exchangeService,primaryEmailAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminate>>>
    
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminateMutationError = unknown

    /**
 * @summary Terminate account at expiration date
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminate>>, TError,{organizationName: string;exchangeService: string;primaryEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminate>>,
        TError,
        {organizationName: string;exchangeService: string;primaryEmailAddress: string},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Authentication policy for protocols
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/authenticationPolicy`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/authenticationPolicy`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Authentication policy for protocols
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId = (
    organizationName: string,
    exchangeService: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeServiceAuthenticationPolicyOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/authenticationPolicy/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyIdQueryKey = (organizationName: string,
    exchangeService: string,
    id: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/authenticationPolicy/${id}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyIdQueryKey(organizationName,exchangeService,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId(organizationName,exchangeService,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyIdQueryOptions(organizationName,exchangeService,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Authorized IPs for POP(s),IMAP(s), SMTP(s) and HTTP(s)
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4BlockOVH[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/authorizedIp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/authorizedIp`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Authorized IPs for POP(s),IMAP(s), SMTP(s) and HTTP(s)
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Authorize new IP to access the service
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpBody: PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/authorizedIp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpMutationError = unknown

    /**
 * @summary Authorize new IP to access the service
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIp>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete authorized IP
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp = (
    organizationName: string,
    exchangeService: string,
    ip: Ipv4BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/authorizedIp/${ip}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError,{organizationName: string;exchangeService: string;ip: Ipv4BlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError,{organizationName: string;exchangeService: string;ip: Ipv4BlockOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, {organizationName: string;exchangeService: string;ip: Ipv4BlockOVH}> = (props) => {
          const {organizationName,exchangeService,ip} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp(organizationName,exchangeService,ip,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpMutationError = unknown

    /**
 * @summary Delete authorized IP
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError,{organizationName: string;exchangeService: string;ip: Ipv4BlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>,
        TError,
        {organizationName: string;exchangeService: string;ip: Ipv4BlockOVH},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp = (
    organizationName: string,
    exchangeService: string,
    ip: Ipv4BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeServiceAuthorizedIpOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/authorizedIp/${ip}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpQueryKey = (organizationName: string,
    exchangeService: string,
    ip: Ipv4BlockOVH,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/authorizedIp/${ip}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    ip: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpQueryKey(organizationName,exchangeService,ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp(organizationName,exchangeService,ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    ip: Ipv4BlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    ip: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    ip: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    ip: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpQueryOptions(organizationName,exchangeService,ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp = (
    organizationName: string,
    exchangeService: string,
    ip: Ipv4BlockOVH,
    emailExchangeExchangeServiceAuthorizedIpOVH: NonReadonly<EmailExchangeExchangeServiceAuthorizedIpOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/authorizedIp/${ip}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeExchangeServiceAuthorizedIpOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError,{organizationName: string;exchangeService: string;ip: Ipv4BlockOVH;data: NonReadonly<EmailExchangeExchangeServiceAuthorizedIpOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError,{organizationName: string;exchangeService: string;ip: Ipv4BlockOVH;data: NonReadonly<EmailExchangeExchangeServiceAuthorizedIpOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, {organizationName: string;exchangeService: string;ip: Ipv4BlockOVH;data: NonReadonly<EmailExchangeExchangeServiceAuthorizedIpOVH>}> = (props) => {
          const {organizationName,exchangeService,ip,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp(organizationName,exchangeService,ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpMutationBody = NonReadonly<EmailExchangeExchangeServiceAuthorizedIpOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>, TError,{organizationName: string;exchangeService: string;ip: Ipv4BlockOVH;data: NonReadonly<EmailExchangeExchangeServiceAuthorizedIpOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIp>>,
        TError,
        {organizationName: string;exchangeService: string;ip: Ipv4BlockOVH;data: NonReadonly<EmailExchangeExchangeServiceAuthorizedIpOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Setting SSL hostname for Exchange private offer
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceChangeHostname = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameBody: PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/changeHostname`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceChangeHostname>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceChangeHostname>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceChangeHostname>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceChangeHostname(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceChangeHostname>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameMutationError = unknown

    /**
 * @summary Setting SSL hostname for Exchange private offer
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostname = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceChangeHostname>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceChangeHostname>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary custom isolation for mailbox
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/customIsolation`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/customIsolation`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary custom isolation for mailbox
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new custom isolation for mailbox
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationBody: PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/customIsolation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationMutationError = unknown

    /**
 * @summary Create new custom isolation for mailbox
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolation>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing custom isolation for mailbox
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName = (
    organizationName: string,
    exchangeService: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/customIsolation/${name}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError,{organizationName: string;exchangeService: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError,{organizationName: string;exchangeService: string;name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, {organizationName: string;exchangeService: string;name: string}> = (props) => {
          const {organizationName,exchangeService,name} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName(organizationName,exchangeService,name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameMutationError = unknown

    /**
 * @summary Delete existing custom isolation for mailbox
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError,{organizationName: string;exchangeService: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>,
        TError,
        {organizationName: string;exchangeService: string;name: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName = (
    organizationName: string,
    exchangeService: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeCustomIsolationOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/customIsolation/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameQueryKey = (organizationName: string,
    exchangeService: string,
    name: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/customIsolation/${name}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameQueryKey(organizationName,exchangeService,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName(organizationName,exchangeService,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameQueryOptions(organizationName,exchangeService,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get DCV emails if your ssl will expire in next 30 days
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/dcvEmails`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDcvEmailsQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/dcvEmails`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDcvEmailsQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceDcvEmailsQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceDcvEmailsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceDcvEmailsQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get DCV emails if your ssl will expire in next 30 days
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDcvEmails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceDcvEmailsQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of your ActiveSync devices registered on this Exchange service
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceDevice = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/device`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDeviceQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/device`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDeviceQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceDeviceQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceDevice(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDevice<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDevice<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDevice<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of your ActiveSync devices registered on this Exchange service
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDevice<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDevice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceDeviceQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity = (
    organizationName: string,
    exchangeService: string,
    identity: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeServiceDeviceOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/device/${identity}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityQueryKey = (organizationName: string,
    exchangeService: string,
    identity: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/device/${identity}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    identity: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityQueryKey(organizationName,exchangeService,identity);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity(organizationName,exchangeService,identity, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && identity), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    identity: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    identity: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    identity: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    identity: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityQueryOptions(organizationName,exchangeService,identity,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity = (
    organizationName: string,
    exchangeService: string,
    identity: string,
    emailExchangeExchangeServiceDeviceOVH: NonReadonly<EmailExchangeExchangeServiceDeviceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/device/${identity}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeExchangeServiceDeviceOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError,{organizationName: string;exchangeService: string;identity: string;data: NonReadonly<EmailExchangeExchangeServiceDeviceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError,{organizationName: string;exchangeService: string;identity: string;data: NonReadonly<EmailExchangeExchangeServiceDeviceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, {organizationName: string;exchangeService: string;identity: string;data: NonReadonly<EmailExchangeExchangeServiceDeviceOVH>}> = (props) => {
          const {organizationName,exchangeService,identity,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity(organizationName,exchangeService,identity,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityMutationBody = NonReadonly<EmailExchangeExchangeServiceDeviceOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>, TError,{organizationName: string;exchangeService: string;identity: string;data: NonReadonly<EmailExchangeExchangeServiceDeviceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentity>>,
        TError,
        {organizationName: string;exchangeService: string;identity: string;data: NonReadonly<EmailExchangeExchangeServiceDeviceOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Executes a factory reset on the device. THIS OPERATION CANNOT BE REVERSED, ALL DATA ON THE DEVICE WILL BE LOST.
 * @summary Executes a factory reset on the device
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDevice = (
    organizationName: string,
    exchangeService: string,
    identity: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/device/${identity}/clearDevice`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDeviceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDevice>>, TError,{organizationName: string;exchangeService: string;identity: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDevice>>, TError,{organizationName: string;exchangeService: string;identity: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDevice>>, {organizationName: string;exchangeService: string;identity: string}> = (props) => {
          const {organizationName,exchangeService,identity} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDevice(organizationName,exchangeService,identity,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDevice>>>
    
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDeviceMutationError = unknown

    /**
 * @summary Executes a factory reset on the device
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDevice = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDevice>>, TError,{organizationName: string;exchangeService: string;identity: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDevice>>,
        TError,
        {organizationName: string;exchangeService: string;identity: string},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDeviceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Domains associated to this service
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceDomain = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceDomainParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceDomainParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/domain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceDomain(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomain<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServiceDomainParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomain<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomain<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Domains associated to this service
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomain<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new domain in exchange services
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceDomain = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceDomainBody: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceDomainBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceDomain(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomain>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceDomainBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainMutationError = unknown

    /**
 * @summary Create new domain in exchange services
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomain>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomain>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing domain in exchange services
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError,{organizationName: string;exchangeService: string;domainName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError,{organizationName: string;exchangeService: string;domainName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, {organizationName: string;exchangeService: string;domainName: string}> = (props) => {
          const {organizationName,exchangeService,domainName} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName(organizationName,exchangeService,domainName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameMutationError = unknown

    /**
 * @summary Delete existing domain in exchange services
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError,{organizationName: string;exchangeService: string;domainName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>,
        TError,
        {organizationName: string;exchangeService: string;domainName: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeDomainOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameQueryKey = (organizationName: string,
    exchangeService: string,
    domainName: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameQueryKey(organizationName,exchangeService,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName(organizationName,exchangeService,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameQueryOptions(organizationName,exchangeService,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
    emailExchangeDomainOVH: NonReadonly<EmailExchangeDomainOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeDomainOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: NonReadonly<EmailExchangeDomainOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: NonReadonly<EmailExchangeDomainOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, {organizationName: string;exchangeService: string;domainName: string;data: NonReadonly<EmailExchangeDomainOVH>}> = (props) => {
          const {organizationName,exchangeService,domainName,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName(organizationName,exchangeService,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameMutationBody = NonReadonly<EmailExchangeDomainOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: NonReadonly<EmailExchangeDomainOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainName>>,
        TError,
        {organizationName: string;exchangeService: string;domainName: string;data: NonReadonly<EmailExchangeDomainOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change default values of SBR used for all new created account on this domain
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBR = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
    putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRBody: PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRBody,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/changeDefaultSBR`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRBody
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBR>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBR>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBR>>, {organizationName: string;exchangeService: string;domainName: string;data: PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRBody}> = (props) => {
          const {organizationName,exchangeService,domainName,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBR(organizationName,exchangeService,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBR>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRMutationBody = PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRBody
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRMutationError = unknown

    /**
 * @summary Change default values of SBR used for all new created account on this domain
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBR = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBR>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBR>>,
        TError,
        {organizationName: string;exchangeService: string;domainName: string;data: PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRBody},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing organization disclaimer
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/disclaimer`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError,{organizationName: string;exchangeService: string;domainName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError,{organizationName: string;exchangeService: string;domainName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, {organizationName: string;exchangeService: string;domainName: string}> = (props) => {
          const {organizationName,exchangeService,domainName} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer(organizationName,exchangeService,domainName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationError = unknown

    /**
 * @summary Delete existing organization disclaimer
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError,{organizationName: string;exchangeService: string;domainName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>,
        TError,
        {organizationName: string;exchangeService: string;domainName: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeDisclaimerOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/disclaimer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerQueryKey = (organizationName: string,
    exchangeService: string,
    domainName: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/disclaimer`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerQueryKey(organizationName,exchangeService,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer(organizationName,exchangeService,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerQueryOptions(organizationName,exchangeService,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create organization disclaimer of each email
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerBody: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/disclaimer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, {organizationName: string;exchangeService: string;domainName: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerBody}> = (props) => {
          const {organizationName,exchangeService,domainName,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer(organizationName,exchangeService,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationError = unknown

    /**
 * @summary Create organization disclaimer of each email
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>,
        TError,
        {organizationName: string;exchangeService: string;domainName: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
    emailExchangeDisclaimerOVH: NonReadonly<EmailExchangeDisclaimerOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/disclaimer`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeDisclaimerOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: NonReadonly<EmailExchangeDisclaimerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: NonReadonly<EmailExchangeDisclaimerOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, {organizationName: string;exchangeService: string;domainName: string;data: NonReadonly<EmailExchangeDisclaimerOVH>}> = (props) => {
          const {organizationName,exchangeService,domainName,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer(organizationName,exchangeService,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationBody = NonReadonly<EmailExchangeDisclaimerOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: NonReadonly<EmailExchangeDisclaimerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimer>>,
        TError,
        {organizationName: string;exchangeService: string;domainName: string;data: NonReadonly<EmailExchangeDisclaimerOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get diclaimer attributes to substitute with Active Directory properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeDisclaimerAttributeEnumOVH[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/disclaimerAttribute`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttributeQueryKey = (organizationName: string,
    exchangeService: string,
    domainName: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/disclaimerAttribute`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttributeQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttributeQueryKey(organizationName,exchangeService,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute(organizationName,exchangeService,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttributeQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttributeQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get diclaimer attributes to substitute with Active Directory properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttributeQueryOptions(organizationName,exchangeService,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary dkim associated to this domain
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/dkim`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimQueryKey = (organizationName: string,
    exchangeService: string,
    domainName: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/dkim`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimQueryKey(organizationName,exchangeService,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim(organizationName,exchangeService,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary dkim associated to this domain
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimQueryOptions(organizationName,exchangeService,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create DKIM selector on this domain
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimBody: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/dkim`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, {organizationName: string;exchangeService: string;domainName: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimBody}> = (props) => {
          const {organizationName,exchangeService,domainName,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim(organizationName,exchangeService,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimMutationError = unknown

    /**
 * @summary Create DKIM selector on this domain
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>, TError,{organizationName: string;exchangeService: string;domainName: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkim>>,
        TError,
        {organizationName: string;exchangeService: string;domainName: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete DKIM selector on this domain
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
    selectorName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/dkim/${selectorName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError,{organizationName: string;exchangeService: string;domainName: string;selectorName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError,{organizationName: string;exchangeService: string;domainName: string;selectorName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, {organizationName: string;exchangeService: string;domainName: string;selectorName: string}> = (props) => {
          const {organizationName,exchangeService,domainName,selectorName} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName(organizationName,exchangeService,domainName,selectorName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameMutationError = unknown

    /**
 * @summary Delete DKIM selector on this domain
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError,{organizationName: string;exchangeService: string;domainName: string;selectorName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>,
        TError,
        {organizationName: string;exchangeService: string;domainName: string;selectorName: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
    selectorName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeDkimOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/dkim/${selectorName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameQueryKey = (organizationName: string,
    exchangeService: string,
    domainName: string,
    selectorName: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/dkim/${selectorName}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    domainName: string,
    selectorName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameQueryKey(organizationName,exchangeService,domainName,selectorName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName(organizationName,exchangeService,domainName,selectorName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && domainName && selectorName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string,
    selectorName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string,
    selectorName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string,
    selectorName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string,
    selectorName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameQueryOptions(organizationName,exchangeService,domainName,selectorName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary disable dkim signing
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisable = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
    selectorName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/dkim/${selectorName}/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisable>>, TError,{organizationName: string;exchangeService: string;domainName: string;selectorName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisable>>, TError,{organizationName: string;exchangeService: string;domainName: string;selectorName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisable>>, {organizationName: string;exchangeService: string;domainName: string;selectorName: string}> = (props) => {
          const {organizationName,exchangeService,domainName,selectorName} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisable(organizationName,exchangeService,domainName,selectorName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisable>>>
    
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisableMutationError = unknown

    /**
 * @summary disable dkim signing
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisable>>, TError,{organizationName: string;exchangeService: string;domainName: string;selectorName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisable>>,
        TError,
        {organizationName: string;exchangeService: string;domainName: string;selectorName: string},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary enable dkim signing or switch selector used
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnable = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
    selectorName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/dkim/${selectorName}/enable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnable>>, TError,{organizationName: string;exchangeService: string;domainName: string;selectorName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnable>>, TError,{organizationName: string;exchangeService: string;domainName: string;selectorName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnable>>, {organizationName: string;exchangeService: string;domainName: string;selectorName: string}> = (props) => {
          const {organizationName,exchangeService,domainName,selectorName} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnable(organizationName,exchangeService,domainName,selectorName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnable>>>
    
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnableMutationError = unknown

    /**
 * @summary enable dkim signing or switch selector used
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnable>>, TError,{organizationName: string;exchangeService: string;domainName: string;selectorName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnable>>,
        TError,
        {organizationName: string;exchangeService: string;domainName: string;selectorName: string},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get dkim selector list
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector = (
    organizationName: string,
    exchangeService: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/dkimSelector`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorQueryKey = (organizationName: string,
    exchangeService: string,
    domainName: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/domain/${domainName}/dkimSelector`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorQueryKey(organizationName,exchangeService,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector(organizationName,exchangeService,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get dkim selector list
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorQueryOptions(organizationName,exchangeService,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary External contacts for this service
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/externalContact`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/externalContact`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContact<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContact<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContact<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary External contacts for this service
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContact<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary create new external contact
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceExternalContact = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceExternalContactBody: PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/externalContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceExternalContactBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceExternalContact(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactMutationError = unknown

    /**
 * @summary create new external contact
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceExternalContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceExternalContact>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary delete external contact
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress = (
    organizationName: string,
    exchangeService: string,
    externalEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/externalContact/${externalEmailAddress}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError,{organizationName: string;exchangeService: string;externalEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError,{organizationName: string;exchangeService: string;externalEmailAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, {organizationName: string;exchangeService: string;externalEmailAddress: string}> = (props) => {
          const {organizationName,exchangeService,externalEmailAddress} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress(organizationName,exchangeService,externalEmailAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressMutationError = unknown

    /**
 * @summary delete external contact
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError,{organizationName: string;exchangeService: string;externalEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>,
        TError,
        {organizationName: string;exchangeService: string;externalEmailAddress: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress = (
    organizationName: string,
    exchangeService: string,
    externalEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeExternalContactOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/externalContact/${externalEmailAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressQueryKey = (organizationName: string,
    exchangeService: string,
    externalEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/externalContact/${externalEmailAddress}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    externalEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressQueryKey(organizationName,exchangeService,externalEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress(organizationName,exchangeService,externalEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && externalEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    externalEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    externalEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    externalEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    externalEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressQueryOptions(organizationName,exchangeService,externalEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress = (
    organizationName: string,
    exchangeService: string,
    externalEmailAddress: string,
    emailExchangeExchangeExternalContactOVH: NonReadonly<EmailExchangeExchangeExternalContactOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/externalContact/${externalEmailAddress}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeExchangeExternalContactOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError,{organizationName: string;exchangeService: string;externalEmailAddress: string;data: NonReadonly<EmailExchangeExchangeExternalContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError,{organizationName: string;exchangeService: string;externalEmailAddress: string;data: NonReadonly<EmailExchangeExchangeExternalContactOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, {organizationName: string;exchangeService: string;externalEmailAddress: string;data: NonReadonly<EmailExchangeExchangeExternalContactOVH>}> = (props) => {
          const {organizationName,exchangeService,externalEmailAddress,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress(organizationName,exchangeService,externalEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressMutationBody = NonReadonly<EmailExchangeExchangeExternalContactOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>, TError,{organizationName: string;exchangeService: string;externalEmailAddress: string;data: NonReadonly<EmailExchangeExchangeExternalContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddress>>,
        TError,
        {organizationName: string;exchangeService: string;externalEmailAddress: string;data: NonReadonly<EmailExchangeExchangeExternalContactOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete user with impersonation right on all mailboxes
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/impersonatedUser`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError,{organizationName: string;exchangeService: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError,{organizationName: string;exchangeService: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, {organizationName: string;exchangeService: string}> = (props) => {
          const {organizationName,exchangeService} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser(organizationName,exchangeService,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserMutationError = unknown

    /**
 * @summary Delete user with impersonation right on all mailboxes
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError,{organizationName: string;exchangeService: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>,
        TError,
        {organizationName: string;exchangeService: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeAccountImpersonationOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/impersonatedUser`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/impersonatedUser`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create user with impersonation right on all mailboxes
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserBody: PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/impersonatedUser`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserMutationError = unknown

    /**
 * @summary Create user with impersonation right on all mailboxes
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUser>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change user password
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePassword = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordBody: PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/impersonatedUser/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePassword>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePassword>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePassword>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePassword(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePassword>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordMutationError = unknown

    /**
 * @summary Change user password
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePassword>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePassword>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get configuration of password policy linked to impersonated account
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangePasswordPolicyOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/impersonationPasswordPolicy`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicyQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/impersonationPasswordPolicy`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicyQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicyQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicyQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicyQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get configuration of password policy linked to impersonated account
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicyQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get active licenses for specific period of time
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceLicense = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeDailyLicenseOVH[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/license`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceLicenseQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/license`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceLicenseQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceLicenseQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceLicense(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLicense<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLicense<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLicense<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get active licenses for specific period of time
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLicense<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLicense>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceLicenseQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available log kinds
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceLogKind = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/log/kind`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceLogKindQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/log/kind`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceLogKindQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceLogKindQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceLogKind(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceLogKindQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceLogKindQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogKind<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogKind<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogKind<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available log kinds
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogKind<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceLogKindQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a log kind
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName = (
    organizationName: string,
    exchangeService: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogKindOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/log/kind/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceLogKindNameQueryKey = (organizationName: string,
    exchangeService: string,
    name: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/log/kind/${name}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceLogKindNameQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceLogKindNameQueryKey(organizationName,exchangeService,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName(organizationName,exchangeService,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceLogKindNameQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceLogKindNameQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogKindName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogKindName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogKindName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a log kind
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogKindName<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceLogKindNameQueryOptions(organizationName,exchangeService,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List subscription IDs for a cluster
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/log/subscription`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/log/subscription`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List subscription IDs for a cluster
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a subscription from logs to a pre-existing LDP stream
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription = (
    organizationName: string,
    exchangeService: string,
    dbaasLogsLogSubscriptionCreationOVH: DbaasLogsLogSubscriptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionResponseOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/log/subscription`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsLogSubscriptionCreationOVH, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError,{organizationName: string;exchangeService: string;data: DbaasLogsLogSubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError,{organizationName: string;exchangeService: string;data: DbaasLogsLogSubscriptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, {organizationName: string;exchangeService: string;data: DbaasLogsLogSubscriptionCreationOVH}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionMutationBody = DbaasLogsLogSubscriptionCreationOVH
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionMutationError = unknown

    /**
 * @summary Create a subscription from logs to a pre-existing LDP stream
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>, TError,{organizationName: string;exchangeService: string;data: DbaasLogsLogSubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceLogSubscription>>,
        TError,
        {organizationName: string;exchangeService: string;data: DbaasLogsLogSubscriptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a subscription
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId = (
    organizationName: string,
    exchangeService: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionResponseOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/log/subscription/${subscriptionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError,{organizationName: string;exchangeService: string;subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError,{organizationName: string;exchangeService: string;subscriptionId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, {organizationName: string;exchangeService: string;subscriptionId: string}> = (props) => {
          const {organizationName,exchangeService,subscriptionId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId(organizationName,exchangeService,subscriptionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionIdMutationError = unknown

    /**
 * @summary Delete a subscription
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError,{organizationName: string;exchangeService: string;subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>,
        TError,
        {organizationName: string;exchangeService: string;subscriptionId: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get subscription details
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId = (
    organizationName: string,
    exchangeService: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/log/subscription/${subscriptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionIdQueryKey = (organizationName: string,
    exchangeService: string,
    subscriptionId: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/log/subscription/${subscriptionId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionIdQueryKey(organizationName,exchangeService,subscriptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId(organizationName,exchangeService,subscriptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    subscriptionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get subscription details
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionIdQueryOptions(organizationName,exchangeService,subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate a temporary URL to retrieve logs
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceLogUrl = (
    organizationName: string,
    exchangeService: string,
    dbaasLogsLogUrlCreationOVH: DbaasLogsLogUrlCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsTemporaryLogsLinkOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/log/url`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsLogUrlCreationOVH, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceLogUrlMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceLogUrl>>, TError,{organizationName: string;exchangeService: string;data: DbaasLogsLogUrlCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceLogUrl>>, TError,{organizationName: string;exchangeService: string;data: DbaasLogsLogUrlCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceLogUrl>>, {organizationName: string;exchangeService: string;data: DbaasLogsLogUrlCreationOVH}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceLogUrl(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceLogUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceLogUrl>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceLogUrlMutationBody = DbaasLogsLogUrlCreationOVH
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceLogUrlMutationError = unknown

    /**
 * @summary Generate a temporary URL to retrieve logs
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceLogUrl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceLogUrl>>, TError,{organizationName: string;exchangeService: string;data: DbaasLogsLogUrlCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceLogUrl>>,
        TError,
        {organizationName: string;exchangeService: string;data: DbaasLogsLogUrlCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceLogUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Mailing list for this service
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingList = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingList(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingList<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingList<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingList<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Mailing list for this service
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingList<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add mailing list
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceMailingList = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceMailingListBody: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceMailingListBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceMailingList(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMutationError = unknown

    /**
 * @summary Add mailing list
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceMailingList = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingList>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete mailing list
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, {organizationName: string;exchangeService: string;mailingListAddress: string}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress(organizationName,exchangeService,mailingListAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMutationError = unknown

    /**
 * @summary Delete mailing list
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeMailingListOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressQueryKey(organizationName,exchangeService,mailingListAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress(organizationName,exchangeService,mailingListAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressQueryOptions(organizationName,exchangeService,mailingListAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    emailExchangeMailingListOVH: NonReadonly<EmailExchangeMailingListOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeMailingListOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: NonReadonly<EmailExchangeMailingListOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: NonReadonly<EmailExchangeMailingListOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, {organizationName: string;exchangeService: string;mailingListAddress: string;data: NonReadonly<EmailExchangeMailingListOVH>}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress(organizationName,exchangeService,mailingListAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMutationBody = NonReadonly<EmailExchangeMailingListOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: NonReadonly<EmailExchangeMailingListOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddress>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;data: NonReadonly<EmailExchangeMailingListOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Aliases associated to this mailingList
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/alias`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/alias`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasQueryKey(organizationName,exchangeService,mailingListAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias(organizationName,exchangeService,mailingListAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Aliases associated to this mailingList
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasQueryOptions(organizationName,exchangeService,mailingListAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new alias
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasBody: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/alias`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, {organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasBody}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias(organizationName,exchangeService,mailingListAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasMutationError = unknown

    /**
 * @summary Create new alias
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAlias>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing alias
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    alias: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/alias/${alias}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;alias: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;alias: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, {organizationName: string;exchangeService: string;mailingListAddress: string;alias: string}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,alias} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias(organizationName,exchangeService,mailingListAddress,alias,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasMutationError = unknown

    /**
 * @summary Delete existing alias
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;alias: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;alias: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    alias: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeMailingListAliasOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/alias/${alias}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    alias: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/alias/${alias}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasQueryKey(organizationName,exchangeService,mailingListAddress,alias);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias(organizationName,exchangeService,mailingListAddress,alias, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress && alias), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    alias: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasQueryOptions(organizationName,exchangeService,mailingListAddress,alias,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Mailing list account manager
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/manager/account`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/manager/account`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountQueryKey(organizationName,exchangeService,mailingListAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount(organizationName,exchangeService,mailingListAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Mailing list account manager
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountQueryOptions(organizationName,exchangeService,mailingListAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add new mailing list manager
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountBody: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/manager/account`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, {organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountBody}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount(organizationName,exchangeService,mailingListAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountMutationError = unknown

    /**
 * @summary Add new mailing list manager
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccount>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete mailing list manager
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    managerAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/manager/account/${managerAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;managerAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;managerAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, {organizationName: string;exchangeService: string;mailingListAddress: string;managerAccountId: number}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,managerAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId(organizationName,exchangeService,mailingListAddress,managerAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdMutationError = unknown

    /**
 * @summary Delete mailing list manager
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;managerAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;managerAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    managerAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeDistributionGroupManagerOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/manager/account/${managerAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    managerAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/manager/account/${managerAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    managerAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdQueryKey(organizationName,exchangeService,mailingListAddress,managerAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId(organizationName,exchangeService,mailingListAddress,managerAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress && managerAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    managerAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    managerAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    managerAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    managerAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdQueryOptions(organizationName,exchangeService,mailingListAddress,managerAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Mailing list account member
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/member/account`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/member/account`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountQueryKey(organizationName,exchangeService,mailingListAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount(organizationName,exchangeService,mailingListAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Mailing list account member
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountQueryOptions(organizationName,exchangeService,mailingListAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add new mailing list member
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountBody: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/member/account`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, {organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountBody}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount(organizationName,exchangeService,mailingListAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMutationError = unknown

    /**
 * @summary Add new mailing list member
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccount>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete mailing list member
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/member/account/${memberAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;memberAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;memberAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, {organizationName: string;exchangeService: string;mailingListAddress: string;memberAccountId: number}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,memberAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId(organizationName,exchangeService,mailingListAddress,memberAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdMutationError = unknown

    /**
 * @summary Delete mailing list member
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;memberAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;memberAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeDistributionGroupMemberOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/member/account/${memberAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/member/account/${memberAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdQueryKey(organizationName,exchangeService,mailingListAddress,memberAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId(organizationName,exchangeService,mailingListAddress,memberAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress && memberAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdQueryOptions(organizationName,exchangeService,mailingListAddress,memberAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Mailing list contact member
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/member/contact`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/member/contact`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactQueryKey(organizationName,exchangeService,mailingListAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact(organizationName,exchangeService,mailingListAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Mailing list contact member
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactQueryOptions(organizationName,exchangeService,mailingListAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add new mailing list member
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactBody: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/member/contact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, {organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactBody}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact(organizationName,exchangeService,mailingListAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMutationError = unknown

    /**
 * @summary Add new mailing list member
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContact>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete mailing list member
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberContactId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/member/contact/${memberContactId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;memberContactId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;memberContactId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, {organizationName: string;exchangeService: string;mailingListAddress: string;memberContactId: number}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,memberContactId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId(organizationName,exchangeService,mailingListAddress,memberContactId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdMutationError = unknown

    /**
 * @summary Delete mailing list member
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;memberContactId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;memberContactId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberContactId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeDistributionGroupMemberOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/member/contact/${memberContactId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberContactId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/member/contact/${memberContactId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberContactId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdQueryKey(organizationName,exchangeService,mailingListAddress,memberContactId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId(organizationName,exchangeService,mailingListAddress,memberContactId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress && memberContactId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberContactId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberContactId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberContactId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    memberContactId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdQueryOptions(organizationName,exchangeService,mailingListAddress,memberContactId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary sendAs
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/sendAs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/sendAs`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsQueryKey(organizationName,exchangeService,mailingListAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs(organizationName,exchangeService,mailingListAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary sendAs
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsQueryOptions(organizationName,exchangeService,mailingListAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow another user to Send aso mails from this mailing list
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsBody: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/sendAs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, {organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsBody}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs(organizationName,exchangeService,mailingListAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsMutationError = unknown

    /**
 * @summary Allow another user to Send aso mails from this mailing list
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAs>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete allowed user for SendAs
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/sendAs/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, {organizationName: string;exchangeService: string;mailingListAddress: string;allowedAccountId: number}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,allowedAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId(organizationName,exchangeService,mailingListAddress,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdMutationError = unknown

    /**
 * @summary Delete allowed user for SendAs
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeDistributionGroupSendAsOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/sendAs/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/sendAs/${allowedAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdQueryKey(organizationName,exchangeService,mailingListAddress,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId(organizationName,exchangeService,mailingListAddress,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdQueryOptions(organizationName,exchangeService,mailingListAddress,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary sendOnBehalfTo
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/sendOnBehalfTo`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/sendOnBehalfTo`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToQueryKey(organizationName,exchangeService,mailingListAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo(organizationName,exchangeService,mailingListAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary sendOnBehalfTo
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToQueryOptions(organizationName,exchangeService,mailingListAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow another user to Send aso mails from this mailing list
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToBody: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/sendOnBehalfTo`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, {organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToBody}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo(organizationName,exchangeService,mailingListAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToMutationError = unknown

    /**
 * @summary Allow another user to Send aso mails from this mailing list
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfTo>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete allowed user for SendOnBehalfTo
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/sendOnBehalfTo/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, {organizationName: string;exchangeService: string;mailingListAddress: string;allowedAccountId: number}> = (props) => {
          const {organizationName,exchangeService,mailingListAddress,allowedAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId(organizationName,exchangeService,mailingListAddress,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdMutationError = unknown

    /**
 * @summary Delete allowed user for SendOnBehalfTo
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;mailingListAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;mailingListAddress: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeDistributionGroupSendOnBehalfToOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/sendOnBehalfTo/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/mailingList/${mailingListAddress}/sendOnBehalfTo/${allowedAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdQueryKey(organizationName,exchangeService,mailingListAddress,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId(organizationName,exchangeService,mailingListAddress,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && mailingListAddress && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    mailingListAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdQueryOptions(organizationName,exchangeService,mailingListAddress,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Show available outlooks
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeOutlookVersionsOVH[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/outlookAvailability`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/outlookAvailability`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Show available outlooks
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceProtocol = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeServiceProtocolOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/protocol`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/protocol`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceProtocol(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceProtocolQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceProtocolQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceProtocol<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceProtocol<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceProtocol<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceProtocol<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceProtocol = (
    organizationName: string,
    exchangeService: string,
    emailExchangeExchangeServiceProtocolOVH: NonReadonly<EmailExchangeExchangeServiceProtocolOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/protocol`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeExchangeServiceProtocolOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceProtocolMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError,{organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeExchangeServiceProtocolOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError,{organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeExchangeServiceProtocolOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, {organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeExchangeServiceProtocolOVH>}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceProtocol(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceProtocolMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceProtocolMutationBody = NonReadonly<EmailExchangeExchangeServiceProtocolOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceProtocolMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceProtocol = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>, TError,{organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeExchangeServiceProtocolOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceProtocol>>,
        TError,
        {organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeExchangeServiceProtocolOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceProtocolMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Exchange account id subscribed to ActiveSync quarantine notifications
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/protocol/activeSyncMailNotification`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/protocol/activeSyncMailNotification`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Exchange account id subscribed to ActiveSync quarantine notifications
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Subscribe new address to ActiveSync quarantine notifications
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationBody: PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/protocol/activeSyncMailNotification`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationMutationError = unknown

    /**
 * @summary Subscribe new address to ActiveSync quarantine notifications
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotification>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Unubscribe address from ActiveSync quarantine notifications
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId = (
    organizationName: string,
    exchangeService: string,
    notifiedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/protocol/activeSyncMailNotification/${notifiedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError,{organizationName: string;exchangeService: string;notifiedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError,{organizationName: string;exchangeService: string;notifiedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, {organizationName: string;exchangeService: string;notifiedAccountId: number}> = (props) => {
          const {organizationName,exchangeService,notifiedAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId(organizationName,exchangeService,notifiedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdMutationError = unknown

    /**
 * @summary Unubscribe address from ActiveSync quarantine notifications
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError,{organizationName: string;exchangeService: string;notifiedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;notifiedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId = (
    organizationName: string,
    exchangeService: string,
    notifiedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeServiceActiveSyncNotificationOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/protocol/activeSyncMailNotification/${notifiedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    notifiedAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/protocol/activeSyncMailNotification/${notifiedAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    notifiedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdQueryKey(organizationName,exchangeService,notifiedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId(organizationName,exchangeService,notifiedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && notifiedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    notifiedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    notifiedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    notifiedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    notifiedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdQueryOptions(organizationName,exchangeService,notifiedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Public folders associated to this service
 */
export const getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/publicFolder`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/publicFolder`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolder<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolder<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolder<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Public folders associated to this service
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolder<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create organization public folder
 */
export const postEmailExchangeOrganizationNameServiceExchangeServicePublicFolder = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServicePublicFolderBody: PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/publicFolder`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServicePublicFolderBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServicePublicFolder(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderMutationError = unknown

    /**
 * @summary Create organization public folder
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServicePublicFolder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServicePublicFolder>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing organization public folder
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath = (
    organizationName: string,
    exchangeService: string,
    path: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/publicFolder/${path}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError,{organizationName: string;exchangeService: string;path: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError,{organizationName: string;exchangeService: string;path: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, {organizationName: string;exchangeService: string;path: string}> = (props) => {
          const {organizationName,exchangeService,path} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath(organizationName,exchangeService,path,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathMutationError = unknown

    /**
 * @summary Delete existing organization public folder
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError,{organizationName: string;exchangeService: string;path: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>,
        TError,
        {organizationName: string;exchangeService: string;path: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath = (
    organizationName: string,
    exchangeService: string,
    path: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangePublicFolderOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/publicFolder/${path}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathQueryKey = (organizationName: string,
    exchangeService: string,
    path: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/publicFolder/${path}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathQueryKey(organizationName,exchangeService,path);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath(organizationName,exchangeService,path, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && path), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    path: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathQueryOptions(organizationName,exchangeService,path,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath = (
    organizationName: string,
    exchangeService: string,
    path: string,
    emailExchangePublicFolderOVH: NonReadonly<EmailExchangePublicFolderOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/publicFolder/${path}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangePublicFolderOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError,{organizationName: string;exchangeService: string;path: string;data: NonReadonly<EmailExchangePublicFolderOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError,{organizationName: string;exchangeService: string;path: string;data: NonReadonly<EmailExchangePublicFolderOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, {organizationName: string;exchangeService: string;path: string;data: NonReadonly<EmailExchangePublicFolderOVH>}> = (props) => {
          const {organizationName,exchangeService,path,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath(organizationName,exchangeService,path,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathMutationBody = NonReadonly<EmailExchangePublicFolderOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>, TError,{organizationName: string;exchangeService: string;path: string;data: NonReadonly<EmailExchangePublicFolderOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPath>>,
        TError,
        {organizationName: string;exchangeService: string;path: string;data: NonReadonly<EmailExchangePublicFolderOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Public folder permission
 */
export const getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission = (
    organizationName: string,
    exchangeService: string,
    path: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/publicFolder/${path}/permission`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionQueryKey = (organizationName: string,
    exchangeService: string,
    path: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/publicFolder/${path}/permission`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionQueryKey(organizationName,exchangeService,path);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission(organizationName,exchangeService,path, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && path), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    path: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Public folder permission
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionQueryOptions(organizationName,exchangeService,path,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create public folder permission
 */
export const postEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission = (
    organizationName: string,
    exchangeService: string,
    path: string,
    postEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionBody: PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/publicFolder/${path}/permission`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError,{organizationName: string;exchangeService: string;path: string;data: PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError,{organizationName: string;exchangeService: string;path: string;data: PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, {organizationName: string;exchangeService: string;path: string;data: PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionBody}> = (props) => {
          const {organizationName,exchangeService,path,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission(organizationName,exchangeService,path,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionMutationError = unknown

    /**
 * @summary Create public folder permission
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>, TError,{organizationName: string;exchangeService: string;path: string;data: PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermission>>,
        TError,
        {organizationName: string;exchangeService: string;path: string;data: PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing permission from public folder
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    path: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/publicFolder/${path}/permission/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;path: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;path: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, {organizationName: string;exchangeService: string;path: string;allowedAccountId: number}> = (props) => {
          const {organizationName,exchangeService,path,allowedAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId(organizationName,exchangeService,path,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdMutationError = unknown

    /**
 * @summary Delete existing permission from public folder
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;path: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;path: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    path: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangePublicFolderPermissionOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/publicFolder/${path}/permission/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    path: string,
    allowedAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/publicFolder/${path}/permission/${allowedAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    path: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdQueryKey(organizationName,exchangeService,path,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId(organizationName,exchangeService,path,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && path && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    path: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    path: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    path: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    path: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdQueryOptions(organizationName,exchangeService,path,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    path: string,
    allowedAccountId: number,
    emailExchangeExchangePublicFolderPermissionOVH: NonReadonly<EmailExchangeExchangePublicFolderPermissionOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/publicFolder/${path}/permission/${allowedAccountId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeExchangePublicFolderPermissionOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;path: string;allowedAccountId: number;data: NonReadonly<EmailExchangeExchangePublicFolderPermissionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;path: string;allowedAccountId: number;data: NonReadonly<EmailExchangeExchangePublicFolderPermissionOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, {organizationName: string;exchangeService: string;path: string;allowedAccountId: number;data: NonReadonly<EmailExchangeExchangePublicFolderPermissionOVH>}> = (props) => {
          const {organizationName,exchangeService,path,allowedAccountId,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId(organizationName,exchangeService,path,allowedAccountId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdMutationBody = NonReadonly<EmailExchangeExchangePublicFolderPermissionOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;path: string;allowedAccountId: number;data: NonReadonly<EmailExchangeExchangePublicFolderPermissionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;path: string;allowedAccountId: number;data: NonReadonly<EmailExchangeExchangePublicFolderPermissionOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get public folder quota usage in total available space
 */
export const getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangePublicFolderQuotaOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/publicFolderQuota`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuotaQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/publicFolderQuota`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuotaQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuotaQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuotaQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuotaQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get public folder quota usage in total available space
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuotaQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Renew SSL if it will expire in next 30 days
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceRenewSSL = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLBody: PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/renewSSL`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceRenewSSL>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceRenewSSL>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceRenewSSL>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceRenewSSL(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceRenewSSL>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLMutationError = unknown

    /**
 * @summary Renew SSL if it will expire in next 30 days
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSL = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceRenewSSL>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceRenewSSL>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Resource account associated to this service
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Resource account associated to this service
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary create new resource account in exchange server
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountBody: PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountMutationError = unknown

    /**
 * @summary create new resource account in exchange server
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccount>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary delete existing resource account in exchange server
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress = (
    organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount/${resourceEmailAddress}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError,{organizationName: string;exchangeService: string;resourceEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError,{organizationName: string;exchangeService: string;resourceEmailAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, {organizationName: string;exchangeService: string;resourceEmailAddress: string}> = (props) => {
          const {organizationName,exchangeService,resourceEmailAddress} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress(organizationName,exchangeService,resourceEmailAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressMutationError = unknown

    /**
 * @summary delete existing resource account in exchange server
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError,{organizationName: string;exchangeService: string;resourceEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>,
        TError,
        {organizationName: string;exchangeService: string;resourceEmailAddress: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress = (
    organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeResourceAccountOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount/${resourceEmailAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressQueryKey = (organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount/${resourceEmailAddress}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressQueryKey(organizationName,exchangeService,resourceEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress(organizationName,exchangeService,resourceEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && resourceEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressQueryOptions(organizationName,exchangeService,resourceEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress = (
    organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
    emailExchangeResourceAccountOVH: NonReadonly<EmailExchangeResourceAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount/${resourceEmailAddress}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeResourceAccountOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError,{organizationName: string;exchangeService: string;resourceEmailAddress: string;data: NonReadonly<EmailExchangeResourceAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError,{organizationName: string;exchangeService: string;resourceEmailAddress: string;data: NonReadonly<EmailExchangeResourceAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, {organizationName: string;exchangeService: string;resourceEmailAddress: string;data: NonReadonly<EmailExchangeResourceAccountOVH>}> = (props) => {
          const {organizationName,exchangeService,resourceEmailAddress,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress(organizationName,exchangeService,resourceEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressMutationBody = NonReadonly<EmailExchangeResourceAccountOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>, TError,{organizationName: string;exchangeService: string;resourceEmailAddress: string;data: NonReadonly<EmailExchangeResourceAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddress>>,
        TError,
        {organizationName: string;exchangeService: string;resourceEmailAddress: string;data: NonReadonly<EmailExchangeResourceAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Resource account manager
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate = (
    organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount/${resourceEmailAddress}/delegate`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateQueryKey = (organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount/${resourceEmailAddress}/delegate`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateQueryKey(organizationName,exchangeService,resourceEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate(organizationName,exchangeService,resourceEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && resourceEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Resource account manager
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateQueryOptions(organizationName,exchangeService,resourceEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary add new resource account delegate in exchange server
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate = (
    organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateBody: PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount/${resourceEmailAddress}/delegate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError,{organizationName: string;exchangeService: string;resourceEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError,{organizationName: string;exchangeService: string;resourceEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, {organizationName: string;exchangeService: string;resourceEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateBody}> = (props) => {
          const {organizationName,exchangeService,resourceEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate(organizationName,exchangeService,resourceEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateMutationError = unknown

    /**
 * @summary add new resource account delegate in exchange server
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>, TError,{organizationName: string;exchangeService: string;resourceEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegate>>,
        TError,
        {organizationName: string;exchangeService: string;resourceEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary delete existing resource account delegate in exchange server
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount/${resourceEmailAddress}/delegate/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;resourceEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;resourceEmailAddress: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, {organizationName: string;exchangeService: string;resourceEmailAddress: string;allowedAccountId: number}> = (props) => {
          const {organizationName,exchangeService,resourceEmailAddress,allowedAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId(organizationName,exchangeService,resourceEmailAddress,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdMutationError = unknown

    /**
 * @summary delete existing resource account delegate in exchange server
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;resourceEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;resourceEmailAddress: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeResourceAccountDelegateOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount/${resourceEmailAddress}/delegate/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
    allowedAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/resourceAccount/${resourceEmailAddress}/delegate/${allowedAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdQueryKey(organizationName,exchangeService,resourceEmailAddress,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId(organizationName,exchangeService,resourceEmailAddress,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && resourceEmailAddress && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    resourceEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdQueryOptions(organizationName,exchangeService,resourceEmailAddress,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of your send connectors on this Exchange service
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sendConnector`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sendConnector`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnector<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnector<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnector<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of your send connectors on this Exchange service
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnector<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new send connector
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceSendConnector = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorBody: PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sendConnector`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceSendConnector(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorMutationError = unknown

    /**
 * @summary Create new send connector
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceSendConnector = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSendConnector>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing send connector
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId = (
    organizationName: string,
    exchangeService: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sendConnector/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError,{organizationName: string;exchangeService: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError,{organizationName: string;exchangeService: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, {organizationName: string;exchangeService: string;id: number}> = (props) => {
          const {organizationName,exchangeService,id} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId(organizationName,exchangeService,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdMutationError = unknown

    /**
 * @summary Delete existing send connector
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError,{organizationName: string;exchangeService: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>,
        TError,
        {organizationName: string;exchangeService: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId = (
    organizationName: string,
    exchangeService: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeSendConnectorOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sendConnector/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdQueryKey = (organizationName: string,
    exchangeService: string,
    id: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sendConnector/${id}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdQueryKey(organizationName,exchangeService,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId(organizationName,exchangeService,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdQueryOptions(organizationName,exchangeService,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId = (
    organizationName: string,
    exchangeService: string,
    id: number,
    emailExchangeSendConnectorOVH: NonReadonly<EmailExchangeSendConnectorOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sendConnector/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeSendConnectorOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError,{organizationName: string;exchangeService: string;id: number;data: NonReadonly<EmailExchangeSendConnectorOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError,{organizationName: string;exchangeService: string;id: number;data: NonReadonly<EmailExchangeSendConnectorOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, {organizationName: string;exchangeService: string;id: number;data: NonReadonly<EmailExchangeSendConnectorOVH>}> = (props) => {
          const {organizationName,exchangeService,id,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId(organizationName,exchangeService,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdMutationBody = NonReadonly<EmailExchangeSendConnectorOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>, TError,{organizationName: string;exchangeService: string;id: number;data: NonReadonly<EmailExchangeSendConnectorOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorId>>,
        TError,
        {organizationName: string;exchangeService: string;id: number;data: NonReadonly<EmailExchangeSendConnectorOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change authentication on send connector
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthentication = (
    organizationName: string,
    exchangeService: string,
    id: number,
    postEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationBody: PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sendConnector/${id}/changeAuthentication`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthentication>>, TError,{organizationName: string;exchangeService: string;id: number;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthentication>>, TError,{organizationName: string;exchangeService: string;id: number;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthentication>>, {organizationName: string;exchangeService: string;id: number;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationBody}> = (props) => {
          const {organizationName,exchangeService,id,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthentication(organizationName,exchangeService,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthentication>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationMutationError = unknown

    /**
 * @summary Change authentication on send connector
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthentication = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthentication>>, TError,{organizationName: string;exchangeService: string;id: number;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthentication>>,
        TError,
        {organizationName: string;exchangeService: string;id: number;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceServer = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeServerOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/server`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceServerQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/server`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceServerQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceServerQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceServer(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceServerQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceServerQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceServer<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceServer<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceServer<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceServer<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceServerQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceServer = (
    organizationName: string,
    exchangeService: string,
    emailExchangeServerOVH: NonReadonly<EmailExchangeServerOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/server`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeServerOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceServerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError,{organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeServerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError,{organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeServerOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceServer>>, {organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeServerOVH>}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceServer(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceServerMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceServer>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceServerMutationBody = NonReadonly<EmailExchangeServerOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceServerMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceServer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceServer>>, TError,{organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeServerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceServer>>,
        TError,
        {organizationName: string;exchangeService: string;data: NonReadonly<EmailExchangeServerOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceServerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/serviceInfos`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos = (
    organizationName: string,
    exchangeService: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError,{organizationName: string;exchangeService: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError,{organizationName: string;exchangeService: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, {organizationName: string;exchangeService: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>, TError,{organizationName: string;exchangeService: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceServiceInfos>>,
        TError,
        {organizationName: string;exchangeService: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Shared accounts associated to this exchange service
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount = (
    organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQueryKey = (organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountParams,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: undefined |  GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Shared accounts associated to this exchange service
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params?: GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new shared mailbox in exchange server
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount = (
    organizationName: string,
    exchangeService: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountBody: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountBody}> = (props) => {
          const {organizationName,exchangeService,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount(organizationName,exchangeService,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountMutationError = unknown

    /**
 * @summary Create new shared mailbox in exchange server
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>, TError,{organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccount>>,
        TError,
        {organizationName: string;exchangeService: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing shared mailbox in exchange server
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, {organizationName: string;exchangeService: string;sharedEmailAddress: string}> = (props) => {
          const {organizationName,exchangeService,sharedEmailAddress} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress(organizationName,exchangeService,sharedEmailAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressMutationError = unknown

    /**
 * @summary Delete existing shared mailbox in exchange server
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>,
        TError,
        {organizationName: string;exchangeService: string;sharedEmailAddress: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeSharedAccountOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressQueryKey = (organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressQueryKey(organizationName,exchangeService,sharedEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress(organizationName,exchangeService,sharedEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && sharedEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressQueryOptions(organizationName,exchangeService,sharedEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    emailExchangeSharedAccountOVH: NonReadonly<EmailExchangeSharedAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailExchangeSharedAccountOVH
    },
      options);
    }
  


export const getPutEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: NonReadonly<EmailExchangeSharedAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: NonReadonly<EmailExchangeSharedAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, {organizationName: string;exchangeService: string;sharedEmailAddress: string;data: NonReadonly<EmailExchangeSharedAccountOVH>}> = (props) => {
          const {organizationName,exchangeService,sharedEmailAddress,data} = props ?? {};

          return  putEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress(organizationName,exchangeService,sharedEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressMutationBody = NonReadonly<EmailExchangeSharedAccountOVH>
    export type PutEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: NonReadonly<EmailExchangeSharedAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddress>>,
        TError,
        {organizationName: string;exchangeService: string;sharedEmailAddress: string;data: NonReadonly<EmailExchangeSharedAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Aliases associated to this mailbox
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/alias`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasQueryKey = (organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/alias`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasQueryKey(organizationName,exchangeService,sharedEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias(organizationName,exchangeService,sharedEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && sharedEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Aliases associated to this mailbox
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasQueryOptions(organizationName,exchangeService,sharedEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new alias
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasBody: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/alias`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, {organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasBody}> = (props) => {
          const {organizationName,exchangeService,sharedEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias(organizationName,exchangeService,sharedEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasMutationError = unknown

    /**
 * @summary Create new alias
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAlias>>,
        TError,
        {organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing alias
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    alias: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/alias/${alias}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;alias: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;alias: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, {organizationName: string;exchangeService: string;sharedEmailAddress: string;alias: string}> = (props) => {
          const {organizationName,exchangeService,sharedEmailAddress,alias} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias(organizationName,exchangeService,sharedEmailAddress,alias,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasMutationError = unknown

    /**
 * @summary Delete existing alias
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;alias: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>,
        TError,
        {organizationName: string;exchangeService: string;sharedEmailAddress: string;alias: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    alias: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeSharedAccountAliasOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/alias/${alias}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasQueryKey = (organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    alias: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/alias/${alias}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasQueryKey(organizationName,exchangeService,sharedEmailAddress,alias);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias(organizationName,exchangeService,sharedEmailAddress,alias, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && sharedEmailAddress && alias), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    alias: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasQueryOptions(organizationName,exchangeService,sharedEmailAddress,alias,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Full access granted users for this shared mailbox
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/fullAccess`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessQueryKey = (organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/fullAccess`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessQueryKey(organizationName,exchangeService,sharedEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess(organizationName,exchangeService,sharedEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && sharedEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Full access granted users for this shared mailbox
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessQueryOptions(organizationName,exchangeService,sharedEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow full access to a user
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessBody: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/fullAccess`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, {organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessBody}> = (props) => {
          const {organizationName,exchangeService,sharedEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess(organizationName,exchangeService,sharedEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessMutationError = unknown

    /**
 * @summary Allow full access to a user
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccess>>,
        TError,
        {organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Revoke full access
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/fullAccess/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, {organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number}> = (props) => {
          const {organizationName,exchangeService,sharedEmailAddress,allowedAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId(organizationName,exchangeService,sharedEmailAddress,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdMutationError = unknown

    /**
 * @summary Revoke full access
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeSharedAccountFullAccessOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/fullAccess/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/fullAccess/${allowedAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdQueryKey(organizationName,exchangeService,sharedEmailAddress,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId(organizationName,exchangeService,sharedEmailAddress,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && sharedEmailAddress && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdQueryOptions(organizationName,exchangeService,sharedEmailAddress,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Send as granted users for this shared mailbox
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/sendAs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsQueryKey = (organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/sendAs`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsQueryKey(organizationName,exchangeService,sharedEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs(organizationName,exchangeService,sharedEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && sharedEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Send as granted users for this shared mailbox
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsQueryOptions(organizationName,exchangeService,sharedEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow another user to send mails from this shared mailbox
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsBody: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/sendAs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, {organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsBody}> = (props) => {
          const {organizationName,exchangeService,sharedEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs(organizationName,exchangeService,sharedEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsMutationError = unknown

    /**
 * @summary Allow another user to send mails from this shared mailbox
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAs>>,
        TError,
        {organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete allowed user for sendAs
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/sendAs/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, {organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number}> = (props) => {
          const {organizationName,exchangeService,sharedEmailAddress,allowedAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId(organizationName,exchangeService,sharedEmailAddress,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdMutationError = unknown

    /**
 * @summary Delete allowed user for sendAs
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeSharedAccountSendAsOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/sendAs/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/sendAs/${allowedAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdQueryKey(organizationName,exchangeService,sharedEmailAddress,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId(organizationName,exchangeService,sharedEmailAddress,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && sharedEmailAddress && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdQueryOptions(organizationName,exchangeService,sharedEmailAddress,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary SendOnBehalfTo granted users for this shared mailbox
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/sendOnBehalfTo`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToQueryKey = (organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/sendOnBehalfTo`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToQueryKey(organizationName,exchangeService,sharedEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo(organizationName,exchangeService,sharedEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && sharedEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary SendOnBehalfTo granted users for this shared mailbox
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToQueryOptions(organizationName,exchangeService,sharedEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow another user to Send On Behalf To mails from this shared mailbox
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToBody: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/sendOnBehalfTo`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToBody, signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, {organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToBody}> = (props) => {
          const {organizationName,exchangeService,sharedEmailAddress,data} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo(organizationName,exchangeService,sharedEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>>
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToMutationBody = PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToBody
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToMutationError = unknown

    /**
 * @summary Allow another user to Send On Behalf To mails from this shared mailbox
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfTo>>,
        TError,
        {organizationName: string;exchangeService: string;sharedEmailAddress: string;data: PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToBody},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete allowed user for SendOnBehalfTo
 */
export const deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/sendOnBehalfTo/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, {organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number}> = (props) => {
          const {organizationName,exchangeService,sharedEmailAddress,allowedAccountId} = props ?? {};

          return  deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId(organizationName,exchangeService,sharedEmailAddress,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>>
    
    export type DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdMutationError = unknown

    /**
 * @summary Delete allowed user for SendOnBehalfTo
 */
export const useDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError,{organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>,
        TError,
        {organizationName: string;exchangeService: string;sharedEmailAddress: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeExchangeSharedAccountSendOnBehalfToOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/sendOnBehalfTo/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdQueryKey = (organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/sendOnBehalfTo/${allowedAccountId}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdQueryKey(organizationName,exchangeService,sharedEmailAddress,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId(organizationName,exchangeService,sharedEmailAddress,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && sharedEmailAddress && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdQueryOptions(organizationName,exchangeService,sharedEmailAddress,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Pending task for this mailbox
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/tasks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksQueryKey = (organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/tasks`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksQueryKey(organizationName,exchangeService,sharedEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks(organizationName,exchangeService,sharedEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && sharedEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Pending task for this mailbox
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksQueryOptions(organizationName,exchangeService,sharedEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId = (
    organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/tasks/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksIdQueryKey = (organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    id: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccount/${sharedEmailAddress}/tasks/${id}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksIdQueryKey(organizationName,exchangeService,sharedEmailAddress,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId(organizationName,exchangeService,sharedEmailAddress,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && sharedEmailAddress && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    sharedEmailAddress: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksIdQueryOptions(organizationName,exchangeService,sharedEmailAddress,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get shared account quota usage in total available space
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeSharedAccountQuotaOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/sharedAccountQuota`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuotaQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/sharedAccountQuota`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuotaQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuotaQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuotaQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuotaQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get shared account quota usage in total available space
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuotaQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Pending actions
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceTask = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceTaskQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/task`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceTaskQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceTaskQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceTask(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceTaskQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceTask<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceTask<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceTask<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Pending actions
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceTask<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceTaskQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailExchangeOrganizationNameServiceExchangeServiceTaskId = (
    organizationName: string,
    exchangeService: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/task/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailExchangeOrganizationNameServiceExchangeServiceTaskIdQueryKey = (organizationName: string,
    exchangeService: string,
    id: number,) => {
    return [`/email/exchange/${organizationName}/service/${exchangeService}/task/${id}`] as const;
    }

    
export const getGetEmailExchangeOrganizationNameServiceExchangeServiceTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailExchangeOrganizationNameServiceExchangeServiceTaskIdQueryKey(organizationName,exchangeService,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>> = ({ signal }) => getEmailExchangeOrganizationNameServiceExchangeServiceTaskId(organizationName,exchangeService,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailExchangeOrganizationNameServiceExchangeServiceTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>>
export type GetEmailExchangeOrganizationNameServiceExchangeServiceTaskIdQueryError = unknown


export function useGetEmailExchangeOrganizationNameServiceExchangeServiceTaskId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceTaskId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailExchangeOrganizationNameServiceExchangeServiceTaskId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailExchangeOrganizationNameServiceExchangeServiceTaskId<TData = Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailExchangeOrganizationNameServiceExchangeServiceTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailExchangeOrganizationNameServiceExchangeServiceTaskIdQueryOptions(organizationName,exchangeService,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update device list
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceList = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailExchangeTaskOVH>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/updateDeviceList`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceListMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceList>>, TError,{organizationName: string;exchangeService: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceList>>, TError,{organizationName: string;exchangeService: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceList>>, {organizationName: string;exchangeService: string}> = (props) => {
          const {organizationName,exchangeService} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceList(organizationName,exchangeService,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceListMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceList>>>
    
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceListMutationError = unknown

    /**
 * @summary Update device list
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceList = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceList>>, TError,{organizationName: string;exchangeService: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceList>>,
        TError,
        {organizationName: string;exchangeService: string},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceListMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update spam and virus flags on all active accounts
 */
export const postEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccounts = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/exchange/${organizationName}/service/${exchangeService}/updateFlagsOnAllAccounts`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccountsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccounts>>, TError,{organizationName: string;exchangeService: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccounts>>, TError,{organizationName: string;exchangeService: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccounts>>, {organizationName: string;exchangeService: string}> = (props) => {
          const {organizationName,exchangeService} = props ?? {};

          return  postEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccounts(organizationName,exchangeService,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccountsMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccounts>>>
    
    export type PostEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccountsMutationError = unknown

    /**
 * @summary Update spam and virus flags on all active accounts
 */
export const usePostEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccounts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccounts>>, TError,{organizationName: string;exchangeService: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccounts>>,
        TError,
        {organizationName: string;exchangeService: string},
        TContext
      > => {

      const mutationOptions = getPostEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccountsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

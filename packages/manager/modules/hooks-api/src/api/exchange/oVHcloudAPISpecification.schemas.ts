/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToBody = {
  /** Account id to allow to send On Behalf To mails from this shared mailbox */
  allowAccountId: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsBody = {
  /** Account id to allow to send mails from this shared mailbox */
  allowAccountId: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessBody = {
  /** User to give full access */
  allowedAccountId: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasBody = {
  /** Alias */
  alias: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountBody = {
  /** Shared account display name */
  displayName?: string;
  /** Shared account first name */
  firstName?: string;
  /** Hide the shared account in Global Address List */
  hiddenFromGAL?: boolean;
  /** Shared account initials */
  initials?: string;
  /** Shared account last name */
  lastName?: string;
  /** Enable mailing filtrering */
  mailingFilter?: EmailExchangeMailingFilterEnumOVH[];
  /** Shared account maximum size */
  quota: number;
  /** Shared account email address */
  sharedEmailAddress: string;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountParams = {
/**
 * Filter the value of sharedEmailAddress property (like)
 */
sharedEmailAddress?: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationBody = {
  /** New password */
  password?: string;
  /** The SmartHostAuthMechanism parameter specifies the smart host authentication mechanism to use for authentication with a remote server */
  smartHostAuthMechanism?: EmailExchangeSmartHostAuthMechanismEnumOVH;
  /** User that will be used to connect to smartHost */
  user?: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorBody = {
  /** Name of your send connector */
  displayName: string;
  /** Maximum message size allowd on that send connector */
  maxSendSize?: number;
  /** Password that will be used to connect to smartHost */
  password?: string;
  /** Port adress that will be used to all e-mails send via this send connector */
  port?: number;
  /** All messages sent through this connector will be transmitted using TLS */
  requireTLS?: boolean;
  /** Relay domain address that will be used to all e-mails send via this send connector */
  smartHost: string;
  /** Authentication mechanism to use for authentication with a smart host */
  smartHostAuthMechanism?: EmailExchangeSmartHostAuthMechanismEnumOVH;
  /** User that will be used to connect to smartHost */
  user?: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateBody = {
  /** delegate's account id */
  allowedAccountId: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountBody = {
  /** meeting organizer's name is used as the subject of the meeting request */
  addOrganizerToSubject?: boolean;
  /** resource can be scheduled by more than one person during the same time period */
  allowConflict?: boolean;
  /** maximum number of days in advance that the resource can be reserved */
  bookingWindow?: number;
  /** number of the same equipment or capacity of a room */
  capacity: number;
  /** Company name */
  company?: string;
  /** remove any text in the message body of incoming meeting requests on resourceAccount */
  deleteComments?: boolean;
  /** remove email subject of incoming meeting requests on resourceAccount */
  deleteSubject?: boolean;
  /** resource account display name */
  displayName?: string;
  /** resource location */
  location?: string;
  /** maximum duration in minutes for meeting requests */
  maximumDuration?: number;
  /** resource address */
  resourceEmailAddress: string;
  /** granted right on a calendar of that resourceAccount */
  showMeetingDetails?: EmailExchangeShowMeetingDetailsEnumOVH;
  /** type of your reservation */
  type: EmailExchangeResourceTypeEnumOVH;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountParams = {
/**
 * Filter the value of company property (like)
 */
company?: string;
/**
 * Filter the value of resourceEmailAddress property (like)
 */
resourceEmailAddress?: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLBody = {
  /** DCV email require for order ssl varification process, one of the options for ownership validation */
  dcv?: string;
  /** Use CNAME for Domain Control Validation, one of the options for ownership validation */
  useCname?: boolean;
  /** Set required CNAME record automatically if the domain is managed by OVH */
  useDnsAssist?: boolean;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionBody = {
  /** Access rights to be set for the account */
  accessRights: EmailExchangePublicFolderRightTypeEnumOVH;
  /** Account id to have access to public folder */
  allowedAccountId: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderBody = {
  /** Access right for the guest users */
  anonymousPermission?: EmailExchangePublicFolderRightTypeEnumOVH;
  /** Default access right */
  defaultPermission?: EmailExchangePublicFolderRightTypeEnumOVH;
  /** Path for public folder */
  path: string;
  /** Quota for public folder in MB */
  quota: number;
  /** Type for public folder */
  type: EmailExchangePublicFolderTypeEnumOVH;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderParams = {
/**
 * Filter the value of path property (like)
 */
path?: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationBody = {
  /** Exchange Account Id */
  notifiedAccountId: number;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityParams = {
/**
 * Language version of outlook
 */
outlookLanguage?: EmailExchangeLanguageEnumOVH;
/**
 * OS version of outlook
 */
outlookVersion?: EmailExchangeOutlookVersionEnumOVH;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToBody = {
  /** Account id to allow to send as mails from this mailing list */
  allowAccountId: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsBody = {
  /** Account id to allow to send as mails from this mailing list */
  allowAccountId: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactBody = {
  /** Member account id */
  memberAccountId?: number;
  /** Member contact id */
  memberContactId?: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountBody = {
  /** Member account id */
  memberAccountId?: number;
  /** Member contact id */
  memberContactId?: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountBody = {
  /** Manager account id */
  managerAccountId: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasBody = {
  /** Alias */
  alias: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListBody = {
  /** Company name */
  company?: string;
  /** Depart restriction policy */
  departRestriction: EmailExchangeMailingListDepartRestrictionEnumOVH;
  /** Name displayed in Global Access List */
  displayName?: string;
  /** If true mailing list is hiddend in Global Address List */
  hiddenFromGAL?: boolean;
  /** Join restriction policy */
  joinRestriction: EmailExchangeMailingListJoinRestrictionEnumOVH;
  /** The mailing list address */
  mailingListAddress: string;
  /** Maximum receive email size in MB */
  maxReceiveSize?: number;
  /** Maximum send email size in MB */
  maxSendSize?: number;
  /** If true sender has to authenticate */
  senderAuthentification?: boolean;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListParams = {
/**
 * Filter the value of company property (like)
 */
company?: string;
/**
 * Filter the value of mailingListAddress property (like)
 */
mailingListAddress?: string;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionParams = {
/**
 * Filter on a specific kind (e.g., audit)
 */
kind?: string;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseParams = {
/**
 * Get active licenses since date 
 */
fromDate?: string;
/**
 * License type
 */
license?: EmailExchangeOvhLicenceEnumOVH;
/**
 * Get active licenses until date
 */
toDate?: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordBody = {
  /** new password */
  password: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserBody = {
  /** password for the user */
  password: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactBody = {
  /** Contact display name */
  displayName?: string;
  /** Contact email address */
  externalEmailAddress: string;
  /** Contact first name */
  firstName?: string;
  /** Hide the contact in Global Address List */
  hiddenFromGAL?: boolean;
  /** Contact initials */
  initials?: string;
  /** Contact last name */
  lastName?: string;
  /** Indicates to which organization this newly created external contact will belongs (Exchange 2010 only) */
  organization2010?: string;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactParams = {
/**
 * Filter the value of displayName property (like)
 */
displayName?: string;
/**
 * Filter the value of externalEmailAddress property (like)
 */
externalEmailAddress?: string;
/**
 * Filter the value of firstName property (like)
 */
firstName?: string;
/**
 * Filter the value of id property (like)
 */
id?: number;
/**
 * Filter the value of lastName property (like)
 */
lastName?: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimBody = {
  /** Enable DKIM automatically after DKIM configuration */
  autoEnableDKIM?: boolean;
  /** If you host domain in OVH we can configure dkim dns record automatically */
  configureDkim?: boolean;
  /** selector name for DKIM */
  selectorName: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerBody = {
  /** Signature, added at the bottom of your organization emails */
  content: string;
  /** Activate the disclaimer only for external emails */
  outsideOnly?: boolean;
};

export type PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRBody = {
  /** Default Sender base routing destination domain applied on all new created accounts */
  sbrDefault?: string;
  /** Default Sender Connector id applied on all new created accounts */
  sendConnectorIdDefault?: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceDomainBody = {
  /** Enable DKIM automatically after DKIM configuration */
  autoEnableDKIM?: boolean;
  /** If you host domain in OVH we can configure autodiscover record automatically */
  configureAutodiscover?: boolean;
  /** Launch configuration of DKIM automatically for the domain */
  configureDKIM?: boolean;
  /** If you host domain in OVH we can configure mx record automatically */
  configureMx?: boolean;
  /** Enable automatic SPF record (only for domains hosted by OVHcloud) */
  configureSPF?: boolean;
  /** This newly created domain will be an organization (Exchange 2010 only) */
  main?: boolean;
  /** If specified, emails to not existing address will be redirected to that domain */
  mxRelay?: string;
  /** Domain to install on server */
  name: string;
  /** If specified, indicates which organization this newly created domain will be part of (Exchange 2010 only) */
  organization2010?: string;
  /** Default Sender base routing destination domain applied on all new created accounts */
  sbrDefault?: string;
  /** Default Sender Connector id applied on all new created accounts */
  sendConnectorIdDefault?: number;
  /** Type of domain that You want to install */
  type: EmailExchangeDomainTypeEnumOVH;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServiceDomainParams = {
/**
 * Filter the value of main property (like)
 */
main?: boolean;
/**
 * Filter the value of state property (=)
 */
state?: EmailExchangeObjectStateEnumOVH;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceParams = {
/**
 * Filter the value of IMEI property (like)
 */
IMEI?: string;
/**
 * Filter the value of deviceState property (=)
 */
deviceState?: EmailExchangeDeviceActiveSyncStateEnumOVH;
/**
 * Filter the value of identity property (like)
 */
identity?: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationBody = {
  /** field use for isolation */
  isolationField: EmailExchangeOvhCustomIsolationFieldEnumOVH;
  /** value used for isolation */
  isolationValue: string;
  /** display name of isolation */
  name: string;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationParams = {
/**
 * Filter the value of isolationField property (=)
 */
isolationField?: EmailExchangeOvhCustomIsolationFieldEnumOVH;
/**
 * Filter the value of isolationValue property (like)
 */
isolationValue?: string;
/**
 * Filter the value of name property (like)
 */
name?: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameBody = {
  /** Email address used for Domain Control Validation, one of the options for ownership validation */
  dcvEmail?: string;
  /** FQDN of SSL hostname */
  hostname: string;
  /** Use CNAME for Domain Control Validation, one of the options for ownership validation */
  useCname?: boolean;
  /** Set required Exchange DNS fields automatically if the hostname domain is managed by OVH */
  useDnsAssist: boolean;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpBody = {
  /** display name information */
  displayName?: string;
  /** Webmail,outlook,web Service(EWS) and active sync access (port 443) */
  HTTPS?: boolean;
  /** IMAP access (port 143) */
  IMAP?: boolean;
  /** IMAPS access (port 993) */
  IMAPS?: boolean;
  /** Authorized IP */
  IP: Ipv4BlockOVH;
  /** POP access (port 110) */
  POP?: boolean;
  /** POPS access (port 995) */
  POPS?: boolean;
  /** SMTP access (port 25) */
  SMTP?: boolean;
  /** SMTPS access (port 587) */
  SMTPS?: boolean;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyParams = {
/**
 * Filter the value of blockLegacyAuthActiveSync property (=)
 */
blockLegacyAuthActiveSync?: boolean;
/**
 * Filter the value of blockLegacyAuthAutodiscover property (=)
 */
blockLegacyAuthAutodiscover?: boolean;
/**
 * Filter the value of blockLegacyAuthImap property (=)
 */
blockLegacyAuthImap?: boolean;
/**
 * Filter the value of blockLegacyAuthMapi property (=)
 */
blockLegacyAuthMapi?: boolean;
/**
 * Filter the value of blockLegacyAuthOfflineAddressBook property (=)
 */
blockLegacyAuthOfflineAddressBook?: boolean;
/**
 * Filter the value of blockLegacyAuthPop property (=)
 */
blockLegacyAuthPop?: boolean;
/**
 * Filter the value of blockLegacyAuthWebServices property (=)
 */
blockLegacyAuthWebServices?: boolean;
/**
 * Filter the value of blockModernAuthActiveSync property (=)
 */
blockModernAuthActiveSync?: boolean;
/**
 * Filter the value of blockModernAuthAutodiscover property (=)
 */
blockModernAuthAutodiscover?: boolean;
/**
 * Filter the value of blockModernAuthImap property (=)
 */
blockModernAuthImap?: boolean;
/**
 * Filter the value of blockModernAuthMapi property (=)
 */
blockModernAuthMapi?: boolean;
/**
 * Filter the value of blockModernAuthOfflineAddressBook property (=)
 */
blockModernAuthOfflineAddressBook?: boolean;
/**
 * Filter the value of blockModernAuthPop property (=)
 */
blockModernAuthPop?: boolean;
/**
 * Filter the value of blockModernAuthWebServices property (=)
 */
blockModernAuthWebServices?: boolean;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToBody = {
  /** Account id to allow to send On Behalf To mails from this mailbox */
  allowAccountId: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsBody = {
  /** Account id to allow to send mails from this mailbox */
  allowAccountId: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLBody = {
  /** Language of outlook */
  language: EmailExchangeLanguageEnumOVH;
  /** Version of outlook */
  version: EmailExchangeOutlookVersionEnumOVH;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessBody = {
  /** User to give full access */
  allowedAccountId: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsBody = {
  /** Account password */
  password: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordBody = {
  /** new password */
  password: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveBody = {
  /** Archive mailbox quota (if not provided mailbox quota will be taken) */
  quota?: number;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasBody = {
  /** Alias */
  alias: string;
};

export type PostEmailExchangeOrganizationNameServiceExchangeServiceAccountBody = {
  /** ID of the authentication policy */
  authenticationPolicyId?: number;
  /** City */
  city?: string;
  /** Company name */
  company?: string;
  /** Country code */
  countryCode?: EmailExchangeCountryCodeEnumOVH;
  /** Description */
  description?: string;
  /** Account display name */
  displayName?: string;
  /** Email domain */
  domain: string;
  /** Fax number */
  fax?: PhoneNumberOVH;
  /** Account first name */
  firstName?: string;
  /** Email address to forward email */
  forwardingEmail?: string;
  /** Hide the account in Global Address List */
  hiddenFromGAL?: boolean;
  /** Account initials */
  initials?: string;
  /** Job department */
  jobDepartment?: string;
  /** Job title */
  jobTitle?: string;
  /** Account last name */
  lastName?: string;
  /** Exchange license */
  license: EmailExchangeOvhLicenceEnumOVH;
  /** Litigation status */
  litigation?: boolean;
  /** Litigation length in days, 0 means unlimited */
  litigationPeriod?: number;
  /** Account login */
  login: string;
  /** Enable mailing filtrering */
  mailingFilter?: EmailExchangeMailingFilterEnumOVH[];
  /** Email display as sender */
  mailSenderDisplay?: string;
  /** Mobile phone number */
  mobile?: PhoneNumberOVH;
  /** office */
  office?: string;
  /** Buy outlook license */
  outlookLicense?: boolean;
  /** Account password */
  password: string;
  /** Phone Number */
  phone?: PhoneNumberOVH;
  /** Postal code */
  postalCode?: string;
  /** Quota specified in GB. Check pricing table before use */
  quota?: number;
  /** Region */
  region?: string;
  /** SAM account name (exchange 2010 login) */
  SAMAccountName?: string;
  /** Sender base routing destination domain */
  sbrDestination?: string;
  /** Send connector id used to send mails when SBR is defined */
  sendConnectorId?: number;
  /** Antispam and Antivirus configuration */
  spamAndVirusConfiguration?: EmailExchangeSpamAndVirusConfigurationOVH;
  /** Store copy of email when forward is enable */
  storeCopyOfEmail?: boolean;
  /** Street address */
  streetAddress?: string;
};

export type GetEmailExchangeOrganizationNameServiceExchangeServiceAccountParams = {
/**
 * Filter the value of accountLicense property (=)
 */
accountLicense?: EmailExchangeOvhLicenceEnumOVH;
/**
 * Filter the value of company property (like)
 */
company?: string;
/**
 * Filter the value of id property (like)
 */
id?: number;
/**
 * Filter the value of primaryEmailAddress property (like)
 */
primaryEmailAddress?: string;
};

export type GetEmailExchangeOrganizationNameServiceParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  automaticV2024: 'automaticV2024',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Spam and Antyvirus configuration
 */
export interface EmailExchangeSpamAndVirusConfigurationOVH {
  /** Check DKIM of message */
  checkDKIM?: boolean;
  /** Check SPF of message */
  checkSPF?: boolean;
  /** If message is a spam delete it */
  deleteSpam?: boolean;
  /** If message is a virus delete it */
  deleteVirus?: boolean;
  /** If message is a spam or virus put in junk. Overridden by deleteSpam or deleteVirus */
  putInJunk?: boolean;
  /** If message is a spam change its subject */
  tagSpam?: boolean;
  /** If message is a virus change its subject */
  tagVirus?: boolean;
}

/**
 * Smart host authentication mechanism
 */
export type EmailExchangeSmartHostAuthMechanismEnumOVH = typeof EmailExchangeSmartHostAuthMechanismEnumOVH[keyof typeof EmailExchangeSmartHostAuthMechanismEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeSmartHostAuthMechanismEnumOVH = {
  basicAuth: 'basicAuth',
  basicAuthRequireTLS: 'basicAuthRequireTLS',
  none: 'none',
} as const;

/**
 * Exchange shared mailbox
 */
export interface EmailExchangeSharedAccountOVH {
  /**
   * Creation date
   * @nullable
   */
  readonly creationDate?: string | null;
  /**
   * Shared mailbox usage
   * @nullable
   */
  readonly currentUsage?: number | null;
  /**
   * Shared account display name
   * @nullable
   */
  displayName?: string | null;
  /**
   * Shared account first name
   * @nullable
   */
  firstName?: string | null;
  /** Hide shared account in Global Address List */
  hiddenFromGAL?: boolean;
  /** Shared account id */
  readonly id?: number;
  /**
   * Shared account initials
   * @nullable
   */
  initials?: string | null;
  /**
   * Last logoff
   * @nullable
   */
  readonly lastLogoffDate?: string | null;
  /**
   * Last logon
   * @nullable
   */
  readonly lastLogonDate?: string | null;
  /**
   * Shared account last name
   * @nullable
   */
  lastName?: string | null;
  /**
   * Enable or disable anti-virus and anti-spam
   * @nullable
   */
  mailingFilter?: EmailExchangeMailingFilterEnumOVH[] | null;
  /** Shared account maximum size */
  quota?: number;
  /** Default email for this shared mailbox */
  sharedEmailAddress?: string;
  /** Account was sending spam */
  readonly spamDetected?: boolean;
  /**
   * Ticket number of spam detection
   * @nullable
   */
  readonly spamTicketNumber?: number | null;
  /** Shared account state */
  readonly state?: EmailExchangeObjectStateEnumOVH;
  /** Pending task for this shared account */
  readonly taskPendingId?: number;
}

/**
 * Exchange Send Connector
 */
export interface EmailExchangeSendConnectorOVH {
  /** Creation date */
  readonly creationDate?: string;
  /** Name of your send connector */
  displayName?: string;
  /**
   * Id of this send connector
   * @nullable
   */
  readonly id?: number | null;
  /**
   * Last update date
   * @nullable
   */
  readonly lastUpdateDate?: string | null;
  /** Maximum send size in MB */
  maxSendSize?: number;
  /** Port adress that will be used to all e-mails send via this send connector */
  port?: number;
  /** All messages sent through this connector will be transmitted using TLS */
  requireTLS?: boolean;
  /** Relay domain address that will be used to all e-mails send via this send connector */
  smartHost?: string;
  /** Authentication mechanism to use for authentication with a smart host */
  readonly smartHostAuthMechanism?: EmailExchangeSmartHostAuthMechanismEnumOVH;
  /** Send connector state */
  readonly state?: EmailExchangeObjectStateEnumOVH;
  /**
   * Pending task for this send connector
   * @nullable
   */
  readonly taskPendingId?: number | null;
}

/**
 * Exchange resource account
 */
export interface EmailExchangeResourceAccountOVH {
  /** meeting organizer's name is used as the subject of the meeting request */
  addOrganizerToSubject?: boolean;
  /** resource can be scheduled by more than one person during the same time period */
  allowConflict?: boolean;
  /** maximum number of days in advance that the resource can be reserved */
  bookingWindow?: number;
  /** number of the same equipment or capacity of a room */
  capacity?: number;
  /**
   * Company name
   * @nullable
   */
  company?: string | null;
  /**
   * Creation date
   * @nullable
   */
  readonly creationDate?: string | null;
  /** remove any text in the message body of incoming meeting requests on resourceAccount */
  deleteComments?: boolean;
  /** remove email subject of incoming meeting requests on resourceAccount */
  deleteSubject?: boolean;
  /** name of resource */
  displayName?: string;
  /** resource location name */
  location?: string;
  /** maximum duration in minutes for meeting requests */
  maximumDuration?: number;
  /** resource as email */
  resourceEmailAddress?: string;
  /** granted right on a calendar of that resourceAccount */
  showMeetingDetails?: EmailExchangeShowMeetingDetailsEnumOVH;
  /** account state */
  readonly state?: EmailExchangeObjectStateEnumOVH;
  /** task pending id */
  readonly taskPendingId?: number;
  /** resource type */
  readonly type?: EmailExchangeResourceTypeEnumOVH;
}

/**
 * Renew period
 */
export type EmailExchangeRenewPeriodEnumOVH = typeof EmailExchangeRenewPeriodEnumOVH[keyof typeof EmailExchangeRenewPeriodEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeRenewPeriodEnumOVH = {
  monthly: 'monthly',
  yearly: 'yearly',
} as const;

/**
 * Public folder right type
 */
export type EmailExchangePublicFolderRightTypeEnumOVH = typeof EmailExchangePublicFolderRightTypeEnumOVH[keyof typeof EmailExchangePublicFolderRightTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangePublicFolderRightTypeEnumOVH = {
  editor: 'editor',
  none: 'none',
  reviewer: 'reviewer',
} as const;

/**
 * Exchange organization public folder
 */
export interface EmailExchangePublicFolderOVH {
  /** Access right for the guest users */
  anonymousPermission?: EmailExchangePublicFolderRightTypeEnumOVH;
  /**
   * Creation date
   * @nullable
   */
  readonly creationDate?: string | null;
  /** Default access right */
  defaultPermission?: EmailExchangePublicFolderRightTypeEnumOVH;
  /**
   * If true, this public folder has subfolders
   * @nullable
   */
  readonly hasSubFolders?: boolean | null;
  /**
   * Number of items in public folder
   * @nullable
   */
  readonly itemCount?: number | null;
  /**
   * Time for which public folder was accessed for the last time
   * @nullable
   */
  readonly lastAccessTime?: string | null;
  /**
   * Time for which public folder was modified for the last time 
   * @nullable
   */
  readonly lastModificationTime?: string | null;
  /**
   * Time for which public folder was accessed for the last time by the user
   * @nullable
   */
  readonly lastUserAccessTime?: string | null;
  /**
   * Time for which public folder was modified for the last time by the user
   * @nullable
   */
  readonly lastUserModificationTime?: string | null;
  /** Path for public folder */
  readonly path?: string;
  /** Quota for public folder in MB */
  quota?: number;
  readonly state?: EmailExchangeObjectStateEnumOVH;
  /** task pending id */
  readonly taskPendingId?: number;
  /**
   * Sum of all items in public folder in MB
   * @nullable
   */
  readonly totalItemSize?: number | null;
  /** Type for public folder */
  readonly type?: EmailExchangePublicFolderTypeEnumOVH;
}

/**
 * Password policy used for impersonated account
 */
export interface EmailExchangePasswordPolicyOVH {
  /** enable policy for strong and secure passwords */
  complexityEnabled?: boolean;
  /** number of minutes account will remain locked if it occurs */
  lockoutDuration?: number;
  /** number of attempts before account is locked */
  lockoutThreshold?: number;
  /** maximum number of days that account's password is valid before expiration */
  maxPasswordAge?: number;
  /** minimum number of days before being able to change account's password */
  minPasswordAge?: number;
  /** minimum number of characters password must contain */
  minPasswordLength?: number;
  /** number of historical passwords that cannot be reused */
  passwordHistoryCount?: number;
}

/**
 * Mailing list
 */
export interface EmailExchangeMailingListOVH {
  /**
   * Company name
   * @nullable
   */
  company?: string | null;
  /** Creation date */
  readonly creationDate?: string;
  /** Depart restriction policy */
  departRestriction?: EmailExchangeMailingListDepartRestrictionEnumOVH;
  /**
   * Name displayed in Global Access List
   * @nullable
   */
  displayName?: string | null;
  /** If true mailing list is hiddend in Global Address List */
  hiddenFromGAL?: boolean;
  /** Join restriction policy */
  joinRestriction?: EmailExchangeMailingListJoinRestrictionEnumOVH;
  /**
   * Update date
   * @nullable
   */
  readonly lastUpdateDate?: string | null;
  /** The mailing list address */
  mailingListAddress?: string;
  /**
   * Maximum receive email size in MB
   * @nullable
   */
  maxReceiveSize?: number | null;
  /**
   * Maximum send email size in MB
   * @nullable
   */
  maxSendSize?: number | null;
  /** If true sender has to authenticate */
  senderAuthentification?: boolean;
  /** Account was sending spam */
  readonly spamDetected?: boolean;
  /**
   * Ticket number of spam detection
   * @nullable
   */
  readonly spamTicketNumber?: number | null;
  /** Mailing list state */
  readonly state?: EmailExchangeObjectStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
}

/**
 * Get users authorized to Send On Behalf To mails from this shared mailbox
 */
export interface EmailExchangeExchangeSharedAccountSendOnBehalfToOVH {
  /** Account id to give send on behalf to */
  readonly allowedAccountId?: number;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Users authorized to send mails from this shared mailbox
 */
export interface EmailExchangeExchangeSharedAccountSendAsOVH {
  /** Account id to give send as */
  readonly allowedAccountId?: number;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Users having full access on this shared mailbox
 */
export interface EmailExchangeExchangeSharedAccountFullAccessOVH {
  /** Account id to give full access */
  readonly allowedAccountId?: number;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Aliases on this shared mailbox
 */
export interface EmailExchangeExchangeSharedAccountAliasOVH {
  /** Alias */
  readonly alias?: string;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Protocol access policy for this Exchange service
 */
export interface EmailExchangeExchangeServiceProtocolOVH {
  /** ActiveSync protocol enabled on this Exchange service */
  activeSync?: boolean;
  /** ActiveSync policy to apply at device's first connection */
  activeSyncPolicy?: EmailExchangeActiveSyncPolicyEnumOVH;
  /** Creation date */
  readonly creationDate?: string;
  /** IMAP protocol enabled on this Exchange service */
  IMAP?: boolean;
  /**
   * Last update date
   * @nullable
   */
  readonly lastUpdate?: string | null;
  /** POP protocol enabled on this Exchange service */
  POP?: boolean;
  /** Pending task id */
  readonly taskPendingId?: number;
  /** Web mail protocol enabled on this Exchange service */
  webMail?: boolean;
}

/**
 * Get the list of your ActiveSync devices registered on this Exchange service
 */
export interface EmailExchangeExchangeServiceDeviceOVH {
  /** Creation date */
  readonly creationDate?: string;
  /** Device Id */
  readonly deviceId?: string;
  /** Model device */
  readonly deviceModel?: string;
  /** Device State */
  deviceState?: EmailExchangeDeviceActiveSyncStateEnumOVH;
  /** user guid */
  readonly guid?: string;
  /** Exchange identity */
  readonly identity?: string;
  /** International Mobile Equipment Identity */
  readonly IMEI?: string;
  /**
   * Last update date
   * @nullable
   */
  readonly lastUpdate?: string | null;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Get authorized IPs for POP(s),IMAP(s), SMTP(s) and HTTP(s)
 */
export interface EmailExchangeExchangeServiceAuthorizedIpOVH {
  /** Creation date */
  readonly creationDate?: string;
  /** display name */
  displayName?: string;
  /** Webmail,outlook,web Service(EWS) and active sync access (port 443) */
  HTTPS?: boolean;
  /** IMAP access (port 143) */
  IMAP?: boolean;
  /** IMAPS access (port 993) */
  IMAPS?: boolean;
  /** Allowed IP */
  readonly ip?: Ipv4BlockOVH;
  /** POP access (port 110) */
  POP?: boolean;
  /** POPS access (port 995) */
  POPS?: boolean;
  /** SMTP access (port 25) */
  SMTP?: boolean;
  /** SMTPS access (port 587) */
  SMTPS?: boolean;
  /** Authorized IP status */
  readonly status?: EmailExchangeAuthorizedIpStatusEnumOVH;
  /**
   * Last update date
   * @nullable
   */
  readonly updateDate?: string | null;
}

/**
 * Get authentication policy for protocols
 */
export interface EmailExchangeExchangeServiceAuthenticationPolicyOVH {
  /** Block legacy authentication on ActiveSync */
  readonly blockLegacyAuthActiveSync?: boolean;
  /** Block legacy authentication on Autodiscover */
  readonly blockLegacyAuthAutodiscover?: boolean;
  /** Block legacy authentication on Imap */
  readonly blockLegacyAuthImap?: boolean;
  /** Block legacy authentication on Mapi */
  readonly blockLegacyAuthMapi?: boolean;
  /** Block legacy authentication on Offline Address Book */
  readonly blockLegacyAuthOfflineAddressBook?: boolean;
  /** Block legacy authentication on Pop */
  readonly blockLegacyAuthPop?: boolean;
  /** Block legacy authentication on Web Services */
  readonly blockLegacyAuthWebServices?: boolean;
  /** Block modern authentication on ActiveSync */
  readonly blockModernAuthActiveSync?: boolean;
  /** Block modern authentication on Autodiscover */
  readonly blockModernAuthAutodiscover?: boolean;
  /** Block modern authentication on Imap */
  readonly blockModernAuthImap?: boolean;
  /** Block modern authentication on Mapi */
  readonly blockModernAuthMapi?: boolean;
  /** Block modern authentication on Offline Address Book */
  readonly blockModernAuthOfflineAddressBook?: boolean;
  /** Block modern authentication on Pop */
  readonly blockModernAuthPop?: boolean;
  /** Block modern authentication on Web Services */
  readonly blockModernAuthWebServices?: boolean;
  /** Authentication policy id */
  readonly id?: number;
}

/**
 * Get email addresses subscribed to ActiveSync quarantine notifications
 */
export interface EmailExchangeExchangeServiceActiveSyncNotificationOVH {
  /** Creation date */
  readonly creationDate?: string;
  /** Notified Account Id */
  readonly notifiedAccountId?: number;
  /** Primary email address for notified account */
  readonly primaryEmailAddress?: string;
  /** Email state */
  readonly state?: EmailExchangeActiveSyncNotificationStateEnumOVH;
}

/**
 * Resource accounts delegates
 */
export interface EmailExchangeExchangeResourceAccountDelegateOVH {
  /** delegate's account id */
  readonly allowedAccountId?: number;
  /**
   * Creation date
   * @nullable
   */
  readonly creationDate?: string | null;
  /** Delegate account primaryEmailAddress */
  readonly delegateEmailAddress?: string;
  /** task pending id */
  readonly taskPendingId?: number;
}

/**
 * Exchange organization public folder permission
 */
export interface EmailExchangeExchangePublicFolderPermissionOVH {
  /** Access right set for the account */
  accessRights?: EmailExchangePublicFolderRightTypeEnumOVH;
  /** Account id */
  readonly allowedAccountId?: number;
  /** Creation date */
  readonly creationDate?: string;
  readonly state?: EmailExchangeObjectStateEnumOVH;
  /** task pending id */
  readonly taskPendingId?: number;
}

/**
 * Get aliases on this mailingList
 */
export interface EmailExchangeExchangeMailingListAliasOVH {
  /** Alias */
  readonly alias?: string;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * External contact for this exchange service
 */
export interface EmailExchangeExchangeExternalContactOVH {
  /** Creation date */
  readonly creationDate?: string;
  /** Contact display name */
  displayName?: string;
  /** Contact email */
  externalEmailAddress?: string;
  /**
   * Contact first name
   * @nullable
   */
  firstName?: string | null;
  /** Hide the contact in Global Address List */
  hiddenFromGAL?: boolean;
  /** Contact id */
  readonly id?: number;
  /**
   * Contact initals
   * @nullable
   */
  initials?: string | null;
  /**
   * Contact last name
   * @nullable
   */
  lastName?: string | null;
  /**
   * If specified, indicates to which organization this external contact belongs (Exchange 2010 only)
   * @nullable
   */
  readonly organization2010?: string | null;
  /** Contact state */
  readonly state?: EmailExchangeObjectStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
}

/**
 * Get users authorized to Send On Behalf To mails from this mailing list
 */
export interface EmailExchangeExchangeDistributionGroupSendOnBehalfToOVH {
  /** Account id to give send on behalf to */
  readonly allowedAccountId?: number;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Get users authorized to Send On Behalf To mails from this mailbox
 */
export interface EmailExchangeExchangeDistributionGroupSendAsOVH {
  /** Account id to give send on behalf to */
  readonly allowedAccountId?: number;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Mailing list members
 */
export interface EmailExchangeExchangeDistributionGroupMemberOVH {
  /** Creation date */
  readonly creationDate?: string;
  /**
   * Member account id
   * @nullable
   */
  readonly memberAccountId?: number | null;
  /**
   * Member account id
   * @nullable
   */
  readonly memberContactId?: number | null;
  /** Member account primaryEmailAddress */
  readonly memberEmailAddress?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Mailing list managers
 */
export interface EmailExchangeExchangeDistributionGroupManagerOVH {
  /** Creation date */
  readonly creationDate?: string;
  /** Manager account id */
  readonly managerAccountId?: number;
  /** Member account primaryEmailAddress */
  readonly managerEmailAddress?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * custom exchange isolation
 */
export interface EmailExchangeExchangeCustomIsolationOVH {
  /** Creation date */
  readonly creationDate?: string;
  /** Field used for isolation */
  readonly isolationField?: EmailExchangeOvhCustomIsolationFieldEnumOVH;
  /** Isolation field value */
  readonly isolationValue?: string;
  /** Name of the custom isolation */
  readonly name?: string;
  /** Custom isolation status */
  readonly status?: EmailExchangeObjectStateEnumOVH;
}

/**
 * Exchange commercial version
 */
export type EmailExchangeExchangeCommercialVersionEnumOVH = typeof EmailExchangeExchangeCommercialVersionEnumOVH[keyof typeof EmailExchangeExchangeCommercialVersionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeExchangeCommercialVersionEnumOVH = {
  NUMBER_2010: '2010',
  NUMBER_2013: '2013',
  NUMBER_2016: '2016',
  NUMBER_2019: '2019',
} as const;

/**
 * Get users authorized to Send On Behalf To mails from this mailbox
 */
export interface EmailExchangeExchangeAccountSendOnBehalfToOVH {
  /** Account id to give send on behalf to */
  readonly allowedAccountId?: number;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Users authorized to send mails from this mailbox
 */
export interface EmailExchangeExchangeAccountSendAsOVH {
  /** Account id to give send as */
  readonly allowedAccountId?: number;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Get protocol status on that mailbox
 */
export interface EmailExchangeExchangeAccountProtocolOVH {
  /** Mobile access enabled on that mailbox */
  activeSync?: boolean;
  /** Creation date */
  readonly creationDate?: string;
  /** IMAP protocol enabled on that mailbox */
  IMAP?: boolean;
  /**
   * Last update date
   * @nullable
   */
  readonly lastUpdate?: string | null;
  /** POP protocol enabled on that mailbox */
  POP?: boolean;
  /** Pending task id */
  readonly taskPendingId?: number;
  /** Web mail enabled on that mailbox */
  webMail?: boolean;
}

/**
 * Get user that has an impersonation right on all that mailboxes
 */
export interface EmailExchangeExchangeAccountImpersonationOVH {
  /** Creation date */
  readonly creationDate?: string;
  /**
   * Last password update date
   * @nullable
   */
  readonly lastPasswordChange?: string | null;
  /** User state */
  readonly state?: EmailExchangeObjectStateEnumOVH;
  /**
   * Pending task id
   * @nullable
   */
  readonly taskPendingId?: number | null;
  /** User Principal Name */
  readonly upn?: string;
}

/**
 * Users having full access on this mailbox
 */
export interface EmailExchangeExchangeAccountFullAccessOVH {
  /** Account id to give full access */
  readonly allowedAccountId?: number;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Exchange Account Diagnosis
 */
export interface EmailExchangeExchangeAccountDiagnosisOVH {
  /** Determines if ingoing message has been received */
  readonly canReceiveEmail?: boolean;
  /** Determines if outgoing message has been delivered */
  readonly canSendEmail?: boolean;
  /** Determines if possible to authenticate with credentials */
  readonly connectiveOWA?: boolean;
  /** Determines if account is locked */
  readonly isLocked?: boolean;
  /** Determines if MX record for account's domain is properly set */
  readonly isMxValid?: boolean;
  /** Determines if account is flagged as spammer */
  readonly isSpammer?: boolean;
  /** Determines if SRV (autodiscovery) record for account's domain is properly set */
  readonly isSrvValid?: boolean;
  /** Determines if account is suspended */
  readonly isSuspended?: boolean;
  /** Last performed diagnostics date */
  readonly lastCheck?: string;
}

/**
 * Exchange Account Archive
 */
export interface EmailExchangeExchangeAccountArchiveOVH {
  /** Creation date */
  readonly creationDate?: string;
  /**
   * Archive mailbox usage
   * @nullable
   */
  readonly currentUsage?: number | null;
  /**
   * GUID of archive mailbox
   * @nullable
   */
  readonly guid?: string | null;
  /** Archive mailbox maximum size in GB */
  quota?: number;
  /** Archive mailbox state */
  readonly state?: EmailExchangeObjectStateEnumOVH;
  /**
   * Pending task for this archive mailbox
   * @nullable
   */
  readonly taskPendingId?: number | null;
}

/**
 * Aliases on this mailbox
 */
export interface EmailExchangeExchangeAccountAliasOVH {
  /** Alias */
  readonly alias?: string;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * dkim status
 */
export type EmailExchangeDkimStatusEnumOVH = typeof EmailExchangeDkimStatusEnumOVH[keyof typeof EmailExchangeDkimStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeDkimStatusEnumOVH = {
  deleting: 'deleting',
  disabling: 'disabling',
  enabling: 'enabling',
  inProduction: 'inProduction',
  ready: 'ready',
  todo: 'todo',
  waitingRecord: 'waitingRecord',
} as const;

/**
 * DKIM for a domain
 */
export interface EmailExchangeDkimOVH {
  /** If true your dns cname configuration is valid */
  readonly cnameIsValid?: boolean;
  /** customer dns record */
  readonly customerRecord?: string;
  /** header used for dkim signature */
  readonly header?: string;
  /**
   * Last update date
   * @nullable
   */
  readonly lastUpdate?: string | null;
  /** Record type of the customer record */
  readonly recordType?: string;
  /** selectorName */
  readonly selectorName?: string;
  /** dkim status */
  readonly status?: EmailExchangeDkimStatusEnumOVH;
  /**
   * Target of the customer record
   * @nullable
   */
  readonly targetRecord?: string | null;
  /**
   * Pending task for this DKIM
   * @nullable
   */
  readonly taskPendingId?: number | null;
}

/**
 * Exchange organization disclaimer
 */
export interface EmailExchangeDisclaimerOVH {
  /** Signature, added at the bottom of your organization emails */
  content?: string;
  /** Creation date */
  readonly creationDate?: string;
  /** Disclaimer name */
  readonly name?: string;
  /** Activate the disclaimer only for external emails */
  outsideOnly?: boolean;
  /** task pending id */
  readonly taskPendingId?: number;
}

/**
 * Authorized IP State
 */
export type EmailExchangeAuthorizedIpStatusEnumOVH = typeof EmailExchangeAuthorizedIpStatusEnumOVH[keyof typeof EmailExchangeAuthorizedIpStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeAuthorizedIpStatusEnumOVH = {
  creating: 'creating',
  deleting: 'deleting',
  ok: 'ok',
} as const;

/**
 * Subscription state
 */
export type EmailExchangeActiveSyncNotificationStateEnumOVH = typeof EmailExchangeActiveSyncNotificationStateEnumOVH[keyof typeof EmailExchangeActiveSyncNotificationStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeActiveSyncNotificationStateEnumOVH = {
  creating: 'creating',
  deleting: 'deleting',
  ok: 'ok',
} as const;

/**
 * Exchange task status
 */
export type EmailExchangeTaskStatusEnumOVH = typeof EmailExchangeTaskStatusEnumOVH[keyof typeof EmailExchangeTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeTaskStatusEnumOVH = {
  cancelled: 'cancelled',
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * function enumeration for exchange task
 */
export type EmailExchangeTaskFunctionEnumOVH = typeof EmailExchangeTaskFunctionEnumOVH[keyof typeof EmailExchangeTaskFunctionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeTaskFunctionEnumOVH = {
  activateSharepoint: 'activateSharepoint',
  addAccount: 'addAccount',
  addAccountArchive: 'addAccountArchive',
  addAccountImpersonation: 'addAccountImpersonation',
  addActiveSyncMailNotification: 'addActiveSyncMailNotification',
  addAlias: 'addAlias',
  addDistributionGroup: 'addDistributionGroup',
  addDistributionGroupManager: 'addDistributionGroupManager',
  addDistributionGroupMember: 'addDistributionGroupMember',
  addDistributionGroupSendAs: 'addDistributionGroupSendAs',
  addDistributionGroupSendOnBehalfTo: 'addDistributionGroupSendOnBehalfTo',
  addDomain: 'addDomain',
  addDomainDisclaimer: 'addDomainDisclaimer',
  addExchangeCustomIsolation: 'addExchangeCustomIsolation',
  addExchangeDomainDKIM: 'addExchangeDomainDKIM',
  addExchangeServiceAuthorizedIp: 'addExchangeServiceAuthorizedIp',
  addExportPstRequest: 'addExportPstRequest',
  addExternalContact: 'addExternalContact',
  addFullAccess: 'addFullAccess',
  addOutlookLicense: 'addOutlookLicense',
  addPublicFolder: 'addPublicFolder',
  addPublicFolderPermission: 'addPublicFolderPermission',
  addResourceAccount: 'addResourceAccount',
  addResourceDelegate: 'addResourceDelegate',
  addSendAs: 'addSendAs',
  addSendConnector: 'addSendConnector',
  addSendOnBehalfTo: 'addSendOnBehalfTo',
  addSharedAccount: 'addSharedAccount',
  addSharedAccountFullAccess: 'addSharedAccountFullAccess',
  addSharedAccountSendAs: 'addSharedAccountSendAs',
  addSharedAccountSendOnBehalfTo: 'addSharedAccountSendOnBehalfTo',
  changeHostname: 'changeHostname',
  changePassword: 'changePassword',
  clearDataOnDevice: 'clearDataOnDevice',
  cloneTemplateExchangePrivate: 'cloneTemplateExchangePrivate',
  configureExchangeCustomer: 'configureExchangeCustomer',
  configureExchangeOwaMfa: 'configureExchangeOwaMfa',
  deleteAccount: 'deleteAccount',
  deleteAccountArchive: 'deleteAccountArchive',
  deleteAccountImpersonation: 'deleteAccountImpersonation',
  deleteActiveSyncMailNotification: 'deleteActiveSyncMailNotification',
  deleteAlias: 'deleteAlias',
  deleteDistributionGroup: 'deleteDistributionGroup',
  deleteDistributionGroupManager: 'deleteDistributionGroupManager',
  deleteDistributionGroupMember: 'deleteDistributionGroupMember',
  deleteDistributionGroupSendAs: 'deleteDistributionGroupSendAs',
  deleteDistributionGroupSendOnBehalfTo: 'deleteDistributionGroupSendOnBehalfTo',
  deleteDomain: 'deleteDomain',
  deleteDomainDisclaimer: 'deleteDomainDisclaimer',
  deleteExchangeCustomIsolation: 'deleteExchangeCustomIsolation',
  deleteExchangeDomainDKIM: 'deleteExchangeDomainDKIM',
  deleteExchangeService: 'deleteExchangeService',
  deleteExchangeServiceAuthorizedIp: 'deleteExchangeServiceAuthorizedIp',
  deleteExportPstRequest: 'deleteExportPstRequest',
  deleteExternalContact: 'deleteExternalContact',
  deleteFullAccess: 'deleteFullAccess',
  deleteOutlookLicense: 'deleteOutlookLicense',
  deletePublicFolder: 'deletePublicFolder',
  deletePublicFolderPermission: 'deletePublicFolderPermission',
  deleteResourceAccount: 'deleteResourceAccount',
  deleteResourceDelegate: 'deleteResourceDelegate',
  deleteSendAs: 'deleteSendAs',
  deleteSendConnector: 'deleteSendConnector',
  deleteSendOnBehalfTo: 'deleteSendOnBehalfTo',
  deleteSharedAccount: 'deleteSharedAccount',
  deleteSharedAccountFullAccess: 'deleteSharedAccountFullAccess',
  deleteSharedAccountSendAs: 'deleteSharedAccountSendAs',
  deleteSharedAccountSendOnBehalfTo: 'deleteSharedAccountSendOnBehalfTo',
  destroyPrivateVm: 'destroyPrivateVm',
  diagnoseAccount: 'diagnoseAccount',
  disableExchangeDKIM: 'disableExchangeDKIM',
  enableExchangeDKIM: 'enableExchangeDKIM',
  expandDrive: 'expandDrive',
  generateOutlookUrl: 'generateOutlookUrl',
  generatePstUrl: 'generatePstUrl',
  installExchange: 'installExchange',
  installSSL: 'installSSL',
  maintenance: 'maintenance',
  migrationAccount: 'migrationAccount',
  migrationDisclaimer: 'migrationDisclaimer',
  migrationExternalContact: 'migrationExternalContact',
  migrationHistory: 'migrationHistory',
  migrationMailingList: 'migrationMailingList',
  migrationResourceAccount: 'migrationResourceAccount',
  migrationService: 'migrationService',
  reOpenHostedAccount: 'reOpenHostedAccount',
  reOpenOutlookLicense: 'reOpenOutlookLicense',
  reOpenPrivateAccount: 'reOpenPrivateAccount',
  reOpenPrivateVm: 'reOpenPrivateVm',
  setAccount: 'setAccount',
  setAccountArchive: 'setAccountArchive',
  setAlias: 'setAlias',
  setDistributionGroup: 'setDistributionGroup',
  setDns: 'setDns',
  setDomain: 'setDomain',
  setDomainDisclaimer: 'setDomainDisclaimer',
  setExchangeAccountProtocol: 'setExchangeAccountProtocol',
  setExchangeServiceDevice: 'setExchangeServiceDevice',
  setExternalContact: 'setExternalContact',
  setPublicFolder: 'setPublicFolder',
  setPublicFolderPermission: 'setPublicFolderPermission',
  setResourceAccount: 'setResourceAccount',
  setSendConnector: 'setSendConnector',
  setService: 'setService',
  setSharedAccount: 'setSharedAccount',
  suspendAccount: 'suspendAccount',
  suspendExchangeService: 'suspendExchangeService',
  suspendHostedAccount: 'suspendHostedAccount',
  suspendOutlookLicense: 'suspendOutlookLicense',
  suspendPrivateAccount: 'suspendPrivateAccount',
  suspendPrivateVm: 'suspendPrivateVm',
  unsuspendAccount: 'unsuspendAccount',
  unsuspendExchangeService: 'unsuspendExchangeService',
  unsuspendHostedAccount: 'unsuspendHostedAccount',
  updateExchangeServiceDevice: 'updateExchangeServiceDevice',
  upgrade2016: 'upgrade2016',
} as const;

/**
 * Exchange task details
 */
export interface EmailExchangeTaskOVH {
  /**
   * Completion date
   * @nullable
   */
  readonly finishDate?: string | null;
  /** Function name */
  readonly function?: EmailExchangeTaskFunctionEnumOVH;
  /** Task id */
  readonly id?: number;
  /** Task status */
  readonly status?: EmailExchangeTaskStatusEnumOVH;
  /** Creation date */
  readonly todoDate?: string;
}

/**
 * Level of access to calendar of Resource Mailbox
 */
export type EmailExchangeShowMeetingDetailsEnumOVH = typeof EmailExchangeShowMeetingDetailsEnumOVH[keyof typeof EmailExchangeShowMeetingDetailsEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeShowMeetingDetailsEnumOVH = {
  availabilityOnly: 'availabilityOnly',
  limitedDetails: 'limitedDetails',
  reviewer: 'reviewer',
} as const;

/**
 * Get shared account quota usage in total available space
 */
export interface EmailExchangeSharedAccountQuotaOVH {
  /** total amount of space in MB for shared accounts within organization */
  quotaLimit?: number;
  /** space in MB already reserved from the quota limit */
  quotaReserved?: number;
  /** currently used space in KB within all shared accounts */
  quotaUsed?: number;
  /** amount of space in MB available for single shared account */
  singleMailboxQuotaLimit?: number;
}

/**
 * Exchange Service State
 */
export type EmailExchangeServiceStateEnumOVH = typeof EmailExchangeServiceStateEnumOVH[keyof typeof EmailExchangeServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeServiceStateEnumOVH = {
  inMaintenance: 'inMaintenance',
  ok: 'ok',
  suspended: 'suspended',
} as const;

/**
 * Service Offer name
 */
export type EmailExchangeServiceOfferEnumOVH = typeof EmailExchangeServiceOfferEnumOVH[keyof typeof EmailExchangeServiceOfferEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeServiceOfferEnumOVH = {
  dedicated: 'dedicated',
  dedicatedCluster: 'dedicatedCluster',
  hosted: 'hosted',
  provider: 'provider',
} as const;

/**
 * Server State
 */
export type EmailExchangeServerStateEnumOVH = typeof EmailExchangeServerStateEnumOVH[keyof typeof EmailExchangeServerStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeServerStateEnumOVH = {
  configurationError: 'configurationError',
  configurationPending: 'configurationPending',
  notConfigured: 'notConfigured',
  ok: 'ok',
} as const;

/**
 * Exchange server
 */
export interface EmailExchangeServerOVH {
  /** Exchange commercial version */
  readonly commercialVersion?: EmailExchangeExchangeCommercialVersionEnumOVH;
  /**
   * Current disk usage in MB
   * @nullable
   */
  readonly currentDiskUsage?: number | null;
  /**
   * Total disk size in MB
   * @nullable
   */
  readonly diskSize?: number | null;
  /** If true server is 2010 individual offer */
  readonly individual2010?: boolean;
  /** ipV4 */
  readonly ip?: string;
  /**
   * ipV6
   * @nullable
   */
  readonly ipV6?: string | null;
  /** If true your dns AAAA record is valid */
  readonly isAaaaValid?: boolean;
  /** If true your dns A record is valid */
  readonly isAValid?: boolean;
  /** If true your dns ptrV6 record is valid */
  readonly isPtrV6Valid?: boolean;
  /** If true your dns ptr record is valid */
  readonly isPtrValid?: boolean;
  /** Indicates if Multi Factor Authentication is activated on Outlook Web Access interface */
  owaMfa?: boolean;
  /** Server state */
  readonly state?: EmailExchangeServerStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
  /**
   * ExchangeServer version
   * @nullable
   */
  readonly version?: number | null;
}

/**
 * Resource Type
 */
export type EmailExchangeResourceTypeEnumOVH = typeof EmailExchangeResourceTypeEnumOVH[keyof typeof EmailExchangeResourceTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeResourceTypeEnumOVH = {
  equipment: 'equipment',
  room: 'room',
} as const;

/**
 * Public folder type
 */
export type EmailExchangePublicFolderTypeEnumOVH = typeof EmailExchangePublicFolderTypeEnumOVH[keyof typeof EmailExchangePublicFolderTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangePublicFolderTypeEnumOVH = {
  calendar: 'calendar',
  contacts: 'contacts',
  plain: 'plain',
  tasks: 'tasks',
} as const;

/**
 * Get public folder quota usage in total available space
 */
export interface EmailExchangePublicFolderQuotaOVH {
  /** total amount of space in MB for public folders within organization */
  quotaLimit?: number;
  /** space in MB already reserved from the quota limit */
  quotaReserved?: number;
  /** currently used space in MB within all public folders */
  quotaUsed?: number;
}

/**
 * OVH licence account
 */
export type EmailExchangeOvhLicenceEnumOVH = typeof EmailExchangeOvhLicenceEnumOVH[keyof typeof EmailExchangeOvhLicenceEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeOvhLicenceEnumOVH = {
  basic: 'basic',
  enterprise: 'enterprise',
  standard: 'standard',
} as const;

/**
 * custom exchange isolation field
 */
export type EmailExchangeOvhCustomIsolationFieldEnumOVH = typeof EmailExchangeOvhCustomIsolationFieldEnumOVH[keyof typeof EmailExchangeOvhCustomIsolationFieldEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeOvhCustomIsolationFieldEnumOVH = {
  company: 'company',
  country: 'country',
} as const;

/**
 * Outlook version
 */
export type EmailExchangeOutlookVersionEnumOVH = typeof EmailExchangeOutlookVersionEnumOVH[keyof typeof EmailExchangeOutlookVersionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeOutlookVersionEnumOVH = {
  mac_x86_2016: 'mac_x86_2016',
  mac_x86_2019: 'mac_x86_2019',
  mac_x86_2021: 'mac_x86_2021',
  windows_x64_2016: 'windows_x64_2016',
  windows_x64_2019: 'windows_x64_2019',
  windows_x64_2021: 'windows_x64_2021',
  windows_x86_2016: 'windows_x86_2016',
  windows_x86_2019: 'windows_x86_2019',
  windows_x86_2021: 'windows_x86_2021',
} as const;

/**
 * Availability of outlook version
 */
export interface EmailExchangeOutlookVersionsOVH {
  outlookLanguage?: EmailExchangeLanguageEnumOVH;
  outlookVersion?: EmailExchangeOutlookVersionEnumOVH;
  status?: boolean;
}

/**
 * Outlook url
 */
export interface EmailExchangeOutlookUrlOVH {
  /** Url expiration date */
  readonly expiration?: string;
  /** Serial number */
  readonly serial?: string;
  /** Outlook url */
  readonly url?: string;
}

/**
 * Current object state
 */
export type EmailExchangeObjectStateEnumOVH = typeof EmailExchangeObjectStateEnumOVH[keyof typeof EmailExchangeObjectStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeObjectStateEnumOVH = {
  creating: 'creating',
  deleting: 'deleting',
  internalMigration: 'internalMigration',
  ok: 'ok',
  reopening: 'reopening',
  suspended: 'suspended',
  suspending: 'suspending',
} as const;

/**
 * Join distribution group restriction status
 */
export type EmailExchangeMailingListJoinRestrictionEnumOVH = typeof EmailExchangeMailingListJoinRestrictionEnumOVH[keyof typeof EmailExchangeMailingListJoinRestrictionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeMailingListJoinRestrictionEnumOVH = {
  approvalRequired: 'approvalRequired',
  closed: 'closed',
  open: 'open',
} as const;

/**
 * Depart distribution group restriction status
 */
export type EmailExchangeMailingListDepartRestrictionEnumOVH = typeof EmailExchangeMailingListDepartRestrictionEnumOVH[keyof typeof EmailExchangeMailingListDepartRestrictionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeMailingListDepartRestrictionEnumOVH = {
  closed: 'closed',
  open: 'open',
} as const;

/**
 * Mailing filter options availlable
 */
export type EmailExchangeMailingFilterEnumOVH = typeof EmailExchangeMailingFilterEnumOVH[keyof typeof EmailExchangeMailingFilterEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeMailingFilterEnumOVH = {
  vaderetro: 'vaderetro',
} as const;

/**
 * Outlook language
 */
export type EmailExchangeLanguageEnumOVH = typeof EmailExchangeLanguageEnumOVH[keyof typeof EmailExchangeLanguageEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeLanguageEnumOVH = {
  ar: 'ar',
  bg: 'bg',
  cz: 'cz',
  da: 'da',
  de: 'de',
  el: 'el',
  en: 'en',
  es: 'es',
  et: 'et',
  fi: 'fi',
  fr: 'fr',
  he: 'he',
  hr: 'hr',
  hu: 'hu',
  id: 'id',
  in: 'in',
  it: 'it',
  ja: 'ja',
  ko: 'ko',
  kz: 'kz',
  lt: 'lt',
  lv: 'lv',
  ms: 'ms',
  nb: 'nb',
  nl: 'nl',
  pl: 'pl',
  pt: 'pt',
  'pt-BR': 'pt-BR',
  ro: 'ro',
  rs: 'rs',
  ru: 'ru',
  sk: 'sk',
  sl: 'sl',
  sv: 'sv',
  th: 'th',
  tr: 'tr',
  uk: 'uk',
  vi: 'vi',
  'zh-CN': 'zh-CN',
} as const;

/**
 * Export PST file url
 */
export interface EmailExchangeExportUrlOVH {
  /** Url expiration date */
  readonly expiration?: string;
  /** Export url */
  readonly url?: string;
}

/**
 * Export PST file request
 */
export interface EmailExchangeExportOVH {
  /** Creation date */
  readonly creationDate?: string;
  /** Percentage of export PST request completion */
  readonly percentComplete?: number;
  /** Task pending id */
  readonly taskPendingId?: number;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type EmailExchangeExchangeServiceWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Exchange service
 */
export interface EmailExchangeExchangeServiceWithIAMOVH {
  /** Enable or disable password change via ADFS */
  adfsChangePassword?: boolean;
  /**
   * DNS Domain Control Validation record, require for order ssl varification process
   * @nullable
   */
  readonly cnameDcvRecord?: string | null;
  /** enable policy for strong and secure passwords */
  complexityEnabled?: boolean;
  /**
   * ID of the authentication policy to apply on a new Exchange account
   * @nullable
   */
  defaultAuthenticationPolicyId?: number | null;
  /**
   * service displayName
   * @nullable
   */
  displayName?: string | null;
  readonly domain?: string;
  /** @nullable */
  readonly hostname?: string | null;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: EmailExchangeExchangeServiceWithIAMOVHIam;
  /**
   * Update date
   * @nullable
   */
  readonly lastUpdateDate?: string | null;
  /** number of minutes account will remain locked if it occurs */
  lockoutDuration?: number;
  /** number of minutes that must elapse after a failed logon to reset lockout trigger */
  lockoutObservationWindow?: number;
  /**
   * number of attempts before account to be locked
   * @nullable
   */
  lockoutThreshold?: number | null;
  /**
   * maximum number of days that account's password is valid before expiration
   * @nullable
   */
  maxPasswordAge?: number | null;
  /** Maximum message size that You can receive in MB */
  maxReceiveSize?: number;
  /** Maximum message size that You can send in MB */
  maxSendSize?: number;
  /**
   * minimum number of days before able to change account's password
   * @nullable
   */
  minPasswordAge?: number | null;
  /**
   * minimum number of characters password must contain
   * @nullable
   */
  minPasswordLength?: number | null;
  readonly offer?: EmailExchangeServiceOfferEnumOVH;
  /**
   * number of historical password that cannot be reused
   * @nullable
   */
  passwordHistoryCount?: number | null;
  /** Spam and Antivirus configuration */
  spamAndVirusConfiguration?: EmailExchangeSpamAndVirusConfigurationOVH;
  /** @nullable */
  readonly sslExpirationDate?: string | null;
  readonly state?: EmailExchangeServiceStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
  /**
   * URL for web interface
   * @nullable
   */
  readonly webUrl?: string | null;
}

/**
 * Exchange service
 */
export interface EmailExchangeExchangeServiceOVH {
  /** Enable or disable password change via ADFS */
  adfsChangePassword?: boolean;
  /**
   * DNS Domain Control Validation record, require for order ssl varification process
   * @nullable
   */
  readonly cnameDcvRecord?: string | null;
  /** enable policy for strong and secure passwords */
  complexityEnabled?: boolean;
  /**
   * ID of the authentication policy to apply on a new Exchange account
   * @nullable
   */
  defaultAuthenticationPolicyId?: number | null;
  /**
   * service displayName
   * @nullable
   */
  displayName?: string | null;
  readonly domain?: string;
  /** @nullable */
  readonly hostname?: string | null;
  /**
   * Update date
   * @nullable
   */
  readonly lastUpdateDate?: string | null;
  /** number of minutes account will remain locked if it occurs */
  lockoutDuration?: number;
  /** number of minutes that must elapse after a failed logon to reset lockout trigger */
  lockoutObservationWindow?: number;
  /**
   * number of attempts before account to be locked
   * @nullable
   */
  lockoutThreshold?: number | null;
  /**
   * maximum number of days that account's password is valid before expiration
   * @nullable
   */
  maxPasswordAge?: number | null;
  /** Maximum message size that You can receive in MB */
  maxReceiveSize?: number;
  /** Maximum message size that You can send in MB */
  maxSendSize?: number;
  /**
   * minimum number of days before able to change account's password
   * @nullable
   */
  minPasswordAge?: number | null;
  /**
   * minimum number of characters password must contain
   * @nullable
   */
  minPasswordLength?: number | null;
  readonly offer?: EmailExchangeServiceOfferEnumOVH;
  /**
   * number of historical password that cannot be reused
   * @nullable
   */
  passwordHistoryCount?: number | null;
  /** Spam and Antivirus configuration */
  spamAndVirusConfiguration?: EmailExchangeSpamAndVirusConfigurationOVH;
  /** @nullable */
  readonly sslExpirationDate?: string | null;
  readonly state?: EmailExchangeServiceStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
  /**
   * URL for web interface
   * @nullable
   */
  readonly webUrl?: string | null;
}

/**
 * Domain type
 */
export type EmailExchangeDomainTypeEnumOVH = typeof EmailExchangeDomainTypeEnumOVH[keyof typeof EmailExchangeDomainTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeDomainTypeEnumOVH = {
  authoritative: 'authoritative',
  nonAuthoritative: 'nonAuthoritative',
} as const;

/**
 * Domain DKIM state
 */
export type EmailExchangeDomainDkimDiagnosticsStateEnumOVH = typeof EmailExchangeDomainDkimDiagnosticsStateEnumOVH[keyof typeof EmailExchangeDomainDkimDiagnosticsStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeDomainDkimDiagnosticsStateEnumOVH = {
  active: 'active',
  disabled: 'disabled',
  error: 'error',
  inProgress: 'inProgress',
  toConfigure: 'toConfigure',
} as const;

/**
 * DKIM diagnostics information for domain
 */
export interface EmailExchangeDomainDkimDiagnosticsOVH {
  /** @nullable */
  errorCode?: number | null;
  /** @nullable */
  message?: string | null;
  state?: EmailExchangeDomainDkimDiagnosticsStateEnumOVH;
}

/**
 * Exchange domain
 */
export interface EmailExchangeDomainOVH {
  /**
   * Cname that will be checked to prove the domain ownership
   * @nullable
   */
  readonly cnameToCheck?: string | null;
  /** DKIM diagnostics on this domain */
  readonly dkimDiagnostics?: EmailExchangeDomainDkimDiagnosticsOVH;
  /** List of aliases for this domain */
  readonly domainAliases?: readonly string[];
  /** Domain validation status */
  readonly domainValidated?: boolean;
  /** Expected SRV record on this domain */
  readonly expectedAutodiscoverSRV?: string;
  /** Expected MX record(s) on this domain */
  readonly expectedMX?: readonly string[];
  /** Expected SPF record on this domain */
  readonly expectedSPF?: string;
  /** Indicate if this domain is an alias for another domain */
  readonly isAliasDomain?: boolean;
  /**
   * If true this is an organization (Exchange 2010 only)
   * @nullable
   */
  readonly main?: boolean | null;
  /** If true your dns mx configuration is valid */
  readonly mxIsValid?: boolean;
  /**
   * Domain MX record configured in DNS
   * @nullable
   */
  readonly mxRecord?: readonly string[] | null;
  /**
   * If specified, emails to not existing address will be redirected to that domain
   * @nullable
   */
  mxRelay?: string | null;
  /** Domain name */
  readonly name?: string;
  /**
   * If specified, indicates to which organization this domain belongs (Exchange 2010 only)
   * @nullable
   */
  readonly organization2010?: string | null;
  /**
   * Relay domain address that will be used to all newly created accounts
   * @nullable
   */
  readonly sbrDefault?: string | null;
  /**
   * Send connector id that will be used to all newly created accounts
   * @nullable
   */
  readonly sendConnectorIdDefault?: number | null;
  /** Wether your SPF record is valid */
  readonly spfIsValid?: boolean;
  /**
   * Domain's SPF record configured in the DNS
   * @nullable
   */
  readonly spfRecord?: readonly string[] | null;
  /** If true your dns srv record is valid */
  readonly srvIsValid?: boolean;
  /**
   * Domain SRV record configured in DNS
   * @nullable
   */
  readonly srvRecord?: readonly string[] | null;
  /** Domain state */
  readonly state?: EmailExchangeObjectStateEnumOVH;
  /** Pending taks id */
  readonly taskPendingId?: number;
  /** Domain type */
  type?: EmailExchangeDomainTypeEnumOVH;
}

/**
 * Disclaimer attributes list
 */
export type EmailExchangeDisclaimerAttributeEnumOVH = typeof EmailExchangeDisclaimerAttributeEnumOVH[keyof typeof EmailExchangeDisclaimerAttributeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeDisclaimerAttributeEnumOVH = {
  City: 'City',
  Company: 'Company',
  Country: 'Country',
  Department: 'Department',
  DisplayName: 'DisplayName',
  Email: 'Email',
  FaxNumber: 'FaxNumber',
  FirstName: 'FirstName',
  HomePhoneNumber: 'HomePhoneNumber',
  Initials: 'Initials',
  LastName: 'LastName',
  Manager: 'Manager',
  MobileNumber: 'MobileNumber',
  Notes: 'Notes',
  Office: 'Office',
  OtherFaxNumber: 'OtherFaxNumber',
  OtherHomePhoneNumber: 'OtherHomePhoneNumber',
  OtherPhoneNumber: 'OtherPhoneNumber',
  PagerNumber: 'PagerNumber',
  PhoneNumber: 'PhoneNumber',
  State: 'State',
  Street: 'Street',
  Title: 'Title',
  UserLogonName: 'UserLogonName',
  ZipCode: 'ZipCode',
} as const;

/**
 * Device ActiveSync state
 */
export type EmailExchangeDeviceActiveSyncStateEnumOVH = typeof EmailExchangeDeviceActiveSyncStateEnumOVH[keyof typeof EmailExchangeDeviceActiveSyncStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeDeviceActiveSyncStateEnumOVH = {
  allowed: 'allowed',
  blocked: 'blocked',
  deviceDiscovery: 'deviceDiscovery',
  quarantined: 'quarantined',
} as const;

/**
 * Country Code iso
 */
export type EmailExchangeCountryCodeEnumOVH = typeof EmailExchangeCountryCodeEnumOVH[keyof typeof EmailExchangeCountryCodeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeCountryCodeEnumOVH = {
  AC: 'AC',
  AD: 'AD',
  AE: 'AE',
  AF: 'AF',
  AG: 'AG',
  AI: 'AI',
  AL: 'AL',
  AM: 'AM',
  AO: 'AO',
  AQ: 'AQ',
  AR: 'AR',
  AS: 'AS',
  AT: 'AT',
  AU: 'AU',
  AW: 'AW',
  AX: 'AX',
  AZ: 'AZ',
  BA: 'BA',
  BB: 'BB',
  BD: 'BD',
  BE: 'BE',
  BF: 'BF',
  BG: 'BG',
  BH: 'BH',
  BI: 'BI',
  BJ: 'BJ',
  BL: 'BL',
  BM: 'BM',
  BN: 'BN',
  BO: 'BO',
  BQ: 'BQ',
  BR: 'BR',
  BS: 'BS',
  BT: 'BT',
  BW: 'BW',
  BY: 'BY',
  BZ: 'BZ',
  CA: 'CA',
  CC: 'CC',
  CD: 'CD',
  CF: 'CF',
  CG: 'CG',
  CH: 'CH',
  CI: 'CI',
  CK: 'CK',
  CL: 'CL',
  CM: 'CM',
  CN: 'CN',
  CO: 'CO',
  CR: 'CR',
  CU: 'CU',
  CV: 'CV',
  CW: 'CW',
  CX: 'CX',
  CY: 'CY',
  CZ: 'CZ',
  DE: 'DE',
  DG: 'DG',
  DJ: 'DJ',
  DK: 'DK',
  DM: 'DM',
  DO: 'DO',
  DZ: 'DZ',
  EA: 'EA',
  EC: 'EC',
  EE: 'EE',
  EG: 'EG',
  EH: 'EH',
  ER: 'ER',
  ES: 'ES',
  ET: 'ET',
  FI: 'FI',
  FJ: 'FJ',
  FK: 'FK',
  FM: 'FM',
  FO: 'FO',
  FR: 'FR',
  GA: 'GA',
  GB: 'GB',
  GD: 'GD',
  GE: 'GE',
  GF: 'GF',
  GG: 'GG',
  GH: 'GH',
  GI: 'GI',
  GL: 'GL',
  GM: 'GM',
  GN: 'GN',
  GP: 'GP',
  GQ: 'GQ',
  GR: 'GR',
  GS: 'GS',
  GT: 'GT',
  GU: 'GU',
  GW: 'GW',
  GY: 'GY',
  HK: 'HK',
  HN: 'HN',
  HR: 'HR',
  HT: 'HT',
  HU: 'HU',
  IC: 'IC',
  ID: 'ID',
  IE: 'IE',
  IL: 'IL',
  IM: 'IM',
  IN: 'IN',
  IO: 'IO',
  IQ: 'IQ',
  IR: 'IR',
  IS: 'IS',
  IT: 'IT',
  JE: 'JE',
  JM: 'JM',
  JO: 'JO',
  JP: 'JP',
  KE: 'KE',
  KG: 'KG',
  KH: 'KH',
  KI: 'KI',
  KM: 'KM',
  KN: 'KN',
  KP: 'KP',
  KR: 'KR',
  KW: 'KW',
  KY: 'KY',
  KZ: 'KZ',
  LA: 'LA',
  LB: 'LB',
  LC: 'LC',
  LI: 'LI',
  LK: 'LK',
  LR: 'LR',
  LS: 'LS',
  LT: 'LT',
  LU: 'LU',
  LV: 'LV',
  LY: 'LY',
  MA: 'MA',
  MC: 'MC',
  MD: 'MD',
  ME: 'ME',
  MF: 'MF',
  MG: 'MG',
  MH: 'MH',
  MK: 'MK',
  ML: 'ML',
  MM: 'MM',
  MN: 'MN',
  MO: 'MO',
  MP: 'MP',
  MQ: 'MQ',
  MR: 'MR',
  MS: 'MS',
  MT: 'MT',
  MU: 'MU',
  MV: 'MV',
  MW: 'MW',
  MX: 'MX',
  MY: 'MY',
  MZ: 'MZ',
  NA: 'NA',
  NC: 'NC',
  NE: 'NE',
  NF: 'NF',
  NG: 'NG',
  NI: 'NI',
  NL: 'NL',
  NO: 'NO',
  NP: 'NP',
  NR: 'NR',
  NU: 'NU',
  NZ: 'NZ',
  OM: 'OM',
  PA: 'PA',
  PE: 'PE',
  PF: 'PF',
  PG: 'PG',
  PH: 'PH',
  PK: 'PK',
  PL: 'PL',
  PM: 'PM',
  PN: 'PN',
  PR: 'PR',
  PS: 'PS',
  PT: 'PT',
  PW: 'PW',
  PY: 'PY',
  QA: 'QA',
  RE: 'RE',
  RO: 'RO',
  RS: 'RS',
  RU: 'RU',
  RW: 'RW',
  SA: 'SA',
  SB: 'SB',
  SC: 'SC',
  SD: 'SD',
  SE: 'SE',
  SG: 'SG',
  SH: 'SH',
  SI: 'SI',
  SJ: 'SJ',
  SK: 'SK',
  SL: 'SL',
  SM: 'SM',
  SN: 'SN',
  SO: 'SO',
  SR: 'SR',
  SS: 'SS',
  ST: 'ST',
  SV: 'SV',
  SX: 'SX',
  SY: 'SY',
  SZ: 'SZ',
  TA: 'TA',
  TC: 'TC',
  TD: 'TD',
  TF: 'TF',
  TG: 'TG',
  TH: 'TH',
  TJ: 'TJ',
  TK: 'TK',
  TL: 'TL',
  TM: 'TM',
  TN: 'TN',
  TO: 'TO',
  TR: 'TR',
  TT: 'TT',
  TV: 'TV',
  TW: 'TW',
  TZ: 'TZ',
  UA: 'UA',
  UG: 'UG',
  UM: 'UM',
  US: 'US',
  UY: 'UY',
  UZ: 'UZ',
  VA: 'VA',
  VC: 'VC',
  VE: 'VE',
  VG: 'VG',
  VI: 'VI',
  VN: 'VN',
  VU: 'VU',
  WF: 'WF',
  WS: 'WS',
  XK: 'XK',
  YE: 'YE',
  YT: 'YT',
  ZA: 'ZA',
  ZM: 'ZM',
  ZW: 'ZW',
} as const;

/**
 * Activesync action
 */
export type EmailExchangeActiveSyncPolicyEnumOVH = typeof EmailExchangeActiveSyncPolicyEnumOVH[keyof typeof EmailExchangeActiveSyncPolicyEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeActiveSyncPolicyEnumOVH = {
  allow: 'allow',
  block: 'block',
  quarantine: 'quarantine',
} as const;

/**
 * Exchange account license
 */
export interface EmailExchangeAccountLicenseOVH {
  license?: EmailExchangeOvhLicenceEnumOVH;
  licenseQuantity?: number;
}

/**
 * Exchange account license per day
 */
export interface EmailExchangeDailyLicenseOVH {
  accountLicense?: EmailExchangeAccountLicenseOVH[];
  date?: string;
  outlookQuantity?: number;
}

/**
 * change the renew period
 * @nullable
 */
export type EmailExchangeAccountOVHRenewPeriod = EmailExchangeRenewPeriodEnumOVH | null;

/**
 * change the renew period for outlook
 * @nullable
 */
export type EmailExchangeAccountOVHRenewOutlookPeriod = EmailExchangeRenewPeriodEnumOVH | null;

/**
 * Phone number
 * @nullable
 */
export type EmailExchangeAccountOVHPhone = PhoneNumberOVH | null;

/**
 * Mobile phone
 * @nullable
 */
export type EmailExchangeAccountOVHMobile = PhoneNumberOVH | null;

/**
 * Fax number
 * @nullable
 */
export type EmailExchangeAccountOVHFax = PhoneNumberOVH | null;

/**
 * Country code
 * @nullable
 */
export type EmailExchangeAccountOVHCountryCode = EmailExchangeCountryCodeEnumOVH | null;

/**
 * Exchange mailbox
 */
export interface EmailExchangeAccountOVH {
  /** Exchange account type */
  accountLicense?: EmailExchangeOvhLicenceEnumOVH;
  /**
   * ID of the authentication policy to apply on this account
   * @nullable
   */
  authenticationPolicyId?: number | null;
  /**
   * city
   * @nullable
   */
  city?: string | null;
  /**
   * Company name
   * @nullable
   */
  company?: string | null;
  /** Indicates if the account is configured */
  readonly configured?: boolean;
  /**
   * Country code
   * @nullable
   */
  countryCode?: EmailExchangeAccountOVHCountryCode;
  /**
   * Creation date
   * @nullable
   */
  readonly creationDate?: string | null;
  /**
   * Mailbox usage
   * @nullable
   */
  readonly currentUsage?: number | null;
  /**
   * custom isolation apply on this account
   * @nullable
   */
  readonly customIsolationId?: number | null;
  /**
   * delete at expiration
   * @nullable
   */
  deleteAtExpiration?: boolean | null;
  /**
   * delete outlook at expiration
   * @nullable
   */
  deleteOutlookAtExpiration?: boolean | null;
  /**
   * Description
   * @nullable
   */
  description?: string | null;
  /**
   * Account display name
   * @nullable
   */
  displayName?: string | null;
  /** Email domain */
  domain?: string;
  /**
   * exchangeGuid for manual configuration
   * @nullable
   */
  readonly exchangeGuid?: string | null;
  /**
   * expiration date
   * @nullable
   */
  readonly expirationDate?: string | null;
  /**
   * expiration date
   * @nullable
   */
  readonly expirationOutlookDate?: string | null;
  /**
   * Fax number
   * @nullable
   */
  fax?: EmailExchangeAccountOVHFax;
  /**
   * Account first name
   * @nullable
   */
  firstName?: string | null;
  /**
   * Email address to forward email
   * @nullable
   */
  forwardingEmail?: string | null;
  /**
   * GUID for user in active directory
   * @nullable
   */
  readonly guid?: string | null;
  /** Hide account in Global Address List */
  hiddenFromGAL?: boolean;
  /** Account id */
  readonly id?: number;
  /**
   * Account initials
   * @nullable
   */
  initial?: string | null;
  /**
   * Job Department
   * @nullable
   */
  jobDepartment?: string | null;
  /**
   * Job title
   * @nullable
   */
  jobTitle?: string | null;
  /**
   * Last logoff
   * @nullable
   */
  readonly lastLogoffDate?: string | null;
  /**
   * Last logon
   * @nullable
   */
  readonly lastLogonDate?: string | null;
  /**
   * Account last name
   * @nullable
   */
  lastName?: string | null;
  /**
   * Last update
   * @nullable
   */
  readonly lastUpdateDate?: string | null;
  /** Litigation hold feature enabled on this mailbox */
  litigation?: boolean;
  /**
   * Litigation hold period in days (0 means unlimited). This setting covers all items in the mailbox.
   * @nullable
   */
  litigationPeriod?: number | null;
  /** Account login */
  login?: string;
  /**
   * Enable or disable anti-virus and anti-spam
   * @nullable
   */
  mailingFilter?: EmailExchangeMailingFilterEnumOVH[] | null;
  /**
   * Email display as sender
   * @nullable
   */
  mailSenderDisplay?: string | null;
  /**
   * Mobile phone
   * @nullable
   */
  mobile?: EmailExchangeAccountOVHMobile;
  /** Count the number of related aliases attached to this account */
  readonly numberOfAliases?: number;
  /**
   * Job office
   * @nullable
   */
  office?: string | null;
  /** Outlook licence */
  outlookLicense?: boolean;
  /** OWA policy restriction is applied */
  readonly owaLimited?: boolean;
  /**
   * Time of account's password last update
   * @nullable
   */
  readonly passwordLastUpdate?: string | null;
  /**
   * Phone number
   * @nullable
   */
  phone?: EmailExchangeAccountOVHPhone;
  /**
   * Postal code
   * @nullable
   */
  postalCode?: string | null;
  /** Default email for this mailbox */
  readonly primaryEmailAddress?: string;
  /** Account maximum size */
  quota?: number;
  /**
   * region
   * @nullable
   */
  region?: string | null;
  /**
   * change the renew period for outlook
   * @nullable
   */
  renewOutlookPeriod?: EmailExchangeAccountOVHRenewOutlookPeriod;
  /**
   * change the renew period
   * @nullable
   */
  renewPeriod?: EmailExchangeAccountOVHRenewPeriod;
  /**
   * SAM account name
   * @nullable
   */
  readonly SAMAccountName?: string | null;
  /**
   * Relay domain address that will be used to all e-mails send from this account
   * @nullable
   */
  sbrDestination?: string | null;
  /**
   * Custom sendConnectorId used to send mails when SBR is configured
   * @nullable
   */
  sendConnectorId?: number | null;
  /** Spam and Antivirus configuration */
  spamAndVirusConfiguration?: EmailExchangeSpamAndVirusConfigurationOVH;
  /** Account was sending spam */
  readonly spamDetected?: boolean;
  /**
   * Ticket number of spam detection
   * @nullable
   */
  readonly spamTicketNumber?: number | null;
  /** Account state */
  readonly state?: EmailExchangeObjectStateEnumOVH;
  /** Store copy of email when forward is enable */
  storeCopyOfEmail?: boolean;
  /**
   * Street address
   * @nullable
   */
  streetAddress?: string | null;
  /**
   * Pending task for this account
   * @nullable
   */
  readonly taskPendingId?: number | null;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;

/**
 * Temporary url information
 */
export interface DbaasLogsTemporaryLogsLinkOVH {
  /** Temporary url expiration date */
  readonly expirationDate?: string;
  /** Temporary url */
  readonly url?: string;
}

/**
 * Log temporary URL creation payload
 */
export interface DbaasLogsLogUrlCreationOVH {
  /** Log kind name */
  kind: string;
}

/**
 * Asynchronous operation after subscribing or unsubscribing to a resource logs
 */
export interface DbaasLogsLogSubscriptionResponseOVH {
  /** Identifier of the operation */
  readonly operationId?: string;
  /** Operation owner's service name */
  readonly serviceName?: string;
}

/**
 * Log subscription resource
 */
export interface DbaasLogsLogSubscriptionResourceOVH {
  /** Name of subscribed resource */
  readonly name?: string;
  /** Type of subscribed resource */
  readonly type?: string;
}

/**
 * Log subscription creation payload
 */
export interface DbaasLogsLogSubscriptionCreationOVH {
  /** Log kind name to subscribe to */
  kind: string;
  /** Customer log stream ID */
  streamId: string;
}

/**
 * Log subscription
 */
export interface DbaasLogsLogSubscriptionOVH {
  /** Creation date of the subscription */
  readonly createdAt?: string;
  /** Log kind name of this subscription */
  readonly kind?: string;
  /** Subscribed resource, where the logs come from */
  readonly resource?: DbaasLogsLogSubscriptionResourceOVH;
  /** Name of the destination log service */
  readonly serviceName?: string;
  /** Id of the destination log stream */
  readonly streamId?: string;
  /** Subscription ID */
  readonly subscriptionId?: string;
  /** Last update date of the subscription */
  readonly updatedAt?: string;
}

/**
 * Log kind
 */
export interface DbaasLogsLogKindOVH {
  /** List of additional log fields managed in this log kind */
  readonly additionalReturnedFields?: readonly string[];
  /** Creation date of the log kind */
  readonly createdAt?: string;
  /** Log kind display name */
  readonly displayName?: string;
  /** Log kind ID */
  readonly kindId?: string;
  /** Log kind name */
  readonly name?: string;
  /** Last update date of the log kind */
  readonly updatedAt?: string;
}


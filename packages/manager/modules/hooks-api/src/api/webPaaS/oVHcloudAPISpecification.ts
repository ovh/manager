/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetWebPaaSCapabilitiesParams,
  GetWebPaaSSubscriptionParams,
  ServicesConfirmTerminationOVH,
  ServicesServiceOVH,
  WebPaaSCapabilitiesOVH,
  WebPaaSSubscriptionCustomerOVH,
  WebPaaSSubscriptionProjectAddCustomerOVH,
  WebPaaSSubscriptionWithIAMOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available regions and templates
 */
export const getWebPaaSCapabilities = (
    params: GetWebPaaSCapabilitiesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<WebPaaSCapabilitiesOVH>(
      {url: `/webPaaS/capabilities`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetWebPaaSCapabilitiesQueryKey = (params: GetWebPaaSCapabilitiesParams,) => {
    return [`/webPaaS/capabilities`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWebPaaSCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getWebPaaSCapabilities>>, TError = unknown>(params: GetWebPaaSCapabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWebPaaSCapabilitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWebPaaSCapabilities>>> = ({ signal }) => getWebPaaSCapabilities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetWebPaaSCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getWebPaaSCapabilities>>>
export type GetWebPaaSCapabilitiesQueryError = unknown


export function useGetWebPaaSCapabilities<TData = Awaited<ReturnType<typeof getWebPaaSCapabilities>>, TError = unknown>(
 params: GetWebPaaSCapabilitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebPaaSCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWebPaaSCapabilities<TData = Awaited<ReturnType<typeof getWebPaaSCapabilities>>, TError = unknown>(
 params: GetWebPaaSCapabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebPaaSCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWebPaaSCapabilities<TData = Awaited<ReturnType<typeof getWebPaaSCapabilities>>, TError = unknown>(
 params: GetWebPaaSCapabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available regions and templates
 */

export function useGetWebPaaSCapabilities<TData = Awaited<ReturnType<typeof getWebPaaSCapabilities>>, TError = unknown>(
 params: GetWebPaaSCapabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetWebPaaSCapabilitiesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List your subscriptions
 */
export const getWebPaaSSubscription = (
    params?: GetWebPaaSSubscriptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/webPaaS/subscription`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetWebPaaSSubscriptionQueryKey = (params?: GetWebPaaSSubscriptionParams,) => {
    return [`/webPaaS/subscription`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWebPaaSSubscriptionQueryOptions = <TData = Awaited<ReturnType<typeof getWebPaaSSubscription>>, TError = unknown>(params?: GetWebPaaSSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWebPaaSSubscriptionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWebPaaSSubscription>>> = ({ signal }) => getWebPaaSSubscription(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscription>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetWebPaaSSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getWebPaaSSubscription>>>
export type GetWebPaaSSubscriptionQueryError = unknown


export function useGetWebPaaSSubscription<TData = Awaited<ReturnType<typeof getWebPaaSSubscription>>, TError = unknown>(
 params: undefined |  GetWebPaaSSubscriptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscription>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebPaaSSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWebPaaSSubscription<TData = Awaited<ReturnType<typeof getWebPaaSSubscription>>, TError = unknown>(
 params?: GetWebPaaSSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscription>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebPaaSSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWebPaaSSubscription<TData = Awaited<ReturnType<typeof getWebPaaSSubscription>>, TError = unknown>(
 params?: GetWebPaaSSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List your subscriptions
 */

export function useGetWebPaaSSubscription<TData = Awaited<ReturnType<typeof getWebPaaSSubscription>>, TError = unknown>(
 params?: GetWebPaaSSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetWebPaaSSubscriptionQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get information about your subscription
 */
export const getWebPaaSSubscriptionServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<WebPaaSSubscriptionWithIAMOVH>(
      {url: `/webPaaS/subscription/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetWebPaaSSubscriptionServiceNameQueryKey = (serviceName: string,) => {
    return [`/webPaaS/subscription/${serviceName}`] as const;
    }

    
export const getGetWebPaaSSubscriptionServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWebPaaSSubscriptionServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>> = ({ signal }) => getWebPaaSSubscriptionServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetWebPaaSSubscriptionServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>>
export type GetWebPaaSSubscriptionServiceNameQueryError = unknown


export function useGetWebPaaSSubscriptionServiceName<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWebPaaSSubscriptionServiceName<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWebPaaSSubscriptionServiceName<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about your subscription
 */

export function useGetWebPaaSSubscriptionServiceName<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetWebPaaSSubscriptionServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Confirm service termination
 */
export const postWebPaaSSubscriptionServiceNameConfirmTermination = (
    serviceName: string,
    servicesConfirmTerminationOVH: ServicesConfirmTerminationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/webPaaS/subscription/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesConfirmTerminationOVH, signal
    },
      options);
    }
  


export const getPostWebPaaSSubscriptionServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameConfirmTermination>>, {serviceName: string;data: ServicesConfirmTerminationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postWebPaaSSubscriptionServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWebPaaSSubscriptionServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameConfirmTermination>>>
    export type PostWebPaaSSubscriptionServiceNameConfirmTerminationMutationBody = ServicesConfirmTerminationOVH
    export type PostWebPaaSSubscriptionServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostWebPaaSSubscriptionServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: ServicesConfirmTerminationOVH},
        TContext
      > => {

      const mutationOptions = getPostWebPaaSSubscriptionServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List customers added to a project
 */
export const getWebPaaSSubscriptionServiceNameCustomer = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<WebPaaSSubscriptionCustomerOVH[]>(
      {url: `/webPaaS/subscription/${serviceName}/customer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetWebPaaSSubscriptionServiceNameCustomerQueryKey = (serviceName: string,) => {
    return [`/webPaaS/subscription/${serviceName}/customer`] as const;
    }

    
export const getGetWebPaaSSubscriptionServiceNameCustomerQueryOptions = <TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWebPaaSSubscriptionServiceNameCustomerQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>> = ({ signal }) => getWebPaaSSubscriptionServiceNameCustomer(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetWebPaaSSubscriptionServiceNameCustomerQueryResult = NonNullable<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>>
export type GetWebPaaSSubscriptionServiceNameCustomerQueryError = unknown


export function useGetWebPaaSSubscriptionServiceNameCustomer<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWebPaaSSubscriptionServiceNameCustomer<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWebPaaSSubscriptionServiceNameCustomer<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List customers added to a project
 */

export function useGetWebPaaSSubscriptionServiceNameCustomer<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetWebPaaSSubscriptionServiceNameCustomerQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add customer to the project
 */
export const postWebPaaSSubscriptionServiceNameCustomer = (
    serviceName: string,
    webPaaSSubscriptionProjectAddCustomerOVH: WebPaaSSubscriptionProjectAddCustomerOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<WebPaaSSubscriptionCustomerOVH>(
      {url: `/webPaaS/subscription/${serviceName}/customer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: webPaaSSubscriptionProjectAddCustomerOVH, signal
    },
      options);
    }
  


export const getPostWebPaaSSubscriptionServiceNameCustomerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameCustomer>>, TError,{serviceName: string;data: WebPaaSSubscriptionProjectAddCustomerOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameCustomer>>, TError,{serviceName: string;data: WebPaaSSubscriptionProjectAddCustomerOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameCustomer>>, {serviceName: string;data: WebPaaSSubscriptionProjectAddCustomerOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postWebPaaSSubscriptionServiceNameCustomer(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWebPaaSSubscriptionServiceNameCustomerMutationResult = NonNullable<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameCustomer>>>
    export type PostWebPaaSSubscriptionServiceNameCustomerMutationBody = WebPaaSSubscriptionProjectAddCustomerOVH
    export type PostWebPaaSSubscriptionServiceNameCustomerMutationError = unknown

    /**
 * @summary Add customer to the project
 */
export const usePostWebPaaSSubscriptionServiceNameCustomer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameCustomer>>, TError,{serviceName: string;data: WebPaaSSubscriptionProjectAddCustomerOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameCustomer>>,
        TError,
        {serviceName: string;data: WebPaaSSubscriptionProjectAddCustomerOVH},
        TContext
      > => {

      const mutationOptions = getPostWebPaaSSubscriptionServiceNameCustomerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove customer from the project
 */
export const deleteWebPaaSSubscriptionServiceNameCustomerCustomerId = (
    serviceName: string,
    customerId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<WebPaaSSubscriptionCustomerOVH>(
      {url: `/webPaaS/subscription/${serviceName}/customer/${customerId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteWebPaaSSubscriptionServiceNameCustomerCustomerIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError,{serviceName: string;customerId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError,{serviceName: string;customerId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWebPaaSSubscriptionServiceNameCustomerCustomerId>>, {serviceName: string;customerId: string}> = (props) => {
          const {serviceName,customerId} = props ?? {};

          return  deleteWebPaaSSubscriptionServiceNameCustomerCustomerId(serviceName,customerId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWebPaaSSubscriptionServiceNameCustomerCustomerIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWebPaaSSubscriptionServiceNameCustomerCustomerId>>>
    
    export type DeleteWebPaaSSubscriptionServiceNameCustomerCustomerIdMutationError = unknown

    /**
 * @summary Remove customer from the project
 */
export const useDeleteWebPaaSSubscriptionServiceNameCustomerCustomerId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError,{serviceName: string;customerId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteWebPaaSSubscriptionServiceNameCustomerCustomerId>>,
        TError,
        {serviceName: string;customerId: string},
        TContext
      > => {

      const mutationOptions = getDeleteWebPaaSSubscriptionServiceNameCustomerCustomerIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the customer details
 */
export const getWebPaaSSubscriptionServiceNameCustomerCustomerId = (
    serviceName: string,
    customerId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<WebPaaSSubscriptionCustomerOVH>(
      {url: `/webPaaS/subscription/${serviceName}/customer/${customerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetWebPaaSSubscriptionServiceNameCustomerCustomerIdQueryKey = (serviceName: string,
    customerId: string,) => {
    return [`/webPaaS/subscription/${serviceName}/customer/${customerId}`] as const;
    }

    
export const getGetWebPaaSSubscriptionServiceNameCustomerCustomerIdQueryOptions = <TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError = unknown>(serviceName: string,
    customerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWebPaaSSubscriptionServiceNameCustomerCustomerIdQueryKey(serviceName,customerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>> = ({ signal }) => getWebPaaSSubscriptionServiceNameCustomerCustomerId(serviceName,customerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetWebPaaSSubscriptionServiceNameCustomerCustomerIdQueryResult = NonNullable<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>>
export type GetWebPaaSSubscriptionServiceNameCustomerCustomerIdQueryError = unknown


export function useGetWebPaaSSubscriptionServiceNameCustomerCustomerId<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError = unknown>(
 serviceName: string,
    customerId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWebPaaSSubscriptionServiceNameCustomerCustomerId<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError = unknown>(
 serviceName: string,
    customerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWebPaaSSubscriptionServiceNameCustomerCustomerId<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError = unknown>(
 serviceName: string,
    customerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the customer details
 */

export function useGetWebPaaSSubscriptionServiceNameCustomerCustomerId<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError = unknown>(
 serviceName: string,
    customerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameCustomerCustomerId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetWebPaaSSubscriptionServiceNameCustomerCustomerIdQueryOptions(serviceName,customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getWebPaaSSubscriptionServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/webPaaS/subscription/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetWebPaaSSubscriptionServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/webPaaS/subscription/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetWebPaaSSubscriptionServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWebPaaSSubscriptionServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>> = ({ signal }) => getWebPaaSSubscriptionServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetWebPaaSSubscriptionServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>>
export type GetWebPaaSSubscriptionServiceNameServiceInfosQueryError = unknown


export function useGetWebPaaSSubscriptionServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWebPaaSSubscriptionServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWebPaaSSubscriptionServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetWebPaaSSubscriptionServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWebPaaSSubscriptionServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetWebPaaSSubscriptionServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putWebPaaSSubscriptionServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/webPaaS/subscription/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutWebPaaSSubscriptionServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putWebPaaSSubscriptionServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putWebPaaSSubscriptionServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putWebPaaSSubscriptionServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putWebPaaSSubscriptionServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutWebPaaSSubscriptionServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putWebPaaSSubscriptionServiceNameServiceInfos>>>
    export type PutWebPaaSSubscriptionServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutWebPaaSSubscriptionServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutWebPaaSSubscriptionServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putWebPaaSSubscriptionServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putWebPaaSSubscriptionServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutWebPaaSSubscriptionServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ask for the termination of your service
 */
export const postWebPaaSSubscriptionServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/webPaaS/subscription/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostWebPaaSSubscriptionServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postWebPaaSSubscriptionServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWebPaaSSubscriptionServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameTerminate>>>
    
    export type PostWebPaaSSubscriptionServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostWebPaaSSubscriptionServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postWebPaaSSubscriptionServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostWebPaaSSubscriptionServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

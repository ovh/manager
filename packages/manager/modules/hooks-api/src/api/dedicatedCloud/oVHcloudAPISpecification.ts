/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DedicatedCloudAllowedNetworkOVH,
  DedicatedCloudAutoScaleConfigOVH,
  DedicatedCloudAutoScaleVirtualOVH,
  DedicatedCloudBackupBackupCapabilitiesOVH,
  DedicatedCloudBackupOVH,
  DedicatedCloudBackupOptimizeProxiesOVH,
  DedicatedCloudBackupRepositoryOVH,
  DedicatedCloudCapabilitiesOVH,
  DedicatedCloudClusterOVH,
  DedicatedCloudCommercialRangeOVH,
  DedicatedCloudCompliantRangesOVH,
  DedicatedCloudDatacenterOVH,
  DedicatedCloudDedicatedCloudWithIAMOVH,
  DedicatedCloudDisasterRecoveryProfileOVH,
  DedicatedCloudDisasterRecoveryZertoProtectedVmOVH,
  DedicatedCloudDisasterRecoveryZertoRemoteVraOVH,
  DedicatedCloudFederationAccessNetworkOVH,
  DedicatedCloudFederationOVH,
  DedicatedCloudFilerLocationOVH,
  DedicatedCloudFilerOVH,
  DedicatedCloudFilerProfileOVH,
  DedicatedCloudHcxOVH,
  DedicatedCloudHdsOVH,
  DedicatedCloudHipaaOVH,
  DedicatedCloudHostLocationOVH,
  DedicatedCloudHostOVH,
  DedicatedCloudHostProfileOVH,
  DedicatedCloudHostResilienceOVH,
  DedicatedCloudHostStockProfileOVH,
  DedicatedCloudIamOVH,
  DedicatedCloudIpCountriesEnumOVH,
  DedicatedCloudIpDetailsOVH,
  DedicatedCloudIpOVH,
  DedicatedCloudLdpKindOVH,
  DedicatedCloudLdpSubscriptionOVH,
  DedicatedCloudLogSubscriptionResponseOVH,
  DedicatedCloudLogsURLOVH,
  DedicatedCloudNsxOVH,
  DedicatedCloudNsxtEdgeOVH,
  DedicatedCloudNsxtEdgeResilienceOVH,
  DedicatedCloudNsxtNsxtEdgeScalingCapabilityOVH,
  DedicatedCloudNsxtNsxtEdgeSizingCapabilityOVH,
  DedicatedCloudNsxtOVH,
  DedicatedCloudObjectRightOVH,
  DedicatedCloudOptionCompatibilityOVH,
  DedicatedCloudOsOVH,
  DedicatedCloudPasswordPolicyOVH,
  DedicatedCloudPccStockProfileOVH,
  DedicatedCloudPccZoneOVH,
  DedicatedCloudPciDssOVH,
  DedicatedCloudPrivateGatewayOVH,
  DedicatedCloudResourceNewPricesOVH,
  DedicatedCloudRightOVH,
  DedicatedCloudRobotOVH,
  DedicatedCloudSecurityOptionCompatibilityMatrixEntryOVH,
  DedicatedCloudSecurityOptionDependenciesTreeOVH,
  DedicatedCloudSecurityOptionOVH,
  DedicatedCloudSecurityOptionSecurityOptionEnumOVH,
  DedicatedCloudServicePackOVH,
  DedicatedCloudServicePackStatusOVH,
  DedicatedCloudSyslogForwardAccessNetworkOVH,
  DedicatedCloudSyslogForwardOVH,
  DedicatedCloudTagOVH,
  DedicatedCloudTaskOVH,
  DedicatedCloudTwoFAWhitelistOVH,
  DedicatedCloudUserOVH,
  DedicatedCloudVMEncryptionAccessNetworkOVH,
  DedicatedCloudVMEncryptionOVH,
  DedicatedCloudVcenterOVH,
  DedicatedCloudVendorOVH,
  DedicatedCloudVendorOvhIdOVH,
  DedicatedCloudVirtualMachineLicensingSummaryOVH,
  DedicatedCloudVlanOVH,
  DedicatedCloudVmOVH,
  DedicatedCloudVropsOVH,
  DedicatedCloudVropsOutgoingFlowOVH,
  DedicatedCloudVsanDatastoreOVH,
  DedicatedCloudZpoolStockProfileOVH,
  DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesParams,
  DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesParams,
  GetDedicatedCloudLocationPccZoneStockHostParams,
  GetDedicatedCloudLocationPccZoneStockZpoolParams,
  GetDedicatedCloudParams,
  GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskParams,
  GetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresParams,
  GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportParams,
  GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationParams,
  GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskParams,
  GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskParams,
  GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskParams,
  GetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedParams,
  GetDedicatedCloudServiceNameFilerFilerIdLocationParams,
  GetDedicatedCloudServiceNameFilerFilerIdTaskParams,
  GetDedicatedCloudServiceNameGlobalTasksParams,
  GetDedicatedCloudServiceNameIpNetworkTaskParams,
  GetDedicatedCloudServiceNameLogSubscriptionParams,
  GetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixParams,
  GetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeParams,
  GetDedicatedCloudServiceNameTaskParams,
  GetDedicatedCloudServiceNameUserParams,
  GetDedicatedCloudServiceNameUserUserIdTaskParams,
  Ipv4BlockOVH,
  PostDedicatedCloudServiceNameAllowedNetworkBody,
  PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateBody,
  PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateBody,
  PostDedicatedCloudServiceNameAutoscaleConfigurationBody,
  PostDedicatedCloudServiceNameChangeContactBody,
  PostDedicatedCloudServiceNameChangePropertiesBody,
  PostDedicatedCloudServiceNameConfirmTerminationBody,
  PostDedicatedCloudServiceNameDatacenterBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupBody,
  PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseBody,
  PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesBody,
  PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupBody,
  PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserBody,
  PostDedicatedCloudServiceNameFederationActiveDirectoryBody,
  PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody,
  PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateBody,
  PostDedicatedCloudServiceNameIamAddRoleBody,
  PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateBody,
  PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateBody,
  PostDedicatedCloudServiceNameLogSubscriptionBody,
  PostDedicatedCloudServiceNameLogUrlBody,
  PostDedicatedCloudServiceNameOrderNewFilerHourlyBody,
  PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingBody,
  PostDedicatedCloudServiceNameSyslogForwardForwarderBody,
  PostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesBody,
  PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateBody,
  PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateBody,
  PostDedicatedCloudServiceNameTwoFAWhitelistBody,
  PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesBody,
  PostDedicatedCloudServiceNameUpgradeVcenterBody,
  PostDedicatedCloudServiceNameUserBody,
  PostDedicatedCloudServiceNameUserUserIdChangePasswordBody,
  PostDedicatedCloudServiceNameUserUserIdChangePropertiesBody,
  PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberBody,
  PostDedicatedCloudServiceNameUserUserIdObjectRightBody,
  PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateBody,
  PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateBody,
  PostDedicatedCloudServiceNameVendorOvhIdBody,
  PostDedicatedCloudServiceNameVmEncryptionKmsBody,
  PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesBody,
  PostDedicatedCloudServiceNameVropsOutgoingFlowBody,
  PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesBody,
  PostDedicatedCloudServiceNameVropsUpgradeBody,
  PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody,
  ServicesServiceOVH,
  VrackDedicatedCloudOVH,
  VrackTaskOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List VMware on OVHcloud infrastructures
 */
export const getDedicatedCloud = (
    params?: GetDedicatedCloudParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudQueryKey = (params?: GetDedicatedCloudParams,) => {
    return [`/dedicatedCloud`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloud>>, TError = unknown>(params?: GetDedicatedCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloud>>> = ({ signal }) => getDedicatedCloud(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloud>>>
export type GetDedicatedCloudQueryError = unknown


export function useGetDedicatedCloud<TData = Awaited<ReturnType<typeof getDedicatedCloud>>, TError = unknown>(
 params: undefined |  GetDedicatedCloudParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloud<TData = Awaited<ReturnType<typeof getDedicatedCloud>>, TError = unknown>(
 params?: GetDedicatedCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloud<TData = Awaited<ReturnType<typeof getDedicatedCloud>>, TError = unknown>(
 params?: GetDedicatedCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List VMware on OVHcloud infrastructures
 */

export function useGetDedicatedCloud<TData = Awaited<ReturnType<typeof getDedicatedCloud>>, TError = unknown>(
 params?: GetDedicatedCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List commercial ranges
 */
export const getDedicatedCloudCommercialRange = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud/commercialRange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudCommercialRangeQueryKey = () => {
    return [`/dedicatedCloud/commercialRange`] as const;
    }

    
export const getGetDedicatedCloudCommercialRangeQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudCommercialRangeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>> = ({ signal }) => getDedicatedCloudCommercialRange(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudCommercialRangeQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>>
export type GetDedicatedCloudCommercialRangeQueryError = unknown


export function useGetDedicatedCloudCommercialRange<TData = Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudCommercialRange<TData = Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudCommercialRange<TData = Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List commercial ranges
 */

export function useGetDedicatedCloudCommercialRange<TData = Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudCommercialRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudCommercialRangeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get commercial range
 */
export const getDedicatedCloudCommercialRangeCommercialRangeName = (
    commercialRangeName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudCommercialRangeOVH>(
      {url: `/dedicatedCloud/commercialRange/${commercialRangeName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudCommercialRangeCommercialRangeNameQueryKey = (commercialRangeName: string,) => {
    return [`/dedicatedCloud/commercialRange/${commercialRangeName}`] as const;
    }

    
export const getGetDedicatedCloudCommercialRangeCommercialRangeNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>, TError = unknown>(commercialRangeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudCommercialRangeCommercialRangeNameQueryKey(commercialRangeName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>> = ({ signal }) => getDedicatedCloudCommercialRangeCommercialRangeName(commercialRangeName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(commercialRangeName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudCommercialRangeCommercialRangeNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>>
export type GetDedicatedCloudCommercialRangeCommercialRangeNameQueryError = unknown


export function useGetDedicatedCloudCommercialRangeCommercialRangeName<TData = Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>, TError = unknown>(
 commercialRangeName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudCommercialRangeCommercialRangeName<TData = Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>, TError = unknown>(
 commercialRangeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudCommercialRangeCommercialRangeName<TData = Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>, TError = unknown>(
 commercialRangeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get commercial range
 */

export function useGetDedicatedCloudCommercialRangeCommercialRangeName<TData = Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>, TError = unknown>(
 commercialRangeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudCommercialRangeCommercialRangeName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudCommercialRangeCommercialRangeNameQueryOptions(commercialRangeName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List hosting locations
 */
export const getDedicatedCloudLocation = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud/location`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudLocationQueryKey = () => {
    return [`/dedicatedCloud/location`] as const;
    }

    
export const getGetDedicatedCloudLocationQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudLocation>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudLocationQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudLocation>>> = ({ signal }) => getDedicatedCloudLocation(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudLocationQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudLocation>>>
export type GetDedicatedCloudLocationQueryError = unknown


export function useGetDedicatedCloudLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudLocation>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudLocation>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudLocation>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List hosting locations
 */

export function useGetDedicatedCloudLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudLocation>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudLocationQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get hosting location
 */
export const getDedicatedCloudLocationPccZone = (
    pccZone: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudPccZoneOVH>(
      {url: `/dedicatedCloud/location/${pccZone}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudLocationPccZoneQueryKey = (pccZone: string,) => {
    return [`/dedicatedCloud/location/${pccZone}`] as const;
    }

    
export const getGetDedicatedCloudLocationPccZoneQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>, TError = unknown>(pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudLocationPccZoneQueryKey(pccZone);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>> = ({ signal }) => getDedicatedCloudLocationPccZone(pccZone, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(pccZone), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudLocationPccZoneQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>>
export type GetDedicatedCloudLocationPccZoneQueryError = unknown


export function useGetDedicatedCloudLocationPccZone<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>, TError = unknown>(
 pccZone: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZone<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>, TError = unknown>(
 pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZone<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>, TError = unknown>(
 pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get hosting location
 */

export function useGetDedicatedCloudLocationPccZone<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>, TError = unknown>(
 pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudLocationPccZoneQueryOptions(pccZone,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List host profiles on hosting location
 */
export const getDedicatedCloudLocationPccZoneHostProfile = (
    pccZone: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/location/${pccZone}/hostProfile`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudLocationPccZoneHostProfileQueryKey = (pccZone: string,) => {
    return [`/dedicatedCloud/location/${pccZone}/hostProfile`] as const;
    }

    
export const getGetDedicatedCloudLocationPccZoneHostProfileQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>, TError = unknown>(pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudLocationPccZoneHostProfileQueryKey(pccZone);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>> = ({ signal }) => getDedicatedCloudLocationPccZoneHostProfile(pccZone, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(pccZone), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudLocationPccZoneHostProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>>
export type GetDedicatedCloudLocationPccZoneHostProfileQueryError = unknown


export function useGetDedicatedCloudLocationPccZoneHostProfile<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>, TError = unknown>(
 pccZone: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneHostProfile<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>, TError = unknown>(
 pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneHostProfile<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>, TError = unknown>(
 pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List host profiles on hosting location
 */

export function useGetDedicatedCloudLocationPccZoneHostProfile<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>, TError = unknown>(
 pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudLocationPccZoneHostProfileQueryOptions(pccZone,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get host profile
 */
export const getDedicatedCloudLocationPccZoneHostProfileId = (
    pccZone: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudHostProfileOVH>(
      {url: `/dedicatedCloud/location/${pccZone}/hostProfile/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudLocationPccZoneHostProfileIdQueryKey = (pccZone: string,
    id: number,) => {
    return [`/dedicatedCloud/location/${pccZone}/hostProfile/${id}`] as const;
    }

    
export const getGetDedicatedCloudLocationPccZoneHostProfileIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>, TError = unknown>(pccZone: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudLocationPccZoneHostProfileIdQueryKey(pccZone,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>> = ({ signal }) => getDedicatedCloudLocationPccZoneHostProfileId(pccZone,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(pccZone && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudLocationPccZoneHostProfileIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>>
export type GetDedicatedCloudLocationPccZoneHostProfileIdQueryError = unknown


export function useGetDedicatedCloudLocationPccZoneHostProfileId<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>, TError = unknown>(
 pccZone: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneHostProfileId<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>, TError = unknown>(
 pccZone: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneHostProfileId<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>, TError = unknown>(
 pccZone: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get host profile
 */

export function useGetDedicatedCloudLocationPccZoneHostProfileId<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>, TError = unknown>(
 pccZone: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHostProfileId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudLocationPccZoneHostProfileIdQueryOptions(pccZone,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List hypervisor versions on hosting location
 */
export const getDedicatedCloudLocationPccZoneHypervisor = (
    pccZone: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud/location/${pccZone}/hypervisor`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudLocationPccZoneHypervisorQueryKey = (pccZone: string,) => {
    return [`/dedicatedCloud/location/${pccZone}/hypervisor`] as const;
    }

    
export const getGetDedicatedCloudLocationPccZoneHypervisorQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>, TError = unknown>(pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudLocationPccZoneHypervisorQueryKey(pccZone);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>> = ({ signal }) => getDedicatedCloudLocationPccZoneHypervisor(pccZone, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(pccZone), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudLocationPccZoneHypervisorQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>>
export type GetDedicatedCloudLocationPccZoneHypervisorQueryError = unknown


export function useGetDedicatedCloudLocationPccZoneHypervisor<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>, TError = unknown>(
 pccZone: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneHypervisor<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>, TError = unknown>(
 pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneHypervisor<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>, TError = unknown>(
 pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List hypervisor versions on hosting location
 */

export function useGetDedicatedCloudLocationPccZoneHypervisor<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>, TError = unknown>(
 pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisor>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudLocationPccZoneHypervisorQueryOptions(pccZone,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get hypervisor
 */
export const getDedicatedCloudLocationPccZoneHypervisorShortName = (
    pccZone: string,
    shortName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudOsOVH>(
      {url: `/dedicatedCloud/location/${pccZone}/hypervisor/${shortName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudLocationPccZoneHypervisorShortNameQueryKey = (pccZone: string,
    shortName: string,) => {
    return [`/dedicatedCloud/location/${pccZone}/hypervisor/${shortName}`] as const;
    }

    
export const getGetDedicatedCloudLocationPccZoneHypervisorShortNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>, TError = unknown>(pccZone: string,
    shortName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudLocationPccZoneHypervisorShortNameQueryKey(pccZone,shortName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>> = ({ signal }) => getDedicatedCloudLocationPccZoneHypervisorShortName(pccZone,shortName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(pccZone && shortName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudLocationPccZoneHypervisorShortNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>>
export type GetDedicatedCloudLocationPccZoneHypervisorShortNameQueryError = unknown


export function useGetDedicatedCloudLocationPccZoneHypervisorShortName<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>, TError = unknown>(
 pccZone: string,
    shortName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneHypervisorShortName<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>, TError = unknown>(
 pccZone: string,
    shortName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneHypervisorShortName<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>, TError = unknown>(
 pccZone: string,
    shortName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get hypervisor
 */

export function useGetDedicatedCloudLocationPccZoneHypervisorShortName<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>, TError = unknown>(
 pccZone: string,
    shortName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneHypervisorShortName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudLocationPccZoneHypervisorShortNameQueryOptions(pccZone,shortName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get hosts stock
 */
export const getDedicatedCloudLocationPccZoneStockHost = (
    pccZone: string,
    params?: GetDedicatedCloudLocationPccZoneStockHostParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudHostStockProfileOVH[]>(
      {url: `/dedicatedCloud/location/${pccZone}/stock/host`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudLocationPccZoneStockHostQueryKey = (pccZone: string,
    params?: GetDedicatedCloudLocationPccZoneStockHostParams,) => {
    return [`/dedicatedCloud/location/${pccZone}/stock/host`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudLocationPccZoneStockHostQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>, TError = unknown>(pccZone: string,
    params?: GetDedicatedCloudLocationPccZoneStockHostParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudLocationPccZoneStockHostQueryKey(pccZone,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>> = ({ signal }) => getDedicatedCloudLocationPccZoneStockHost(pccZone,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(pccZone), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudLocationPccZoneStockHostQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>>
export type GetDedicatedCloudLocationPccZoneStockHostQueryError = unknown


export function useGetDedicatedCloudLocationPccZoneStockHost<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>, TError = unknown>(
 pccZone: string,
    params: undefined |  GetDedicatedCloudLocationPccZoneStockHostParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneStockHost<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>, TError = unknown>(
 pccZone: string,
    params?: GetDedicatedCloudLocationPccZoneStockHostParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneStockHost<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>, TError = unknown>(
 pccZone: string,
    params?: GetDedicatedCloudLocationPccZoneStockHostParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get hosts stock
 */

export function useGetDedicatedCloudLocationPccZoneStockHost<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>, TError = unknown>(
 pccZone: string,
    params?: GetDedicatedCloudLocationPccZoneStockHostParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockHost>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudLocationPccZoneStockHostQueryOptions(pccZone,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get hypervisors stock
 */
export const getDedicatedCloudLocationPccZoneStockPcc = (
    pccZone: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudPccStockProfileOVH[]>(
      {url: `/dedicatedCloud/location/${pccZone}/stock/pcc`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudLocationPccZoneStockPccQueryKey = (pccZone: string,) => {
    return [`/dedicatedCloud/location/${pccZone}/stock/pcc`] as const;
    }

    
export const getGetDedicatedCloudLocationPccZoneStockPccQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>, TError = unknown>(pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudLocationPccZoneStockPccQueryKey(pccZone);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>> = ({ signal }) => getDedicatedCloudLocationPccZoneStockPcc(pccZone, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(pccZone), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudLocationPccZoneStockPccQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>>
export type GetDedicatedCloudLocationPccZoneStockPccQueryError = unknown


export function useGetDedicatedCloudLocationPccZoneStockPcc<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>, TError = unknown>(
 pccZone: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneStockPcc<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>, TError = unknown>(
 pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneStockPcc<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>, TError = unknown>(
 pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get hypervisors stock
 */

export function useGetDedicatedCloudLocationPccZoneStockPcc<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>, TError = unknown>(
 pccZone: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockPcc>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudLocationPccZoneStockPccQueryOptions(pccZone,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get datastores stock
 */
export const getDedicatedCloudLocationPccZoneStockZpool = (
    pccZone: string,
    params?: GetDedicatedCloudLocationPccZoneStockZpoolParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudZpoolStockProfileOVH[]>(
      {url: `/dedicatedCloud/location/${pccZone}/stock/zpool`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudLocationPccZoneStockZpoolQueryKey = (pccZone: string,
    params?: GetDedicatedCloudLocationPccZoneStockZpoolParams,) => {
    return [`/dedicatedCloud/location/${pccZone}/stock/zpool`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudLocationPccZoneStockZpoolQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>, TError = unknown>(pccZone: string,
    params?: GetDedicatedCloudLocationPccZoneStockZpoolParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudLocationPccZoneStockZpoolQueryKey(pccZone,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>> = ({ signal }) => getDedicatedCloudLocationPccZoneStockZpool(pccZone,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(pccZone), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudLocationPccZoneStockZpoolQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>>
export type GetDedicatedCloudLocationPccZoneStockZpoolQueryError = unknown


export function useGetDedicatedCloudLocationPccZoneStockZpool<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>, TError = unknown>(
 pccZone: string,
    params: undefined |  GetDedicatedCloudLocationPccZoneStockZpoolParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneStockZpool<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>, TError = unknown>(
 pccZone: string,
    params?: GetDedicatedCloudLocationPccZoneStockZpoolParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudLocationPccZoneStockZpool<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>, TError = unknown>(
 pccZone: string,
    params?: GetDedicatedCloudLocationPccZoneStockZpoolParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get datastores stock
 */

export function useGetDedicatedCloudLocationPccZoneStockZpool<TData = Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>, TError = unknown>(
 pccZone: string,
    params?: GetDedicatedCloudLocationPccZoneStockZpoolParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudLocationPccZoneStockZpool>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudLocationPccZoneStockZpoolQueryOptions(pccZone,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get VMware on OVHcloud
 */
export const getDedicatedCloudServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudDedicatedCloudWithIAMOVH>(
      {url: `/dedicatedCloud/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceName>>> = ({ signal }) => getDedicatedCloudServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceName>>>
export type GetDedicatedCloudServiceNameQueryError = unknown


export function useGetDedicatedCloudServiceName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get VMware on OVHcloud
 */

export function useGetDedicatedCloudServiceName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List networks allowed on infrastructure firewall
 */
export const getDedicatedCloudServiceNameAllowedNetwork = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/allowedNetwork`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameAllowedNetworkQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/allowedNetwork`] as const;
    }

    
export const getGetDedicatedCloudServiceNameAllowedNetworkQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameAllowedNetworkQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>> = ({ signal }) => getDedicatedCloudServiceNameAllowedNetwork(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameAllowedNetworkQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>>
export type GetDedicatedCloudServiceNameAllowedNetworkQueryError = unknown


export function useGetDedicatedCloudServiceNameAllowedNetwork<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAllowedNetwork<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAllowedNetwork<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List networks allowed on infrastructure firewall
 */

export function useGetDedicatedCloudServiceNameAllowedNetwork<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameAllowedNetworkQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create network allowed on infrastructure firewall
 */
export const postDedicatedCloudServiceNameAllowedNetwork = (
    serviceName: string,
    postDedicatedCloudServiceNameAllowedNetworkBody: PostDedicatedCloudServiceNameAllowedNetworkBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/allowedNetwork`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameAllowedNetworkBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameAllowedNetworkMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetwork>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameAllowedNetworkBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetwork>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameAllowedNetworkBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetwork>>, {serviceName: string;data: PostDedicatedCloudServiceNameAllowedNetworkBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameAllowedNetwork(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameAllowedNetworkMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetwork>>>
    export type PostDedicatedCloudServiceNameAllowedNetworkMutationBody = PostDedicatedCloudServiceNameAllowedNetworkBody
    export type PostDedicatedCloudServiceNameAllowedNetworkMutationError = unknown

    /**
 * @summary Create network allowed on infrastructure firewall
 */
export const usePostDedicatedCloudServiceNameAllowedNetwork = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetwork>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameAllowedNetworkBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetwork>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameAllowedNetworkBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameAllowedNetworkMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove network allowed on infrastructure firewall
 */
export const deleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessId = (
    serviceName: string,
    networkAccessId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/allowedNetwork/${networkAccessId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError,{serviceName: string;networkAccessId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError,{serviceName: string;networkAccessId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, {serviceName: string;networkAccessId: number}> = (props) => {
          const {serviceName,networkAccessId} = props ?? {};

          return  deleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessId(serviceName,networkAccessId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>>
    
    export type DeleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdMutationError = unknown

    /**
 * @summary Remove network allowed on infrastructure firewall
 */
export const useDeleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError,{serviceName: string;networkAccessId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>,
        TError,
        {serviceName: string;networkAccessId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get network allowed on infrastructure firewall
 */
export const getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId = (
    serviceName: string,
    networkAccessId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudAllowedNetworkOVH>(
      {url: `/dedicatedCloud/${serviceName}/allowedNetwork/${networkAccessId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdQueryKey = (serviceName: string,
    networkAccessId: number,) => {
    return [`/dedicatedCloud/${serviceName}/allowedNetwork/${networkAccessId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError = unknown>(serviceName: string,
    networkAccessId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdQueryKey(serviceName,networkAccessId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>> = ({ signal }) => getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId(serviceName,networkAccessId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && networkAccessId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>>
export type GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdQueryError = unknown


export function useGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError = unknown>(
 serviceName: string,
    networkAccessId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError = unknown>(
 serviceName: string,
    networkAccessId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError = unknown>(
 serviceName: string,
    networkAccessId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get network allowed on infrastructure firewall
 */

export function useGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError = unknown>(
 serviceName: string,
    networkAccessId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdQueryOptions(serviceName,networkAccessId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update network allowed on infrastructure firewall
 */
export const putDedicatedCloudServiceNameAllowedNetworkNetworkAccessId = (
    serviceName: string,
    networkAccessId: number,
    dedicatedCloudAllowedNetworkOVH: NonReadonly<DedicatedCloudAllowedNetworkOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/allowedNetwork/${networkAccessId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedCloudAllowedNetworkOVH
    },
      options);
    }
  


export const getPutDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError,{serviceName: string;networkAccessId: number;data: NonReadonly<DedicatedCloudAllowedNetworkOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError,{serviceName: string;networkAccessId: number;data: NonReadonly<DedicatedCloudAllowedNetworkOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, {serviceName: string;networkAccessId: number;data: NonReadonly<DedicatedCloudAllowedNetworkOVH>}> = (props) => {
          const {serviceName,networkAccessId,data} = props ?? {};

          return  putDedicatedCloudServiceNameAllowedNetworkNetworkAccessId(serviceName,networkAccessId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>>
    export type PutDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdMutationBody = NonReadonly<DedicatedCloudAllowedNetworkOVH>
    export type PutDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdMutationError = unknown

    /**
 * @summary Update network allowed on infrastructure firewall
 */
export const usePutDedicatedCloudServiceNameAllowedNetworkNetworkAccessId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>, TError,{serviceName: string;networkAccessId: number;data: NonReadonly<DedicatedCloudAllowedNetworkOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedCloudServiceNameAllowedNetworkNetworkAccessId>>,
        TError,
        {serviceName: string;networkAccessId: number;data: NonReadonly<DedicatedCloudAllowedNetworkOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List operations associated to a network allowed on infrastructure firewall
 */
export const getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask = (
    serviceName: string,
    networkAccessId: number,
    params?: GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/allowedNetwork/${networkAccessId}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskQueryKey = (serviceName: string,
    networkAccessId: number,
    params?: GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskParams,) => {
    return [`/dedicatedCloud/${serviceName}/allowedNetwork/${networkAccessId}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>, TError = unknown>(serviceName: string,
    networkAccessId: number,
    params?: GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskQueryKey(serviceName,networkAccessId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>> = ({ signal }) => getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask(serviceName,networkAccessId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && networkAccessId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>>
export type GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskQueryError = unknown


export function useGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>, TError = unknown>(
 serviceName: string,
    networkAccessId: number,
    params: undefined |  GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>, TError = unknown>(
 serviceName: string,
    networkAccessId: number,
    params?: GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>, TError = unknown>(
 serviceName: string,
    networkAccessId: number,
    params?: GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List operations associated to a network allowed on infrastructure firewall
 */

export function useGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>, TError = unknown>(
 serviceName: string,
    networkAccessId: number,
    params?: GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskQueryOptions(serviceName,networkAccessId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get operation
 */
export const getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId = (
    serviceName: string,
    networkAccessId: number,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/allowedNetwork/${networkAccessId}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdQueryKey = (serviceName: string,
    networkAccessId: number,
    taskId: number,) => {
    return [`/dedicatedCloud/${serviceName}/allowedNetwork/${networkAccessId}/task/${taskId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>, TError = unknown>(serviceName: string,
    networkAccessId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdQueryKey(serviceName,networkAccessId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>> = ({ signal }) => getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId(serviceName,networkAccessId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && networkAccessId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>>
export type GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdQueryError = unknown


export function useGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    networkAccessId: number,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    networkAccessId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    networkAccessId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get operation
 */

export function useGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    networkAccessId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdQueryOptions(serviceName,networkAccessId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the execution date of a maintenance operation
 */
export const postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDate = (
    serviceName: string,
    networkAccessId: number,
    taskId: number,
    postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateBody: PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/allowedNetwork/${networkAccessId}/task/${taskId}/changeMaintenanceExecutionDate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;networkAccessId: number;taskId: number;data: PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;networkAccessId: number;taskId: number;data: PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDate>>, {serviceName: string;networkAccessId: number;taskId: number;data: PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateBody}> = (props) => {
          const {serviceName,networkAccessId,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDate(serviceName,networkAccessId,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDate>>>
    export type PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateMutationBody = PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateBody
    export type PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateMutationError = unknown

    /**
 * @summary Change the execution date of a maintenance operation
 */
export const usePostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;networkAccessId: number;taskId: number;data: PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDate>>,
        TError,
        {serviceName: string;networkAccessId: number;taskId: number;data: PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Relaunch operation currently in error state
 */
export const postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskState = (
    serviceName: string,
    networkAccessId: number,
    taskId: number,
    postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateBody: PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/allowedNetwork/${networkAccessId}/task/${taskId}/resetTaskState`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;networkAccessId: number;taskId: number;data: PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;networkAccessId: number;taskId: number;data: PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskState>>, {serviceName: string;networkAccessId: number;taskId: number;data: PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateBody}> = (props) => {
          const {serviceName,networkAccessId,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskState(serviceName,networkAccessId,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskState>>>
    export type PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateMutationBody = PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateBody
    export type PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateMutationError = unknown

    /**
 * @summary Relaunch operation currently in error state
 */
export const usePostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskState = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;networkAccessId: number;taskId: number;data: PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskState>>,
        TError,
        {serviceName: string;networkAccessId: number;taskId: number;data: PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get autoscale option
 */
export const getDedicatedCloudServiceNameAutoscale = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudAutoScaleVirtualOVH>(
      {url: `/dedicatedCloud/${serviceName}/autoscale`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameAutoscaleQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/autoscale`] as const;
    }

    
export const getGetDedicatedCloudServiceNameAutoscaleQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameAutoscaleQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>> = ({ signal }) => getDedicatedCloudServiceNameAutoscale(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameAutoscaleQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>>
export type GetDedicatedCloudServiceNameAutoscaleQueryError = unknown


export function useGetDedicatedCloudServiceNameAutoscale<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAutoscale<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAutoscale<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get autoscale option
 */

export function useGetDedicatedCloudServiceNameAutoscale<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscale>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameAutoscaleQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List autoscale configurations
 */
export const getDedicatedCloudServiceNameAutoscaleConfiguration = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/autoscale/configuration`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameAutoscaleConfigurationQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/autoscale/configuration`] as const;
    }

    
export const getGetDedicatedCloudServiceNameAutoscaleConfigurationQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameAutoscaleConfigurationQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>> = ({ signal }) => getDedicatedCloudServiceNameAutoscaleConfiguration(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameAutoscaleConfigurationQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>>
export type GetDedicatedCloudServiceNameAutoscaleConfigurationQueryError = unknown


export function useGetDedicatedCloudServiceNameAutoscaleConfiguration<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAutoscaleConfiguration<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAutoscaleConfiguration<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List autoscale configurations
 */

export function useGetDedicatedCloudServiceNameAutoscaleConfiguration<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfiguration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameAutoscaleConfigurationQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create autoscale configuration
 */
export const postDedicatedCloudServiceNameAutoscaleConfiguration = (
    serviceName: string,
    postDedicatedCloudServiceNameAutoscaleConfigurationBody: PostDedicatedCloudServiceNameAutoscaleConfigurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/autoscale/configuration`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameAutoscaleConfigurationBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameAutoscaleConfigurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAutoscaleConfiguration>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameAutoscaleConfigurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAutoscaleConfiguration>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameAutoscaleConfigurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAutoscaleConfiguration>>, {serviceName: string;data: PostDedicatedCloudServiceNameAutoscaleConfigurationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameAutoscaleConfiguration(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameAutoscaleConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAutoscaleConfiguration>>>
    export type PostDedicatedCloudServiceNameAutoscaleConfigurationMutationBody = PostDedicatedCloudServiceNameAutoscaleConfigurationBody
    export type PostDedicatedCloudServiceNameAutoscaleConfigurationMutationError = unknown

    /**
 * @summary Create autoscale configuration
 */
export const usePostDedicatedCloudServiceNameAutoscaleConfiguration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameAutoscaleConfiguration>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameAutoscaleConfigurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameAutoscaleConfiguration>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameAutoscaleConfigurationBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameAutoscaleConfigurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove autoscale configuration
 */
export const deleteDedicatedCloudServiceNameAutoscaleConfigurationId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/autoscale/configuration/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameAutoscaleConfigurationIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameAutoscaleConfigurationId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteDedicatedCloudServiceNameAutoscaleConfigurationId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameAutoscaleConfigurationIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameAutoscaleConfigurationId>>>
    
    export type DeleteDedicatedCloudServiceNameAutoscaleConfigurationIdMutationError = unknown

    /**
 * @summary Remove autoscale configuration
 */
export const useDeleteDedicatedCloudServiceNameAutoscaleConfigurationId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameAutoscaleConfigurationId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameAutoscaleConfigurationIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get autoscale configuration
 */
export const getDedicatedCloudServiceNameAutoscaleConfigurationId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudAutoScaleConfigOVH>(
      {url: `/dedicatedCloud/${serviceName}/autoscale/configuration/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameAutoscaleConfigurationIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/dedicatedCloud/${serviceName}/autoscale/configuration/${id}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameAutoscaleConfigurationIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameAutoscaleConfigurationIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>> = ({ signal }) => getDedicatedCloudServiceNameAutoscaleConfigurationId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameAutoscaleConfigurationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>>
export type GetDedicatedCloudServiceNameAutoscaleConfigurationIdQueryError = unknown


export function useGetDedicatedCloudServiceNameAutoscaleConfigurationId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAutoscaleConfigurationId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameAutoscaleConfigurationId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get autoscale configuration
 */

export function useGetDedicatedCloudServiceNameAutoscaleConfigurationId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameAutoscaleConfigurationIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update autoscale configuration
 */
export const putDedicatedCloudServiceNameAutoscaleConfigurationId = (
    serviceName: string,
    id: number,
    dedicatedCloudAutoScaleConfigOVH: NonReadonly<DedicatedCloudAutoScaleConfigOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/autoscale/configuration/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedCloudAutoScaleConfigOVH
    },
      options);
    }
  


export const getPutDedicatedCloudServiceNameAutoscaleConfigurationIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError,{serviceName: string;id: number;data: NonReadonly<DedicatedCloudAutoScaleConfigOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError,{serviceName: string;id: number;data: NonReadonly<DedicatedCloudAutoScaleConfigOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedCloudServiceNameAutoscaleConfigurationId>>, {serviceName: string;id: number;data: NonReadonly<DedicatedCloudAutoScaleConfigOVH>}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  putDedicatedCloudServiceNameAutoscaleConfigurationId(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedCloudServiceNameAutoscaleConfigurationIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedCloudServiceNameAutoscaleConfigurationId>>>
    export type PutDedicatedCloudServiceNameAutoscaleConfigurationIdMutationBody = NonReadonly<DedicatedCloudAutoScaleConfigOVH>
    export type PutDedicatedCloudServiceNameAutoscaleConfigurationIdMutationError = unknown

    /**
 * @summary Update autoscale configuration
 */
export const usePutDedicatedCloudServiceNameAutoscaleConfigurationId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameAutoscaleConfigurationId>>, TError,{serviceName: string;id: number;data: NonReadonly<DedicatedCloudAutoScaleConfigOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedCloudServiceNameAutoscaleConfigurationId>>,
        TError,
        {serviceName: string;id: number;data: NonReadonly<DedicatedCloudAutoScaleConfigOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedCloudServiceNameAutoscaleConfigurationIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List backup repositories
 */
export const getDedicatedCloudServiceNameBackupRepository = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/backupRepository`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameBackupRepositoryQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/backupRepository`] as const;
    }

    
export const getGetDedicatedCloudServiceNameBackupRepositoryQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameBackupRepositoryQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>> = ({ signal }) => getDedicatedCloudServiceNameBackupRepository(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameBackupRepositoryQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>>
export type GetDedicatedCloudServiceNameBackupRepositoryQueryError = unknown


export function useGetDedicatedCloudServiceNameBackupRepository<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameBackupRepository<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameBackupRepository<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List backup repositories
 */

export function useGetDedicatedCloudServiceNameBackupRepository<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepository>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameBackupRepositoryQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get backup repository
 */
export const getDedicatedCloudServiceNameBackupRepositoryRepositoryId = (
    serviceName: string,
    repositoryId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudBackupRepositoryOVH>(
      {url: `/dedicatedCloud/${serviceName}/backupRepository/${repositoryId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameBackupRepositoryRepositoryIdQueryKey = (serviceName: string,
    repositoryId: number,) => {
    return [`/dedicatedCloud/${serviceName}/backupRepository/${repositoryId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameBackupRepositoryRepositoryIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>, TError = unknown>(serviceName: string,
    repositoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameBackupRepositoryRepositoryIdQueryKey(serviceName,repositoryId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>> = ({ signal }) => getDedicatedCloudServiceNameBackupRepositoryRepositoryId(serviceName,repositoryId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && repositoryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameBackupRepositoryRepositoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>>
export type GetDedicatedCloudServiceNameBackupRepositoryRepositoryIdQueryError = unknown


export function useGetDedicatedCloudServiceNameBackupRepositoryRepositoryId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>, TError = unknown>(
 serviceName: string,
    repositoryId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameBackupRepositoryRepositoryId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>, TError = unknown>(
 serviceName: string,
    repositoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameBackupRepositoryRepositoryId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>, TError = unknown>(
 serviceName: string,
    repositoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get backup repository
 */

export function useGetDedicatedCloudServiceNameBackupRepositoryRepositoryId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>, TError = unknown>(
 serviceName: string,
    repositoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameBackupRepositoryRepositoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameBackupRepositoryRepositoryIdQueryOptions(serviceName,repositoryId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check if global datastore have enough free space to host NSX-T edges
 */
export const getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores = (
    serviceName: string,
    params?: GetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/dedicatedCloud/${serviceName}/canDeployNsxtEdgesOnGlobalDatastores`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresQueryKey = (serviceName: string,
    params?: GetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresParams,) => {
    return [`/dedicatedCloud/${serviceName}/canDeployNsxtEdgesOnGlobalDatastores`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>> = ({ signal }) => getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>>
export type GetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresQueryError = unknown


export function useGetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check if global datastore have enough free space to host NSX-T edges
 */

export function useGetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastores>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get available features
 */
export const getDedicatedCloudServiceNameCapabilities = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudCapabilitiesOVH>(
      {url: `/dedicatedCloud/${serviceName}/capabilities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameCapabilitiesQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/capabilities`] as const;
    }

    
export const getGetDedicatedCloudServiceNameCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameCapabilitiesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>> = ({ signal }) => getDedicatedCloudServiceNameCapabilities(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>>
export type GetDedicatedCloudServiceNameCapabilitiesQueryError = unknown


export function useGetDedicatedCloudServiceNameCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get available features
 */

export function useGetDedicatedCloudServiceNameCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameCapabilitiesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a contact change procedure
 */
export const postDedicatedCloudServiceNameChangeContact = (
    serviceName: string,
    postDedicatedCloudServiceNameChangeContactBody: PostDedicatedCloudServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameChangeContact>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameChangeContact>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameChangeContact>>, {serviceName: string;data: PostDedicatedCloudServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameChangeContact>>>
    export type PostDedicatedCloudServiceNameChangeContactMutationBody = PostDedicatedCloudServiceNameChangeContactBody
    export type PostDedicatedCloudServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostDedicatedCloudServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameChangeContact>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update VMware on OVHcloud
 */
export const postDedicatedCloudServiceNameChangeProperties = (
    serviceName: string,
    postDedicatedCloudServiceNameChangePropertiesBody: PostDedicatedCloudServiceNameChangePropertiesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/changeProperties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameChangePropertiesBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameChangePropertiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameChangeProperties>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameChangeProperties>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameChangePropertiesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameChangeProperties>>, {serviceName: string;data: PostDedicatedCloudServiceNameChangePropertiesBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameChangeProperties(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameChangePropertiesMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameChangeProperties>>>
    export type PostDedicatedCloudServiceNameChangePropertiesMutationBody = PostDedicatedCloudServiceNameChangePropertiesBody
    export type PostDedicatedCloudServiceNameChangePropertiesMutationError = unknown

    /**
 * @summary Update VMware on OVHcloud
 */
export const usePostDedicatedCloudServiceNameChangeProperties = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameChangeProperties>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameChangeProperties>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameChangePropertiesBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameChangePropertiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get compliant commercial ranges
 */
export const getDedicatedCloudServiceNameCommercialRangeCompliance = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudCompliantRangesOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/commercialRange/compliance`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameCommercialRangeComplianceQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/commercialRange/compliance`] as const;
    }

    
export const getGetDedicatedCloudServiceNameCommercialRangeComplianceQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameCommercialRangeComplianceQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>> = ({ signal }) => getDedicatedCloudServiceNameCommercialRangeCompliance(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameCommercialRangeComplianceQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>>
export type GetDedicatedCloudServiceNameCommercialRangeComplianceQueryError = unknown


export function useGetDedicatedCloudServiceNameCommercialRangeCompliance<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameCommercialRangeCompliance<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameCommercialRangeCompliance<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get compliant commercial ranges
 */

export function useGetDedicatedCloudServiceNameCommercialRangeCompliance<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeCompliance>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameCommercialRangeComplianceQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get orderable commercial ranges
 */
export const getDedicatedCloudServiceNameCommercialRangeOrderable = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud/${serviceName}/commercialRange/orderable`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameCommercialRangeOrderableQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/commercialRange/orderable`] as const;
    }

    
export const getGetDedicatedCloudServiceNameCommercialRangeOrderableQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameCommercialRangeOrderableQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>> = ({ signal }) => getDedicatedCloudServiceNameCommercialRangeOrderable(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameCommercialRangeOrderableQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>>
export type GetDedicatedCloudServiceNameCommercialRangeOrderableQueryError = unknown


export function useGetDedicatedCloudServiceNameCommercialRangeOrderable<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameCommercialRangeOrderable<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameCommercialRangeOrderable<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get orderable commercial ranges
 */

export function useGetDedicatedCloudServiceNameCommercialRangeOrderable<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameCommercialRangeOrderable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameCommercialRangeOrderableQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Confirm service termination
 */
export const postDedicatedCloudServiceNameConfirmTermination = (
    serviceName: string,
    postDedicatedCloudServiceNameConfirmTerminationBody: PostDedicatedCloudServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicatedCloud/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameConfirmTermination>>, {serviceName: string;data: PostDedicatedCloudServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameConfirmTermination>>>
    export type PostDedicatedCloudServiceNameConfirmTerminationMutationBody = PostDedicatedCloudServiceNameConfirmTerminationBody
    export type PostDedicatedCloudServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostDedicatedCloudServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List virtual datacenters
 */
export const getDedicatedCloudServiceNameDatacenter = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenter(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>>
export type GetDedicatedCloudServiceNameDatacenterQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenter<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenter<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenter<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List virtual datacenters
 */

export function useGetDedicatedCloudServiceNameDatacenter<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create virtual datacenter
 */
export const postDedicatedCloudServiceNameDatacenter = (
    serviceName: string,
    postDedicatedCloudServiceNameDatacenterBody: PostDedicatedCloudServiceNameDatacenterBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenter>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameDatacenterBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenter>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameDatacenterBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenter>>, {serviceName: string;data: PostDedicatedCloudServiceNameDatacenterBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenter(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenter>>>
    export type PostDedicatedCloudServiceNameDatacenterMutationBody = PostDedicatedCloudServiceNameDatacenterBody
    export type PostDedicatedCloudServiceNameDatacenterMutationError = unknown

    /**
 * @summary Create virtual datacenter
 */
export const usePostDedicatedCloudServiceNameDatacenter = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenter>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameDatacenterBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenter>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameDatacenterBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove virtual datacenter
 */
export const deleteDedicatedCloudServiceNameDatacenterDatacenterId = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameDatacenterDatacenterIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterId>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterId>>, TError,{serviceName: string;datacenterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterId>>, {serviceName: string;datacenterId: number}> = (props) => {
          const {serviceName,datacenterId} = props ?? {};

          return  deleteDedicatedCloudServiceNameDatacenterDatacenterId(serviceName,datacenterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameDatacenterDatacenterIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterId>>>
    
    export type DeleteDedicatedCloudServiceNameDatacenterDatacenterIdMutationError = unknown

    /**
 * @summary Remove virtual datacenter
 */
export const useDeleteDedicatedCloudServiceNameDatacenterDatacenterId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterId>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterId>>,
        TError,
        {serviceName: string;datacenterId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameDatacenterDatacenterIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get virtual datacenter
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterId = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudDatacenterOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterId(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get virtual datacenter
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update virtual datacenter
 */
export const putDedicatedCloudServiceNameDatacenterDatacenterId = (
    serviceName: string,
    datacenterId: number,
    dedicatedCloudDatacenterOVH: NonReadonly<DedicatedCloudDatacenterOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedCloudDatacenterOVH
    },
      options);
    }
  


export const getPutDedicatedCloudServiceNameDatacenterDatacenterIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterId>>, TError,{serviceName: string;datacenterId: number;data: NonReadonly<DedicatedCloudDatacenterOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterId>>, TError,{serviceName: string;datacenterId: number;data: NonReadonly<DedicatedCloudDatacenterOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterId>>, {serviceName: string;datacenterId: number;data: NonReadonly<DedicatedCloudDatacenterOVH>}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  putDedicatedCloudServiceNameDatacenterDatacenterId(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedCloudServiceNameDatacenterDatacenterIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterId>>>
    export type PutDedicatedCloudServiceNameDatacenterDatacenterIdMutationBody = NonReadonly<DedicatedCloudDatacenterOVH>
    export type PutDedicatedCloudServiceNameDatacenterDatacenterIdMutationError = unknown

    /**
 * @summary Update virtual datacenter
 */
export const usePutDedicatedCloudServiceNameDatacenterDatacenterId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterId>>, TError,{serviceName: string;datacenterId: number;data: NonReadonly<DedicatedCloudDatacenterOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterId>>,
        TError,
        {serviceName: string;datacenterId: number;data: NonReadonly<DedicatedCloudDatacenterOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedCloudServiceNameDatacenterDatacenterIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get backup option
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdBackup = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudBackupOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/backup`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/backup`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdBackup(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdBackup<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdBackup<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdBackup<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get backup option
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdBackup<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Restore from last point for each backup job
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestore = (
    serviceName: string,
    datacenterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/backup/batchRestore`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestore>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestore>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestore>>, {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreBody}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestore(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestore>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreMutationError = unknown

    /**
 * @summary Restore from last point for each backup job
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestore = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestore>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestore>>,
        TError,
        {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate recommendations for backup proxies optimization
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudBackupOptimizeProxiesOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/backup/canOptimizeProxies`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxiesQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/backup/canOptimizeProxies`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxiesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxiesQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxiesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxiesQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Generate recommendations for backup proxies optimization
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxies>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxiesQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update backup option
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangeProperties = (
    serviceName: string,
    datacenterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/backup/changeProperties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangeProperties>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangeProperties>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangeProperties>>, {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesBody}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangeProperties(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangeProperties>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesMutationError = unknown

    /**
 * @summary Update backup option
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangeProperties = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangeProperties>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangeProperties>>,
        TError,
        {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable backup option
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisable = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/backup/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisable>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisable>>, TError,{serviceName: string;datacenterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisable>>, {serviceName: string;datacenterId: number}> = (props) => {
          const {serviceName,datacenterId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisable(serviceName,datacenterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisable>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisableMutationError = unknown

    /**
 * @summary Disable backup option
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisable>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisable>>,
        TError,
        {serviceName: string;datacenterId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate email report with all backup information
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReport = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/backup/generateReport`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReport>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReport>>, TError,{serviceName: string;datacenterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReport>>, {serviceName: string;datacenterId: number}> = (props) => {
          const {serviceName,datacenterId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReport(serviceName,datacenterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReportMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReport>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReportMutationError = unknown

    /**
 * @summary Generate email report with all backup information
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReport>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReport>>,
        TError,
        {serviceName: string;datacenterId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List backup offer capabilities
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudBackupBackupCapabilitiesOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/backup/offerCapabilities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilitiesQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/backup/offerCapabilities`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilitiesQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilitiesQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List backup offer capabilities
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilitiesQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Optimize number of backup proxies
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxies = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/backup/optimizeProxies`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxies>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxies>>, TError,{serviceName: string;datacenterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxies>>, {serviceName: string;datacenterId: number}> = (props) => {
          const {serviceName,datacenterId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxies(serviceName,datacenterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxiesMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxies>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxiesMutationError = unknown

    /**
 * @summary Optimize number of backup proxies
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxies = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxies>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxies>>,
        TError,
        {serviceName: string;datacenterId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Check if backup jobs are correctly set in virtual datacenter (when vms have been moved to another virtual datacenter)
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobs = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/checkBackupJobs`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobs>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobs>>, TError,{serviceName: string;datacenterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobs>>, {serviceName: string;datacenterId: number}> = (props) => {
          const {serviceName,datacenterId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobs(serviceName,datacenterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobsMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobs>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobsMutationError = unknown

    /**
 * @summary Check if backup jobs are correctly set in virtual datacenter (when vms have been moved to another virtual datacenter)
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobs>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobs>>,
        TError,
        {serviceName: string;datacenterId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List clusters within virtual datacenter
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdCluster = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdCluster(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdClusterQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdClusterQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdCluster<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdCluster<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdCluster<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List clusters within virtual datacenter
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdCluster<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdCluster>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get cluster
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId = (
    serviceName: string,
    datacenterId: number,
    clusterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudClusterOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster/${clusterId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdQueryKey = (serviceName: string,
    datacenterId: number,
    clusterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster/${clusterId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    clusterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdQueryKey(serviceName,datacenterId,clusterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId(serviceName,datacenterId,clusterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && clusterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    clusterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    clusterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    clusterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get cluster
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    clusterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdQueryOptions(serviceName,datacenterId,clusterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Disable autoscale on cluster
 */
export const deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale = (
    serviceName: string,
    datacenterId: number,
    clusterId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster/${clusterId}/autoscale`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>, TError,{serviceName: string;datacenterId: number;clusterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>, TError,{serviceName: string;datacenterId: number;clusterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>, {serviceName: string;datacenterId: number;clusterId: number}> = (props) => {
          const {serviceName,datacenterId,clusterId} = props ?? {};

          return  deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale(serviceName,datacenterId,clusterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>>
    
    export type DeleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationError = unknown

    /**
 * @summary Disable autoscale on cluster
 */
export const useDeleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>, TError,{serviceName: string;datacenterId: number;clusterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>,
        TError,
        {serviceName: string;datacenterId: number;clusterId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable autoscale on cluster
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale = (
    serviceName: string,
    datacenterId: number,
    clusterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster/${clusterId}/autoscale`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>, TError,{serviceName: string;datacenterId: number;clusterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>, TError,{serviceName: string;datacenterId: number;clusterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>, {serviceName: string;datacenterId: number;clusterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody}> = (props) => {
          const {serviceName,datacenterId,clusterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale(serviceName,datacenterId,clusterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationError = unknown

    /**
 * @summary Enable autoscale on cluster
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>, TError,{serviceName: string;datacenterId: number;clusterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>,
        TError,
        {serviceName: string;datacenterId: number;clusterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update autoscale configuration
 */
export const putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale = (
    serviceName: string,
    datacenterId: number,
    clusterId: number,
    putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody: PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster/${clusterId}/autoscale`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody
    },
      options);
    }
  


export const getPutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>, TError,{serviceName: string;datacenterId: number;clusterId: number;data: PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>, TError,{serviceName: string;datacenterId: number;clusterId: number;data: PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>, {serviceName: string;datacenterId: number;clusterId: number;data: PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody}> = (props) => {
          const {serviceName,datacenterId,clusterId,data} = props ?? {};

          return  putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale(serviceName,datacenterId,clusterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>>
    export type PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationBody = PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody
    export type PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationError = unknown

    /**
 * @summary Update autoscale configuration
 */
export const usePutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>, TError,{serviceName: string;datacenterId: number;clusterId: number;data: PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscale>>,
        TError,
        {serviceName: string;datacenterId: number;clusterId: number;data: PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleBody},
        TContext
      > => {

      const mutationOptions = getPutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAutoscaleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List vSAN datastores within cluster
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan = (
    serviceName: string,
    datacenterId: number,
    clusterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster/${clusterId}/filerVsan`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanQueryKey = (serviceName: string,
    datacenterId: number,
    clusterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster/${clusterId}/filerVsan`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    clusterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanQueryKey(serviceName,datacenterId,clusterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan(serviceName,datacenterId,clusterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && clusterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    clusterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    clusterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    clusterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List vSAN datastores within cluster
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    clusterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanQueryOptions(serviceName,datacenterId,clusterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get vSAN datastore
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId = (
    serviceName: string,
    datacenterId: number,
    clusterId: number,
    datastoreId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudVsanDatastoreOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster/${clusterId}/filerVsan/${datastoreId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreIdQueryKey = (serviceName: string,
    datacenterId: number,
    clusterId: number,
    datastoreId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster/${clusterId}/filerVsan/${datastoreId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    clusterId: number,
    datastoreId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreIdQueryKey(serviceName,datacenterId,clusterId,datastoreId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId(serviceName,datacenterId,clusterId,datastoreId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && clusterId && datastoreId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreIdQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    clusterId: number,
    datastoreId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    clusterId: number,
    datastoreId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    clusterId: number,
    datastoreId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get vSAN datastore
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    clusterId: number,
    datastoreId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdFilerVsanDatastoreIdQueryOptions(serviceName,datacenterId,clusterId,datastoreId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Unconfigure NSX-T on cluster
 */
export const deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt = (
    serviceName: string,
    datacenterId: number,
    clusterId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster/${clusterId}/nsxt`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>, TError,{serviceName: string;datacenterId: number;clusterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>, TError,{serviceName: string;datacenterId: number;clusterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>, {serviceName: string;datacenterId: number;clusterId: number}> = (props) => {
          const {serviceName,datacenterId,clusterId} = props ?? {};

          return  deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt(serviceName,datacenterId,clusterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>>
    
    export type DeleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtMutationError = unknown

    /**
 * @summary Unconfigure NSX-T on cluster
 */
export const useDeleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>, TError,{serviceName: string;datacenterId: number;clusterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>,
        TError,
        {serviceName: string;datacenterId: number;clusterId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Configure NSX-T on cluster
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt = (
    serviceName: string,
    datacenterId: number,
    clusterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster/${clusterId}/nsxt`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>, TError,{serviceName: string;datacenterId: number;clusterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>, TError,{serviceName: string;datacenterId: number;clusterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>, {serviceName: string;datacenterId: number;clusterId: number}> = (props) => {
          const {serviceName,datacenterId,clusterId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt(serviceName,datacenterId,clusterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtMutationError = unknown

    /**
 * @summary Configure NSX-T on cluster
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>, TError,{serviceName: string;datacenterId: number;clusterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>,
        TError,
        {serviceName: string;datacenterId: number;clusterId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update NSX-T configuration on cluster
 */
export const putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt = (
    serviceName: string,
    datacenterId: number,
    clusterId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/cluster/${clusterId}/nsxt`, method: 'PUT'
    },
      options);
    }
  


export const getPutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>, TError,{serviceName: string;datacenterId: number;clusterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>, TError,{serviceName: string;datacenterId: number;clusterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>, {serviceName: string;datacenterId: number;clusterId: number}> = (props) => {
          const {serviceName,datacenterId,clusterId} = props ?? {};

          return  putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt(serviceName,datacenterId,clusterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>>
    
    export type PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtMutationError = unknown

    /**
 * @summary Update NSX-T configuration on cluster
 */
export const usePutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>, TError,{serviceName: string;datacenterId: number;clusterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxt>>,
        TError,
        {serviceName: string;datacenterId: number;clusterId: number},
        TContext
      > => {

      const mutationOptions = getPutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable Zerto disaster recovery between two VMware on OVHcloud infrastructures
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisable = (
    serviceName: string,
    datacenterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zerto/disable`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisable>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisable>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisable>>, {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableBody}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisable(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisable>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableMutationError = unknown

    /**
 * @summary Disable Zerto disaster recovery between two VMware on OVHcloud infrastructures
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisable>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisable>>,
        TError,
        {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Unlink migration source virtual datacenter from Zerto disaster recovery
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigration = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zerto/endMigration`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigrationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigration>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigration>>, TError,{serviceName: string;datacenterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigration>>, {serviceName: string;datacenterId: number}> = (props) => {
          const {serviceName,datacenterId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigration(serviceName,datacenterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigrationMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigration>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigrationMutationError = unknown

    /**
 * @summary Unlink migration source virtual datacenter from Zerto disaster recovery
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigration>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigration>>,
        TError,
        {serviceName: string;datacenterId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigrationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the IP address used by Zerto disaster recovery endpoint for public network access
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIp = (
    serviceName: string,
    datacenterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zerto/endpointPublicIp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIp>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIp>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIp>>, {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpBody}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIp(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIp>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpMutationError = unknown

    /**
 * @summary Change the IP address used by Zerto disaster recovery endpoint for public network access
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIp>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIp>>,
        TError,
        {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove Zerto disaster recovery remote site
 */
export const deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites = (
    serviceName: string,
    datacenterId: number,
    params: DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesParams,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zerto/remoteSites`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError,{serviceName: string;datacenterId: number;params: DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError,{serviceName: string;datacenterId: number;params: DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, {serviceName: string;datacenterId: number;params: DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesParams}> = (props) => {
          const {serviceName,datacenterId,params} = props ?? {};

          return  deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites(serviceName,datacenterId,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>>
    
    export type DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesMutationError = unknown

    /**
 * @summary Remove Zerto disaster recovery remote site
 */
export const useDeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError,{serviceName: string;datacenterId: number;params: DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>,
        TError,
        {serviceName: string;datacenterId: number;params: DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesParams},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List Zerto disaster recovery remote sites
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudDisasterRecoveryZertoRemoteVraOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zerto/remoteSites`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zerto/remoteSites`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List Zerto disaster recovery remote sites
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create Zerto disaster recovery remote site on VPN endpoint
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites = (
    serviceName: string,
    datacenterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zerto/remoteSites`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesBody}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesMutationError = unknown

    /**
 * @summary Create Zerto disaster recovery remote site on VPN endpoint
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSites>>,
        TError,
        {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Link migration target virtual datacenter to Zerto disaster recovery
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigration = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zerto/startMigration`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigrationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigration>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigration>>, TError,{serviceName: string;datacenterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigration>>, {serviceName: string;datacenterId: number}> = (props) => {
          const {serviceName,datacenterId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigration(serviceName,datacenterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigrationMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigration>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigrationMutationError = unknown

    /**
 * @summary Link migration target virtual datacenter to Zerto disaster recovery
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigration>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigration>>,
        TError,
        {serviceName: string;datacenterId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigrationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Zerto disaster recovery option status
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudDisasterRecoveryProfileOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zerto/status`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatusQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zerto/status`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatusQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatusQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatusQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Zerto disaster recovery option status
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatusQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List Zerto disaster recovery protected virtual machines
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport = (
    serviceName: string,
    datacenterId: number,
    params: GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudDisasterRecoveryZertoProtectedVmOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zerto/usageReport`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportQueryKey = (serviceName: string,
    datacenterId: number,
    params: GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportParams,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zerto/usageReport`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    params: GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportQueryKey(serviceName,datacenterId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport(serviceName,datacenterId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    params: GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    params: GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    params: GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List Zerto disaster recovery protected virtual machines
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    params: GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportQueryOptions(serviceName,datacenterId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Configure VPN for Zerto disaster recovery between VMware on OVHcloud infrastructure and onsite infrastructure
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpn = (
    serviceName: string,
    datacenterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zertoSingle/configureVpn`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpn>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpn>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpn>>, {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnBody}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpn(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpn>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnMutationError = unknown

    /**
 * @summary Configure VPN for Zerto disaster recovery between VMware on OVHcloud infrastructure and onsite infrastructure
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpn = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpn>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpn>>,
        TError,
        {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Zerto disaster recovery default suggested local VRA subnet
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4BlockOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zertoSingle/defaultLocalVraNetwork`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetworkQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zertoSingle/defaultLocalVraNetwork`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetworkQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetworkQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetworkQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetworkQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Zerto disaster recovery default suggested local VRA subnet
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetworkQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Disable Zerto disaster recovery between VMware on OVHcloud infrastructure and onsite infrastructure
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisable = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zertoSingle/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisable>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisable>>, TError,{serviceName: string;datacenterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisable>>, {serviceName: string;datacenterId: number}> = (props) => {
          const {serviceName,datacenterId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisable(serviceName,datacenterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisable>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisableMutationError = unknown

    /**
 * @summary Disable Zerto disaster recovery between VMware on OVHcloud infrastructure and onsite infrastructure
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisable>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisable>>,
        TError,
        {serviceName: string;datacenterId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the IP address used by Zerto disaster recovery endpoint for public network access
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIp = (
    serviceName: string,
    datacenterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zertoSingle/endpointPublicIp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIp>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIp>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIp>>, {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpBody}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIp(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIp>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpMutationError = unknown

    /**
 * @summary Change the IP address used by Zerto disaster recovery endpoint for public network access
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIp>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIp>>,
        TError,
        {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove Zerto disaster recovery remote site
 */
export const deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites = (
    serviceName: string,
    datacenterId: number,
    params: DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesParams,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zertoSingle/remoteSites`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError,{serviceName: string;datacenterId: number;params: DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError,{serviceName: string;datacenterId: number;params: DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, {serviceName: string;datacenterId: number;params: DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesParams}> = (props) => {
          const {serviceName,datacenterId,params} = props ?? {};

          return  deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites(serviceName,datacenterId,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>>
    
    export type DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesMutationError = unknown

    /**
 * @summary Remove Zerto disaster recovery remote site
 */
export const useDeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError,{serviceName: string;datacenterId: number;params: DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>,
        TError,
        {serviceName: string;datacenterId: number;params: DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesParams},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List Zerto disaster recovery remote sites
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudDisasterRecoveryZertoRemoteVraOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zertoSingle/remoteSites`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zertoSingle/remoteSites`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List Zerto disaster recovery remote sites
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create Zerto disaster recovery remote site on VPN endpoint
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites = (
    serviceName: string,
    datacenterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zertoSingle/remoteSites`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesBody}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesMutationError = unknown

    /**
 * @summary Create Zerto disaster recovery remote site on VPN endpoint
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSites>>,
        TError,
        {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Request Zerto disaster recovery pairing token for onsite infrastructure
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingToken = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/disasterRecovery/zertoSingle/requestPairingToken`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingToken>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingToken>>, TError,{serviceName: string;datacenterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingToken>>, {serviceName: string;datacenterId: number}> = (props) => {
          const {serviceName,datacenterId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingToken(serviceName,datacenterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingToken>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingTokenMutationError = unknown

    /**
 * @summary Request Zerto disaster recovery pairing token for onsite infrastructure
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingToken>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingToken>>,
        TError,
        {serviceName: string;datacenterId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List datastores in virtual datacenter
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdFiler = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdFiler(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFiler<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFiler<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFiler<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List datastores in virtual datacenter
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFiler<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFiler>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get datastore
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId = (
    serviceName: string,
    datacenterId: number,
    filerId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudFilerOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdQueryKey = (serviceName: string,
    datacenterId: number,
    filerId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdQueryKey(serviceName,datacenterId,filerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId(serviceName,datacenterId,filerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && filerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get datastore
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdQueryOptions(serviceName,datacenterId,filerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check ability to convert datastore to global datastore
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible = (
    serviceName: string,
    datacenterId: number,
    filerId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}/checkGlobalCompatible`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatibleQueryKey = (serviceName: string,
    datacenterId: number,
    filerId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}/checkGlobalCompatible`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatibleQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatibleQueryKey(serviceName,datacenterId,filerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible(serviceName,datacenterId,filerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && filerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatibleQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatibleQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check ability to convert datastore to global datastore
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatible>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatibleQueryOptions(serviceName,datacenterId,filerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Convert datastore to global datastore
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobal = (
    serviceName: string,
    datacenterId: number,
    filerId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}/convertToGlobal`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobalMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobal>>, TError,{serviceName: string;datacenterId: number;filerId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobal>>, TError,{serviceName: string;datacenterId: number;filerId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobal>>, {serviceName: string;datacenterId: number;filerId: number}> = (props) => {
          const {serviceName,datacenterId,filerId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobal(serviceName,datacenterId,filerId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobalMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobal>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobalMutationError = unknown

    /**
 * @summary Convert datastore to global datastore
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobal = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobal>>, TError,{serviceName: string;datacenterId: number;filerId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobal>>,
        TError,
        {serviceName: string;datacenterId: number;filerId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobalMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get datastore location
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation = (
    serviceName: string,
    datacenterId: number,
    filerId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudFilerLocationOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}/location`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationQueryKey = (serviceName: string,
    datacenterId: number,
    filerId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationParams,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}/location`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    filerId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationQueryKey(serviceName,datacenterId,filerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation(serviceName,datacenterId,filerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && filerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number,
    params: undefined |  GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get datastore location
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationQueryOptions(serviceName,datacenterId,filerId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Remove datastore
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemove = (
    serviceName: string,
    datacenterId: number,
    filerId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}/remove`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemoveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemove>>, TError,{serviceName: string;datacenterId: number;filerId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemove>>, TError,{serviceName: string;datacenterId: number;filerId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemove>>, {serviceName: string;datacenterId: number;filerId: number}> = (props) => {
          const {serviceName,datacenterId,filerId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemove(serviceName,datacenterId,filerId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemove>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemoveMutationError = unknown

    /**
 * @summary Remove datastore
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemove>>, TError,{serviceName: string;datacenterId: number;filerId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemove>>,
        TError,
        {serviceName: string;datacenterId: number;filerId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List operations associated to datastore
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask = (
    serviceName: string,
    datacenterId: number,
    filerId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskQueryKey = (serviceName: string,
    datacenterId: number,
    filerId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskParams,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    filerId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskQueryKey(serviceName,datacenterId,filerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask(serviceName,datacenterId,filerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && filerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number,
    params: undefined |  GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List operations associated to datastore
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskQueryOptions(serviceName,datacenterId,filerId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get operation
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId = (
    serviceName: string,
    datacenterId: number,
    filerId: number,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdQueryKey = (serviceName: string,
    datacenterId: number,
    filerId: number,
    taskId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}/task/${taskId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    filerId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdQueryKey(serviceName,datacenterId,filerId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId(serviceName,datacenterId,filerId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && filerId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get operation
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    filerId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdQueryOptions(serviceName,datacenterId,filerId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the execution date of a maintenance operation
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate = (
    serviceName: string,
    datacenterId: number,
    filerId: number,
    taskId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}/task/${taskId}/changeMaintenanceExecutionDate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;datacenterId: number;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;datacenterId: number;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate>>, {serviceName: string;datacenterId: number;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody}> = (props) => {
          const {serviceName,datacenterId,filerId,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate(serviceName,datacenterId,filerId,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateMutationError = unknown

    /**
 * @summary Change the execution date of a maintenance operation
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;datacenterId: number;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate>>,
        TError,
        {serviceName: string;datacenterId: number;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Relaunch operation currently in error state
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskState = (
    serviceName: string,
    datacenterId: number,
    filerId: number,
    taskId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/filer/${filerId}/task/${taskId}/resetTaskState`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;datacenterId: number;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;datacenterId: number;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskState>>, {serviceName: string;datacenterId: number;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateBody}> = (props) => {
          const {serviceName,datacenterId,filerId,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskState(serviceName,datacenterId,filerId,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskState>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateMutationError = unknown

    /**
 * @summary Relaunch operation currently in error state
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskState = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;datacenterId: number;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskState>>,
        TError,
        {serviceName: string;datacenterId: number;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List hosts in virtual datacenter
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdHost = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdHost(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHost<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHost<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHost<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List hosts in virtual datacenter
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHost<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHost>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get host
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId = (
    serviceName: string,
    datacenterId: number,
    hostId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudHostOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdQueryKey = (serviceName: string,
    datacenterId: number,
    hostId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdQueryKey(serviceName,datacenterId,hostId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId(serviceName,datacenterId,hostId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && hostId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get host
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdQueryOptions(serviceName,datacenterId,hostId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request host replacement
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpare = (
    serviceName: string,
    datacenterId: number,
    hostId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/addHostSpare`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpare>>, TError,{serviceName: string;datacenterId: number;hostId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpare>>, TError,{serviceName: string;datacenterId: number;hostId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpare>>, {serviceName: string;datacenterId: number;hostId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareBody}> = (props) => {
          const {serviceName,datacenterId,hostId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpare(serviceName,datacenterId,hostId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpare>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareMutationError = unknown

    /**
 * @summary Request host replacement
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpare = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpare>>, TError,{serviceName: string;datacenterId: number;hostId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpare>>,
        TError,
        {serviceName: string;datacenterId: number;hostId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get host location
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation = (
    serviceName: string,
    datacenterId: number,
    hostId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudHostLocationOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/location`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocationQueryKey = (serviceName: string,
    datacenterId: number,
    hostId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/location`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocationQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocationQueryKey(serviceName,datacenterId,hostId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation(serviceName,datacenterId,hostId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && hostId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocationQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocationQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get host location
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocationQueryOptions(serviceName,datacenterId,hostId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Remove host
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemove = (
    serviceName: string,
    datacenterId: number,
    hostId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/remove`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemoveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemove>>, TError,{serviceName: string;datacenterId: number;hostId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemove>>, TError,{serviceName: string;datacenterId: number;hostId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemove>>, {serviceName: string;datacenterId: number;hostId: number}> = (props) => {
          const {serviceName,datacenterId,hostId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemove(serviceName,datacenterId,hostId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemove>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemoveMutationError = unknown

    /**
 * @summary Remove host
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemove>>, TError,{serviceName: string;datacenterId: number;hostId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemove>>,
        TError,
        {serviceName: string;datacenterId: number;hostId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get host resilience test status
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience = (
    serviceName: string,
    datacenterId: number,
    hostId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudHostResilienceOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/resilience`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceQueryKey = (serviceName: string,
    datacenterId: number,
    hostId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/resilience`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceQueryKey(serviceName,datacenterId,hostId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience(serviceName,datacenterId,hostId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && hostId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get host resilience test status
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilience>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceQueryOptions(serviceName,datacenterId,hostId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check if resilience test can be performed
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled = (
    serviceName: string,
    datacenterId: number,
    hostId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/resilience/canBeEnabled`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabledQueryKey = (serviceName: string,
    datacenterId: number,
    hostId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/resilience/canBeEnabled`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabledQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabledQueryKey(serviceName,datacenterId,hostId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled(serviceName,datacenterId,hostId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && hostId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabledQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabledQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check if resilience test can be performed
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabledQueryOptions(serviceName,datacenterId,hostId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Stop resilience test
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisable = (
    serviceName: string,
    datacenterId: number,
    hostId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/resilience/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisable>>, TError,{serviceName: string;datacenterId: number;hostId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisable>>, TError,{serviceName: string;datacenterId: number;hostId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisable>>, {serviceName: string;datacenterId: number;hostId: number}> = (props) => {
          const {serviceName,datacenterId,hostId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisable(serviceName,datacenterId,hostId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisable>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisableMutationError = unknown

    /**
 * @summary Stop resilience test
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisable>>, TError,{serviceName: string;datacenterId: number;hostId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisable>>,
        TError,
        {serviceName: string;datacenterId: number;hostId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Start resilience test (will cut host network access)
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnable = (
    serviceName: string,
    datacenterId: number,
    hostId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/resilience/enable`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnable>>, TError,{serviceName: string;datacenterId: number;hostId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnable>>, TError,{serviceName: string;datacenterId: number;hostId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnable>>, {serviceName: string;datacenterId: number;hostId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableBody}> = (props) => {
          const {serviceName,datacenterId,hostId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnable(serviceName,datacenterId,hostId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnable>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableMutationError = unknown

    /**
 * @summary Start resilience test (will cut host network access)
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnable>>, TError,{serviceName: string;datacenterId: number;hostId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnable>>,
        TError,
        {serviceName: string;datacenterId: number;hostId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List operations associated to host
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask = (
    serviceName: string,
    datacenterId: number,
    hostId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskQueryKey = (serviceName: string,
    datacenterId: number,
    hostId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskParams,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    hostId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskQueryKey(serviceName,datacenterId,hostId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask(serviceName,datacenterId,hostId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && hostId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number,
    params: undefined |  GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List operations associated to host
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskQueryOptions(serviceName,datacenterId,hostId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get operation
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId = (
    serviceName: string,
    datacenterId: number,
    hostId: number,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdQueryKey = (serviceName: string,
    datacenterId: number,
    hostId: number,
    taskId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/task/${taskId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    hostId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdQueryKey(serviceName,datacenterId,hostId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId(serviceName,datacenterId,hostId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && hostId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get operation
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    hostId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdQueryOptions(serviceName,datacenterId,hostId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the execution date of a maintenance operation
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDate = (
    serviceName: string,
    datacenterId: number,
    hostId: number,
    taskId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/task/${taskId}/changeMaintenanceExecutionDate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;datacenterId: number;hostId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;datacenterId: number;hostId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDate>>, {serviceName: string;datacenterId: number;hostId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateBody}> = (props) => {
          const {serviceName,datacenterId,hostId,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDate(serviceName,datacenterId,hostId,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDate>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateMutationError = unknown

    /**
 * @summary Change the execution date of a maintenance operation
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;datacenterId: number;hostId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDate>>,
        TError,
        {serviceName: string;datacenterId: number;hostId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Relaunch operation currently in error state
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskState = (
    serviceName: string,
    datacenterId: number,
    hostId: number,
    taskId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/host/${hostId}/task/${taskId}/resetTaskState`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;datacenterId: number;hostId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;datacenterId: number;hostId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskState>>, {serviceName: string;datacenterId: number;hostId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateBody}> = (props) => {
          const {serviceName,datacenterId,hostId,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskState(serviceName,datacenterId,hostId,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskState>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateMutationError = unknown

    /**
 * @summary Relaunch operation currently in error state
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskState = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;datacenterId: number;hostId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskState>>,
        TError,
        {serviceName: string;datacenterId: number;hostId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List NSX-T Edges within virtual datacenter
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdge`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdge`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List NSX-T Edges within virtual datacenter
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdge>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get NSX-T Edge details
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId = (
    serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudNsxtEdgeOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdge/${nsxtEdgeId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdQueryKey = (serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdge/${nsxtEdgeId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdQueryKey(serviceName,datacenterId,nsxtEdgeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId(serviceName,datacenterId,nsxtEdgeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && nsxtEdgeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get NSX-T Edge details
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdQueryOptions(serviceName,datacenterId,nsxtEdgeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Relocate NSX-T Edge disks
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdge = (
    serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdge/${nsxtEdgeId}/relocateEdge`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdge>>, TError,{serviceName: string;datacenterId: number;nsxtEdgeId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdge>>, TError,{serviceName: string;datacenterId: number;nsxtEdgeId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdge>>, {serviceName: string;datacenterId: number;nsxtEdgeId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeBody}> = (props) => {
          const {serviceName,datacenterId,nsxtEdgeId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdge(serviceName,datacenterId,nsxtEdgeId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdge>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeMutationError = unknown

    /**
 * @summary Relocate NSX-T Edge disks
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdge = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdge>>, TError,{serviceName: string;datacenterId: number;nsxtEdgeId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdge>>,
        TError,
        {serviceName: string;datacenterId: number;nsxtEdgeId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get NSX-T Edge resilience test status
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience = (
    serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudNsxtEdgeResilienceOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdge/${nsxtEdgeId}/resilience`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceQueryKey = (serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdge/${nsxtEdgeId}/resilience`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceQueryKey(serviceName,datacenterId,nsxtEdgeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience(serviceName,datacenterId,nsxtEdgeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && nsxtEdgeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get NSX-T Edge resilience test status
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilience>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceQueryOptions(serviceName,datacenterId,nsxtEdgeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check if resilience test can be performed
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled = (
    serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdge/${nsxtEdgeId}/resilience/canBeEnabled`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabledQueryKey = (serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdge/${nsxtEdgeId}/resilience/canBeEnabled`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabledQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabledQueryKey(serviceName,datacenterId,nsxtEdgeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled(serviceName,datacenterId,nsxtEdgeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && nsxtEdgeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabledQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabledQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check if resilience test can be performed
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabledQueryOptions(serviceName,datacenterId,nsxtEdgeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Stop resilience test
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisable = (
    serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdge/${nsxtEdgeId}/resilience/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisable>>, TError,{serviceName: string;datacenterId: number;nsxtEdgeId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisable>>, TError,{serviceName: string;datacenterId: number;nsxtEdgeId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisable>>, {serviceName: string;datacenterId: number;nsxtEdgeId: number}> = (props) => {
          const {serviceName,datacenterId,nsxtEdgeId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisable(serviceName,datacenterId,nsxtEdgeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisable>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisableMutationError = unknown

    /**
 * @summary Stop resilience test
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisable>>, TError,{serviceName: string;datacenterId: number;nsxtEdgeId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisable>>,
        TError,
        {serviceName: string;datacenterId: number;nsxtEdgeId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Start resilience test (will put NSX-T Edge in maintenance mode)
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnable = (
    serviceName: string,
    datacenterId: number,
    nsxtEdgeId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdge/${nsxtEdgeId}/resilience/enable`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnable>>, TError,{serviceName: string;datacenterId: number;nsxtEdgeId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnable>>, TError,{serviceName: string;datacenterId: number;nsxtEdgeId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnable>>, {serviceName: string;datacenterId: number;nsxtEdgeId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableBody}> = (props) => {
          const {serviceName,datacenterId,nsxtEdgeId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnable(serviceName,datacenterId,nsxtEdgeId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnable>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableMutationError = unknown

    /**
 * @summary Start resilience test (will put NSX-T Edge in maintenance mode)
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnable>>, TError,{serviceName: string;datacenterId: number;nsxtEdgeId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnable>>,
        TError,
        {serviceName: string;datacenterId: number;nsxtEdgeId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Resizing Capabilities of NSX-T edges cluster on specified datacenter
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudNsxtNsxtEdgeSizingCapabilityOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdgesResizingCapabilities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilitiesQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdgesResizingCapabilities`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilitiesQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilitiesQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Resizing Capabilities of NSX-T edges cluster on specified datacenter
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilitiesQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Scaling Capabilities of NSX-T edges cluster on specified datacenter
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudNsxtNsxtEdgeScalingCapabilityOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdgesScalingCapabilities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilitiesQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/nsxtEdgesScalingCapabilities`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilitiesQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilitiesQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Scaling Capabilities of NSX-T edges cluster on specified datacenter
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilitiesQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Order hourly datastore
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourly = (
    serviceName: string,
    datacenterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/orderNewFilerHourly`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourly>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourly>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourly>>, {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyBody}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourly(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourly>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyMutationError = unknown

    /**
 * @summary Order hourly datastore
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourly = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourly>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourly>>,
        TError,
        {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Order hourly host
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourly = (
    serviceName: string,
    datacenterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/orderNewHostHourly`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourly>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourly>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourly>>, {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyBody}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourly(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourly>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyMutationError = unknown

    /**
 * @summary Order hourly host
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourly = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourly>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourly>>,
        TError,
        {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available datastore profiles
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudFilerProfileOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/orderableFilerProfiles`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfilesQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/orderableFilerProfiles`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfilesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfilesQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfilesQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available datastore profiles
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfilesQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available host profiles
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudHostProfileOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/orderableHostProfiles`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfilesQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/orderableHostProfiles`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfilesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfilesQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfilesQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available host profiles
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfilesQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get private management gateway
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudPrivateGatewayOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/privateGateway`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/privateGateway`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get private management gateway
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Remove the private management gateway
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisable = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/privateGateway/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisable>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisable>>, TError,{serviceName: string;datacenterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisable>>, {serviceName: string;datacenterId: number}> = (props) => {
          const {serviceName,datacenterId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisable(serviceName,datacenterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisable>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisableMutationError = unknown

    /**
 * @summary Remove the private management gateway
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisable>>, TError,{serviceName: string;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisable>>,
        TError,
        {serviceName: string;datacenterId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Deploy private management gateway
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnable = (
    serviceName: string,
    datacenterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/privateGateway/enable`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnable>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnable>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnable>>, {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableBody}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnable(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnable>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableMutationError = unknown

    /**
 * @summary Deploy private management gateway
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnable>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnable>>,
        TError,
        {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reconfigure private management gateway
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigure = (
    serviceName: string,
    datacenterId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/privateGateway/reconfigure`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigure>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigure>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigure>>, {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureBody}> = (props) => {
          const {serviceName,datacenterId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigure(serviceName,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigure>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureMutationError = unknown

    /**
 * @summary Reconfigure private management gateway
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigure = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigure>>, TError,{serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigure>>,
        TError,
        {serviceName: string;datacenterId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List operations associated to virtual datacenter
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdTask = (
    serviceName: string,
    datacenterId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdTaskQueryKey = (serviceName: string,
    datacenterId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskParams,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdTaskQueryKey(serviceName,datacenterId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdTask(serviceName,datacenterId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    params: undefined |  GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List operations associated to virtual datacenter
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdTaskQueryOptions(serviceName,datacenterId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get operation
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId = (
    serviceName: string,
    datacenterId: number,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdQueryKey = (serviceName: string,
    datacenterId: number,
    taskId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/task/${taskId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdQueryKey(serviceName,datacenterId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId(serviceName,datacenterId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get operation
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdQueryOptions(serviceName,datacenterId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the execution date of a maintenance operation
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDate = (
    serviceName: string,
    datacenterId: number,
    taskId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/task/${taskId}/changeMaintenanceExecutionDate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;datacenterId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;datacenterId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDate>>, {serviceName: string;datacenterId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateBody}> = (props) => {
          const {serviceName,datacenterId,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDate(serviceName,datacenterId,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDate>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateMutationError = unknown

    /**
 * @summary Change the execution date of a maintenance operation
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;datacenterId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDate>>,
        TError,
        {serviceName: string;datacenterId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Relaunch operation currently in error state
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskState = (
    serviceName: string,
    datacenterId: number,
    taskId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/task/${taskId}/resetTaskState`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;datacenterId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;datacenterId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskState>>, {serviceName: string;datacenterId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateBody}> = (props) => {
          const {serviceName,datacenterId,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskState(serviceName,datacenterId,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskState>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateMutationError = unknown

    /**
 * @summary Relaunch operation currently in error state
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskState = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;datacenterId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskState>>,
        TError,
        {serviceName: string;datacenterId: number;taskId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List virtual machines within virtual datacenter
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdVm = (
    serviceName: string,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vm`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdVmQueryKey = (serviceName: string,
    datacenterId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vm`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdVmQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>, TError = unknown>(serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdVmQueryKey(serviceName,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdVm(serviceName,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdVmQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdVmQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdVm<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdVm<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdVm<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List virtual machines within virtual datacenter
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdVm<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>, TError = unknown>(
 serviceName: string,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdVmQueryOptions(serviceName,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get virtual machines
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId = (
    serviceName: string,
    datacenterId: number,
    vmId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudVmOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vm/${vmId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdQueryKey = (serviceName: string,
    datacenterId: number,
    vmId: number,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vm/${vmId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    vmId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdQueryKey(serviceName,datacenterId,vmId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId(serviceName,datacenterId,vmId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId && vmId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    vmId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    vmId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    vmId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get virtual machines
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    vmId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmVmId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdQueryOptions(serviceName,datacenterId,vmId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Deactivate backup on virtual machine
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackup = (
    serviceName: string,
    datacenterId: number,
    vmId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vm/${vmId}/disableBackup`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackup>>, TError,{serviceName: string;datacenterId: number;vmId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackup>>, TError,{serviceName: string;datacenterId: number;vmId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackup>>, {serviceName: string;datacenterId: number;vmId: number}> = (props) => {
          const {serviceName,datacenterId,vmId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackup(serviceName,datacenterId,vmId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackupMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackup>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackupMutationError = unknown

    /**
 * @summary Deactivate backup on virtual machine
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackup>>, TError,{serviceName: string;datacenterId: number;vmId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackup>>,
        TError,
        {serviceName: string;datacenterId: number;vmId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable CARP on virtual machine
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarp = (
    serviceName: string,
    datacenterId: number,
    vmId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vm/${vmId}/disableCarp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarp>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarp>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarp>>, {serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpBody}> = (props) => {
          const {serviceName,datacenterId,vmId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarp(serviceName,datacenterId,vmId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarp>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpMutationError = unknown

    /**
 * @summary Disable CARP on virtual machine
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarp>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarp>>,
        TError,
        {serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update backup configuration
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackup = (
    serviceName: string,
    datacenterId: number,
    vmId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vm/${vmId}/editBackup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackup>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackup>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackup>>, {serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupBody}> = (props) => {
          const {serviceName,datacenterId,vmId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackup(serviceName,datacenterId,vmId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackup>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupMutationError = unknown

    /**
 * @summary Update backup configuration
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackup>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackup>>,
        TError,
        {serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Activate backup on virtual machine
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackup = (
    serviceName: string,
    datacenterId: number,
    vmId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vm/${vmId}/enableBackup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackup>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackup>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackup>>, {serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupBody}> = (props) => {
          const {serviceName,datacenterId,vmId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackup(serviceName,datacenterId,vmId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackup>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupMutationError = unknown

    /**
 * @summary Activate backup on virtual machine
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackup>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackup>>,
        TError,
        {serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable CARP on virtual machine
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarp = (
    serviceName: string,
    datacenterId: number,
    vmId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vm/${vmId}/enableCarp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarp>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarp>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarp>>, {serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpBody}> = (props) => {
          const {serviceName,datacenterId,vmId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarp(serviceName,datacenterId,vmId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarp>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpMutationError = unknown

    /**
 * @summary Enable CARP on virtual machine
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarp>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarp>>,
        TError,
        {serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove a managed license from virtual machine
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicense = (
    serviceName: string,
    datacenterId: number,
    vmId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vm/${vmId}/removeLicense`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicenseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicense>>, TError,{serviceName: string;datacenterId: number;vmId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicense>>, TError,{serviceName: string;datacenterId: number;vmId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicense>>, {serviceName: string;datacenterId: number;vmId: number}> = (props) => {
          const {serviceName,datacenterId,vmId} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicense(serviceName,datacenterId,vmId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicenseMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicense>>>
    
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicenseMutationError = unknown

    /**
 * @summary Remove a managed license from virtual machine
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicense = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicense>>, TError,{serviceName: string;datacenterId: number;vmId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicense>>,
        TError,
        {serviceName: string;datacenterId: number;vmId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicenseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Restore backup
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackup = (
    serviceName: string,
    datacenterId: number,
    vmId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vm/${vmId}/restoreBackup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackup>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackup>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackup>>, {serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupBody}> = (props) => {
          const {serviceName,datacenterId,vmId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackup(serviceName,datacenterId,vmId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackup>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupMutationError = unknown

    /**
 * @summary Restore backup
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackup>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackup>>,
        TError,
        {serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Set a managed license on virtual machine
 */
export const postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicense = (
    serviceName: string,
    datacenterId: number,
    vmId: number,
    postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseBody: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vm/${vmId}/setLicense`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicense>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicense>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicense>>, {serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseBody}> = (props) => {
          const {serviceName,datacenterId,vmId,data} = props ?? {};

          return  postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicense(serviceName,datacenterId,vmId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicense>>>
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseMutationBody = PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseBody
    export type PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseMutationError = unknown

    /**
 * @summary Set a managed license on virtual machine
 */
export const usePostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicense = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicense>>, TError,{serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicense>>,
        TError,
        {serviceName: string;datacenterId: number;vmId: number;data: PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get virtual machines with managed license
 */
export const getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed = (
    serviceName: string,
    datacenterId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudVirtualMachineLicensingSummaryOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vmLicensed`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedQueryKey = (serviceName: string,
    datacenterId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedParams,) => {
    return [`/dedicatedCloud/${serviceName}/datacenter/${datacenterId}/vmLicensed`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>, TError = unknown>(serviceName: string,
    datacenterId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedQueryKey(serviceName,datacenterId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>> = ({ signal }) => getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed(serviceName,datacenterId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>>
export type GetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedQueryError = unknown


export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    params: undefined |  GetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get virtual machines with managed license
 */

export function useGetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>, TError = unknown>(
 serviceName: string,
    datacenterId: number,
    params?: GetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensed>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedQueryOptions(serviceName,datacenterId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Active Directory federation option
 */
export const getDedicatedCloudServiceNameFederation = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudFederationOVH>(
      {url: `/dedicatedCloud/${serviceName}/federation`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameFederationQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/federation`] as const;
    }

    
export const getGetDedicatedCloudServiceNameFederationQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameFederationQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>> = ({ signal }) => getDedicatedCloudServiceNameFederation(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameFederationQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>>
export type GetDedicatedCloudServiceNameFederationQueryError = unknown


export function useGetDedicatedCloudServiceNameFederation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFederation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFederation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Active Directory federation option
 */

export function useGetDedicatedCloudServiceNameFederation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameFederationQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List federated Active Directories
 */
export const getDedicatedCloudServiceNameFederationActiveDirectory = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/federation/activeDirectory`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameFederationActiveDirectoryQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/federation/activeDirectory`] as const;
    }

    
export const getGetDedicatedCloudServiceNameFederationActiveDirectoryQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameFederationActiveDirectoryQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>> = ({ signal }) => getDedicatedCloudServiceNameFederationActiveDirectory(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameFederationActiveDirectoryQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>>
export type GetDedicatedCloudServiceNameFederationActiveDirectoryQueryError = unknown


export function useGetDedicatedCloudServiceNameFederationActiveDirectory<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFederationActiveDirectory<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFederationActiveDirectory<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List federated Active Directories
 */

export function useGetDedicatedCloudServiceNameFederationActiveDirectory<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameFederationActiveDirectoryQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create federated Active Directory
 */
export const postDedicatedCloudServiceNameFederationActiveDirectory = (
    serviceName: string,
    postDedicatedCloudServiceNameFederationActiveDirectoryBody: PostDedicatedCloudServiceNameFederationActiveDirectoryBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/federation/activeDirectory`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameFederationActiveDirectoryBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameFederationActiveDirectoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectory>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameFederationActiveDirectoryBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectory>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameFederationActiveDirectoryBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectory>>, {serviceName: string;data: PostDedicatedCloudServiceNameFederationActiveDirectoryBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameFederationActiveDirectory(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameFederationActiveDirectoryMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectory>>>
    export type PostDedicatedCloudServiceNameFederationActiveDirectoryMutationBody = PostDedicatedCloudServiceNameFederationActiveDirectoryBody
    export type PostDedicatedCloudServiceNameFederationActiveDirectoryMutationError = unknown

    /**
 * @summary Create federated Active Directory
 */
export const usePostDedicatedCloudServiceNameFederationActiveDirectory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectory>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameFederationActiveDirectoryBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectory>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameFederationActiveDirectoryBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameFederationActiveDirectoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove federated Active Directory
 */
export const deleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId = (
    serviceName: string,
    activeDirectoryId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/federation/activeDirectory/${activeDirectoryId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError,{serviceName: string;activeDirectoryId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError,{serviceName: string;activeDirectoryId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, {serviceName: string;activeDirectoryId: number}> = (props) => {
          const {serviceName,activeDirectoryId} = props ?? {};

          return  deleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId(serviceName,activeDirectoryId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>>
    
    export type DeleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdMutationError = unknown

    /**
 * @summary Remove federated Active Directory
 */
export const useDeleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError,{serviceName: string;activeDirectoryId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>,
        TError,
        {serviceName: string;activeDirectoryId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get federated Active Directory
 */
export const getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId = (
    serviceName: string,
    activeDirectoryId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudFederationAccessNetworkOVH>(
      {url: `/dedicatedCloud/${serviceName}/federation/activeDirectory/${activeDirectoryId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdQueryKey = (serviceName: string,
    activeDirectoryId: number,) => {
    return [`/dedicatedCloud/${serviceName}/federation/activeDirectory/${activeDirectoryId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError = unknown>(serviceName: string,
    activeDirectoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdQueryKey(serviceName,activeDirectoryId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>> = ({ signal }) => getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId(serviceName,activeDirectoryId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && activeDirectoryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>>
export type GetDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdQueryError = unknown


export function useGetDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError = unknown>(
 serviceName: string,
    activeDirectoryId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError = unknown>(
 serviceName: string,
    activeDirectoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError = unknown>(
 serviceName: string,
    activeDirectoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get federated Active Directory
 */

export function useGetDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError = unknown>(
 serviceName: string,
    activeDirectoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdQueryOptions(serviceName,activeDirectoryId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update federated Active Directory
 */
export const postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangeProperties = (
    serviceName: string,
    activeDirectoryId: number,
    postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesBody: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/federation/activeDirectory/${activeDirectoryId}/changeProperties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangeProperties>>, TError,{serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangeProperties>>, TError,{serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangeProperties>>, {serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesBody}> = (props) => {
          const {serviceName,activeDirectoryId,data} = props ?? {};

          return  postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangeProperties(serviceName,activeDirectoryId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangeProperties>>>
    export type PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesMutationBody = PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesBody
    export type PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesMutationError = unknown

    /**
 * @summary Update federated Active Directory
 */
export const usePostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangeProperties = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangeProperties>>, TError,{serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangeProperties>>,
        TError,
        {serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Grant Active Directory group
 */
export const postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroup = (
    serviceName: string,
    activeDirectoryId: number,
    postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupBody: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/federation/activeDirectory/${activeDirectoryId}/grantActiveDirectoryGroup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroup>>, TError,{serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroup>>, TError,{serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroup>>, {serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupBody}> = (props) => {
          const {serviceName,activeDirectoryId,data} = props ?? {};

          return  postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroup(serviceName,activeDirectoryId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroup>>>
    export type PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupMutationBody = PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupBody
    export type PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupMutationError = unknown

    /**
 * @summary Grant Active Directory group
 */
export const usePostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroup>>, TError,{serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroup>>,
        TError,
        {serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Grant Active Directory user
 */
export const postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUser = (
    serviceName: string,
    activeDirectoryId: number,
    postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserBody: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/federation/activeDirectory/${activeDirectoryId}/grantActiveDirectoryUser`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUser>>, TError,{serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUser>>, TError,{serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUser>>, {serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserBody}> = (props) => {
          const {serviceName,activeDirectoryId,data} = props ?? {};

          return  postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUser(serviceName,activeDirectoryId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUser>>>
    export type PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserMutationBody = PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserBody
    export type PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserMutationError = unknown

    /**
 * @summary Grant Active Directory user
 */
export const usePostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUser>>, TError,{serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUser>>,
        TError,
        {serviceName: string;activeDirectoryId: number;data: PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List global datastores mounted on all virtual datacenters
 */
export const getDedicatedCloudServiceNameFiler = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/filer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameFilerQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/filer`] as const;
    }

    
export const getGetDedicatedCloudServiceNameFilerQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameFilerQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>> = ({ signal }) => getDedicatedCloudServiceNameFiler(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameFilerQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>>
export type GetDedicatedCloudServiceNameFilerQueryError = unknown


export function useGetDedicatedCloudServiceNameFiler<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFiler<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFiler<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List global datastores mounted on all virtual datacenters
 */

export function useGetDedicatedCloudServiceNameFiler<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFiler>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameFilerQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get datastore
 */
export const getDedicatedCloudServiceNameFilerFilerId = (
    serviceName: string,
    filerId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudFilerOVH>(
      {url: `/dedicatedCloud/${serviceName}/filer/${filerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameFilerFilerIdQueryKey = (serviceName: string,
    filerId: number,) => {
    return [`/dedicatedCloud/${serviceName}/filer/${filerId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameFilerFilerIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>, TError = unknown>(serviceName: string,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameFilerFilerIdQueryKey(serviceName,filerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>> = ({ signal }) => getDedicatedCloudServiceNameFilerFilerId(serviceName,filerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && filerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameFilerFilerIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>>
export type GetDedicatedCloudServiceNameFilerFilerIdQueryError = unknown


export function useGetDedicatedCloudServiceNameFilerFilerId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>, TError = unknown>(
 serviceName: string,
    filerId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFilerFilerId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>, TError = unknown>(
 serviceName: string,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFilerFilerId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>, TError = unknown>(
 serviceName: string,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get datastore
 */

export function useGetDedicatedCloudServiceNameFilerFilerId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>, TError = unknown>(
 serviceName: string,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameFilerFilerIdQueryOptions(serviceName,filerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check ability to convert datastore to global datastore
 */
export const getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible = (
    serviceName: string,
    filerId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/dedicatedCloud/${serviceName}/filer/${filerId}/checkGlobalCompatible`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatibleQueryKey = (serviceName: string,
    filerId: number,) => {
    return [`/dedicatedCloud/${serviceName}/filer/${filerId}/checkGlobalCompatible`] as const;
    }

    
export const getGetDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatibleQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>, TError = unknown>(serviceName: string,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatibleQueryKey(serviceName,filerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>> = ({ signal }) => getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible(serviceName,filerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && filerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatibleQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>>
export type GetDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatibleQueryError = unknown


export function useGetDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>, TError = unknown>(
 serviceName: string,
    filerId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>, TError = unknown>(
 serviceName: string,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>, TError = unknown>(
 serviceName: string,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check ability to convert datastore to global datastore
 */

export function useGetDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>, TError = unknown>(
 serviceName: string,
    filerId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatible>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatibleQueryOptions(serviceName,filerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Convert datastore to global datastore
 */
export const postDedicatedCloudServiceNameFilerFilerIdConvertToGlobal = (
    serviceName: string,
    filerId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/filer/${filerId}/convertToGlobal`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameFilerFilerIdConvertToGlobalMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdConvertToGlobal>>, TError,{serviceName: string;filerId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdConvertToGlobal>>, TError,{serviceName: string;filerId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdConvertToGlobal>>, {serviceName: string;filerId: number}> = (props) => {
          const {serviceName,filerId} = props ?? {};

          return  postDedicatedCloudServiceNameFilerFilerIdConvertToGlobal(serviceName,filerId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameFilerFilerIdConvertToGlobalMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdConvertToGlobal>>>
    
    export type PostDedicatedCloudServiceNameFilerFilerIdConvertToGlobalMutationError = unknown

    /**
 * @summary Convert datastore to global datastore
 */
export const usePostDedicatedCloudServiceNameFilerFilerIdConvertToGlobal = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdConvertToGlobal>>, TError,{serviceName: string;filerId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdConvertToGlobal>>,
        TError,
        {serviceName: string;filerId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameFilerFilerIdConvertToGlobalMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get datastore location
 */
export const getDedicatedCloudServiceNameFilerFilerIdLocation = (
    serviceName: string,
    filerId: number,
    params?: GetDedicatedCloudServiceNameFilerFilerIdLocationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudFilerLocationOVH>(
      {url: `/dedicatedCloud/${serviceName}/filer/${filerId}/location`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameFilerFilerIdLocationQueryKey = (serviceName: string,
    filerId: number,
    params?: GetDedicatedCloudServiceNameFilerFilerIdLocationParams,) => {
    return [`/dedicatedCloud/${serviceName}/filer/${filerId}/location`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameFilerFilerIdLocationQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>, TError = unknown>(serviceName: string,
    filerId: number,
    params?: GetDedicatedCloudServiceNameFilerFilerIdLocationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameFilerFilerIdLocationQueryKey(serviceName,filerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>> = ({ signal }) => getDedicatedCloudServiceNameFilerFilerIdLocation(serviceName,filerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && filerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameFilerFilerIdLocationQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>>
export type GetDedicatedCloudServiceNameFilerFilerIdLocationQueryError = unknown


export function useGetDedicatedCloudServiceNameFilerFilerIdLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>, TError = unknown>(
 serviceName: string,
    filerId: number,
    params: undefined |  GetDedicatedCloudServiceNameFilerFilerIdLocationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFilerFilerIdLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>, TError = unknown>(
 serviceName: string,
    filerId: number,
    params?: GetDedicatedCloudServiceNameFilerFilerIdLocationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFilerFilerIdLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>, TError = unknown>(
 serviceName: string,
    filerId: number,
    params?: GetDedicatedCloudServiceNameFilerFilerIdLocationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get datastore location
 */

export function useGetDedicatedCloudServiceNameFilerFilerIdLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>, TError = unknown>(
 serviceName: string,
    filerId: number,
    params?: GetDedicatedCloudServiceNameFilerFilerIdLocationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameFilerFilerIdLocationQueryOptions(serviceName,filerId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Remove datastore
 */
export const postDedicatedCloudServiceNameFilerFilerIdRemove = (
    serviceName: string,
    filerId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/filer/${filerId}/remove`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameFilerFilerIdRemoveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdRemove>>, TError,{serviceName: string;filerId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdRemove>>, TError,{serviceName: string;filerId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdRemove>>, {serviceName: string;filerId: number}> = (props) => {
          const {serviceName,filerId} = props ?? {};

          return  postDedicatedCloudServiceNameFilerFilerIdRemove(serviceName,filerId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameFilerFilerIdRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdRemove>>>
    
    export type PostDedicatedCloudServiceNameFilerFilerIdRemoveMutationError = unknown

    /**
 * @summary Remove datastore
 */
export const usePostDedicatedCloudServiceNameFilerFilerIdRemove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdRemove>>, TError,{serviceName: string;filerId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdRemove>>,
        TError,
        {serviceName: string;filerId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameFilerFilerIdRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List operations associated to datastore
 */
export const getDedicatedCloudServiceNameFilerFilerIdTask = (
    serviceName: string,
    filerId: number,
    params?: GetDedicatedCloudServiceNameFilerFilerIdTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/filer/${filerId}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameFilerFilerIdTaskQueryKey = (serviceName: string,
    filerId: number,
    params?: GetDedicatedCloudServiceNameFilerFilerIdTaskParams,) => {
    return [`/dedicatedCloud/${serviceName}/filer/${filerId}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameFilerFilerIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>, TError = unknown>(serviceName: string,
    filerId: number,
    params?: GetDedicatedCloudServiceNameFilerFilerIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameFilerFilerIdTaskQueryKey(serviceName,filerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>> = ({ signal }) => getDedicatedCloudServiceNameFilerFilerIdTask(serviceName,filerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && filerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameFilerFilerIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>>
export type GetDedicatedCloudServiceNameFilerFilerIdTaskQueryError = unknown


export function useGetDedicatedCloudServiceNameFilerFilerIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>, TError = unknown>(
 serviceName: string,
    filerId: number,
    params: undefined |  GetDedicatedCloudServiceNameFilerFilerIdTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFilerFilerIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>, TError = unknown>(
 serviceName: string,
    filerId: number,
    params?: GetDedicatedCloudServiceNameFilerFilerIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFilerFilerIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>, TError = unknown>(
 serviceName: string,
    filerId: number,
    params?: GetDedicatedCloudServiceNameFilerFilerIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List operations associated to datastore
 */

export function useGetDedicatedCloudServiceNameFilerFilerIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>, TError = unknown>(
 serviceName: string,
    filerId: number,
    params?: GetDedicatedCloudServiceNameFilerFilerIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameFilerFilerIdTaskQueryOptions(serviceName,filerId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get operation
 */
export const getDedicatedCloudServiceNameFilerFilerIdTaskTaskId = (
    serviceName: string,
    filerId: number,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/filer/${filerId}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameFilerFilerIdTaskTaskIdQueryKey = (serviceName: string,
    filerId: number,
    taskId: number,) => {
    return [`/dedicatedCloud/${serviceName}/filer/${filerId}/task/${taskId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameFilerFilerIdTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>, TError = unknown>(serviceName: string,
    filerId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameFilerFilerIdTaskTaskIdQueryKey(serviceName,filerId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>> = ({ signal }) => getDedicatedCloudServiceNameFilerFilerIdTaskTaskId(serviceName,filerId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && filerId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameFilerFilerIdTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>>
export type GetDedicatedCloudServiceNameFilerFilerIdTaskTaskIdQueryError = unknown


export function useGetDedicatedCloudServiceNameFilerFilerIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    filerId: number,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFilerFilerIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    filerId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameFilerFilerIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    filerId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get operation
 */

export function useGetDedicatedCloudServiceNameFilerFilerIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    filerId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameFilerFilerIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameFilerFilerIdTaskTaskIdQueryOptions(serviceName,filerId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the execution date of a maintenance operation
 */
export const postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate = (
    serviceName: string,
    filerId: number,
    taskId: number,
    postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody: PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/filer/${filerId}/task/${taskId}/changeMaintenanceExecutionDate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate>>, {serviceName: string;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody}> = (props) => {
          const {serviceName,filerId,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate(serviceName,filerId,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate>>>
    export type PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateMutationBody = PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody
    export type PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateMutationError = unknown

    /**
 * @summary Change the execution date of a maintenance operation
 */
export const usePostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDate>>,
        TError,
        {serviceName: string;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Relaunch operation currently in error state
 */
export const postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskState = (
    serviceName: string,
    filerId: number,
    taskId: number,
    postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateBody: PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/filer/${filerId}/task/${taskId}/resetTaskState`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskState>>, {serviceName: string;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateBody}> = (props) => {
          const {serviceName,filerId,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskState(serviceName,filerId,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskState>>>
    export type PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateMutationBody = PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateBody
    export type PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateMutationError = unknown

    /**
 * @summary Relaunch operation currently in error state
 */
export const usePostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskState = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskState>>,
        TError,
        {serviceName: string;filerId: number;taskId: number;data: PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate a NSX-V inventory
 */
export const postDedicatedCloudServiceNameGenerateNsxvInventory = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/generateNsxvInventory`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameGenerateNsxvInventoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameGenerateNsxvInventory>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameGenerateNsxvInventory>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameGenerateNsxvInventory>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedCloudServiceNameGenerateNsxvInventory(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameGenerateNsxvInventoryMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameGenerateNsxvInventory>>>
    
    export type PostDedicatedCloudServiceNameGenerateNsxvInventoryMutationError = unknown

    /**
 * @summary Generate a NSX-V inventory
 */
export const usePostDedicatedCloudServiceNameGenerateNsxvInventory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameGenerateNsxvInventory>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameGenerateNsxvInventory>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameGenerateNsxvInventoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate a NSX-V VXLAN to vRack mapping
 */
export const postDedicatedCloudServiceNameGenerateVxlanToVrackMapping = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/generateVxlanToVrackMapping`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameGenerateVxlanToVrackMappingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameGenerateVxlanToVrackMapping>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameGenerateVxlanToVrackMapping>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameGenerateVxlanToVrackMapping>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedCloudServiceNameGenerateVxlanToVrackMapping(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameGenerateVxlanToVrackMappingMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameGenerateVxlanToVrackMapping>>>
    
    export type PostDedicatedCloudServiceNameGenerateVxlanToVrackMappingMutationError = unknown

    /**
 * @summary Generate a NSX-V VXLAN to vRack mapping
 */
export const usePostDedicatedCloudServiceNameGenerateVxlanToVrackMapping = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameGenerateVxlanToVrackMapping>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameGenerateVxlanToVrackMapping>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameGenerateVxlanToVrackMappingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List filtered operations
 */
export const getDedicatedCloudServiceNameGlobalTasks = (
    serviceName: string,
    params?: GetDedicatedCloudServiceNameGlobalTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/globalTasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameGlobalTasksQueryKey = (serviceName: string,
    params?: GetDedicatedCloudServiceNameGlobalTasksParams,) => {
    return [`/dedicatedCloud/${serviceName}/globalTasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameGlobalTasksQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedCloudServiceNameGlobalTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameGlobalTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>> = ({ signal }) => getDedicatedCloudServiceNameGlobalTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameGlobalTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>>
export type GetDedicatedCloudServiceNameGlobalTasksQueryError = unknown


export function useGetDedicatedCloudServiceNameGlobalTasks<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedCloudServiceNameGlobalTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameGlobalTasks<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameGlobalTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameGlobalTasks<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameGlobalTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List filtered operations
 */

export function useGetDedicatedCloudServiceNameGlobalTasks<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameGlobalTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameGlobalTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameGlobalTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get VMware Hybrid Cloud Extension option
 */
export const getDedicatedCloudServiceNameHcx = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudHcxOVH>(
      {url: `/dedicatedCloud/${serviceName}/hcx`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameHcxQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/hcx`] as const;
    }

    
export const getGetDedicatedCloudServiceNameHcxQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameHcxQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>> = ({ signal }) => getDedicatedCloudServiceNameHcx(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameHcxQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>>
export type GetDedicatedCloudServiceNameHcxQueryError = unknown


export function useGetDedicatedCloudServiceNameHcx<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameHcx<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameHcx<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get VMware Hybrid Cloud Extension option
 */

export function useGetDedicatedCloudServiceNameHcx<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHcx>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameHcxQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Disable VMware Hybrid Cloud Extension option
 */
export const postDedicatedCloudServiceNameHcxDisable = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/hcx/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameHcxDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameHcxDisable>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameHcxDisable>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameHcxDisable>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedCloudServiceNameHcxDisable(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameHcxDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameHcxDisable>>>
    
    export type PostDedicatedCloudServiceNameHcxDisableMutationError = unknown

    /**
 * @summary Disable VMware Hybrid Cloud Extension option
 */
export const usePostDedicatedCloudServiceNameHcxDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameHcxDisable>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameHcxDisable>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameHcxDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get HDS certification option
 */
export const getDedicatedCloudServiceNameHds = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudHdsOVH>(
      {url: `/dedicatedCloud/${serviceName}/hds`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameHdsQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/hds`] as const;
    }

    
export const getGetDedicatedCloudServiceNameHdsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameHdsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>> = ({ signal }) => getDedicatedCloudServiceNameHds(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameHdsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>>
export type GetDedicatedCloudServiceNameHdsQueryError = unknown


export function useGetDedicatedCloudServiceNameHds<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameHds<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameHds<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get HDS certification option
 */

export function useGetDedicatedCloudServiceNameHds<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHds>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameHdsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get HIPAA certification option
 */
export const getDedicatedCloudServiceNameHipaa = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudHipaaOVH>(
      {url: `/dedicatedCloud/${serviceName}/hipaa`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameHipaaQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/hipaa`] as const;
    }

    
export const getGetDedicatedCloudServiceNameHipaaQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameHipaaQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>> = ({ signal }) => getDedicatedCloudServiceNameHipaa(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameHipaaQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>>
export type GetDedicatedCloudServiceNameHipaaQueryError = unknown


export function useGetDedicatedCloudServiceNameHipaa<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameHipaa<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameHipaa<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get HIPAA certification option
 */

export function useGetDedicatedCloudServiceNameHipaa<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameHipaa>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameHipaaQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get OVHcloud IAM option
 */
export const getDedicatedCloudServiceNameIam = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudIamOVH>(
      {url: `/dedicatedCloud/${serviceName}/iam`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameIamQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/iam`] as const;
    }

    
export const getGetDedicatedCloudServiceNameIamQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameIamQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>> = ({ signal }) => getDedicatedCloudServiceNameIam(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameIamQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>>
export type GetDedicatedCloudServiceNameIamQueryError = unknown


export function useGetDedicatedCloudServiceNameIam<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIam<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIam<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get OVHcloud IAM option
 */

export function useGetDedicatedCloudServiceNameIam<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIam>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameIamQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create IAM role
 */
export const postDedicatedCloudServiceNameIamAddRole = (
    serviceName: string,
    postDedicatedCloudServiceNameIamAddRoleBody: PostDedicatedCloudServiceNameIamAddRoleBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/iam/addRole`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameIamAddRoleBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameIamAddRoleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamAddRole>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameIamAddRoleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamAddRole>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameIamAddRoleBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamAddRole>>, {serviceName: string;data: PostDedicatedCloudServiceNameIamAddRoleBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameIamAddRole(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameIamAddRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamAddRole>>>
    export type PostDedicatedCloudServiceNameIamAddRoleMutationBody = PostDedicatedCloudServiceNameIamAddRoleBody
    export type PostDedicatedCloudServiceNameIamAddRoleMutationError = unknown

    /**
 * @summary Create IAM role
 */
export const usePostDedicatedCloudServiceNameIamAddRole = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamAddRole>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameIamAddRoleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamAddRole>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameIamAddRoleBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameIamAddRoleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Check if OVHcloud IAM option can be disabled
 */
export const getDedicatedCloudServiceNameIamCanBeDisabled = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/dedicatedCloud/${serviceName}/iam/canBeDisabled`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameIamCanBeDisabledQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/iam/canBeDisabled`] as const;
    }

    
export const getGetDedicatedCloudServiceNameIamCanBeDisabledQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameIamCanBeDisabledQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>> = ({ signal }) => getDedicatedCloudServiceNameIamCanBeDisabled(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameIamCanBeDisabledQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>>
export type GetDedicatedCloudServiceNameIamCanBeDisabledQueryError = unknown


export function useGetDedicatedCloudServiceNameIamCanBeDisabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIamCanBeDisabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIamCanBeDisabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check if OVHcloud IAM option can be disabled
 */

export function useGetDedicatedCloudServiceNameIamCanBeDisabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeDisabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameIamCanBeDisabledQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check if OVHcloud IAM option can be enabled
 */
export const getDedicatedCloudServiceNameIamCanBeEnabled = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/dedicatedCloud/${serviceName}/iam/canBeEnabled`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameIamCanBeEnabledQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/iam/canBeEnabled`] as const;
    }

    
export const getGetDedicatedCloudServiceNameIamCanBeEnabledQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameIamCanBeEnabledQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>> = ({ signal }) => getDedicatedCloudServiceNameIamCanBeEnabled(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameIamCanBeEnabledQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>>
export type GetDedicatedCloudServiceNameIamCanBeEnabledQueryError = unknown


export function useGetDedicatedCloudServiceNameIamCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIamCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIamCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check if OVHcloud IAM option can be enabled
 */

export function useGetDedicatedCloudServiceNameIamCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIamCanBeEnabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameIamCanBeEnabledQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Disable OVHcloud IAM option
 */
export const postDedicatedCloudServiceNameIamDisable = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/iam/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameIamDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamDisable>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamDisable>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamDisable>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedCloudServiceNameIamDisable(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameIamDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamDisable>>>
    
    export type PostDedicatedCloudServiceNameIamDisableMutationError = unknown

    /**
 * @summary Disable OVHcloud IAM option
 */
export const usePostDedicatedCloudServiceNameIamDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamDisable>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamDisable>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameIamDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable OVHcloud IAM option
 */
export const postDedicatedCloudServiceNameIamEnable = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/iam/enable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameIamEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamEnable>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamEnable>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamEnable>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedCloudServiceNameIamEnable(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameIamEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamEnable>>>
    
    export type PostDedicatedCloudServiceNameIamEnableMutationError = unknown

    /**
 * @summary Enable OVHcloud IAM option
 */
export const usePostDedicatedCloudServiceNameIamEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamEnable>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameIamEnable>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameIamEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List IP blocks
 */
export const getDedicatedCloudServiceNameIp = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4BlockOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/ip`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameIpQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/ip`] as const;
    }

    
export const getGetDedicatedCloudServiceNameIpQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameIpQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>> = ({ signal }) => getDedicatedCloudServiceNameIp(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameIpQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>>
export type GetDedicatedCloudServiceNameIpQueryError = unknown


export function useGetDedicatedCloudServiceNameIp<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIp<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIp<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List IP blocks
 */

export function useGetDedicatedCloudServiceNameIp<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameIpQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get IP block
 */
export const getDedicatedCloudServiceNameIpNetwork = (
    serviceName: string,
    network: Ipv4BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudIpOVH>(
      {url: `/dedicatedCloud/${serviceName}/ip/${network}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameIpNetworkQueryKey = (serviceName: string,
    network: Ipv4BlockOVH,) => {
    return [`/dedicatedCloud/${serviceName}/ip/${network}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameIpNetworkQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>, TError = unknown>(serviceName: string,
    network: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameIpNetworkQueryKey(serviceName,network);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>> = ({ signal }) => getDedicatedCloudServiceNameIpNetwork(serviceName,network, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && network), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameIpNetworkQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>>
export type GetDedicatedCloudServiceNameIpNetworkQueryError = unknown


export function useGetDedicatedCloudServiceNameIpNetwork<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIpNetwork<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIpNetwork<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get IP block
 */

export function useGetDedicatedCloudServiceNameIpNetwork<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameIpNetworkQueryOptions(serviceName,network,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get details about this IP Block
 */
export const getDedicatedCloudServiceNameIpNetworkDetails = (
    serviceName: string,
    network: Ipv4BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudIpDetailsOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/ip/${network}/details`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameIpNetworkDetailsQueryKey = (serviceName: string,
    network: Ipv4BlockOVH,) => {
    return [`/dedicatedCloud/${serviceName}/ip/${network}/details`] as const;
    }

    
export const getGetDedicatedCloudServiceNameIpNetworkDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>, TError = unknown>(serviceName: string,
    network: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameIpNetworkDetailsQueryKey(serviceName,network);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>> = ({ signal }) => getDedicatedCloudServiceNameIpNetworkDetails(serviceName,network, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && network), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameIpNetworkDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>>
export type GetDedicatedCloudServiceNameIpNetworkDetailsQueryError = unknown


export function useGetDedicatedCloudServiceNameIpNetworkDetails<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIpNetworkDetails<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIpNetworkDetails<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details about this IP Block
 */

export function useGetDedicatedCloudServiceNameIpNetworkDetails<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameIpNetworkDetailsQueryOptions(serviceName,network,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List operations associated to IP block
 */
export const getDedicatedCloudServiceNameIpNetworkTask = (
    serviceName: string,
    network: Ipv4BlockOVH,
    params?: GetDedicatedCloudServiceNameIpNetworkTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/ip/${network}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameIpNetworkTaskQueryKey = (serviceName: string,
    network: Ipv4BlockOVH,
    params?: GetDedicatedCloudServiceNameIpNetworkTaskParams,) => {
    return [`/dedicatedCloud/${serviceName}/ip/${network}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameIpNetworkTaskQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>, TError = unknown>(serviceName: string,
    network: Ipv4BlockOVH,
    params?: GetDedicatedCloudServiceNameIpNetworkTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameIpNetworkTaskQueryKey(serviceName,network,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>> = ({ signal }) => getDedicatedCloudServiceNameIpNetworkTask(serviceName,network,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && network), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameIpNetworkTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>>
export type GetDedicatedCloudServiceNameIpNetworkTaskQueryError = unknown


export function useGetDedicatedCloudServiceNameIpNetworkTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH,
    params: undefined |  GetDedicatedCloudServiceNameIpNetworkTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIpNetworkTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH,
    params?: GetDedicatedCloudServiceNameIpNetworkTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIpNetworkTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH,
    params?: GetDedicatedCloudServiceNameIpNetworkTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List operations associated to IP block
 */

export function useGetDedicatedCloudServiceNameIpNetworkTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH,
    params?: GetDedicatedCloudServiceNameIpNetworkTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameIpNetworkTaskQueryOptions(serviceName,network,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get operation
 */
export const getDedicatedCloudServiceNameIpNetworkTaskTaskId = (
    serviceName: string,
    network: Ipv4BlockOVH,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/ip/${network}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameIpNetworkTaskTaskIdQueryKey = (serviceName: string,
    network: Ipv4BlockOVH,
    taskId: number,) => {
    return [`/dedicatedCloud/${serviceName}/ip/${network}/task/${taskId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameIpNetworkTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>, TError = unknown>(serviceName: string,
    network: Ipv4BlockOVH,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameIpNetworkTaskTaskIdQueryKey(serviceName,network,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>> = ({ signal }) => getDedicatedCloudServiceNameIpNetworkTaskTaskId(serviceName,network,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && network && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameIpNetworkTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>>
export type GetDedicatedCloudServiceNameIpNetworkTaskTaskIdQueryError = unknown


export function useGetDedicatedCloudServiceNameIpNetworkTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIpNetworkTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameIpNetworkTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get operation
 */

export function useGetDedicatedCloudServiceNameIpNetworkTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>, TError = unknown>(
 serviceName: string,
    network: Ipv4BlockOVH,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameIpNetworkTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameIpNetworkTaskTaskIdQueryOptions(serviceName,network,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the execution date of a maintenance operation
 */
export const postDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDate = (
    serviceName: string,
    network: Ipv4BlockOVH,
    taskId: number,
    postDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateBody: PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/ip/${network}/task/${taskId}/changeMaintenanceExecutionDate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;network: Ipv4BlockOVH;taskId: number;data: PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;network: Ipv4BlockOVH;taskId: number;data: PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDate>>, {serviceName: string;network: Ipv4BlockOVH;taskId: number;data: PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateBody}> = (props) => {
          const {serviceName,network,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDate(serviceName,network,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDate>>>
    export type PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateMutationBody = PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateBody
    export type PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateMutationError = unknown

    /**
 * @summary Change the execution date of a maintenance operation
 */
export const usePostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;network: Ipv4BlockOVH;taskId: number;data: PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDate>>,
        TError,
        {serviceName: string;network: Ipv4BlockOVH;taskId: number;data: PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Relaunch operation currently in error state
 */
export const postDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskState = (
    serviceName: string,
    network: Ipv4BlockOVH,
    taskId: number,
    postDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateBody: PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/ip/${network}/task/${taskId}/resetTaskState`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskState>>, TError,{serviceName: string;network: Ipv4BlockOVH;taskId: number;data: PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskState>>, TError,{serviceName: string;network: Ipv4BlockOVH;taskId: number;data: PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskState>>, {serviceName: string;network: Ipv4BlockOVH;taskId: number;data: PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateBody}> = (props) => {
          const {serviceName,network,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskState(serviceName,network,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskState>>>
    export type PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateMutationBody = PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateBody
    export type PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateMutationError = unknown

    /**
 * @summary Relaunch operation currently in error state
 */
export const usePostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskState = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskState>>, TError,{serviceName: string;network: Ipv4BlockOVH;taskId: number;data: PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskState>>,
        TError,
        {serviceName: string;network: Ipv4BlockOVH;taskId: number;data: PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get hosting location
 */
export const getDedicatedCloudServiceNameLocation = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudPccZoneOVH>(
      {url: `/dedicatedCloud/${serviceName}/location`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameLocationQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/location`] as const;
    }

    
export const getGetDedicatedCloudServiceNameLocationQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameLocationQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>> = ({ signal }) => getDedicatedCloudServiceNameLocation(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameLocationQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>>
export type GetDedicatedCloudServiceNameLocationQueryError = unknown


export function useGetDedicatedCloudServiceNameLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get hosting location
 */

export function useGetDedicatedCloudServiceNameLocation<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameLocationQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List host profiles on hosting location
 */
export const getDedicatedCloudServiceNameLocationHostProfile = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/location/hostProfile`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameLocationHostProfileQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/location/hostProfile`] as const;
    }

    
export const getGetDedicatedCloudServiceNameLocationHostProfileQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameLocationHostProfileQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>> = ({ signal }) => getDedicatedCloudServiceNameLocationHostProfile(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameLocationHostProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>>
export type GetDedicatedCloudServiceNameLocationHostProfileQueryError = unknown


export function useGetDedicatedCloudServiceNameLocationHostProfile<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLocationHostProfile<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLocationHostProfile<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List host profiles on hosting location
 */

export function useGetDedicatedCloudServiceNameLocationHostProfile<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameLocationHostProfileQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get host profile
 */
export const getDedicatedCloudServiceNameLocationHostProfileId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudHostProfileOVH>(
      {url: `/dedicatedCloud/${serviceName}/location/hostProfile/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameLocationHostProfileIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/dedicatedCloud/${serviceName}/location/hostProfile/${id}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameLocationHostProfileIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameLocationHostProfileIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>> = ({ signal }) => getDedicatedCloudServiceNameLocationHostProfileId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameLocationHostProfileIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>>
export type GetDedicatedCloudServiceNameLocationHostProfileIdQueryError = unknown


export function useGetDedicatedCloudServiceNameLocationHostProfileId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLocationHostProfileId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLocationHostProfileId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get host profile
 */

export function useGetDedicatedCloudServiceNameLocationHostProfileId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHostProfileId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameLocationHostProfileIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List hypervisor versions on hosting location
 */
export const getDedicatedCloudServiceNameLocationHypervisor = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud/${serviceName}/location/hypervisor`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameLocationHypervisorQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/location/hypervisor`] as const;
    }

    
export const getGetDedicatedCloudServiceNameLocationHypervisorQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameLocationHypervisorQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>> = ({ signal }) => getDedicatedCloudServiceNameLocationHypervisor(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameLocationHypervisorQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>>
export type GetDedicatedCloudServiceNameLocationHypervisorQueryError = unknown


export function useGetDedicatedCloudServiceNameLocationHypervisor<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLocationHypervisor<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLocationHypervisor<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List hypervisor versions on hosting location
 */

export function useGetDedicatedCloudServiceNameLocationHypervisor<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisor>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameLocationHypervisorQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get hypervisor
 */
export const getDedicatedCloudServiceNameLocationHypervisorShortName = (
    serviceName: string,
    shortName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudOsOVH>(
      {url: `/dedicatedCloud/${serviceName}/location/hypervisor/${shortName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameLocationHypervisorShortNameQueryKey = (serviceName: string,
    shortName: string,) => {
    return [`/dedicatedCloud/${serviceName}/location/hypervisor/${shortName}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameLocationHypervisorShortNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>, TError = unknown>(serviceName: string,
    shortName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameLocationHypervisorShortNameQueryKey(serviceName,shortName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>> = ({ signal }) => getDedicatedCloudServiceNameLocationHypervisorShortName(serviceName,shortName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && shortName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameLocationHypervisorShortNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>>
export type GetDedicatedCloudServiceNameLocationHypervisorShortNameQueryError = unknown


export function useGetDedicatedCloudServiceNameLocationHypervisorShortName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>, TError = unknown>(
 serviceName: string,
    shortName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLocationHypervisorShortName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>, TError = unknown>(
 serviceName: string,
    shortName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLocationHypervisorShortName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>, TError = unknown>(
 serviceName: string,
    shortName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get hypervisor
 */

export function useGetDedicatedCloudServiceNameLocationHypervisorShortName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>, TError = unknown>(
 serviceName: string,
    shortName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLocationHypervisorShortName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameLocationHypervisorShortNameQueryOptions(serviceName,shortName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Log kinds for your dedicated cloud
 */
export const getDedicatedCloudServiceNameLogKind = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud/${serviceName}/log/kind`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameLogKindQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/log/kind`] as const;
    }

    
export const getGetDedicatedCloudServiceNameLogKindQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameLogKindQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>> = ({ signal }) => getDedicatedCloudServiceNameLogKind(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameLogKindQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>>
export type GetDedicatedCloudServiceNameLogKindQueryError = unknown


export function useGetDedicatedCloudServiceNameLogKind<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLogKind<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLogKind<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Log kinds for your dedicated cloud
 */

export function useGetDedicatedCloudServiceNameLogKind<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameLogKindQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedCloudServiceNameLogKindName = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudLdpKindOVH>(
      {url: `/dedicatedCloud/${serviceName}/log/kind/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameLogKindNameQueryKey = (serviceName: string,
    name: string,) => {
    return [`/dedicatedCloud/${serviceName}/log/kind/${name}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameLogKindNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameLogKindNameQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>> = ({ signal }) => getDedicatedCloudServiceNameLogKindName(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameLogKindNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>>
export type GetDedicatedCloudServiceNameLogKindNameQueryError = unknown


export function useGetDedicatedCloudServiceNameLogKindName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLogKindName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLogKindName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedCloudServiceNameLogKindName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameLogKindNameQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Log subscriptions for your dedicated cloud
 */
export const getDedicatedCloudServiceNameLogSubscription = (
    serviceName: string,
    params?: GetDedicatedCloudServiceNameLogSubscriptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud/${serviceName}/log/subscription`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameLogSubscriptionQueryKey = (serviceName: string,
    params?: GetDedicatedCloudServiceNameLogSubscriptionParams,) => {
    return [`/dedicatedCloud/${serviceName}/log/subscription`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameLogSubscriptionQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedCloudServiceNameLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameLogSubscriptionQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>> = ({ signal }) => getDedicatedCloudServiceNameLogSubscription(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameLogSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>>
export type GetDedicatedCloudServiceNameLogSubscriptionQueryError = unknown


export function useGetDedicatedCloudServiceNameLogSubscription<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedCloudServiceNameLogSubscriptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLogSubscription<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLogSubscription<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Log subscriptions for your dedicated cloud
 */

export function useGetDedicatedCloudServiceNameLogSubscription<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameLogSubscriptionQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a log subscription for your dedicated cloud
 */
export const postDedicatedCloudServiceNameLogSubscription = (
    serviceName: string,
    postDedicatedCloudServiceNameLogSubscriptionBody: PostDedicatedCloudServiceNameLogSubscriptionBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudLogSubscriptionResponseOVH>(
      {url: `/dedicatedCloud/${serviceName}/log/subscription`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameLogSubscriptionBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameLogSubscriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameLogSubscription>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameLogSubscriptionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameLogSubscription>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameLogSubscriptionBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameLogSubscription>>, {serviceName: string;data: PostDedicatedCloudServiceNameLogSubscriptionBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameLogSubscription(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameLogSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameLogSubscription>>>
    export type PostDedicatedCloudServiceNameLogSubscriptionMutationBody = PostDedicatedCloudServiceNameLogSubscriptionBody
    export type PostDedicatedCloudServiceNameLogSubscriptionMutationError = unknown

    /**
 * @summary Create a log subscription for your dedicated cloud
 */
export const usePostDedicatedCloudServiceNameLogSubscription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameLogSubscription>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameLogSubscriptionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameLogSubscription>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameLogSubscriptionBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameLogSubscriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a log subscription for your dedicated cloud
 */
export const deleteDedicatedCloudServiceNameLogSubscriptionSubscriptionId = (
    serviceName: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudLogSubscriptionResponseOVH>(
      {url: `/dedicatedCloud/${serviceName}/log/subscription/${subscriptionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameLogSubscriptionSubscriptionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError,{serviceName: string;subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError,{serviceName: string;subscriptionId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, {serviceName: string;subscriptionId: string}> = (props) => {
          const {serviceName,subscriptionId} = props ?? {};

          return  deleteDedicatedCloudServiceNameLogSubscriptionSubscriptionId(serviceName,subscriptionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameLogSubscriptionSubscriptionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>>
    
    export type DeleteDedicatedCloudServiceNameLogSubscriptionSubscriptionIdMutationError = unknown

    /**
 * @summary Delete a log subscription for your dedicated cloud
 */
export const useDeleteDedicatedCloudServiceNameLogSubscriptionSubscriptionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError,{serviceName: string;subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>,
        TError,
        {serviceName: string;subscriptionId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameLogSubscriptionSubscriptionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedCloudServiceNameLogSubscriptionSubscriptionId = (
    serviceName: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudLdpSubscriptionOVH>(
      {url: `/dedicatedCloud/${serviceName}/log/subscription/${subscriptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameLogSubscriptionSubscriptionIdQueryKey = (serviceName: string,
    subscriptionId: string,) => {
    return [`/dedicatedCloud/${serviceName}/log/subscription/${subscriptionId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameLogSubscriptionSubscriptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError = unknown>(serviceName: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameLogSubscriptionSubscriptionIdQueryKey(serviceName,subscriptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>> = ({ signal }) => getDedicatedCloudServiceNameLogSubscriptionSubscriptionId(serviceName,subscriptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameLogSubscriptionSubscriptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>>
export type GetDedicatedCloudServiceNameLogSubscriptionSubscriptionIdQueryError = unknown


export function useGetDedicatedCloudServiceNameLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError = unknown>(
 serviceName: string,
    subscriptionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError = unknown>(
 serviceName: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError = unknown>(
 serviceName: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedCloudServiceNameLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError = unknown>(
 serviceName: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameLogSubscriptionSubscriptionIdQueryOptions(serviceName,subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate a log url
 */
export const postDedicatedCloudServiceNameLogUrl = (
    serviceName: string,
    postDedicatedCloudServiceNameLogUrlBody: PostDedicatedCloudServiceNameLogUrlBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudLogsURLOVH>(
      {url: `/dedicatedCloud/${serviceName}/log/url`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameLogUrlBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameLogUrlMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameLogUrl>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameLogUrlBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameLogUrl>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameLogUrlBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameLogUrl>>, {serviceName: string;data: PostDedicatedCloudServiceNameLogUrlBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameLogUrl(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameLogUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameLogUrl>>>
    export type PostDedicatedCloudServiceNameLogUrlMutationBody = PostDedicatedCloudServiceNameLogUrlBody
    export type PostDedicatedCloudServiceNameLogUrlMutationError = unknown

    /**
 * @summary Generate a log url
 */
export const usePostDedicatedCloudServiceNameLogUrl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameLogUrl>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameLogUrlBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameLogUrl>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameLogUrlBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameLogUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get new prices
 */
export const getDedicatedCloudServiceNameNewPrices = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudResourceNewPricesOVH>(
      {url: `/dedicatedCloud/${serviceName}/newPrices`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameNewPricesQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/newPrices`] as const;
    }

    
export const getGetDedicatedCloudServiceNameNewPricesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameNewPricesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>> = ({ signal }) => getDedicatedCloudServiceNameNewPrices(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameNewPricesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>>
export type GetDedicatedCloudServiceNameNewPricesQueryError = unknown


export function useGetDedicatedCloudServiceNameNewPrices<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameNewPrices<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameNewPrices<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get new prices
 */

export function useGetDedicatedCloudServiceNameNewPrices<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNewPrices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameNewPricesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get VMware NSX-V option
 */
export const getDedicatedCloudServiceNameNsx = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudNsxOVH>(
      {url: `/dedicatedCloud/${serviceName}/nsx`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameNsxQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/nsx`] as const;
    }

    
export const getGetDedicatedCloudServiceNameNsxQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameNsxQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>> = ({ signal }) => getDedicatedCloudServiceNameNsx(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameNsxQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>>
export type GetDedicatedCloudServiceNameNsxQueryError = unknown


export function useGetDedicatedCloudServiceNameNsx<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameNsx<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameNsx<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get VMware NSX-V option
 */

export function useGetDedicatedCloudServiceNameNsx<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsx>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameNsxQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Remove VMware NSX-V from your infrastructure
 */
export const deleteDedicatedCloudServiceNameNsxRemove = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/nsx/remove`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameNsxRemoveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameNsxRemove>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameNsxRemove>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameNsxRemove>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteDedicatedCloudServiceNameNsxRemove(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameNsxRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameNsxRemove>>>
    
    export type DeleteDedicatedCloudServiceNameNsxRemoveMutationError = unknown

    /**
 * @summary Remove VMware NSX-V from your infrastructure
 */
export const useDeleteDedicatedCloudServiceNameNsxRemove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameNsxRemove>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameNsxRemove>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameNsxRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get VMware NSX-T option
 */
export const getDedicatedCloudServiceNameNsxt = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudNsxtOVH>(
      {url: `/dedicatedCloud/${serviceName}/nsxt`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameNsxtQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/nsxt`] as const;
    }

    
export const getGetDedicatedCloudServiceNameNsxtQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameNsxtQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>> = ({ signal }) => getDedicatedCloudServiceNameNsxt(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameNsxtQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>>
export type GetDedicatedCloudServiceNameNsxtQueryError = unknown


export function useGetDedicatedCloudServiceNameNsxt<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameNsxt<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameNsxt<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get VMware NSX-T option
 */

export function useGetDedicatedCloudServiceNameNsxt<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameNsxt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameNsxtQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Order hourly global datastore mounted on all virtual datacenters
 */
export const postDedicatedCloudServiceNameOrderNewFilerHourly = (
    serviceName: string,
    postDedicatedCloudServiceNameOrderNewFilerHourlyBody: PostDedicatedCloudServiceNameOrderNewFilerHourlyBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/orderNewFilerHourly`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameOrderNewFilerHourlyBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameOrderNewFilerHourlyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameOrderNewFilerHourly>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameOrderNewFilerHourlyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameOrderNewFilerHourly>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameOrderNewFilerHourlyBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameOrderNewFilerHourly>>, {serviceName: string;data: PostDedicatedCloudServiceNameOrderNewFilerHourlyBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameOrderNewFilerHourly(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameOrderNewFilerHourlyMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameOrderNewFilerHourly>>>
    export type PostDedicatedCloudServiceNameOrderNewFilerHourlyMutationBody = PostDedicatedCloudServiceNameOrderNewFilerHourlyBody
    export type PostDedicatedCloudServiceNameOrderNewFilerHourlyMutationError = unknown

    /**
 * @summary Order hourly global datastore mounted on all virtual datacenters
 */
export const usePostDedicatedCloudServiceNameOrderNewFilerHourly = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameOrderNewFilerHourly>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameOrderNewFilerHourlyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameOrderNewFilerHourly>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameOrderNewFilerHourlyBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameOrderNewFilerHourlyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get orderable IP blocks countries
 */
export const getDedicatedCloudServiceNameOrderableIpCountries = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudIpCountriesEnumOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/orderableIpCountries`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameOrderableIpCountriesQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/orderableIpCountries`] as const;
    }

    
export const getGetDedicatedCloudServiceNameOrderableIpCountriesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameOrderableIpCountriesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>> = ({ signal }) => getDedicatedCloudServiceNameOrderableIpCountries(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameOrderableIpCountriesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>>
export type GetDedicatedCloudServiceNameOrderableIpCountriesQueryError = unknown


export function useGetDedicatedCloudServiceNameOrderableIpCountries<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameOrderableIpCountries<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameOrderableIpCountries<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get orderable IP blocks countries
 */

export function useGetDedicatedCloudServiceNameOrderableIpCountries<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameOrderableIpCountries>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameOrderableIpCountriesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get password policy
 */
export const getDedicatedCloudServiceNamePasswordPolicy = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudPasswordPolicyOVH>(
      {url: `/dedicatedCloud/${serviceName}/passwordPolicy`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNamePasswordPolicyQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/passwordPolicy`] as const;
    }

    
export const getGetDedicatedCloudServiceNamePasswordPolicyQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNamePasswordPolicyQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>> = ({ signal }) => getDedicatedCloudServiceNamePasswordPolicy(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNamePasswordPolicyQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>>
export type GetDedicatedCloudServiceNamePasswordPolicyQueryError = unknown


export function useGetDedicatedCloudServiceNamePasswordPolicy<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNamePasswordPolicy<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNamePasswordPolicy<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get password policy
 */

export function useGetDedicatedCloudServiceNamePasswordPolicy<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePasswordPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNamePasswordPolicyQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get PCI-DSS certification option
 */
export const getDedicatedCloudServiceNamePcidss = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudPciDssOVH>(
      {url: `/dedicatedCloud/${serviceName}/pcidss`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNamePcidssQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/pcidss`] as const;
    }

    
export const getGetDedicatedCloudServiceNamePcidssQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNamePcidssQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>> = ({ signal }) => getDedicatedCloudServiceNamePcidss(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNamePcidssQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>>
export type GetDedicatedCloudServiceNamePcidssQueryError = unknown


export function useGetDedicatedCloudServiceNamePcidss<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNamePcidss<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNamePcidss<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get PCI-DSS certification option
 */

export function useGetDedicatedCloudServiceNamePcidss<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNamePcidss>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNamePcidssQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Reset all hypervisor triggered alarms
 */
export const postDedicatedCloudServiceNameResetTriggeredAlarm = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/resetTriggeredAlarm`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameResetTriggeredAlarmMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameResetTriggeredAlarm>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameResetTriggeredAlarm>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameResetTriggeredAlarm>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedCloudServiceNameResetTriggeredAlarm(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameResetTriggeredAlarmMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameResetTriggeredAlarm>>>
    
    export type PostDedicatedCloudServiceNameResetTriggeredAlarmMutationError = unknown

    /**
 * @summary Reset all hypervisor triggered alarms
 */
export const usePostDedicatedCloudServiceNameResetTriggeredAlarm = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameResetTriggeredAlarm>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameResetTriggeredAlarm>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameResetTriggeredAlarmMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List robots
 */
export const getDedicatedCloudServiceNameRobot = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud/${serviceName}/robot`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameRobotQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/robot`] as const;
    }

    
export const getGetDedicatedCloudServiceNameRobotQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameRobotQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>> = ({ signal }) => getDedicatedCloudServiceNameRobot(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameRobotQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>>
export type GetDedicatedCloudServiceNameRobotQueryError = unknown


export function useGetDedicatedCloudServiceNameRobot<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameRobot<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameRobot<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List robots
 */

export function useGetDedicatedCloudServiceNameRobot<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameRobotQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get robot
 */
export const getDedicatedCloudServiceNameRobotName = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudRobotOVH>(
      {url: `/dedicatedCloud/${serviceName}/robot/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameRobotNameQueryKey = (serviceName: string,
    name: string,) => {
    return [`/dedicatedCloud/${serviceName}/robot/${name}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameRobotNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameRobotNameQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>> = ({ signal }) => getDedicatedCloudServiceNameRobotName(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameRobotNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>>
export type GetDedicatedCloudServiceNameRobotNameQueryError = unknown


export function useGetDedicatedCloudServiceNameRobotName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameRobotName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameRobotName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get robot
 */

export function useGetDedicatedCloudServiceNameRobotName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameRobotName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameRobotNameQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get security options
 */
export const getDedicatedCloudServiceNameSecurityOptions = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudSecurityOptionOVH>(
      {url: `/dedicatedCloud/${serviceName}/securityOptions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameSecurityOptionsQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/securityOptions`] as const;
    }

    
export const getGetDedicatedCloudServiceNameSecurityOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameSecurityOptionsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>> = ({ signal }) => getDedicatedCloudServiceNameSecurityOptions(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameSecurityOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>>
export type GetDedicatedCloudServiceNameSecurityOptionsQueryError = unknown


export function useGetDedicatedCloudServiceNameSecurityOptions<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSecurityOptions<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSecurityOptions<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get security options
 */

export function useGetDedicatedCloudServiceNameSecurityOptions<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameSecurityOptionsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get security options compatibility matrix
 */
export const getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix = (
    serviceName: string,
    params?: GetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudSecurityOptionCompatibilityMatrixEntryOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/securityOptions/compatibilityMatrix`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixQueryKey = (serviceName: string,
    params?: GetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixParams,) => {
    return [`/dedicatedCloud/${serviceName}/securityOptions/compatibilityMatrix`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>> = ({ signal }) => getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>>
export type GetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixQueryError = unknown


export function useGetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get security options compatibility matrix
 */

export function useGetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get security options dependencies tree
 */
export const getDedicatedCloudServiceNameSecurityOptionsDependenciesTree = (
    serviceName: string,
    params: GetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudSecurityOptionDependenciesTreeOVH>(
      {url: `/dedicatedCloud/${serviceName}/securityOptions/dependenciesTree`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeQueryKey = (serviceName: string,
    params: GetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeParams,) => {
    return [`/dedicatedCloud/${serviceName}/securityOptions/dependenciesTree`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>, TError = unknown>(serviceName: string,
    params: GetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>> = ({ signal }) => getDedicatedCloudServiceNameSecurityOptionsDependenciesTree(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>>
export type GetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeQueryError = unknown


export function useGetDedicatedCloudServiceNameSecurityOptionsDependenciesTree<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSecurityOptionsDependenciesTree<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSecurityOptionsDependenciesTree<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get security options dependencies tree
 */

export function useGetDedicatedCloudServiceNameSecurityOptionsDependenciesTree<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsDependenciesTree>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get pending activation security options
 */
export const getDedicatedCloudServiceNameSecurityOptionsPendingOptions = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudSecurityOptionSecurityOptionEnumOVH[]>(
      {url: `/dedicatedCloud/${serviceName}/securityOptions/pendingOptions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameSecurityOptionsPendingOptionsQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/securityOptions/pendingOptions`] as const;
    }

    
export const getGetDedicatedCloudServiceNameSecurityOptionsPendingOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameSecurityOptionsPendingOptionsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>> = ({ signal }) => getDedicatedCloudServiceNameSecurityOptionsPendingOptions(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameSecurityOptionsPendingOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>>
export type GetDedicatedCloudServiceNameSecurityOptionsPendingOptionsQueryError = unknown


export function useGetDedicatedCloudServiceNameSecurityOptionsPendingOptions<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSecurityOptionsPendingOptions<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSecurityOptionsPendingOptions<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get pending activation security options
 */

export function useGetDedicatedCloudServiceNameSecurityOptionsPendingOptions<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSecurityOptionsPendingOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameSecurityOptionsPendingOptionsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retry pending security option activation
 */
export const postDedicatedCloudServiceNameSecurityOptionsResumePendingEnabling = (
    serviceName: string,
    postDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingBody: PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/securityOptions/resumePendingEnabling`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSecurityOptionsResumePendingEnabling>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSecurityOptionsResumePendingEnabling>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSecurityOptionsResumePendingEnabling>>, {serviceName: string;data: PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameSecurityOptionsResumePendingEnabling(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSecurityOptionsResumePendingEnabling>>>
    export type PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingMutationBody = PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingBody
    export type PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingMutationError = unknown

    /**
 * @summary Retry pending security option activation
 */
export const usePostDedicatedCloudServiceNameSecurityOptionsResumePendingEnabling = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSecurityOptionsResumePendingEnabling>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameSecurityOptionsResumePendingEnabling>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getDedicatedCloudServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/dedicatedCloud/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetDedicatedCloudServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>> = ({ signal }) => getDedicatedCloudServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>>
export type GetDedicatedCloudServiceNameServiceInfosQueryError = unknown


export function useGetDedicatedCloudServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetDedicatedCloudServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putDedicatedCloudServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicatedCloud/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutDedicatedCloudServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedCloudServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedCloudServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedCloudServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedCloudServiceNameServiceInfos>>>
    export type PutDedicatedCloudServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutDedicatedCloudServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutDedicatedCloudServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedCloudServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedCloudServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service pack information
 */
export const getDedicatedCloudServiceNameServicePack = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudServicePackStatusOVH>(
      {url: `/dedicatedCloud/${serviceName}/servicePack`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameServicePackQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/servicePack`] as const;
    }

    
export const getGetDedicatedCloudServiceNameServicePackQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameServicePackQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>> = ({ signal }) => getDedicatedCloudServiceNameServicePack(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameServicePackQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>>
export type GetDedicatedCloudServiceNameServicePackQueryError = unknown


export function useGetDedicatedCloudServiceNameServicePack<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameServicePack<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameServicePack<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service pack information
 */

export function useGetDedicatedCloudServiceNameServicePack<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameServicePackQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List service packs
 */
export const getDedicatedCloudServiceNameServicePacks = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud/${serviceName}/servicePacks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameServicePacksQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/servicePacks`] as const;
    }

    
export const getGetDedicatedCloudServiceNameServicePacksQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameServicePacksQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>> = ({ signal }) => getDedicatedCloudServiceNameServicePacks(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameServicePacksQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>>
export type GetDedicatedCloudServiceNameServicePacksQueryError = unknown


export function useGetDedicatedCloudServiceNameServicePacks<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameServicePacks<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameServicePacks<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List service packs
 */

export function useGetDedicatedCloudServiceNameServicePacks<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameServicePacksQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service pack
 */
export const getDedicatedCloudServiceNameServicePacksName = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudServicePackOVH>(
      {url: `/dedicatedCloud/${serviceName}/servicePacks/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameServicePacksNameQueryKey = (serviceName: string,
    name: string,) => {
    return [`/dedicatedCloud/${serviceName}/servicePacks/${name}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameServicePacksNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameServicePacksNameQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>> = ({ signal }) => getDedicatedCloudServiceNameServicePacksName(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameServicePacksNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>>
export type GetDedicatedCloudServiceNameServicePacksNameQueryError = unknown


export function useGetDedicatedCloudServiceNameServicePacksName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameServicePacksName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameServicePacksName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service pack
 */

export function useGetDedicatedCloudServiceNameServicePacksName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameServicePacksName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameServicePacksNameQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get log forward to syslog option
 */
export const getDedicatedCloudServiceNameSyslogForward = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudSyslogForwardOVH>(
      {url: `/dedicatedCloud/${serviceName}/syslogForward`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameSyslogForwardQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/syslogForward`] as const;
    }

    
export const getGetDedicatedCloudServiceNameSyslogForwardQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameSyslogForwardQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>> = ({ signal }) => getDedicatedCloudServiceNameSyslogForward(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameSyslogForwardQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>>
export type GetDedicatedCloudServiceNameSyslogForwardQueryError = unknown


export function useGetDedicatedCloudServiceNameSyslogForward<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSyslogForward<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSyslogForward<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get log forward to syslog option
 */

export function useGetDedicatedCloudServiceNameSyslogForward<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForward>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameSyslogForwardQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all syslog forwarders
 */
export const getDedicatedCloudServiceNameSyslogForwardForwarder = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/syslogForward/forwarder`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameSyslogForwardForwarderQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/syslogForward/forwarder`] as const;
    }

    
export const getGetDedicatedCloudServiceNameSyslogForwardForwarderQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameSyslogForwardForwarderQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>> = ({ signal }) => getDedicatedCloudServiceNameSyslogForwardForwarder(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameSyslogForwardForwarderQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>>
export type GetDedicatedCloudServiceNameSyslogForwardForwarderQueryError = unknown


export function useGetDedicatedCloudServiceNameSyslogForwardForwarder<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSyslogForwardForwarder<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSyslogForwardForwarder<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all syslog forwarders
 */

export function useGetDedicatedCloudServiceNameSyslogForwardForwarder<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameSyslogForwardForwarderQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create log fowarder to your syslog
 */
export const postDedicatedCloudServiceNameSyslogForwardForwarder = (
    serviceName: string,
    postDedicatedCloudServiceNameSyslogForwardForwarderBody: PostDedicatedCloudServiceNameSyslogForwardForwarderBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/syslogForward/forwarder`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameSyslogForwardForwarderBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameSyslogForwardForwarderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSyslogForwardForwarder>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameSyslogForwardForwarderBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSyslogForwardForwarder>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameSyslogForwardForwarderBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSyslogForwardForwarder>>, {serviceName: string;data: PostDedicatedCloudServiceNameSyslogForwardForwarderBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameSyslogForwardForwarder(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameSyslogForwardForwarderMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSyslogForwardForwarder>>>
    export type PostDedicatedCloudServiceNameSyslogForwardForwarderMutationBody = PostDedicatedCloudServiceNameSyslogForwardForwarderBody
    export type PostDedicatedCloudServiceNameSyslogForwardForwarderMutationError = unknown

    /**
 * @summary Create log fowarder to your syslog
 */
export const usePostDedicatedCloudServiceNameSyslogForwardForwarder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSyslogForwardForwarder>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameSyslogForwardForwarderBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameSyslogForwardForwarder>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameSyslogForwardForwarderBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameSyslogForwardForwarderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove log forwarder to your syslog
 */
export const deleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId = (
    serviceName: string,
    logForwardId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/syslogForward/forwarder/${logForwardId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError,{serviceName: string;logForwardId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError,{serviceName: string;logForwardId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, {serviceName: string;logForwardId: number}> = (props) => {
          const {serviceName,logForwardId} = props ?? {};

          return  deleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId(serviceName,logForwardId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>>
    
    export type DeleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdMutationError = unknown

    /**
 * @summary Remove log forwarder to your syslog
 */
export const useDeleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError,{serviceName: string;logForwardId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>,
        TError,
        {serviceName: string;logForwardId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get logs forwarder
 */
export const getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId = (
    serviceName: string,
    logForwardId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudSyslogForwardAccessNetworkOVH>(
      {url: `/dedicatedCloud/${serviceName}/syslogForward/forwarder/${logForwardId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdQueryKey = (serviceName: string,
    logForwardId: number,) => {
    return [`/dedicatedCloud/${serviceName}/syslogForward/forwarder/${logForwardId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError = unknown>(serviceName: string,
    logForwardId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdQueryKey(serviceName,logForwardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>> = ({ signal }) => getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId(serviceName,logForwardId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && logForwardId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>>
export type GetDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdQueryError = unknown


export function useGetDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError = unknown>(
 serviceName: string,
    logForwardId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError = unknown>(
 serviceName: string,
    logForwardId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError = unknown>(
 serviceName: string,
    logForwardId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get logs forwarder
 */

export function useGetDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError = unknown>(
 serviceName: string,
    logForwardId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameSyslogForwardForwarderLogForwardId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdQueryOptions(serviceName,logForwardId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update log forwarder
 */
export const postDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangeProperties = (
    serviceName: string,
    logForwardId: number,
    postDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesBody: PostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/syslogForward/forwarder/${logForwardId}/changeProperties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangeProperties>>, TError,{serviceName: string;logForwardId: number;data: PostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangeProperties>>, TError,{serviceName: string;logForwardId: number;data: PostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangeProperties>>, {serviceName: string;logForwardId: number;data: PostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesBody}> = (props) => {
          const {serviceName,logForwardId,data} = props ?? {};

          return  postDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangeProperties(serviceName,logForwardId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangeProperties>>>
    export type PostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesMutationBody = PostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesBody
    export type PostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesMutationError = unknown

    /**
 * @summary Update log forwarder
 */
export const usePostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangeProperties = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangeProperties>>, TError,{serviceName: string;logForwardId: number;data: PostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangeProperties>>,
        TError,
        {serviceName: string;logForwardId: number;data: PostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameSyslogForwardForwarderLogForwardIdChangePropertiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List tags
 */
export const getDedicatedCloudServiceNameTag = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud/${serviceName}/tag`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameTagQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/tag`] as const;
    }

    
export const getGetDedicatedCloudServiceNameTagQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameTagQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>> = ({ signal }) => getDedicatedCloudServiceNameTag(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameTagQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>>
export type GetDedicatedCloudServiceNameTagQueryError = unknown


export function useGetDedicatedCloudServiceNameTag<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameTag<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameTag<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List tags
 */

export function useGetDedicatedCloudServiceNameTag<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTag>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameTagQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedCloudServiceNameTagName = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTagOVH>(
      {url: `/dedicatedCloud/${serviceName}/tag/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameTagNameQueryKey = (serviceName: string,
    name: string,) => {
    return [`/dedicatedCloud/${serviceName}/tag/${name}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameTagNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameTagNameQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>> = ({ signal }) => getDedicatedCloudServiceNameTagName(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameTagNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>>
export type GetDedicatedCloudServiceNameTagNameQueryError = unknown


export function useGetDedicatedCloudServiceNameTagName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameTagName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameTagName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedCloudServiceNameTagName<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTagName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameTagNameQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List operations
 */
export const getDedicatedCloudServiceNameTask = (
    serviceName: string,
    params?: GetDedicatedCloudServiceNameTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameTaskQueryKey = (serviceName: string,
    params?: GetDedicatedCloudServiceNameTaskParams,) => {
    return [`/dedicatedCloud/${serviceName}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedCloudServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameTaskQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>> = ({ signal }) => getDedicatedCloudServiceNameTask(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>>
export type GetDedicatedCloudServiceNameTaskQueryError = unknown


export function useGetDedicatedCloudServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedCloudServiceNameTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List operations
 */

export function useGetDedicatedCloudServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameTaskQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get operation
 */
export const getDedicatedCloudServiceNameTaskTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameTaskTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/dedicatedCloud/${serviceName}/task/${taskId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameTaskTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>> = ({ signal }) => getDedicatedCloudServiceNameTaskTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>>
export type GetDedicatedCloudServiceNameTaskTaskIdQueryError = unknown


export function useGetDedicatedCloudServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get operation
 */

export function useGetDedicatedCloudServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameTaskTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the execution date of a maintenance operation
 */
export const postDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDate = (
    serviceName: string,
    taskId: number,
    postDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateBody: PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/task/${taskId}/changeMaintenanceExecutionDate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;taskId: number;data: PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;taskId: number;data: PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDate>>, {serviceName: string;taskId: number;data: PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateBody}> = (props) => {
          const {serviceName,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDate(serviceName,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDate>>>
    export type PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateMutationBody = PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateBody
    export type PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateMutationError = unknown

    /**
 * @summary Change the execution date of a maintenance operation
 */
export const usePostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;taskId: number;data: PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDate>>,
        TError,
        {serviceName: string;taskId: number;data: PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Relaunch operation currently in error state
 */
export const postDedicatedCloudServiceNameTaskTaskIdResetTaskState = (
    serviceName: string,
    taskId: number,
    postDedicatedCloudServiceNameTaskTaskIdResetTaskStateBody: PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/task/${taskId}/resetTaskState`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameTaskTaskIdResetTaskStateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameTaskTaskIdResetTaskStateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTaskTaskIdResetTaskState>>, TError,{serviceName: string;taskId: number;data: PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTaskTaskIdResetTaskState>>, TError,{serviceName: string;taskId: number;data: PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTaskTaskIdResetTaskState>>, {serviceName: string;taskId: number;data: PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateBody}> = (props) => {
          const {serviceName,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameTaskTaskIdResetTaskState(serviceName,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTaskTaskIdResetTaskState>>>
    export type PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateMutationBody = PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateBody
    export type PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateMutationError = unknown

    /**
 * @summary Relaunch operation currently in error state
 */
export const usePostDedicatedCloudServiceNameTaskTaskIdResetTaskState = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTaskTaskIdResetTaskState>>, TError,{serviceName: string;taskId: number;data: PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameTaskTaskIdResetTaskState>>,
        TError,
        {serviceName: string;taskId: number;data: PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameTaskTaskIdResetTaskStateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postDedicatedCloudServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicatedCloud/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedCloudServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTerminate>>>
    
    export type PostDedicatedCloudServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostDedicatedCloudServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List two factor authentication whitelisted networks
 */
export const getDedicatedCloudServiceNameTwoFAWhitelist = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/twoFAWhitelist`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameTwoFAWhitelistQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/twoFAWhitelist`] as const;
    }

    
export const getGetDedicatedCloudServiceNameTwoFAWhitelistQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameTwoFAWhitelistQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>> = ({ signal }) => getDedicatedCloudServiceNameTwoFAWhitelist(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameTwoFAWhitelistQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>>
export type GetDedicatedCloudServiceNameTwoFAWhitelistQueryError = unknown


export function useGetDedicatedCloudServiceNameTwoFAWhitelist<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameTwoFAWhitelist<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameTwoFAWhitelist<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List two factor authentication whitelisted networks
 */

export function useGetDedicatedCloudServiceNameTwoFAWhitelist<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelist>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameTwoFAWhitelistQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create two factor authentication whitelisted network
 */
export const postDedicatedCloudServiceNameTwoFAWhitelist = (
    serviceName: string,
    postDedicatedCloudServiceNameTwoFAWhitelistBody: PostDedicatedCloudServiceNameTwoFAWhitelistBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/twoFAWhitelist`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameTwoFAWhitelistBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameTwoFAWhitelistMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTwoFAWhitelist>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameTwoFAWhitelistBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTwoFAWhitelist>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameTwoFAWhitelistBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTwoFAWhitelist>>, {serviceName: string;data: PostDedicatedCloudServiceNameTwoFAWhitelistBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameTwoFAWhitelist(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameTwoFAWhitelistMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTwoFAWhitelist>>>
    export type PostDedicatedCloudServiceNameTwoFAWhitelistMutationBody = PostDedicatedCloudServiceNameTwoFAWhitelistBody
    export type PostDedicatedCloudServiceNameTwoFAWhitelistMutationError = unknown

    /**
 * @summary Create two factor authentication whitelisted network
 */
export const usePostDedicatedCloudServiceNameTwoFAWhitelist = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTwoFAWhitelist>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameTwoFAWhitelistBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameTwoFAWhitelist>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameTwoFAWhitelistBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameTwoFAWhitelistMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove two factor authentication whitelisted network
 */
export const deleteDedicatedCloudServiceNameTwoFAWhitelistId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/twoFAWhitelist/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameTwoFAWhitelistIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameTwoFAWhitelistId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameTwoFAWhitelistId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameTwoFAWhitelistId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteDedicatedCloudServiceNameTwoFAWhitelistId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameTwoFAWhitelistIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameTwoFAWhitelistId>>>
    
    export type DeleteDedicatedCloudServiceNameTwoFAWhitelistIdMutationError = unknown

    /**
 * @summary Remove two factor authentication whitelisted network
 */
export const useDeleteDedicatedCloudServiceNameTwoFAWhitelistId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameTwoFAWhitelistId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameTwoFAWhitelistId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameTwoFAWhitelistIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get two factor authentication whitelisted network
 */
export const getDedicatedCloudServiceNameTwoFAWhitelistId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTwoFAWhitelistOVH>(
      {url: `/dedicatedCloud/${serviceName}/twoFAWhitelist/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameTwoFAWhitelistIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/dedicatedCloud/${serviceName}/twoFAWhitelist/${id}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameTwoFAWhitelistIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameTwoFAWhitelistIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>> = ({ signal }) => getDedicatedCloudServiceNameTwoFAWhitelistId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameTwoFAWhitelistIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>>
export type GetDedicatedCloudServiceNameTwoFAWhitelistIdQueryError = unknown


export function useGetDedicatedCloudServiceNameTwoFAWhitelistId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameTwoFAWhitelistId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameTwoFAWhitelistId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get two factor authentication whitelisted network
 */

export function useGetDedicatedCloudServiceNameTwoFAWhitelistId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameTwoFAWhitelistId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameTwoFAWhitelistIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update two factor authentication whitelisted network
 */
export const postDedicatedCloudServiceNameTwoFAWhitelistIdChangeProperties = (
    serviceName: string,
    id: number,
    postDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesBody: PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/twoFAWhitelist/${id}/changeProperties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTwoFAWhitelistIdChangeProperties>>, TError,{serviceName: string;id: number;data: PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTwoFAWhitelistIdChangeProperties>>, TError,{serviceName: string;id: number;data: PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTwoFAWhitelistIdChangeProperties>>, {serviceName: string;id: number;data: PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesBody}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  postDedicatedCloudServiceNameTwoFAWhitelistIdChangeProperties(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTwoFAWhitelistIdChangeProperties>>>
    export type PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesMutationBody = PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesBody
    export type PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesMutationError = unknown

    /**
 * @summary Update two factor authentication whitelisted network
 */
export const usePostDedicatedCloudServiceNameTwoFAWhitelistIdChangeProperties = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameTwoFAWhitelistIdChangeProperties>>, TError,{serviceName: string;id: number;data: PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameTwoFAWhitelistIdChangeProperties>>,
        TError,
        {serviceName: string;id: number;data: PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Upgrade hypervisor to next version
 */
export const postDedicatedCloudServiceNameUpgradeVcenter = (
    serviceName: string,
    postDedicatedCloudServiceNameUpgradeVcenterBody: PostDedicatedCloudServiceNameUpgradeVcenterBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/upgradeVcenter`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameUpgradeVcenterBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameUpgradeVcenterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUpgradeVcenter>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameUpgradeVcenterBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUpgradeVcenter>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameUpgradeVcenterBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUpgradeVcenter>>, {serviceName: string;data: PostDedicatedCloudServiceNameUpgradeVcenterBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameUpgradeVcenter(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameUpgradeVcenterMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUpgradeVcenter>>>
    export type PostDedicatedCloudServiceNameUpgradeVcenterMutationBody = PostDedicatedCloudServiceNameUpgradeVcenterBody
    export type PostDedicatedCloudServiceNameUpgradeVcenterMutationError = unknown

    /**
 * @summary Upgrade hypervisor to next version
 */
export const usePostDedicatedCloudServiceNameUpgradeVcenter = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUpgradeVcenter>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameUpgradeVcenterBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameUpgradeVcenter>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameUpgradeVcenterBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameUpgradeVcenterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List users
 */
export const getDedicatedCloudServiceNameUser = (
    serviceName: string,
    params?: GetDedicatedCloudServiceNameUserParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/user`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameUserQueryKey = (serviceName: string,
    params?: GetDedicatedCloudServiceNameUserParams,) => {
    return [`/dedicatedCloud/${serviceName}/user`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameUserQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedCloudServiceNameUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameUserQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>> = ({ signal }) => getDedicatedCloudServiceNameUser(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameUserQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>>
export type GetDedicatedCloudServiceNameUserQueryError = unknown


export function useGetDedicatedCloudServiceNameUser<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedCloudServiceNameUserParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUser<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUser<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List users
 */

export function useGetDedicatedCloudServiceNameUser<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedCloudServiceNameUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameUserQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create user
 */
export const postDedicatedCloudServiceNameUser = (
    serviceName: string,
    postDedicatedCloudServiceNameUserBody: PostDedicatedCloudServiceNameUserBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameUserBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUser>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUser>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameUserBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUser>>, {serviceName: string;data: PostDedicatedCloudServiceNameUserBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameUser(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameUserMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUser>>>
    export type PostDedicatedCloudServiceNameUserMutationBody = PostDedicatedCloudServiceNameUserBody
    export type PostDedicatedCloudServiceNameUserMutationError = unknown

    /**
 * @summary Create user
 */
export const usePostDedicatedCloudServiceNameUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUser>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameUser>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameUserBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove user
 */
export const deleteDedicatedCloudServiceNameUserUserId = (
    serviceName: string,
    userId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameUserUserIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameUserUserId>>, TError,{serviceName: string;userId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameUserUserId>>, TError,{serviceName: string;userId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameUserUserId>>, {serviceName: string;userId: number}> = (props) => {
          const {serviceName,userId} = props ?? {};

          return  deleteDedicatedCloudServiceNameUserUserId(serviceName,userId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameUserUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameUserUserId>>>
    
    export type DeleteDedicatedCloudServiceNameUserUserIdMutationError = unknown

    /**
 * @summary Remove user
 */
export const useDeleteDedicatedCloudServiceNameUserUserId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameUserUserId>>, TError,{serviceName: string;userId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameUserUserId>>,
        TError,
        {serviceName: string;userId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameUserUserIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update user
 */
export const getDedicatedCloudServiceNameUserUserId = (
    serviceName: string,
    userId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudUserOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameUserUserIdQueryKey = (serviceName: string,
    userId: number,) => {
    return [`/dedicatedCloud/${serviceName}/user/${userId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameUserUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>, TError = unknown>(serviceName: string,
    userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameUserUserIdQueryKey(serviceName,userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>> = ({ signal }) => getDedicatedCloudServiceNameUserUserId(serviceName,userId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameUserUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>>
export type GetDedicatedCloudServiceNameUserUserIdQueryError = unknown


export function useGetDedicatedCloudServiceNameUserUserId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>, TError = unknown>(
 serviceName: string,
    userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>, TError = unknown>(
 serviceName: string,
    userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>, TError = unknown>(
 serviceName: string,
    userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Update user
 */

export function useGetDedicatedCloudServiceNameUserUserId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>, TError = unknown>(
 serviceName: string,
    userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameUserUserIdQueryOptions(serviceName,userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change user password
 */
export const postDedicatedCloudServiceNameUserUserIdChangePassword = (
    serviceName: string,
    userId: number,
    postDedicatedCloudServiceNameUserUserIdChangePasswordBody: PostDedicatedCloudServiceNameUserUserIdChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameUserUserIdChangePasswordBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameUserUserIdChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdChangePassword>>, TError,{serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdChangePassword>>, TError,{serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdChangePassword>>, {serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdChangePasswordBody}> = (props) => {
          const {serviceName,userId,data} = props ?? {};

          return  postDedicatedCloudServiceNameUserUserIdChangePassword(serviceName,userId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameUserUserIdChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdChangePassword>>>
    export type PostDedicatedCloudServiceNameUserUserIdChangePasswordMutationBody = PostDedicatedCloudServiceNameUserUserIdChangePasswordBody
    export type PostDedicatedCloudServiceNameUserUserIdChangePasswordMutationError = unknown

    /**
 * @summary Change user password
 */
export const usePostDedicatedCloudServiceNameUserUserIdChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdChangePassword>>, TError,{serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdChangePassword>>,
        TError,
        {serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameUserUserIdChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update user
 */
export const postDedicatedCloudServiceNameUserUserIdChangeProperties = (
    serviceName: string,
    userId: number,
    postDedicatedCloudServiceNameUserUserIdChangePropertiesBody: PostDedicatedCloudServiceNameUserUserIdChangePropertiesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/changeProperties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameUserUserIdChangePropertiesBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameUserUserIdChangePropertiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdChangeProperties>>, TError,{serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdChangeProperties>>, TError,{serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdChangePropertiesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdChangeProperties>>, {serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdChangePropertiesBody}> = (props) => {
          const {serviceName,userId,data} = props ?? {};

          return  postDedicatedCloudServiceNameUserUserIdChangeProperties(serviceName,userId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameUserUserIdChangePropertiesMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdChangeProperties>>>
    export type PostDedicatedCloudServiceNameUserUserIdChangePropertiesMutationBody = PostDedicatedCloudServiceNameUserUserIdChangePropertiesBody
    export type PostDedicatedCloudServiceNameUserUserIdChangePropertiesMutationError = unknown

    /**
 * @summary Update user
 */
export const usePostDedicatedCloudServiceNameUserUserIdChangeProperties = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdChangeProperties>>, TError,{serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdChangeProperties>>,
        TError,
        {serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdChangePropertiesBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameUserUserIdChangePropertiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm user phone number
 */
export const postDedicatedCloudServiceNameUserUserIdConfirmPhoneNumber = (
    serviceName: string,
    userId: number,
    postDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberBody: PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/confirmPhoneNumber`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdConfirmPhoneNumber>>, TError,{serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdConfirmPhoneNumber>>, TError,{serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdConfirmPhoneNumber>>, {serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberBody}> = (props) => {
          const {serviceName,userId,data} = props ?? {};

          return  postDedicatedCloudServiceNameUserUserIdConfirmPhoneNumber(serviceName,userId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdConfirmPhoneNumber>>>
    export type PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberMutationBody = PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberBody
    export type PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberMutationError = unknown

    /**
 * @summary Confirm user phone number
 */
export const usePostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdConfirmPhoneNumber>>, TError,{serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdConfirmPhoneNumber>>,
        TError,
        {serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable user
 */
export const postDedicatedCloudServiceNameUserUserIdDisable = (
    serviceName: string,
    userId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameUserUserIdDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdDisable>>, TError,{serviceName: string;userId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdDisable>>, TError,{serviceName: string;userId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdDisable>>, {serviceName: string;userId: number}> = (props) => {
          const {serviceName,userId} = props ?? {};

          return  postDedicatedCloudServiceNameUserUserIdDisable(serviceName,userId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameUserUserIdDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdDisable>>>
    
    export type PostDedicatedCloudServiceNameUserUserIdDisableMutationError = unknown

    /**
 * @summary Disable user
 */
export const usePostDedicatedCloudServiceNameUserUserIdDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdDisable>>, TError,{serviceName: string;userId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdDisable>>,
        TError,
        {serviceName: string;userId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameUserUserIdDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable user
 */
export const postDedicatedCloudServiceNameUserUserIdEnable = (
    serviceName: string,
    userId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/enable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameUserUserIdEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdEnable>>, TError,{serviceName: string;userId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdEnable>>, TError,{serviceName: string;userId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdEnable>>, {serviceName: string;userId: number}> = (props) => {
          const {serviceName,userId} = props ?? {};

          return  postDedicatedCloudServiceNameUserUserIdEnable(serviceName,userId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameUserUserIdEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdEnable>>>
    
    export type PostDedicatedCloudServiceNameUserUserIdEnableMutationError = unknown

    /**
 * @summary Enable user
 */
export const usePostDedicatedCloudServiceNameUserUserIdEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdEnable>>, TError,{serviceName: string;userId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdEnable>>,
        TError,
        {serviceName: string;userId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameUserUserIdEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List user object rights
 */
export const getDedicatedCloudServiceNameUserUserIdObjectRight = (
    serviceName: string,
    userId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/objectRight`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameUserUserIdObjectRightQueryKey = (serviceName: string,
    userId: number,) => {
    return [`/dedicatedCloud/${serviceName}/user/${userId}/objectRight`] as const;
    }

    
export const getGetDedicatedCloudServiceNameUserUserIdObjectRightQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>, TError = unknown>(serviceName: string,
    userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameUserUserIdObjectRightQueryKey(serviceName,userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>> = ({ signal }) => getDedicatedCloudServiceNameUserUserIdObjectRight(serviceName,userId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameUserUserIdObjectRightQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>>
export type GetDedicatedCloudServiceNameUserUserIdObjectRightQueryError = unknown


export function useGetDedicatedCloudServiceNameUserUserIdObjectRight<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>, TError = unknown>(
 serviceName: string,
    userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserIdObjectRight<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>, TError = unknown>(
 serviceName: string,
    userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserIdObjectRight<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>, TError = unknown>(
 serviceName: string,
    userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List user object rights
 */

export function useGetDedicatedCloudServiceNameUserUserIdObjectRight<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>, TError = unknown>(
 serviceName: string,
    userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameUserUserIdObjectRightQueryOptions(serviceName,userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create user object right
 */
export const postDedicatedCloudServiceNameUserUserIdObjectRight = (
    serviceName: string,
    userId: number,
    postDedicatedCloudServiceNameUserUserIdObjectRightBody: PostDedicatedCloudServiceNameUserUserIdObjectRightBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/objectRight`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameUserUserIdObjectRightBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameUserUserIdObjectRightMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdObjectRight>>, TError,{serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdObjectRightBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdObjectRight>>, TError,{serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdObjectRightBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdObjectRight>>, {serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdObjectRightBody}> = (props) => {
          const {serviceName,userId,data} = props ?? {};

          return  postDedicatedCloudServiceNameUserUserIdObjectRight(serviceName,userId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameUserUserIdObjectRightMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdObjectRight>>>
    export type PostDedicatedCloudServiceNameUserUserIdObjectRightMutationBody = PostDedicatedCloudServiceNameUserUserIdObjectRightBody
    export type PostDedicatedCloudServiceNameUserUserIdObjectRightMutationError = unknown

    /**
 * @summary Create user object right
 */
export const usePostDedicatedCloudServiceNameUserUserIdObjectRight = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdObjectRight>>, TError,{serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdObjectRightBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdObjectRight>>,
        TError,
        {serviceName: string;userId: number;data: PostDedicatedCloudServiceNameUserUserIdObjectRightBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameUserUserIdObjectRightMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove user object right
 */
export const deleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId = (
    serviceName: string,
    userId: number,
    objectRightId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/objectRight/${objectRightId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError,{serviceName: string;userId: number;objectRightId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError,{serviceName: string;userId: number;objectRightId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, {serviceName: string;userId: number;objectRightId: number}> = (props) => {
          const {serviceName,userId,objectRightId} = props ?? {};

          return  deleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId(serviceName,userId,objectRightId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>>
    
    export type DeleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdMutationError = unknown

    /**
 * @summary Remove user object right
 */
export const useDeleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError,{serviceName: string;userId: number;objectRightId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>,
        TError,
        {serviceName: string;userId: number;objectRightId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get user object right
 */
export const getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId = (
    serviceName: string,
    userId: number,
    objectRightId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudObjectRightOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/objectRight/${objectRightId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdQueryKey = (serviceName: string,
    userId: number,
    objectRightId: number,) => {
    return [`/dedicatedCloud/${serviceName}/user/${userId}/objectRight/${objectRightId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError = unknown>(serviceName: string,
    userId: number,
    objectRightId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdQueryKey(serviceName,userId,objectRightId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>> = ({ signal }) => getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId(serviceName,userId,objectRightId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userId && objectRightId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>>
export type GetDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdQueryError = unknown


export function useGetDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError = unknown>(
 serviceName: string,
    userId: number,
    objectRightId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError = unknown>(
 serviceName: string,
    userId: number,
    objectRightId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError = unknown>(
 serviceName: string,
    userId: number,
    objectRightId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get user object right
 */

export function useGetDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError = unknown>(
 serviceName: string,
    userId: number,
    objectRightId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdObjectRightObjectRightId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdQueryOptions(serviceName,userId,objectRightId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List user datacenter rights
 */
export const getDedicatedCloudServiceNameUserUserIdRight = (
    serviceName: string,
    userId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/right`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameUserUserIdRightQueryKey = (serviceName: string,
    userId: number,) => {
    return [`/dedicatedCloud/${serviceName}/user/${userId}/right`] as const;
    }

    
export const getGetDedicatedCloudServiceNameUserUserIdRightQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>, TError = unknown>(serviceName: string,
    userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameUserUserIdRightQueryKey(serviceName,userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>> = ({ signal }) => getDedicatedCloudServiceNameUserUserIdRight(serviceName,userId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameUserUserIdRightQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>>
export type GetDedicatedCloudServiceNameUserUserIdRightQueryError = unknown


export function useGetDedicatedCloudServiceNameUserUserIdRight<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>, TError = unknown>(
 serviceName: string,
    userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserIdRight<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>, TError = unknown>(
 serviceName: string,
    userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserIdRight<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>, TError = unknown>(
 serviceName: string,
    userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List user datacenter rights
 */

export function useGetDedicatedCloudServiceNameUserUserIdRight<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>, TError = unknown>(
 serviceName: string,
    userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameUserUserIdRightQueryOptions(serviceName,userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get user datacenter right
 */
export const getDedicatedCloudServiceNameUserUserIdRightRightId = (
    serviceName: string,
    userId: number,
    rightId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudRightOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/right/${rightId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameUserUserIdRightRightIdQueryKey = (serviceName: string,
    userId: number,
    rightId: number,) => {
    return [`/dedicatedCloud/${serviceName}/user/${userId}/right/${rightId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameUserUserIdRightRightIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>, TError = unknown>(serviceName: string,
    userId: number,
    rightId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameUserUserIdRightRightIdQueryKey(serviceName,userId,rightId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>> = ({ signal }) => getDedicatedCloudServiceNameUserUserIdRightRightId(serviceName,userId,rightId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userId && rightId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameUserUserIdRightRightIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>>
export type GetDedicatedCloudServiceNameUserUserIdRightRightIdQueryError = unknown


export function useGetDedicatedCloudServiceNameUserUserIdRightRightId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>, TError = unknown>(
 serviceName: string,
    userId: number,
    rightId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserIdRightRightId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>, TError = unknown>(
 serviceName: string,
    userId: number,
    rightId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserIdRightRightId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>, TError = unknown>(
 serviceName: string,
    userId: number,
    rightId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get user datacenter right
 */

export function useGetDedicatedCloudServiceNameUserUserIdRightRightId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>, TError = unknown>(
 serviceName: string,
    userId: number,
    rightId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdRightRightId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameUserUserIdRightRightIdQueryOptions(serviceName,userId,rightId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update user datacenter right
 */
export const putDedicatedCloudServiceNameUserUserIdRightRightId = (
    serviceName: string,
    userId: number,
    rightId: number,
    dedicatedCloudRightOVH: NonReadonly<DedicatedCloudRightOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/right/${rightId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedCloudRightOVH
    },
      options);
    }
  


export const getPutDedicatedCloudServiceNameUserUserIdRightRightIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameUserUserIdRightRightId>>, TError,{serviceName: string;userId: number;rightId: number;data: NonReadonly<DedicatedCloudRightOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameUserUserIdRightRightId>>, TError,{serviceName: string;userId: number;rightId: number;data: NonReadonly<DedicatedCloudRightOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedCloudServiceNameUserUserIdRightRightId>>, {serviceName: string;userId: number;rightId: number;data: NonReadonly<DedicatedCloudRightOVH>}> = (props) => {
          const {serviceName,userId,rightId,data} = props ?? {};

          return  putDedicatedCloudServiceNameUserUserIdRightRightId(serviceName,userId,rightId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedCloudServiceNameUserUserIdRightRightIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedCloudServiceNameUserUserIdRightRightId>>>
    export type PutDedicatedCloudServiceNameUserUserIdRightRightIdMutationBody = NonReadonly<DedicatedCloudRightOVH>
    export type PutDedicatedCloudServiceNameUserUserIdRightRightIdMutationError = unknown

    /**
 * @summary Update user datacenter right
 */
export const usePutDedicatedCloudServiceNameUserUserIdRightRightId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCloudServiceNameUserUserIdRightRightId>>, TError,{serviceName: string;userId: number;rightId: number;data: NonReadonly<DedicatedCloudRightOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedCloudServiceNameUserUserIdRightRightId>>,
        TError,
        {serviceName: string;userId: number;rightId: number;data: NonReadonly<DedicatedCloudRightOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedCloudServiceNameUserUserIdRightRightIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List operations associated to user
 */
export const getDedicatedCloudServiceNameUserUserIdTask = (
    serviceName: string,
    userId: number,
    params?: GetDedicatedCloudServiceNameUserUserIdTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameUserUserIdTaskQueryKey = (serviceName: string,
    userId: number,
    params?: GetDedicatedCloudServiceNameUserUserIdTaskParams,) => {
    return [`/dedicatedCloud/${serviceName}/user/${userId}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCloudServiceNameUserUserIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>, TError = unknown>(serviceName: string,
    userId: number,
    params?: GetDedicatedCloudServiceNameUserUserIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameUserUserIdTaskQueryKey(serviceName,userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>> = ({ signal }) => getDedicatedCloudServiceNameUserUserIdTask(serviceName,userId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameUserUserIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>>
export type GetDedicatedCloudServiceNameUserUserIdTaskQueryError = unknown


export function useGetDedicatedCloudServiceNameUserUserIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>, TError = unknown>(
 serviceName: string,
    userId: number,
    params: undefined |  GetDedicatedCloudServiceNameUserUserIdTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>, TError = unknown>(
 serviceName: string,
    userId: number,
    params?: GetDedicatedCloudServiceNameUserUserIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>, TError = unknown>(
 serviceName: string,
    userId: number,
    params?: GetDedicatedCloudServiceNameUserUserIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List operations associated to user
 */

export function useGetDedicatedCloudServiceNameUserUserIdTask<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>, TError = unknown>(
 serviceName: string,
    userId: number,
    params?: GetDedicatedCloudServiceNameUserUserIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameUserUserIdTaskQueryOptions(serviceName,userId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get operation
 */
export const getDedicatedCloudServiceNameUserUserIdTaskTaskId = (
    serviceName: string,
    userId: number,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameUserUserIdTaskTaskIdQueryKey = (serviceName: string,
    userId: number,
    taskId: number,) => {
    return [`/dedicatedCloud/${serviceName}/user/${userId}/task/${taskId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameUserUserIdTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>, TError = unknown>(serviceName: string,
    userId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameUserUserIdTaskTaskIdQueryKey(serviceName,userId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>> = ({ signal }) => getDedicatedCloudServiceNameUserUserIdTaskTaskId(serviceName,userId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameUserUserIdTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>>
export type GetDedicatedCloudServiceNameUserUserIdTaskTaskIdQueryError = unknown


export function useGetDedicatedCloudServiceNameUserUserIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    userId: number,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    userId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameUserUserIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    userId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get operation
 */

export function useGetDedicatedCloudServiceNameUserUserIdTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>, TError = unknown>(
 serviceName: string,
    userId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameUserUserIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameUserUserIdTaskTaskIdQueryOptions(serviceName,userId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the execution date of a maintenance operation
 */
export const postDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDate = (
    serviceName: string,
    userId: number,
    taskId: number,
    postDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateBody: PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/task/${taskId}/changeMaintenanceExecutionDate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;userId: number;taskId: number;data: PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;userId: number;taskId: number;data: PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDate>>, {serviceName: string;userId: number;taskId: number;data: PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateBody}> = (props) => {
          const {serviceName,userId,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDate(serviceName,userId,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDate>>>
    export type PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateMutationBody = PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateBody
    export type PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateMutationError = unknown

    /**
 * @summary Change the execution date of a maintenance operation
 */
export const usePostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDate>>, TError,{serviceName: string;userId: number;taskId: number;data: PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDate>>,
        TError,
        {serviceName: string;userId: number;taskId: number;data: PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Relaunch operation currently in error state
 */
export const postDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskState = (
    serviceName: string,
    userId: number,
    taskId: number,
    postDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateBody: PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/user/${userId}/task/${taskId}/resetTaskState`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;userId: number;taskId: number;data: PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;userId: number;taskId: number;data: PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskState>>, {serviceName: string;userId: number;taskId: number;data: PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateBody}> = (props) => {
          const {serviceName,userId,taskId,data} = props ?? {};

          return  postDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskState(serviceName,userId,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskState>>>
    export type PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateMutationBody = PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateBody
    export type PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateMutationError = unknown

    /**
 * @summary Relaunch operation currently in error state
 */
export const usePostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskState = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskState>>, TError,{serviceName: string;userId: number;taskId: number;data: PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskState>>,
        TError,
        {serviceName: string;userId: number;taskId: number;data: PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get available upgrades for hypervisor
 */
export const getDedicatedCloudServiceNameVcenterVersion = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudVcenterOVH>(
      {url: `/dedicatedCloud/${serviceName}/vcenterVersion`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVcenterVersionQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/vcenterVersion`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVcenterVersionQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVcenterVersionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>> = ({ signal }) => getDedicatedCloudServiceNameVcenterVersion(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVcenterVersionQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>>
export type GetDedicatedCloudServiceNameVcenterVersionQueryError = unknown


export function useGetDedicatedCloudServiceNameVcenterVersion<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVcenterVersion<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVcenterVersion<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get available upgrades for hypervisor
 */

export function useGetDedicatedCloudServiceNameVcenterVersion<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVcenterVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVcenterVersionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get vendor information
 */
export const getDedicatedCloudServiceNameVendor = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudVendorOVH>(
      {url: `/dedicatedCloud/${serviceName}/vendor`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVendorQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/vendor`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVendorQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVendorQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>> = ({ signal }) => getDedicatedCloudServiceNameVendor(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVendorQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>>
export type GetDedicatedCloudServiceNameVendorQueryError = unknown


export function useGetDedicatedCloudServiceNameVendor<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVendor<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVendor<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get vendor information
 */

export function useGetDedicatedCloudServiceNameVendor<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVendor>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVendorQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get vendor object types
 */
export const postDedicatedCloudServiceNameVendorObjectType = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud/${serviceName}/vendor/objectType`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameVendorObjectTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVendorObjectType>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVendorObjectType>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVendorObjectType>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedCloudServiceNameVendorObjectType(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameVendorObjectTypeMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVendorObjectType>>>
    
    export type PostDedicatedCloudServiceNameVendorObjectTypeMutationError = unknown

    /**
 * @summary Get vendor object types
 */
export const usePostDedicatedCloudServiceNameVendorObjectType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVendorObjectType>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameVendorObjectType>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameVendorObjectTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get OVHcloud API id for object
 */
export const postDedicatedCloudServiceNameVendorOvhId = (
    serviceName: string,
    postDedicatedCloudServiceNameVendorOvhIdBody: PostDedicatedCloudServiceNameVendorOvhIdBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudVendorOvhIdOVH>(
      {url: `/dedicatedCloud/${serviceName}/vendor/ovhId`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameVendorOvhIdBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameVendorOvhIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVendorOvhId>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameVendorOvhIdBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVendorOvhId>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameVendorOvhIdBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVendorOvhId>>, {serviceName: string;data: PostDedicatedCloudServiceNameVendorOvhIdBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameVendorOvhId(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameVendorOvhIdMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVendorOvhId>>>
    export type PostDedicatedCloudServiceNameVendorOvhIdMutationBody = PostDedicatedCloudServiceNameVendorOvhIdBody
    export type PostDedicatedCloudServiceNameVendorOvhIdMutationError = unknown

    /**
 * @summary Get OVHcloud API id for object
 */
export const usePostDedicatedCloudServiceNameVendorOvhId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVendorOvhId>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameVendorOvhIdBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameVendorOvhId>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameVendorOvhIdBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameVendorOvhIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List vLANs
 */
export const getDedicatedCloudServiceNameVlan = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/vlan`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVlanQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/vlan`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVlanQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVlanQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>> = ({ signal }) => getDedicatedCloudServiceNameVlan(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVlanQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>>
export type GetDedicatedCloudServiceNameVlanQueryError = unknown


export function useGetDedicatedCloudServiceNameVlan<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVlan<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVlan<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List vLANs
 */

export function useGetDedicatedCloudServiceNameVlan<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVlanQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get vLAN
 */
export const getDedicatedCloudServiceNameVlanVlanId = (
    serviceName: string,
    vlanId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudVlanOVH>(
      {url: `/dedicatedCloud/${serviceName}/vlan/${vlanId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVlanVlanIdQueryKey = (serviceName: string,
    vlanId: number,) => {
    return [`/dedicatedCloud/${serviceName}/vlan/${vlanId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVlanVlanIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>, TError = unknown>(serviceName: string,
    vlanId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVlanVlanIdQueryKey(serviceName,vlanId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>> = ({ signal }) => getDedicatedCloudServiceNameVlanVlanId(serviceName,vlanId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && vlanId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVlanVlanIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>>
export type GetDedicatedCloudServiceNameVlanVlanIdQueryError = unknown


export function useGetDedicatedCloudServiceNameVlanVlanId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>, TError = unknown>(
 serviceName: string,
    vlanId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVlanVlanId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>, TError = unknown>(
 serviceName: string,
    vlanId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVlanVlanId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>, TError = unknown>(
 serviceName: string,
    vlanId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get vLAN
 */

export function useGetDedicatedCloudServiceNameVlanVlanId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>, TError = unknown>(
 serviceName: string,
    vlanId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVlanVlanId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVlanVlanIdQueryOptions(serviceName,vlanId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get virtual machine encryption option
 */
export const getDedicatedCloudServiceNameVmEncryption = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudVMEncryptionOVH>(
      {url: `/dedicatedCloud/${serviceName}/vmEncryption`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVmEncryptionQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/vmEncryption`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVmEncryptionQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVmEncryptionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>> = ({ signal }) => getDedicatedCloudServiceNameVmEncryption(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVmEncryptionQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>>
export type GetDedicatedCloudServiceNameVmEncryptionQueryError = unknown


export function useGetDedicatedCloudServiceNameVmEncryption<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVmEncryption<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVmEncryption<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get virtual machine encryption option
 */

export function useGetDedicatedCloudServiceNameVmEncryption<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVmEncryptionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List virtual machine encryption KMS servers
 */
export const getDedicatedCloudServiceNameVmEncryptionKms = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/vmEncryption/kms`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVmEncryptionKmsQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/vmEncryption/kms`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVmEncryptionKmsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVmEncryptionKmsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>> = ({ signal }) => getDedicatedCloudServiceNameVmEncryptionKms(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVmEncryptionKmsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>>
export type GetDedicatedCloudServiceNameVmEncryptionKmsQueryError = unknown


export function useGetDedicatedCloudServiceNameVmEncryptionKms<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVmEncryptionKms<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVmEncryptionKms<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List virtual machine encryption KMS servers
 */

export function useGetDedicatedCloudServiceNameVmEncryptionKms<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVmEncryptionKmsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create virtual machine encryption KMS server
 */
export const postDedicatedCloudServiceNameVmEncryptionKms = (
    serviceName: string,
    postDedicatedCloudServiceNameVmEncryptionKmsBody: PostDedicatedCloudServiceNameVmEncryptionKmsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/vmEncryption/kms`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameVmEncryptionKmsBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameVmEncryptionKmsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVmEncryptionKms>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameVmEncryptionKmsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVmEncryptionKms>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameVmEncryptionKmsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVmEncryptionKms>>, {serviceName: string;data: PostDedicatedCloudServiceNameVmEncryptionKmsBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameVmEncryptionKms(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameVmEncryptionKmsMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVmEncryptionKms>>>
    export type PostDedicatedCloudServiceNameVmEncryptionKmsMutationBody = PostDedicatedCloudServiceNameVmEncryptionKmsBody
    export type PostDedicatedCloudServiceNameVmEncryptionKmsMutationError = unknown

    /**
 * @summary Create virtual machine encryption KMS server
 */
export const usePostDedicatedCloudServiceNameVmEncryptionKms = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVmEncryptionKms>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameVmEncryptionKmsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameVmEncryptionKms>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameVmEncryptionKmsBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameVmEncryptionKmsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove virtual machine encryption KMS server
 */
export const deleteDedicatedCloudServiceNameVmEncryptionKmsKmsId = (
    serviceName: string,
    kmsId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/vmEncryption/kms/${kmsId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameVmEncryptionKmsKmsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError,{serviceName: string;kmsId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError,{serviceName: string;kmsId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, {serviceName: string;kmsId: number}> = (props) => {
          const {serviceName,kmsId} = props ?? {};

          return  deleteDedicatedCloudServiceNameVmEncryptionKmsKmsId(serviceName,kmsId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameVmEncryptionKmsKmsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVmEncryptionKmsKmsId>>>
    
    export type DeleteDedicatedCloudServiceNameVmEncryptionKmsKmsIdMutationError = unknown

    /**
 * @summary Remove virtual machine encryption KMS server
 */
export const useDeleteDedicatedCloudServiceNameVmEncryptionKmsKmsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError,{serviceName: string;kmsId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVmEncryptionKmsKmsId>>,
        TError,
        {serviceName: string;kmsId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameVmEncryptionKmsKmsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get virtual machine encryption KMS server
 */
export const getDedicatedCloudServiceNameVmEncryptionKmsKmsId = (
    serviceName: string,
    kmsId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudVMEncryptionAccessNetworkOVH>(
      {url: `/dedicatedCloud/${serviceName}/vmEncryption/kms/${kmsId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVmEncryptionKmsKmsIdQueryKey = (serviceName: string,
    kmsId: number,) => {
    return [`/dedicatedCloud/${serviceName}/vmEncryption/kms/${kmsId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVmEncryptionKmsKmsIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError = unknown>(serviceName: string,
    kmsId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVmEncryptionKmsKmsIdQueryKey(serviceName,kmsId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>> = ({ signal }) => getDedicatedCloudServiceNameVmEncryptionKmsKmsId(serviceName,kmsId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && kmsId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVmEncryptionKmsKmsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>>
export type GetDedicatedCloudServiceNameVmEncryptionKmsKmsIdQueryError = unknown


export function useGetDedicatedCloudServiceNameVmEncryptionKmsKmsId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError = unknown>(
 serviceName: string,
    kmsId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVmEncryptionKmsKmsId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError = unknown>(
 serviceName: string,
    kmsId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVmEncryptionKmsKmsId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError = unknown>(
 serviceName: string,
    kmsId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get virtual machine encryption KMS server
 */

export function useGetDedicatedCloudServiceNameVmEncryptionKmsKmsId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError = unknown>(
 serviceName: string,
    kmsId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVmEncryptionKmsKmsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVmEncryptionKmsKmsIdQueryOptions(serviceName,kmsId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update virtual machine encryption KMS server
 */
export const postDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangeProperties = (
    serviceName: string,
    kmsId: number,
    postDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesBody: PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/vmEncryption/kms/${kmsId}/changeProperties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangeProperties>>, TError,{serviceName: string;kmsId: number;data: PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangeProperties>>, TError,{serviceName: string;kmsId: number;data: PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangeProperties>>, {serviceName: string;kmsId: number;data: PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesBody}> = (props) => {
          const {serviceName,kmsId,data} = props ?? {};

          return  postDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangeProperties(serviceName,kmsId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangeProperties>>>
    export type PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesMutationBody = PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesBody
    export type PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesMutationError = unknown

    /**
 * @summary Update virtual machine encryption KMS server
 */
export const usePostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangeProperties = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangeProperties>>, TError,{serviceName: string;kmsId: number;data: PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangeProperties>>,
        TError,
        {serviceName: string;kmsId: number;data: PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List vRacks
 */
export const getDedicatedCloudServiceNameVrack = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicatedCloud/${serviceName}/vrack`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVrackQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/vrack`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVrackQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVrackQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>> = ({ signal }) => getDedicatedCloudServiceNameVrack(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVrackQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>>
export type GetDedicatedCloudServiceNameVrackQueryError = unknown


export function useGetDedicatedCloudServiceNameVrack<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVrack<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVrack<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List vRacks
 */

export function useGetDedicatedCloudServiceNameVrack<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVrackQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Remove VMware on OVHcloud from vRack
 */
export const deleteDedicatedCloudServiceNameVrackVrack = (
    serviceName: string,
    vrack: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/vrack/${vrack}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameVrackVrackMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVrackVrack>>, TError,{serviceName: string;vrack: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVrackVrack>>, TError,{serviceName: string;vrack: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVrackVrack>>, {serviceName: string;vrack: string}> = (props) => {
          const {serviceName,vrack} = props ?? {};

          return  deleteDedicatedCloudServiceNameVrackVrack(serviceName,vrack,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameVrackVrackMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVrackVrack>>>
    
    export type DeleteDedicatedCloudServiceNameVrackVrackMutationError = unknown

    /**
 * @summary Remove VMware on OVHcloud from vRack
 */
export const useDeleteDedicatedCloudServiceNameVrackVrack = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVrackVrack>>, TError,{serviceName: string;vrack: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVrackVrack>>,
        TError,
        {serviceName: string;vrack: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameVrackVrackMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get vRack
 */
export const getDedicatedCloudServiceNameVrackVrack = (
    serviceName: string,
    vrack: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackDedicatedCloudOVH>(
      {url: `/dedicatedCloud/${serviceName}/vrack/${vrack}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVrackVrackQueryKey = (serviceName: string,
    vrack: string,) => {
    return [`/dedicatedCloud/${serviceName}/vrack/${vrack}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVrackVrackQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>, TError = unknown>(serviceName: string,
    vrack: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVrackVrackQueryKey(serviceName,vrack);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>> = ({ signal }) => getDedicatedCloudServiceNameVrackVrack(serviceName,vrack, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && vrack), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVrackVrackQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>>
export type GetDedicatedCloudServiceNameVrackVrackQueryError = unknown


export function useGetDedicatedCloudServiceNameVrackVrack<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>, TError = unknown>(
 serviceName: string,
    vrack: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVrackVrack<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>, TError = unknown>(
 serviceName: string,
    vrack: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVrackVrack<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>, TError = unknown>(
 serviceName: string,
    vrack: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get vRack
 */

export function useGetDedicatedCloudServiceNameVrackVrack<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>, TError = unknown>(
 serviceName: string,
    vrack: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrackVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVrackVrackQueryOptions(serviceName,vrack,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get VMware Aria Operations option
 */
export const getDedicatedCloudServiceNameVrops = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudVropsOVH>(
      {url: `/dedicatedCloud/${serviceName}/vrops`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVropsQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/vrops`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVropsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVropsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>> = ({ signal }) => getDedicatedCloudServiceNameVrops(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVropsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>>
export type GetDedicatedCloudServiceNameVropsQueryError = unknown


export function useGetDedicatedCloudServiceNameVrops<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVrops<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVrops<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get VMware Aria Operations option
 */

export function useGetDedicatedCloudServiceNameVrops<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVrops>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVropsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check if VMware Aria Operations option can be disabled
 */
export const getDedicatedCloudServiceNameVropsCanBeDisabled = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudOptionCompatibilityOVH>(
      {url: `/dedicatedCloud/${serviceName}/vrops/canBeDisabled`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVropsCanBeDisabledQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/vrops/canBeDisabled`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVropsCanBeDisabledQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVropsCanBeDisabledQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>> = ({ signal }) => getDedicatedCloudServiceNameVropsCanBeDisabled(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVropsCanBeDisabledQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>>
export type GetDedicatedCloudServiceNameVropsCanBeDisabledQueryError = unknown


export function useGetDedicatedCloudServiceNameVropsCanBeDisabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVropsCanBeDisabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVropsCanBeDisabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check if VMware Aria Operations option can be disabled
 */

export function useGetDedicatedCloudServiceNameVropsCanBeDisabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeDisabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVropsCanBeDisabledQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check if VMware Aria Operations option can be enabled
 */
export const getDedicatedCloudServiceNameVropsCanBeEnabled = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudOptionCompatibilityOVH>(
      {url: `/dedicatedCloud/${serviceName}/vrops/canBeEnabled`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVropsCanBeEnabledQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/vrops/canBeEnabled`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVropsCanBeEnabledQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVropsCanBeEnabledQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>> = ({ signal }) => getDedicatedCloudServiceNameVropsCanBeEnabled(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVropsCanBeEnabledQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>>
export type GetDedicatedCloudServiceNameVropsCanBeEnabledQueryError = unknown


export function useGetDedicatedCloudServiceNameVropsCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVropsCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVropsCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check if VMware Aria Operations option can be enabled
 */

export function useGetDedicatedCloudServiceNameVropsCanBeEnabled<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsCanBeEnabled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVropsCanBeEnabledQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List VMware Aria Operations outgoing flows
 */
export const getDedicatedCloudServiceNameVropsOutgoingFlow = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicatedCloud/${serviceName}/vrops/outgoingFlow`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVropsOutgoingFlowQueryKey = (serviceName: string,) => {
    return [`/dedicatedCloud/${serviceName}/vrops/outgoingFlow`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVropsOutgoingFlowQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVropsOutgoingFlowQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>> = ({ signal }) => getDedicatedCloudServiceNameVropsOutgoingFlow(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVropsOutgoingFlowQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>>
export type GetDedicatedCloudServiceNameVropsOutgoingFlowQueryError = unknown


export function useGetDedicatedCloudServiceNameVropsOutgoingFlow<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVropsOutgoingFlow<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVropsOutgoingFlow<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List VMware Aria Operations outgoing flows
 */

export function useGetDedicatedCloudServiceNameVropsOutgoingFlow<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlow>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVropsOutgoingFlowQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create VMware Aria Operations outgoing flow
 */
export const postDedicatedCloudServiceNameVropsOutgoingFlow = (
    serviceName: string,
    postDedicatedCloudServiceNameVropsOutgoingFlowBody: PostDedicatedCloudServiceNameVropsOutgoingFlowBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/vrops/outgoingFlow`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameVropsOutgoingFlowBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameVropsOutgoingFlowMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsOutgoingFlow>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameVropsOutgoingFlowBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsOutgoingFlow>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameVropsOutgoingFlowBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsOutgoingFlow>>, {serviceName: string;data: PostDedicatedCloudServiceNameVropsOutgoingFlowBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameVropsOutgoingFlow(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameVropsOutgoingFlowMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsOutgoingFlow>>>
    export type PostDedicatedCloudServiceNameVropsOutgoingFlowMutationBody = PostDedicatedCloudServiceNameVropsOutgoingFlowBody
    export type PostDedicatedCloudServiceNameVropsOutgoingFlowMutationError = unknown

    /**
 * @summary Create VMware Aria Operations outgoing flow
 */
export const usePostDedicatedCloudServiceNameVropsOutgoingFlow = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsOutgoingFlow>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameVropsOutgoingFlowBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsOutgoingFlow>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameVropsOutgoingFlowBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameVropsOutgoingFlowMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove VMware Aria Operations outgoing flow
 */
export const deleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId = (
    serviceName: string,
    outgoingFlowId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/vrops/outgoingFlow/${outgoingFlowId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError,{serviceName: string;outgoingFlowId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError,{serviceName: string;outgoingFlowId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, {serviceName: string;outgoingFlowId: number}> = (props) => {
          const {serviceName,outgoingFlowId} = props ?? {};

          return  deleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId(serviceName,outgoingFlowId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>>
    
    export type DeleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdMutationError = unknown

    /**
 * @summary Remove VMware Aria Operations outgoing flow
 */
export const useDeleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError,{serviceName: string;outgoingFlowId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>,
        TError,
        {serviceName: string;outgoingFlowId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get VMware Aria Operations outgoing flows
 */
export const getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId = (
    serviceName: string,
    outgoingFlowId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudVropsOutgoingFlowOVH>(
      {url: `/dedicatedCloud/${serviceName}/vrops/outgoingFlow/${outgoingFlowId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdQueryKey = (serviceName: string,
    outgoingFlowId: number,) => {
    return [`/dedicatedCloud/${serviceName}/vrops/outgoingFlow/${outgoingFlowId}`] as const;
    }

    
export const getGetDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError = unknown>(serviceName: string,
    outgoingFlowId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdQueryKey(serviceName,outgoingFlowId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>> = ({ signal }) => getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId(serviceName,outgoingFlowId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && outgoingFlowId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>>
export type GetDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdQueryError = unknown


export function useGetDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError = unknown>(
 serviceName: string,
    outgoingFlowId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError = unknown>(
 serviceName: string,
    outgoingFlowId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError = unknown>(
 serviceName: string,
    outgoingFlowId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get VMware Aria Operations outgoing flows
 */

export function useGetDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId<TData = Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError = unknown>(
 serviceName: string,
    outgoingFlowId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdQueryOptions(serviceName,outgoingFlowId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update VMware Aria Operations outgoing flow
 */
export const postDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangeProperties = (
    serviceName: string,
    outgoingFlowId: number,
    postDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesBody: PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/vrops/outgoingFlow/${outgoingFlowId}/changeProperties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangeProperties>>, TError,{serviceName: string;outgoingFlowId: number;data: PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangeProperties>>, TError,{serviceName: string;outgoingFlowId: number;data: PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangeProperties>>, {serviceName: string;outgoingFlowId: number;data: PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesBody}> = (props) => {
          const {serviceName,outgoingFlowId,data} = props ?? {};

          return  postDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangeProperties(serviceName,outgoingFlowId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangeProperties>>>
    export type PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesMutationBody = PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesBody
    export type PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesMutationError = unknown

    /**
 * @summary Update VMware Aria Operations outgoing flow
 */
export const usePostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangeProperties = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangeProperties>>, TError,{serviceName: string;outgoingFlowId: number;data: PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangeProperties>>,
        TError,
        {serviceName: string;outgoingFlowId: number;data: PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Upgrade VMware Aria Operations
 */
export const postDedicatedCloudServiceNameVropsUpgrade = (
    serviceName: string,
    postDedicatedCloudServiceNameVropsUpgradeBody: PostDedicatedCloudServiceNameVropsUpgradeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCloudTaskOVH>(
      {url: `/dedicatedCloud/${serviceName}/vrops/upgrade`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedCloudServiceNameVropsUpgradeBody, signal
    },
      options);
    }
  


export const getPostDedicatedCloudServiceNameVropsUpgradeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsUpgrade>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameVropsUpgradeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsUpgrade>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameVropsUpgradeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsUpgrade>>, {serviceName: string;data: PostDedicatedCloudServiceNameVropsUpgradeBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCloudServiceNameVropsUpgrade(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCloudServiceNameVropsUpgradeMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsUpgrade>>>
    export type PostDedicatedCloudServiceNameVropsUpgradeMutationBody = PostDedicatedCloudServiceNameVropsUpgradeBody
    export type PostDedicatedCloudServiceNameVropsUpgradeMutationError = unknown

    /**
 * @summary Upgrade VMware Aria Operations
 */
export const usePostDedicatedCloudServiceNameVropsUpgrade = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsUpgrade>>, TError,{serviceName: string;data: PostDedicatedCloudServiceNameVropsUpgradeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCloudServiceNameVropsUpgrade>>,
        TError,
        {serviceName: string;data: PostDedicatedCloudServiceNameVropsUpgradeBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCloudServiceNameVropsUpgradeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

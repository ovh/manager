/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CommonEventOVH,
  CommonTaskOVH,
  GetVmwareCloudDirectorBackupParams,
  GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterParams,
  GetVmwareCloudDirectorOrganizationParams,
  VmwareCloudDirectorBackupBackupDetailsOVH,
  VmwareCloudDirectorBackupBackupDetailsUpdateOVH,
  VmwareCloudDirectorBackupBackupDetailsWithIAMOVH,
  VmwareCloudDirectorComputeOVH,
  VmwareCloudDirectorOrderableResourceOVH,
  VmwareCloudDirectorOrganizationOVH,
  VmwareCloudDirectorOrganizationUpdateOVH,
  VmwareCloudDirectorOrganizationWithIAMOVH,
  VmwareCloudDirectorRegionOVH,
  VmwareCloudDirectorStorageOVH,
  VmwareCloudDirectorVirtualDataCenterOVH,
  VmwareCloudDirectorVirtualDataCenterUpdateOVH,
  VmwareCloudDirectorVirtualDataCenterWithIAMOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV2 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List VMware Cloud Director Backup services
 */
export const getVmwareCloudDirectorBackup = (
    params?: GetVmwareCloudDirectorBackupParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VmwareCloudDirectorBackupBackupDetailsWithIAMOVH[]>(
      {url: `/vmwareCloudDirector/backup`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorBackupQueryKey = (params?: GetVmwareCloudDirectorBackupParams,) => {
    return [`/vmwareCloudDirector/backup`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVmwareCloudDirectorBackupQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>, TError = unknown>(params?: GetVmwareCloudDirectorBackupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorBackupQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>> = ({ signal }) => getVmwareCloudDirectorBackup(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorBackupQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>>
export type GetVmwareCloudDirectorBackupQueryError = unknown


export function useGetVmwareCloudDirectorBackup<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>, TError = unknown>(
 params: undefined |  GetVmwareCloudDirectorBackupParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorBackup<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>, TError = unknown>(
 params?: GetVmwareCloudDirectorBackupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorBackup<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>, TError = unknown>(
 params?: GetVmwareCloudDirectorBackupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List VMware Cloud Director Backup services
 */

export function useGetVmwareCloudDirectorBackup<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>, TError = unknown>(
 params?: GetVmwareCloudDirectorBackupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorBackupQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get VMware Cloud Director Backup service
 */
export const getVmwareCloudDirectorBackupBackupId = (
    backupId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VmwareCloudDirectorBackupBackupDetailsWithIAMOVH>(
      {url: `/vmwareCloudDirector/backup/${backupId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorBackupBackupIdQueryKey = (backupId: string,) => {
    return [`/vmwareCloudDirector/backup/${backupId}`] as const;
    }

    
export const getGetVmwareCloudDirectorBackupBackupIdQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>, TError = unknown>(backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorBackupBackupIdQueryKey(backupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>> = ({ signal }) => getVmwareCloudDirectorBackupBackupId(backupId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(backupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorBackupBackupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>>
export type GetVmwareCloudDirectorBackupBackupIdQueryError = unknown


export function useGetVmwareCloudDirectorBackupBackupId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>, TError = unknown>(
 backupId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorBackupBackupId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>, TError = unknown>(
 backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorBackupBackupId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>, TError = unknown>(
 backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get VMware Cloud Director Backup service
 */

export function useGetVmwareCloudDirectorBackupBackupId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>, TError = unknown>(
 backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorBackupBackupIdQueryOptions(backupId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update VMware Cloud Director Backup service
 */
export const putVmwareCloudDirectorBackupBackupId = (
    backupId: string,
    vmwareCloudDirectorBackupBackupDetailsUpdateOVH: VmwareCloudDirectorBackupBackupDetailsUpdateOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<VmwareCloudDirectorBackupBackupDetailsOVH>(
      {url: `/vmwareCloudDirector/backup/${backupId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vmwareCloudDirectorBackupBackupDetailsUpdateOVH
    },
      options);
    }
  


export const getPutVmwareCloudDirectorBackupBackupIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVmwareCloudDirectorBackupBackupId>>, TError,{backupId: string;data: VmwareCloudDirectorBackupBackupDetailsUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putVmwareCloudDirectorBackupBackupId>>, TError,{backupId: string;data: VmwareCloudDirectorBackupBackupDetailsUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVmwareCloudDirectorBackupBackupId>>, {backupId: string;data: VmwareCloudDirectorBackupBackupDetailsUpdateOVH}> = (props) => {
          const {backupId,data} = props ?? {};

          return  putVmwareCloudDirectorBackupBackupId(backupId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVmwareCloudDirectorBackupBackupIdMutationResult = NonNullable<Awaited<ReturnType<typeof putVmwareCloudDirectorBackupBackupId>>>
    export type PutVmwareCloudDirectorBackupBackupIdMutationBody = VmwareCloudDirectorBackupBackupDetailsUpdateOVH
    export type PutVmwareCloudDirectorBackupBackupIdMutationError = unknown

    /**
 * @summary Update VMware Cloud Director Backup service
 */
export const usePutVmwareCloudDirectorBackupBackupId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVmwareCloudDirectorBackupBackupId>>, TError,{backupId: string;data: VmwareCloudDirectorBackupBackupDetailsUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVmwareCloudDirectorBackupBackupId>>,
        TError,
        {backupId: string;data: VmwareCloudDirectorBackupBackupDetailsUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutVmwareCloudDirectorBackupBackupIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List VMware Cloud Director Backup task
 */
export const getVmwareCloudDirectorBackupBackupIdEvent = (
    backupId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonEventOVH[]>(
      {url: `/vmwareCloudDirector/backup/${backupId}/event`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorBackupBackupIdEventQueryKey = (backupId: string,) => {
    return [`/vmwareCloudDirector/backup/${backupId}/event`] as const;
    }

    
export const getGetVmwareCloudDirectorBackupBackupIdEventQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>, TError = unknown>(backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorBackupBackupIdEventQueryKey(backupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>> = ({ signal }) => getVmwareCloudDirectorBackupBackupIdEvent(backupId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(backupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorBackupBackupIdEventQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>>
export type GetVmwareCloudDirectorBackupBackupIdEventQueryError = unknown


export function useGetVmwareCloudDirectorBackupBackupIdEvent<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>, TError = unknown>(
 backupId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorBackupBackupIdEvent<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>, TError = unknown>(
 backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorBackupBackupIdEvent<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>, TError = unknown>(
 backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List VMware Cloud Director Backup task
 */

export function useGetVmwareCloudDirectorBackupBackupIdEvent<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>, TError = unknown>(
 backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorBackupBackupIdEventQueryOptions(backupId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all asynchronous operations related to the VMware Cloud Director backup service
 */
export const getVmwareCloudDirectorBackupBackupIdTask = (
    backupId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH[]>(
      {url: `/vmwareCloudDirector/backup/${backupId}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorBackupBackupIdTaskQueryKey = (backupId: string,) => {
    return [`/vmwareCloudDirector/backup/${backupId}/task`] as const;
    }

    
export const getGetVmwareCloudDirectorBackupBackupIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>, TError = unknown>(backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorBackupBackupIdTaskQueryKey(backupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>> = ({ signal }) => getVmwareCloudDirectorBackupBackupIdTask(backupId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(backupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorBackupBackupIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>>
export type GetVmwareCloudDirectorBackupBackupIdTaskQueryError = unknown


export function useGetVmwareCloudDirectorBackupBackupIdTask<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>, TError = unknown>(
 backupId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorBackupBackupIdTask<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>, TError = unknown>(
 backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorBackupBackupIdTask<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>, TError = unknown>(
 backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all asynchronous operations related to the VMware Cloud Director backup service
 */

export function useGetVmwareCloudDirectorBackupBackupIdTask<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>, TError = unknown>(
 backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorBackupBackupIdTaskQueryOptions(backupId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a specific task related to the VMware Cloud Director backup service
 */
export const getVmwareCloudDirectorBackupBackupIdTaskTaskId = (
    backupId: string,
    taskId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH>(
      {url: `/vmwareCloudDirector/backup/${backupId}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorBackupBackupIdTaskTaskIdQueryKey = (backupId: string,
    taskId: string,) => {
    return [`/vmwareCloudDirector/backup/${backupId}/task/${taskId}`] as const;
    }

    
export const getGetVmwareCloudDirectorBackupBackupIdTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>, TError = unknown>(backupId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorBackupBackupIdTaskTaskIdQueryKey(backupId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>> = ({ signal }) => getVmwareCloudDirectorBackupBackupIdTaskTaskId(backupId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(backupId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorBackupBackupIdTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>>
export type GetVmwareCloudDirectorBackupBackupIdTaskTaskIdQueryError = unknown


export function useGetVmwareCloudDirectorBackupBackupIdTaskTaskId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>, TError = unknown>(
 backupId: string,
    taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorBackupBackupIdTaskTaskId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>, TError = unknown>(
 backupId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorBackupBackupIdTaskTaskId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>, TError = unknown>(
 backupId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a specific task related to the VMware Cloud Director backup service
 */

export function useGetVmwareCloudDirectorBackupBackupIdTaskTaskId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>, TError = unknown>(
 backupId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorBackupBackupIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorBackupBackupIdTaskTaskIdQueryOptions(backupId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List VMware Cloud Director organizations
 */
export const getVmwareCloudDirectorOrganization = (
    params?: GetVmwareCloudDirectorOrganizationParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VmwareCloudDirectorOrganizationWithIAMOVH[]>(
      {url: `/vmwareCloudDirector/organization`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationQueryKey = (params?: GetVmwareCloudDirectorOrganizationParams,) => {
    return [`/vmwareCloudDirector/organization`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>, TError = unknown>(params?: GetVmwareCloudDirectorOrganizationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>> = ({ signal }) => getVmwareCloudDirectorOrganization(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>>
export type GetVmwareCloudDirectorOrganizationQueryError = unknown


export function useGetVmwareCloudDirectorOrganization<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>, TError = unknown>(
 params: undefined |  GetVmwareCloudDirectorOrganizationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganization<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>, TError = unknown>(
 params?: GetVmwareCloudDirectorOrganizationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganization<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>, TError = unknown>(
 params?: GetVmwareCloudDirectorOrganizationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List VMware Cloud Director organizations
 */

export function useGetVmwareCloudDirectorOrganization<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>, TError = unknown>(
 params?: GetVmwareCloudDirectorOrganizationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganization>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get VMware Cloud Director organization details
 */
export const getVmwareCloudDirectorOrganizationOrganizationId = (
    organizationId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VmwareCloudDirectorOrganizationWithIAMOVH>(
      {url: `/vmwareCloudDirector/organization/${organizationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdQueryKey = (organizationId: string,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}`] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>, TError = unknown>(organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdQueryKey(organizationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationId(organizationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>, TError = unknown>(
 organizationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>, TError = unknown>(
 organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>, TError = unknown>(
 organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get VMware Cloud Director organization details
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>, TError = unknown>(
 organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdQueryOptions(organizationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update VMware Cloud Director organization details
 */
export const putVmwareCloudDirectorOrganizationOrganizationId = (
    organizationId: string,
    vmwareCloudDirectorOrganizationUpdateOVH: VmwareCloudDirectorOrganizationUpdateOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<VmwareCloudDirectorOrganizationOVH>(
      {url: `/vmwareCloudDirector/organization/${organizationId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vmwareCloudDirectorOrganizationUpdateOVH
    },
      options);
    }
  


export const getPutVmwareCloudDirectorOrganizationOrganizationIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVmwareCloudDirectorOrganizationOrganizationId>>, TError,{organizationId: string;data: VmwareCloudDirectorOrganizationUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putVmwareCloudDirectorOrganizationOrganizationId>>, TError,{organizationId: string;data: VmwareCloudDirectorOrganizationUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVmwareCloudDirectorOrganizationOrganizationId>>, {organizationId: string;data: VmwareCloudDirectorOrganizationUpdateOVH}> = (props) => {
          const {organizationId,data} = props ?? {};

          return  putVmwareCloudDirectorOrganizationOrganizationId(organizationId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVmwareCloudDirectorOrganizationOrganizationIdMutationResult = NonNullable<Awaited<ReturnType<typeof putVmwareCloudDirectorOrganizationOrganizationId>>>
    export type PutVmwareCloudDirectorOrganizationOrganizationIdMutationBody = VmwareCloudDirectorOrganizationUpdateOVH
    export type PutVmwareCloudDirectorOrganizationOrganizationIdMutationError = unknown

    /**
 * @summary Update VMware Cloud Director organization details
 */
export const usePutVmwareCloudDirectorOrganizationOrganizationId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVmwareCloudDirectorOrganizationOrganizationId>>, TError,{organizationId: string;data: VmwareCloudDirectorOrganizationUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVmwareCloudDirectorOrganizationOrganizationId>>,
        TError,
        {organizationId: string;data: VmwareCloudDirectorOrganizationUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutVmwareCloudDirectorOrganizationOrganizationIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all events related to the VMware Cloud Director resources
 */
export const getVmwareCloudDirectorOrganizationOrganizationIdEvent = (
    organizationId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonEventOVH[]>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/event`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdEventQueryKey = (organizationId: string,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}/event`] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdEventQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>, TError = unknown>(organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdEventQueryKey(organizationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationIdEvent(organizationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdEventQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdEventQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationIdEvent<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>, TError = unknown>(
 organizationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdEvent<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>, TError = unknown>(
 organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdEvent<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>, TError = unknown>(
 organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all events related to the VMware Cloud Director resources
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationIdEvent<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>, TError = unknown>(
 organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdEventQueryOptions(organizationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all asynchronous operations related to the VMware Cloud Director resources
 */
export const getVmwareCloudDirectorOrganizationOrganizationIdTask = (
    organizationId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH[]>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdTaskQueryKey = (organizationId: string,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}/task`] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>, TError = unknown>(organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdTaskQueryKey(organizationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationIdTask(organizationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdTaskQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationIdTask<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>, TError = unknown>(
 organizationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdTask<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>, TError = unknown>(
 organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdTask<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>, TError = unknown>(
 organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all asynchronous operations related to the VMware Cloud Director resources
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationIdTask<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>, TError = unknown>(
 organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdTaskQueryOptions(organizationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a specific task related to the VMware Cloud Director resources
 */
export const getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId = (
    organizationId: string,
    taskId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdTaskTaskIdQueryKey = (organizationId: string,
    taskId: string,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}/task/${taskId}`] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>, TError = unknown>(organizationId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdTaskTaskIdQueryKey(organizationId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId(organizationId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdTaskTaskIdQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>, TError = unknown>(
 organizationId: string,
    taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>, TError = unknown>(
 organizationId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>, TError = unknown>(
 organizationId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a specific task related to the VMware Cloud Director resources
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>, TError = unknown>(
 organizationId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdTaskTaskIdQueryOptions(organizationId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all organization Virtual DataCenters
 */
export const getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter = (
    organizationId: string,
    params?: GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VmwareCloudDirectorVirtualDataCenterWithIAMOVH[]>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterQueryKey = (organizationId: string,
    params?: GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterParams,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>, TError = unknown>(organizationId: string,
    params?: GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterQueryKey(organizationId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter(organizationId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>, TError = unknown>(
 organizationId: string,
    params: undefined |  GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>, TError = unknown>(
 organizationId: string,
    params?: GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>, TError = unknown>(
 organizationId: string,
    params?: GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all organization Virtual DataCenters
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>, TError = unknown>(
 organizationId: string,
    params?: GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterQueryOptions(organizationId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get organization Virtual DataCenter details
 */
export const getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId = (
    organizationId: string,
    virtualDataCenterId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VmwareCloudDirectorVirtualDataCenterWithIAMOVH>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdQueryKey = (organizationId: string,
    virtualDataCenterId: string,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}`] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError = unknown>(organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdQueryKey(organizationId,virtualDataCenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId(organizationId,virtualDataCenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId && virtualDataCenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get organization Virtual DataCenter details
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdQueryOptions(organizationId,virtualDataCenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update organization Virtual DataCenter details
 */
export const putVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId = (
    organizationId: string,
    virtualDataCenterId: string,
    vmwareCloudDirectorVirtualDataCenterUpdateOVH: VmwareCloudDirectorVirtualDataCenterUpdateOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<VmwareCloudDirectorVirtualDataCenterOVH>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vmwareCloudDirectorVirtualDataCenterUpdateOVH
    },
      options);
    }
  


export const getPutVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError,{organizationId: string;virtualDataCenterId: string;data: VmwareCloudDirectorVirtualDataCenterUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError,{organizationId: string;virtualDataCenterId: string;data: VmwareCloudDirectorVirtualDataCenterUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, {organizationId: string;virtualDataCenterId: string;data: VmwareCloudDirectorVirtualDataCenterUpdateOVH}> = (props) => {
          const {organizationId,virtualDataCenterId,data} = props ?? {};

          return  putVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId(organizationId,virtualDataCenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdMutationResult = NonNullable<Awaited<ReturnType<typeof putVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>>
    export type PutVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdMutationBody = VmwareCloudDirectorVirtualDataCenterUpdateOVH
    export type PutVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdMutationError = unknown

    /**
 * @summary Update organization Virtual DataCenter details
 */
export const usePutVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>, TError,{organizationId: string;virtualDataCenterId: string;data: VmwareCloudDirectorVirtualDataCenterUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterId>>,
        TError,
        {organizationId: string;virtualDataCenterId: string;data: VmwareCloudDirectorVirtualDataCenterUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List organization Virtual DataCenter associated compute resources
 */
export const getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute = (
    organizationId: string,
    virtualDataCenterId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VmwareCloudDirectorComputeOVH[]>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/compute`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeQueryKey = (organizationId: string,
    virtualDataCenterId: string,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/compute`] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>, TError = unknown>(organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeQueryKey(organizationId,virtualDataCenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute(organizationId,virtualDataCenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId && virtualDataCenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List organization Virtual DataCenter associated compute resources
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdCompute>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeQueryOptions(organizationId,virtualDataCenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get organization Virtual DataCenter associated compute resources
 */
export const getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId = (
    organizationId: string,
    virtualDataCenterId: string,
    computeId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VmwareCloudDirectorComputeOVH>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/compute/${computeId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeIdQueryKey = (organizationId: string,
    virtualDataCenterId: string,
    computeId: string,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/compute/${computeId}`] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeIdQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>, TError = unknown>(organizationId: string,
    virtualDataCenterId: string,
    computeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeIdQueryKey(organizationId,virtualDataCenterId,computeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId(organizationId,virtualDataCenterId,computeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId && virtualDataCenterId && computeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeIdQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string,
    computeId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string,
    computeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string,
    computeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get organization Virtual DataCenter associated compute resources
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string,
    computeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdComputeComputeIdQueryOptions(organizationId,virtualDataCenterId,computeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all orderable resources related to the organization Virtual DataCenter
 */
export const getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource = (
    organizationId: string,
    virtualDataCenterId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VmwareCloudDirectorOrderableResourceOVH>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/orderableResource`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResourceQueryKey = (organizationId: string,
    virtualDataCenterId: string,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/orderableResource`] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResourceQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>, TError = unknown>(organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResourceQueryKey(organizationId,virtualDataCenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource(organizationId,virtualDataCenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId && virtualDataCenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResourceQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResourceQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all orderable resources related to the organization Virtual DataCenter
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResource>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdOrderableResourceQueryOptions(organizationId,virtualDataCenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List organization Virtual DataCenter associated storage resources
 */
export const getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage = (
    organizationId: string,
    virtualDataCenterId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VmwareCloudDirectorStorageOVH[]>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/storage`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageQueryKey = (organizationId: string,
    virtualDataCenterId: string,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/storage`] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>, TError = unknown>(organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageQueryKey(organizationId,virtualDataCenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage(organizationId,virtualDataCenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId && virtualDataCenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List organization Virtual DataCenter associated storage resources
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageQueryOptions(organizationId,virtualDataCenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get organization Virtual DataCenter associated storage resources
 */
export const getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId = (
    organizationId: string,
    virtualDataCenterId: string,
    storageId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VmwareCloudDirectorStorageOVH>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/storage/${storageId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageIdQueryKey = (organizationId: string,
    virtualDataCenterId: string,
    storageId: string,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/storage/${storageId}`] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageIdQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>, TError = unknown>(organizationId: string,
    virtualDataCenterId: string,
    storageId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageIdQueryKey(organizationId,virtualDataCenterId,storageId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId(organizationId,virtualDataCenterId,storageId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId && virtualDataCenterId && storageId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageIdQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string,
    storageId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string,
    storageId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string,
    storageId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get organization Virtual DataCenter associated storage resources
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string,
    storageId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdStorageStorageIdQueryOptions(organizationId,virtualDataCenterId,storageId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all asynchronous operations related to the organization Virtual DataCenter resource
 */
export const getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask = (
    organizationId: string,
    virtualDataCenterId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH[]>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskQueryKey = (organizationId: string,
    virtualDataCenterId: string,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/task`] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>, TError = unknown>(organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskQueryKey(organizationId,virtualDataCenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask(organizationId,virtualDataCenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId && virtualDataCenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all asynchronous operations related to the organization Virtual DataCenter resource
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskQueryOptions(organizationId,virtualDataCenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a specific task related to the organization Virtual DataCenter resource
 */
export const getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId = (
    organizationId: string,
    virtualDataCenterId: string,
    taskId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH>(
      {url: `/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskIdQueryKey = (organizationId: string,
    virtualDataCenterId: string,
    taskId: string,) => {
    return [`/vmwareCloudDirector/organization/${organizationId}/virtualDataCenter/${virtualDataCenterId}/task/${taskId}`] as const;
    }

    
export const getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>, TError = unknown>(organizationId: string,
    virtualDataCenterId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskIdQueryKey(organizationId,virtualDataCenterId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>> = ({ signal }) => getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId(organizationId,virtualDataCenterId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationId && virtualDataCenterId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>>
export type GetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskIdQueryError = unknown


export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string,
    taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a specific task related to the organization Virtual DataCenter resource
 */

export function useGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>, TError = unknown>(
 organizationId: string,
    virtualDataCenterId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorOrganizationOrganizationIdVirtualDataCenterVirtualDataCenterIdTaskTaskIdQueryOptions(organizationId,virtualDataCenterId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get region details
 */
export const getVmwareCloudDirectorReferenceRegion = (
    
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VmwareCloudDirectorRegionOVH[]>(
      {url: `/vmwareCloudDirector/reference/region`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVmwareCloudDirectorReferenceRegionQueryKey = () => {
    return [`/vmwareCloudDirector/reference/region`] as const;
    }

    
export const getGetVmwareCloudDirectorReferenceRegionQueryOptions = <TData = Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVmwareCloudDirectorReferenceRegionQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>> = ({ signal }) => getVmwareCloudDirectorReferenceRegion(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVmwareCloudDirectorReferenceRegionQueryResult = NonNullable<Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>>
export type GetVmwareCloudDirectorReferenceRegionQueryError = unknown


export function useGetVmwareCloudDirectorReferenceRegion<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorReferenceRegion<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVmwareCloudDirectorReferenceRegion<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get region details
 */

export function useGetVmwareCloudDirectorReferenceRegion<TData = Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVmwareCloudDirectorReferenceRegion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVmwareCloudDirectorReferenceRegionQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





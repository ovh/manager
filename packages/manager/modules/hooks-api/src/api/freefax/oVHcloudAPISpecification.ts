/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  FreefaxBalanceInformationsOVH,
  FreefaxFreefaxPropertiesOVH,
  FreefaxFreefaxPropertiesWithIAMOVH,
  GetFreefaxParams,
  GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeParams,
  PhoneNumberOVH,
  ServicesServiceOVH,
  TelephonyDirectoryHeadingPJOVH,
  TelephonyDirectoryInfoOVH,
  TelephonyDirectoryWayTypeOVH,
  TelephonyEntrepriseNumberInformationsTaskOVH,
  TelephonyEntrepriseNumberOVH,
  TelephonyVoicefaxRoutingEnumOVH,
  TelephonyVoicemailChangePasswordOVH,
  TelephonyVoicemailChangeRoutingOVH,
  TelephonyVoicemailNumbersOVH,
  TelephonyVoicemailPropertiesOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List Freefax line accounts
 */
export const getFreefax = (
    params?: GetFreefaxParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<PhoneNumberOVH[]>(
      {url: `/freefax`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetFreefaxQueryKey = (params?: GetFreefaxParams,) => {
    return [`/freefax`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFreefaxQueryOptions = <TData = Awaited<ReturnType<typeof getFreefax>>, TError = unknown>(params?: GetFreefaxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefax>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFreefaxQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFreefax>>> = ({ signal }) => getFreefax(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFreefax>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFreefaxQueryResult = NonNullable<Awaited<ReturnType<typeof getFreefax>>>
export type GetFreefaxQueryError = unknown


export function useGetFreefax<TData = Awaited<ReturnType<typeof getFreefax>>, TError = unknown>(
 params: undefined |  GetFreefaxParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefax>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefax>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefax<TData = Awaited<ReturnType<typeof getFreefax>>, TError = unknown>(
 params?: GetFreefaxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefax>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefax>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefax<TData = Awaited<ReturnType<typeof getFreefax>>, TError = unknown>(
 params?: GetFreefaxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefax>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List Freefax line accounts
 */

export function useGetFreefax<TData = Awaited<ReturnType<typeof getFreefax>>, TError = unknown>(
 params?: GetFreefaxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefax>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFreefaxQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the credit balance and the remaining pages available for all our freefax
 */
export const getFreefaxCredits = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<FreefaxBalanceInformationsOVH>(
      {url: `/freefax/credits`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFreefaxCreditsQueryKey = () => {
    return [`/freefax/credits`] as const;
    }

    
export const getGetFreefaxCreditsQueryOptions = <TData = Awaited<ReturnType<typeof getFreefaxCredits>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxCredits>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFreefaxCreditsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFreefaxCredits>>> = ({ signal }) => getFreefaxCredits(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFreefaxCredits>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFreefaxCreditsQueryResult = NonNullable<Awaited<ReturnType<typeof getFreefaxCredits>>>
export type GetFreefaxCreditsQueryError = unknown


export function useGetFreefaxCredits<TData = Awaited<ReturnType<typeof getFreefaxCredits>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxCredits>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxCredits>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxCredits<TData = Awaited<ReturnType<typeof getFreefaxCredits>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxCredits>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxCredits>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxCredits<TData = Awaited<ReturnType<typeof getFreefaxCredits>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxCredits>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the credit balance and the remaining pages available for all our freefax
 */

export function useGetFreefaxCredits<TData = Awaited<ReturnType<typeof getFreefaxCredits>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxCredits>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFreefaxCreditsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Freefax information
 */
export const getFreefaxServiceName = (
    serviceName: PhoneNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<FreefaxFreefaxPropertiesWithIAMOVH>(
      {url: `/freefax/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFreefaxServiceNameQueryKey = (serviceName: PhoneNumberOVH,) => {
    return [`/freefax/${serviceName}`] as const;
    }

    
export const getGetFreefaxServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getFreefaxServiceName>>, TError = unknown>(serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFreefaxServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFreefaxServiceName>>> = ({ signal }) => getFreefaxServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFreefaxServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getFreefaxServiceName>>>
export type GetFreefaxServiceNameQueryError = unknown


export function useGetFreefaxServiceName<TData = Awaited<ReturnType<typeof getFreefaxServiceName>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceName<TData = Awaited<ReturnType<typeof getFreefaxServiceName>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceName<TData = Awaited<ReturnType<typeof getFreefaxServiceName>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Freefax information
 */

export function useGetFreefaxServiceName<TData = Awaited<ReturnType<typeof getFreefaxServiceName>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFreefaxServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Edit the Freefax properties
 */
export const putFreefaxServiceName = (
    serviceName: PhoneNumberOVH,
    freefaxFreefaxPropertiesOVH: NonReadonly<FreefaxFreefaxPropertiesOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/freefax/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: freefaxFreefaxPropertiesOVH
    },
      options);
    }
  


export const getPutFreefaxServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putFreefaxServiceName>>, TError,{serviceName: PhoneNumberOVH;data: NonReadonly<FreefaxFreefaxPropertiesOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putFreefaxServiceName>>, TError,{serviceName: PhoneNumberOVH;data: NonReadonly<FreefaxFreefaxPropertiesOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putFreefaxServiceName>>, {serviceName: PhoneNumberOVH;data: NonReadonly<FreefaxFreefaxPropertiesOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putFreefaxServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutFreefaxServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putFreefaxServiceName>>>
    export type PutFreefaxServiceNameMutationBody = NonReadonly<FreefaxFreefaxPropertiesOVH>
    export type PutFreefaxServiceNameMutationError = unknown

    /**
 * @summary Edit the Freefax properties
 */
export const usePutFreefaxServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putFreefaxServiceName>>, TError,{serviceName: PhoneNumberOVH;data: NonReadonly<FreefaxFreefaxPropertiesOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putFreefaxServiceName>>,
        TError,
        {serviceName: PhoneNumberOVH;data: NonReadonly<FreefaxFreefaxPropertiesOVH>},
        TContext
      > => {

      const mutationOptions = getPutFreefaxServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generates a new password for your fax account
 */
export const postFreefaxServiceNameChangePassword = (
    serviceName: PhoneNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/freefax/${serviceName}/changePassword`, method: 'POST', signal
    },
      options);
    }
  


export const getPostFreefaxServiceNameChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFreefaxServiceNameChangePassword>>, TError,{serviceName: PhoneNumberOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postFreefaxServiceNameChangePassword>>, TError,{serviceName: PhoneNumberOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postFreefaxServiceNameChangePassword>>, {serviceName: PhoneNumberOVH}> = (props) => {
          const {serviceName} = props ?? {};

          return  postFreefaxServiceNameChangePassword(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostFreefaxServiceNameChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postFreefaxServiceNameChangePassword>>>
    
    export type PostFreefaxServiceNameChangePasswordMutationError = unknown

    /**
 * @summary Generates a new password for your fax account
 */
export const usePostFreefaxServiceNameChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFreefaxServiceNameChangePassword>>, TError,{serviceName: PhoneNumberOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postFreefaxServiceNameChangePassword>>,
        TError,
        {serviceName: PhoneNumberOVH},
        TContext
      > => {

      const mutationOptions = getPostFreefaxServiceNameChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Freefax directory information
 */
export const getFreefaxServiceNameDirectory = (
    serviceName: PhoneNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDirectoryInfoOVH>(
      {url: `/freefax/${serviceName}/directory`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFreefaxServiceNameDirectoryQueryKey = (serviceName: PhoneNumberOVH,) => {
    return [`/freefax/${serviceName}/directory`] as const;
    }

    
export const getGetFreefaxServiceNameDirectoryQueryOptions = <TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>, TError = unknown>(serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFreefaxServiceNameDirectoryQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>> = ({ signal }) => getFreefaxServiceNameDirectory(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFreefaxServiceNameDirectoryQueryResult = NonNullable<Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>>
export type GetFreefaxServiceNameDirectoryQueryError = unknown


export function useGetFreefaxServiceNameDirectory<TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameDirectory<TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameDirectory<TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Freefax directory information
 */

export function useGetFreefaxServiceNameDirectory<TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFreefaxServiceNameDirectoryQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Edit Freefax directory information
 */
export const putFreefaxServiceNameDirectory = (
    serviceName: PhoneNumberOVH,
    telephonyDirectoryInfoOVH: NonReadonly<TelephonyDirectoryInfoOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/freefax/${serviceName}/directory`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyDirectoryInfoOVH
    },
      options);
    }
  


export const getPutFreefaxServiceNameDirectoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putFreefaxServiceNameDirectory>>, TError,{serviceName: PhoneNumberOVH;data: NonReadonly<TelephonyDirectoryInfoOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putFreefaxServiceNameDirectory>>, TError,{serviceName: PhoneNumberOVH;data: NonReadonly<TelephonyDirectoryInfoOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putFreefaxServiceNameDirectory>>, {serviceName: PhoneNumberOVH;data: NonReadonly<TelephonyDirectoryInfoOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putFreefaxServiceNameDirectory(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutFreefaxServiceNameDirectoryMutationResult = NonNullable<Awaited<ReturnType<typeof putFreefaxServiceNameDirectory>>>
    export type PutFreefaxServiceNameDirectoryMutationBody = NonReadonly<TelephonyDirectoryInfoOVH>
    export type PutFreefaxServiceNameDirectoryMutationError = unknown

    /**
 * @summary Edit Freefax directory information
 */
export const usePutFreefaxServiceNameDirectory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putFreefaxServiceNameDirectory>>, TError,{serviceName: PhoneNumberOVH;data: NonReadonly<TelephonyDirectoryInfoOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putFreefaxServiceNameDirectory>>,
        TError,
        {serviceName: PhoneNumberOVH;data: NonReadonly<TelephonyDirectoryInfoOVH>},
        TContext
      > => {

      const mutationOptions = getPutFreefaxServiceNameDirectoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get enterprise information by providing enterprise number
 */
export const postFreefaxServiceNameDirectoryFetchEntrepriseInformations = (
    serviceName: PhoneNumberOVH,
    telephonyEntrepriseNumberOVH: TelephonyEntrepriseNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEntrepriseNumberInformationsTaskOVH>(
      {url: `/freefax/${serviceName}/directory/fetchEntrepriseInformations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: telephonyEntrepriseNumberOVH, signal
    },
      options);
    }
  


export const getPostFreefaxServiceNameDirectoryFetchEntrepriseInformationsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFreefaxServiceNameDirectoryFetchEntrepriseInformations>>, TError,{serviceName: PhoneNumberOVH;data: TelephonyEntrepriseNumberOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postFreefaxServiceNameDirectoryFetchEntrepriseInformations>>, TError,{serviceName: PhoneNumberOVH;data: TelephonyEntrepriseNumberOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postFreefaxServiceNameDirectoryFetchEntrepriseInformations>>, {serviceName: PhoneNumberOVH;data: TelephonyEntrepriseNumberOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postFreefaxServiceNameDirectoryFetchEntrepriseInformations(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostFreefaxServiceNameDirectoryFetchEntrepriseInformationsMutationResult = NonNullable<Awaited<ReturnType<typeof postFreefaxServiceNameDirectoryFetchEntrepriseInformations>>>
    export type PostFreefaxServiceNameDirectoryFetchEntrepriseInformationsMutationBody = TelephonyEntrepriseNumberOVH
    export type PostFreefaxServiceNameDirectoryFetchEntrepriseInformationsMutationError = unknown

    /**
 * @summary Get enterprise information by providing enterprise number
 */
export const usePostFreefaxServiceNameDirectoryFetchEntrepriseInformations = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFreefaxServiceNameDirectoryFetchEntrepriseInformations>>, TError,{serviceName: PhoneNumberOVH;data: TelephonyEntrepriseNumberOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postFreefaxServiceNameDirectoryFetchEntrepriseInformations>>,
        TError,
        {serviceName: PhoneNumberOVH;data: TelephonyEntrepriseNumberOVH},
        TContext
      > => {

      const mutationOptions = getPostFreefaxServiceNameDirectoryFetchEntrepriseInformationsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get directory service code from an APE code (principal activity of the firm code)
 */
export const getFreefaxServiceNameDirectoryGetDirectoryServiceCode = (
    serviceName: PhoneNumberOVH,
    params: GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDirectoryHeadingPJOVH[]>(
      {url: `/freefax/${serviceName}/directory/getDirectoryServiceCode`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetFreefaxServiceNameDirectoryGetDirectoryServiceCodeQueryKey = (serviceName: PhoneNumberOVH,
    params: GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeParams,) => {
    return [`/freefax/${serviceName}/directory/getDirectoryServiceCode`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFreefaxServiceNameDirectoryGetDirectoryServiceCodeQueryOptions = <TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>, TError = unknown>(serviceName: PhoneNumberOVH,
    params: GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFreefaxServiceNameDirectoryGetDirectoryServiceCodeQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>> = ({ signal }) => getFreefaxServiceNameDirectoryGetDirectoryServiceCode(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>>
export type GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeQueryError = unknown


export function useGetFreefaxServiceNameDirectoryGetDirectoryServiceCode<TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>, TError = unknown>(
 serviceName: PhoneNumberOVH,
    params: GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameDirectoryGetDirectoryServiceCode<TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>, TError = unknown>(
 serviceName: PhoneNumberOVH,
    params: GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameDirectoryGetDirectoryServiceCode<TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>, TError = unknown>(
 serviceName: PhoneNumberOVH,
    params: GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get directory service code from an APE code (principal activity of the firm code)
 */

export function useGetFreefaxServiceNameDirectoryGetDirectoryServiceCode<TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>, TError = unknown>(
 serviceName: PhoneNumberOVH,
    params: GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetDirectoryServiceCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFreefaxServiceNameDirectoryGetDirectoryServiceCodeQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all the way types available
 */
export const getFreefaxServiceNameDirectoryGetWayTypes = (
    serviceName: PhoneNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDirectoryWayTypeOVH[]>(
      {url: `/freefax/${serviceName}/directory/getWayTypes`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFreefaxServiceNameDirectoryGetWayTypesQueryKey = (serviceName: PhoneNumberOVH,) => {
    return [`/freefax/${serviceName}/directory/getWayTypes`] as const;
    }

    
export const getGetFreefaxServiceNameDirectoryGetWayTypesQueryOptions = <TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>, TError = unknown>(serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFreefaxServiceNameDirectoryGetWayTypesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>> = ({ signal }) => getFreefaxServiceNameDirectoryGetWayTypes(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFreefaxServiceNameDirectoryGetWayTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>>
export type GetFreefaxServiceNameDirectoryGetWayTypesQueryError = unknown


export function useGetFreefaxServiceNameDirectoryGetWayTypes<TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameDirectoryGetWayTypes<TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameDirectoryGetWayTypes<TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all the way types available
 */

export function useGetFreefaxServiceNameDirectoryGetWayTypes<TData = Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameDirectoryGetWayTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFreefaxServiceNameDirectoryGetWayTypesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get main service attached to the Freefax
 */
export const getFreefaxServiceNameMainService = (
    serviceName: PhoneNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/freefax/${serviceName}/mainService`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFreefaxServiceNameMainServiceQueryKey = (serviceName: PhoneNumberOVH,) => {
    return [`/freefax/${serviceName}/mainService`] as const;
    }

    
export const getGetFreefaxServiceNameMainServiceQueryOptions = <TData = Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>, TError = unknown>(serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFreefaxServiceNameMainServiceQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>> = ({ signal }) => getFreefaxServiceNameMainService(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFreefaxServiceNameMainServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>>
export type GetFreefaxServiceNameMainServiceQueryError = unknown


export function useGetFreefaxServiceNameMainService<TData = Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameMainService<TData = Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameMainService<TData = Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get main service attached to the Freefax
 */

export function useGetFreefaxServiceNameMainService<TData = Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameMainService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFreefaxServiceNameMainServiceQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getFreefaxServiceNameServiceInfos = (
    serviceName: PhoneNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/freefax/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFreefaxServiceNameServiceInfosQueryKey = (serviceName: PhoneNumberOVH,) => {
    return [`/freefax/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetFreefaxServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>, TError = unknown>(serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFreefaxServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>> = ({ signal }) => getFreefaxServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFreefaxServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>>
export type GetFreefaxServiceNameServiceInfosQueryError = unknown


export function useGetFreefaxServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetFreefaxServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFreefaxServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putFreefaxServiceNameServiceInfos = (
    serviceName: PhoneNumberOVH,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/freefax/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutFreefaxServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putFreefaxServiceNameServiceInfos>>, TError,{serviceName: PhoneNumberOVH;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putFreefaxServiceNameServiceInfos>>, TError,{serviceName: PhoneNumberOVH;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putFreefaxServiceNameServiceInfos>>, {serviceName: PhoneNumberOVH;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putFreefaxServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutFreefaxServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putFreefaxServiceNameServiceInfos>>>
    export type PutFreefaxServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutFreefaxServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutFreefaxServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putFreefaxServiceNameServiceInfos>>, TError,{serviceName: PhoneNumberOVH;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putFreefaxServiceNameServiceInfos>>,
        TError,
        {serviceName: PhoneNumberOVH;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutFreefaxServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the Freefax voicemail information
 */
export const getFreefaxServiceNameVoicemail = (
    serviceName: PhoneNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyVoicemailPropertiesOVH>(
      {url: `/freefax/${serviceName}/voicemail`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFreefaxServiceNameVoicemailQueryKey = (serviceName: PhoneNumberOVH,) => {
    return [`/freefax/${serviceName}/voicemail`] as const;
    }

    
export const getGetFreefaxServiceNameVoicemailQueryOptions = <TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>, TError = unknown>(serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFreefaxServiceNameVoicemailQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>> = ({ signal }) => getFreefaxServiceNameVoicemail(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFreefaxServiceNameVoicemailQueryResult = NonNullable<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>>
export type GetFreefaxServiceNameVoicemailQueryError = unknown


export function useGetFreefaxServiceNameVoicemail<TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameVoicemail<TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameVoicemail<TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the Freefax voicemail information
 */

export function useGetFreefaxServiceNameVoicemail<TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFreefaxServiceNameVoicemailQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Edit the Freefax voicemail
 */
export const putFreefaxServiceNameVoicemail = (
    serviceName: PhoneNumberOVH,
    telephonyVoicemailPropertiesOVH: NonReadonly<TelephonyVoicemailPropertiesOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/freefax/${serviceName}/voicemail`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyVoicemailPropertiesOVH
    },
      options);
    }
  


export const getPutFreefaxServiceNameVoicemailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putFreefaxServiceNameVoicemail>>, TError,{serviceName: PhoneNumberOVH;data: NonReadonly<TelephonyVoicemailPropertiesOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putFreefaxServiceNameVoicemail>>, TError,{serviceName: PhoneNumberOVH;data: NonReadonly<TelephonyVoicemailPropertiesOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putFreefaxServiceNameVoicemail>>, {serviceName: PhoneNumberOVH;data: NonReadonly<TelephonyVoicemailPropertiesOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putFreefaxServiceNameVoicemail(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutFreefaxServiceNameVoicemailMutationResult = NonNullable<Awaited<ReturnType<typeof putFreefaxServiceNameVoicemail>>>
    export type PutFreefaxServiceNameVoicemailMutationBody = NonReadonly<TelephonyVoicemailPropertiesOVH>
    export type PutFreefaxServiceNameVoicemailMutationError = unknown

    /**
 * @summary Edit the Freefax voicemail
 */
export const usePutFreefaxServiceNameVoicemail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putFreefaxServiceNameVoicemail>>, TError,{serviceName: PhoneNumberOVH;data: NonReadonly<TelephonyVoicemailPropertiesOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putFreefaxServiceNameVoicemail>>,
        TError,
        {serviceName: PhoneNumberOVH;data: NonReadonly<TelephonyVoicemailPropertiesOVH>},
        TContext
      > => {

      const mutationOptions = getPutFreefaxServiceNameVoicemailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the voicemail password. It must be 4 digit
 */
export const postFreefaxServiceNameVoicemailChangePassword = (
    serviceName: PhoneNumberOVH,
    telephonyVoicemailChangePasswordOVH: TelephonyVoicemailChangePasswordOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/freefax/${serviceName}/voicemail/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: telephonyVoicemailChangePasswordOVH, signal
    },
      options);
    }
  


export const getPostFreefaxServiceNameVoicemailChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFreefaxServiceNameVoicemailChangePassword>>, TError,{serviceName: PhoneNumberOVH;data: TelephonyVoicemailChangePasswordOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postFreefaxServiceNameVoicemailChangePassword>>, TError,{serviceName: PhoneNumberOVH;data: TelephonyVoicemailChangePasswordOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postFreefaxServiceNameVoicemailChangePassword>>, {serviceName: PhoneNumberOVH;data: TelephonyVoicemailChangePasswordOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postFreefaxServiceNameVoicemailChangePassword(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostFreefaxServiceNameVoicemailChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postFreefaxServiceNameVoicemailChangePassword>>>
    export type PostFreefaxServiceNameVoicemailChangePasswordMutationBody = TelephonyVoicemailChangePasswordOVH
    export type PostFreefaxServiceNameVoicemailChangePasswordMutationError = unknown

    /**
 * @summary Change the voicemail password. It must be 4 digit
 */
export const usePostFreefaxServiceNameVoicemailChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFreefaxServiceNameVoicemailChangePassword>>, TError,{serviceName: PhoneNumberOVH;data: TelephonyVoicemailChangePasswordOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postFreefaxServiceNameVoicemailChangePassword>>,
        TError,
        {serviceName: PhoneNumberOVH;data: TelephonyVoicemailChangePasswordOVH},
        TContext
      > => {

      const mutationOptions = getPostFreefaxServiceNameVoicemailChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable/Enable voicemail. Available only if the line has fax capabilities
 */
export const postFreefaxServiceNameVoicemailChangeRouting = (
    serviceName: PhoneNumberOVH,
    telephonyVoicemailChangeRoutingOVH: TelephonyVoicemailChangeRoutingOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/freefax/${serviceName}/voicemail/changeRouting`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: telephonyVoicemailChangeRoutingOVH, signal
    },
      options);
    }
  


export const getPostFreefaxServiceNameVoicemailChangeRoutingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFreefaxServiceNameVoicemailChangeRouting>>, TError,{serviceName: PhoneNumberOVH;data: TelephonyVoicemailChangeRoutingOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postFreefaxServiceNameVoicemailChangeRouting>>, TError,{serviceName: PhoneNumberOVH;data: TelephonyVoicemailChangeRoutingOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postFreefaxServiceNameVoicemailChangeRouting>>, {serviceName: PhoneNumberOVH;data: TelephonyVoicemailChangeRoutingOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postFreefaxServiceNameVoicemailChangeRouting(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostFreefaxServiceNameVoicemailChangeRoutingMutationResult = NonNullable<Awaited<ReturnType<typeof postFreefaxServiceNameVoicemailChangeRouting>>>
    export type PostFreefaxServiceNameVoicemailChangeRoutingMutationBody = TelephonyVoicemailChangeRoutingOVH
    export type PostFreefaxServiceNameVoicemailChangeRoutingMutationError = unknown

    /**
 * @summary Disable/Enable voicemail. Available only if the line has fax capabilities
 */
export const usePostFreefaxServiceNameVoicemailChangeRouting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFreefaxServiceNameVoicemailChangeRouting>>, TError,{serviceName: PhoneNumberOVH;data: TelephonyVoicemailChangeRoutingOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postFreefaxServiceNameVoicemailChangeRouting>>,
        TError,
        {serviceName: PhoneNumberOVH;data: TelephonyVoicemailChangeRoutingOVH},
        TContext
      > => {

      const mutationOptions = getPostFreefaxServiceNameVoicemailChangeRoutingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the status of the voicemail. Available only if the line has fax capabilities
 */
export const getFreefaxServiceNameVoicemailRouting = (
    serviceName: PhoneNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyVoicefaxRoutingEnumOVH>(
      {url: `/freefax/${serviceName}/voicemail/routing`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFreefaxServiceNameVoicemailRoutingQueryKey = (serviceName: PhoneNumberOVH,) => {
    return [`/freefax/${serviceName}/voicemail/routing`] as const;
    }

    
export const getGetFreefaxServiceNameVoicemailRoutingQueryOptions = <TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>, TError = unknown>(serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFreefaxServiceNameVoicemailRoutingQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>> = ({ signal }) => getFreefaxServiceNameVoicemailRouting(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFreefaxServiceNameVoicemailRoutingQueryResult = NonNullable<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>>
export type GetFreefaxServiceNameVoicemailRoutingQueryError = unknown


export function useGetFreefaxServiceNameVoicemailRouting<TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameVoicemailRouting<TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameVoicemailRouting<TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the status of the voicemail. Available only if the line has fax capabilities
 */

export function useGetFreefaxServiceNameVoicemailRouting<TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailRouting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFreefaxServiceNameVoicemailRoutingQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get number for internal and external voicemail
 */
export const getFreefaxServiceNameVoicemailVoicemailNumbers = (
    serviceName: PhoneNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyVoicemailNumbersOVH>(
      {url: `/freefax/${serviceName}/voicemail/voicemailNumbers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFreefaxServiceNameVoicemailVoicemailNumbersQueryKey = (serviceName: PhoneNumberOVH,) => {
    return [`/freefax/${serviceName}/voicemail/voicemailNumbers`] as const;
    }

    
export const getGetFreefaxServiceNameVoicemailVoicemailNumbersQueryOptions = <TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>, TError = unknown>(serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFreefaxServiceNameVoicemailVoicemailNumbersQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>> = ({ signal }) => getFreefaxServiceNameVoicemailVoicemailNumbers(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFreefaxServiceNameVoicemailVoicemailNumbersQueryResult = NonNullable<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>>
export type GetFreefaxServiceNameVoicemailVoicemailNumbersQueryError = unknown


export function useGetFreefaxServiceNameVoicemailVoicemailNumbers<TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameVoicemailVoicemailNumbers<TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFreefaxServiceNameVoicemailVoicemailNumbers<TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get number for internal and external voicemail
 */

export function useGetFreefaxServiceNameVoicemailVoicemailNumbers<TData = Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>, TError = unknown>(
 serviceName: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFreefaxServiceNameVoicemailVoicemailNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFreefaxServiceNameVoicemailVoicemailNumbersQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





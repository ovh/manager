/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeParams = {
apeCode: string;
};

export type GetFreefaxParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Change voicemail routing
 */
export interface TelephonyVoicemailChangeRoutingOVH {
  /** All existing type of routing for a voicemail */
  routing: TelephonyVoicefaxRoutingEnumOVH;
}

/**
 * Change voicemail password
 */
export interface TelephonyVoicemailChangePasswordOVH {
  /** The password */
  password: string;
}

/**
 * Internal and external numbers for voicemail service
 */
export interface TelephonyVoicemailNumbersOVH {
  /** The external voicemail number */
  readonly external?: string;
  /** The internal voicemail number */
  readonly internal?: string;
}

/**
 * Greeting type
 */
export type TelephonyVoicemailGreetingEnumOVH = typeof TelephonyVoicemailGreetingEnumOVH[keyof typeof TelephonyVoicemailGreetingEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyVoicemailGreetingEnumOVH = {
  default: 'default',
  full: 'full',
  short: 'short',
} as const;

/**
 * All existing type of routing for a voicemail
 */
export type TelephonyVoicefaxRoutingEnumOVH = typeof TelephonyVoicefaxRoutingEnumOVH[keyof typeof TelephonyVoicefaxRoutingEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyVoicefaxRoutingEnumOVH = {
  fax: 'fax',
  voicemail: 'voicemail',
} as const;

/**
 * Task status
 */
export type TelephonyTaskStatusEnumOVH = typeof TelephonyTaskStatusEnumOVH[keyof typeof TelephonyTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTaskStatusEnumOVH = {
  doing: 'doing',
  done: 'done',
  error: 'error',
  pause: 'pause',
  todo: 'todo',
} as const;

/**
 * Voicemail configuration
 */
export type TelephonyServiceVoicemailMailOptionEnumOVH = typeof TelephonyServiceVoicemailMailOptionEnumOVH[keyof typeof TelephonyServiceVoicemailMailOptionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyServiceVoicemailMailOptionEnumOVH = {
  attachment: 'attachment',
  simple: 'simple',
} as const;

/**
 * Voicemail configuration
 */
export interface TelephonyServiceVoicemailNotificationsOVH {
  email?: string;
  /** Voicemail configuration */
  type?: TelephonyServiceVoicemailMailOptionEnumOVH;
}

/**
 * Voicemail audio format
 */
export type TelephonyServiceVoicemailAudioFormatEnumOVH = typeof TelephonyServiceVoicemailAudioFormatEnumOVH[keyof typeof TelephonyServiceVoicemailAudioFormatEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyServiceVoicemailAudioFormatEnumOVH = {
  aiff: 'aiff',
  au: 'au',
  flac: 'flac',
  mp3: 'mp3',
  ogg: 'ogg',
  wav: 'wav',
} as const;

/**
 * Voicemail Properties
 */
export interface TelephonyVoicemailPropertiesOVH {
  /** Name of the voicemail panel announce file */
  readonly annouceMessage?: string;
  /** Voicemail audio format */
  audioFormat?: TelephonyServiceVoicemailAudioFormatEnumOVH;
  /** Don't allow callers to leave voicemails */
  doNotRecord?: boolean;
  /** Force password request to access the voicemail panel */
  forcePassword?: boolean;
  /** Email address from which emails will be sent */
  fromEmail?: string;
  /** Name from which emails will be sent */
  fromName?: string;
  /**
   * Sound ID of the long greeeting
   * @nullable
   */
  fullGreetingSoundId?: number | null;
  /** Greeting type */
  greetingType?: TelephonyVoicemailGreetingEnumOVH;
  /** Current voicemail version */
  readonly isNewVersion?: boolean;
  /** Don't delete voicemails after they've been sent by email */
  keepMessage?: boolean;
  /** Email addresses to notify when a new voicemail is left */
  redirectionEmails?: TelephonyServiceVoicemailNotificationsOVH[];
  /**
   * Sound ID of the short greeting played before an automated message
   * @nullable
   */
  shortGreetingSoundId?: number | null;
  /** Play the temporary greeting instead of the regular one */
  temporaryGreetingActivated?: boolean;
  /**
   * Sound ID of the temporary greeeting
   * @nullable
   */
  temporaryGreetingSoundId?: number | null;
  /** Quantity of unread voicemails */
  readonly unreadMessages?: number;
}

/**
 * Number of tries when sending a fax
 */
export type TelephonyFaxSendingTriesEnumOVH = typeof TelephonyFaxSendingTriesEnumOVH[keyof typeof TelephonyFaxSendingTriesEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyFaxSendingTriesEnumOVH = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
} as const;

/**
 * Number of tries when sending a fax
 */
export type TelephonyFaxSendingTriesOVH = typeof TelephonyFaxSendingTriesOVH[keyof typeof TelephonyFaxSendingTriesOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyFaxSendingTriesOVH = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
} as const;

/**
 * Available quality for fax documents
 */
export type TelephonyFaxQualityEnumOVH = typeof TelephonyFaxQualityEnumOVH[keyof typeof TelephonyFaxQualityEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyFaxQualityEnumOVH = {
  best: 'best',
  high: 'high',
  normal: 'normal',
} as const;

/**
 * Task information about an entreprise
 */
export interface TelephonyEntrepriseNumberInformationsOVH {
  /**
   * Address of the entreprise
   * @nullable
   */
  readonly address?: string | null;
  /**
   * Entreprise's category code for directory services
   * @nullable
   */
  readonly ape?: string | null;
  /**
   * Brand of the entreprise
   * @nullable
   */
  readonly brand?: string | null;
  /** Entreprise number */
  readonly entrepriseNumber?: string;
  /** Is this a valid entreprise number? */
  readonly isValid?: boolean;
  /** Name of the entreprise */
  readonly name?: string;
  /**
   * Short version of the entreprise number (FR only)
   * @nullable
   */
  readonly siren?: string | null;
}

/**
 * Task about getting entreprise information
 */
export interface TelephonyEntrepriseNumberInformationsTaskOVH {
  /** Task information about an entreprise */
  readonly informations?: TelephonyEntrepriseNumberInformationsOVH;
  /** Task status */
  readonly status?: TelephonyTaskStatusEnumOVH;
}

/**
 * Enterprise number
 */
export interface TelephonyEntrepriseNumberOVH {
  /** Entreprise number to fetch information from */
  entrepriseNumber: string;
}

/**
 * Directory way type
 */
export interface TelephonyDirectoryWayTypeOVH {
  readonly abbreviatedName?: string;
  readonly wayName?: string;
}

/**
 * Directory information
 */
export interface TelephonyDirectoryHeadingPJOVH {
  readonly apeCode?: string;
  readonly apeDescription?: string;
  readonly directoryServiceCode?: number;
  readonly directoryServiceDescription?: string;
  readonly notification?: string;
}

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

/**
 * service.StateEnum
 */
export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * All genders a person can choose
 */
export type NichandleGenderEnumOVH = typeof NichandleGenderEnumOVH[keyof typeof NichandleGenderEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandleGenderEnumOVH = {
  female: 'female',
  male: 'male',
} as const;

/**
 * Directory information
 */
export interface TelephonyDirectoryInfoOVH {
  address?: string;
  addressExtra?: string;
  ape?: string;
  readonly areaCode?: number;
  /** @nullable */
  birthDate?: string | null;
  cedex?: string;
  city?: string;
  country?: string;
  directoryServiceCode?: string;
  displayFirstName?: boolean;
  displayMarketingDirectory?: boolean;
  displayOnlyCity?: boolean;
  displaySearchReverse?: boolean;
  displayUniversalDirectory?: boolean;
  email?: string;
  firstName?: string;
  /** All genders a person can choose */
  gender?: NichandleGenderEnumOVH;
  readonly inseeCode?: number;
  legalForm?: string;
  lineDescription?: string;
  readonly modificationDate?: string;
  readonly modificationType?: string;
  name?: string;
  readonly number?: string;
  occupation?: string;
  PJSocialNomination?: string;
  postBox?: string;
  postCode?: string;
  receivePJDirectory?: boolean;
  siret?: string;
  socialNomination?: string;
  socialNominationExtra?: string;
  readonly status?: string;
  urbanDistrict?: string;
  wayName?: string;
  wayNumber?: string;
  wayNumberExtra?: string;
  wayType?: string;
}

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type FreefaxFreefaxPropertiesWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Freefax properties
 */
export interface FreefaxFreefaxPropertiesWithIAMOVH {
  /** Number of tries when sending a fax */
  faxMaxCall?: TelephonyFaxSendingTriesEnumOVH;
  /** Available quality for fax documents */
  faxQuality?: TelephonyFaxQualityEnumOVH;
  /** Customised freefax header */
  faxTagLine?: string;
  /** FROM email header */
  fromEmail?: string;
  /** Name of the sender of the email */
  fromName?: string;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: FreefaxFreefaxPropertiesWithIAMOVHIam;
  /** Phone number */
  readonly number?: PhoneNumberOVH;
  /** Email address to redirect fax response. */
  redirectionEmail?: string[];
}

/**
 * Freefax properties
 */
export interface FreefaxFreefaxPropertiesOVH {
  /** Number of tries when sending a fax */
  faxMaxCall?: TelephonyFaxSendingTriesEnumOVH;
  /** Available quality for fax documents */
  faxQuality?: TelephonyFaxQualityEnumOVH;
  /** Customised freefax header */
  faxTagLine?: string;
  /** FROM email header */
  fromEmail?: string;
  /** Name of the sender of the email */
  fromName?: string;
  /** Phone number */
  readonly number?: PhoneNumberOVH;
  /** Email address to redirect fax response. */
  redirectionEmail?: string[];
}

/**
 * Return credit balance information structure
 */
export interface FreefaxBalanceInformationsOVH {
  /** The number of equivalement remaining french faxs */
  readonly faxs?: number;
  /** Total balance available in points */
  readonly points?: number;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;


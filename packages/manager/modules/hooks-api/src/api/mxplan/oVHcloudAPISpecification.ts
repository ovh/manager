/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  EmailMxplanAccountAliasOVH,
  EmailMxplanAccountCapabilitiesOVH,
  EmailMxplanAccountDiagnosisOVH,
  EmailMxplanAccountFullAccessOVH,
  EmailMxplanAccountOVH,
  EmailMxplanAccountSendAsOVH,
  EmailMxplanAccountSendOnBehalfToOVH,
  EmailMxplanDomainOVH,
  EmailMxplanExternalContactOVH,
  EmailMxplanServerOVH,
  EmailMxplanServiceOVH,
  EmailMxplanServiceWithIAMOVH,
  EmailProDisclaimerAttributeEnumOVH,
  EmailProDisclaimerOVH,
  EmailProTaskOVH,
  GetEmailMxplanParams,
  GetEmailMxplanServiceAccountParams,
  GetEmailMxplanServiceDomainParams,
  GetEmailMxplanServiceExternalContactParams,
  PostEmailMxplanServiceAccountEmailAliasBody,
  PostEmailMxplanServiceAccountEmailChangePasswordBody,
  PostEmailMxplanServiceAccountEmailDiagnosticBody,
  PostEmailMxplanServiceAccountEmailFullAccessBody,
  PostEmailMxplanServiceAccountEmailSendAsBody,
  PostEmailMxplanServiceAccountEmailSendOnBehalfToBody,
  PostEmailMxplanServiceDomainDomainNameDisclaimerBody,
  PostEmailMxplanServiceExternalContactBody
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getEmailMxplan = (
    params?: GetEmailMxplanParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/mxplan`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailMxplanQueryKey = (params?: GetEmailMxplanParams,) => {
    return [`/email/mxplan`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailMxplanQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplan>>, TError = unknown>(params?: GetEmailMxplanParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplan>>> = ({ signal }) => getEmailMxplan(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplan>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplan>>>
export type GetEmailMxplanQueryError = unknown


export function useGetEmailMxplan<TData = Awaited<ReturnType<typeof getEmailMxplan>>, TError = unknown>(
 params: undefined |  GetEmailMxplanParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplan>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplan<TData = Awaited<ReturnType<typeof getEmailMxplan>>, TError = unknown>(
 params?: GetEmailMxplanParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplan>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplan<TData = Awaited<ReturnType<typeof getEmailMxplan>>, TError = unknown>(
 params?: GetEmailMxplanParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetEmailMxplan<TData = Awaited<ReturnType<typeof getEmailMxplan>>, TError = unknown>(
 params?: GetEmailMxplanParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailMxplanService = (
    service: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailMxplanServiceWithIAMOVH>(
      {url: `/email/mxplan/${service}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceQueryKey = (service: string,) => {
    return [`/email/mxplan/${service}`] as const;
    }

    
export const getGetEmailMxplanServiceQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanService>>, TError = unknown>(service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceQueryKey(service);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanService>>> = ({ signal }) => getEmailMxplanService(service, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanService>>>
export type GetEmailMxplanServiceQueryError = unknown


export function useGetEmailMxplanService<TData = Awaited<ReturnType<typeof getEmailMxplanService>>, TError = unknown>(
 service: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanService<TData = Awaited<ReturnType<typeof getEmailMxplanService>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanService<TData = Awaited<ReturnType<typeof getEmailMxplanService>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanService<TData = Awaited<ReturnType<typeof getEmailMxplanService>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceQueryOptions(service,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailMxplanService = (
    service: string,
    emailMxplanServiceOVH: NonReadonly<EmailMxplanServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/mxplan/${service}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailMxplanServiceOVH
    },
      options);
    }
  


export const getPutEmailMxplanServiceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanService>>, TError,{service: string;data: NonReadonly<EmailMxplanServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanService>>, TError,{service: string;data: NonReadonly<EmailMxplanServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailMxplanService>>, {service: string;data: NonReadonly<EmailMxplanServiceOVH>}> = (props) => {
          const {service,data} = props ?? {};

          return  putEmailMxplanService(service,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailMxplanServiceMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailMxplanService>>>
    export type PutEmailMxplanServiceMutationBody = NonReadonly<EmailMxplanServiceOVH>
    export type PutEmailMxplanServiceMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailMxplanService = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanService>>, TError,{service: string;data: NonReadonly<EmailMxplanServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailMxplanService>>,
        TError,
        {service: string;data: NonReadonly<EmailMxplanServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailMxplanServiceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Accounts associated to this mxplan service
 */
export const getEmailMxplanServiceAccount = (
    service: string,
    params?: GetEmailMxplanServiceAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/mxplan/${service}/account`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountQueryKey = (service: string,
    params?: GetEmailMxplanServiceAccountParams,) => {
    return [`/email/mxplan/${service}/account`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailMxplanServiceAccountQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>, TError = unknown>(service: string,
    params?: GetEmailMxplanServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountQueryKey(service,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>> = ({ signal }) => getEmailMxplanServiceAccount(service,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>>
export type GetEmailMxplanServiceAccountQueryError = unknown


export function useGetEmailMxplanServiceAccount<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>, TError = unknown>(
 service: string,
    params: undefined |  GetEmailMxplanServiceAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccount<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>, TError = unknown>(
 service: string,
    params?: GetEmailMxplanServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccount<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>, TError = unknown>(
 service: string,
    params?: GetEmailMxplanServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Accounts associated to this mxplan service
 */

export function useGetEmailMxplanServiceAccount<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>, TError = unknown>(
 service: string,
    params?: GetEmailMxplanServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountQueryOptions(service,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete existing mailbox in mxplan server
 */
export const deleteEmailMxplanServiceAccountEmail = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/account/${email}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailMxplanServiceAccountEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmail>>, TError,{service: string;email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmail>>, TError,{service: string;email: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmail>>, {service: string;email: string}> = (props) => {
          const {service,email} = props ?? {};

          return  deleteEmailMxplanServiceAccountEmail(service,email,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailMxplanServiceAccountEmailMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmail>>>
    
    export type DeleteEmailMxplanServiceAccountEmailMutationError = unknown

    /**
 * @summary Delete existing mailbox in mxplan server
 */
export const useDeleteEmailMxplanServiceAccountEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmail>>, TError,{service: string;email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmail>>,
        TError,
        {service: string;email: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailMxplanServiceAccountEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailMxplanServiceAccountEmail = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailMxplanAccountOVH>(
      {url: `/email/mxplan/${service}/account/${email}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailQueryKey = (service: string,
    email: string,) => {
    return [`/email/mxplan/${service}/account/${email}`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>> = ({ signal }) => getEmailMxplanServiceAccountEmail(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>>
export type GetEmailMxplanServiceAccountEmailQueryError = unknown


export function useGetEmailMxplanServiceAccountEmail<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmail<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmail<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanServiceAccountEmail<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailMxplanServiceAccountEmail = (
    service: string,
    email: string,
    emailMxplanAccountOVH: NonReadonly<EmailMxplanAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/mxplan/${service}/account/${email}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailMxplanAccountOVH
    },
      options);
    }
  


export const getPutEmailMxplanServiceAccountEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanServiceAccountEmail>>, TError,{service: string;email: string;data: NonReadonly<EmailMxplanAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanServiceAccountEmail>>, TError,{service: string;email: string;data: NonReadonly<EmailMxplanAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailMxplanServiceAccountEmail>>, {service: string;email: string;data: NonReadonly<EmailMxplanAccountOVH>}> = (props) => {
          const {service,email,data} = props ?? {};

          return  putEmailMxplanServiceAccountEmail(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailMxplanServiceAccountEmailMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailMxplanServiceAccountEmail>>>
    export type PutEmailMxplanServiceAccountEmailMutationBody = NonReadonly<EmailMxplanAccountOVH>
    export type PutEmailMxplanServiceAccountEmailMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailMxplanServiceAccountEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanServiceAccountEmail>>, TError,{service: string;email: string;data: NonReadonly<EmailMxplanAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailMxplanServiceAccountEmail>>,
        TError,
        {service: string;email: string;data: NonReadonly<EmailMxplanAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailMxplanServiceAccountEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Aliases associated to this mailbox
 */
export const getEmailMxplanServiceAccountEmailAlias = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/mxplan/${service}/account/${email}/alias`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailAliasQueryKey = (service: string,
    email: string,) => {
    return [`/email/mxplan/${service}/account/${email}/alias`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailAliasQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailAliasQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>> = ({ signal }) => getEmailMxplanServiceAccountEmailAlias(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>>
export type GetEmailMxplanServiceAccountEmailAliasQueryError = unknown


export function useGetEmailMxplanServiceAccountEmailAlias<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailAlias<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailAlias<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Aliases associated to this mailbox
 */

export function useGetEmailMxplanServiceAccountEmailAlias<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailAliasQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new alias
 */
export const postEmailMxplanServiceAccountEmailAlias = (
    service: string,
    email: string,
    postEmailMxplanServiceAccountEmailAliasBody: PostEmailMxplanServiceAccountEmailAliasBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/account/${email}/alias`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailMxplanServiceAccountEmailAliasBody, signal
    },
      options);
    }
  


export const getPostEmailMxplanServiceAccountEmailAliasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailAlias>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailAliasBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailAlias>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailAliasBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailAlias>>, {service: string;email: string;data: PostEmailMxplanServiceAccountEmailAliasBody}> = (props) => {
          const {service,email,data} = props ?? {};

          return  postEmailMxplanServiceAccountEmailAlias(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailMxplanServiceAccountEmailAliasMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailAlias>>>
    export type PostEmailMxplanServiceAccountEmailAliasMutationBody = PostEmailMxplanServiceAccountEmailAliasBody
    export type PostEmailMxplanServiceAccountEmailAliasMutationError = unknown

    /**
 * @summary Create new alias
 */
export const usePostEmailMxplanServiceAccountEmailAlias = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailAlias>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailAliasBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailAlias>>,
        TError,
        {service: string;email: string;data: PostEmailMxplanServiceAccountEmailAliasBody},
        TContext
      > => {

      const mutationOptions = getPostEmailMxplanServiceAccountEmailAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing alias
 */
export const deleteEmailMxplanServiceAccountEmailAliasAlias = (
    service: string,
    email: string,
    alias: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/account/${email}/alias/${alias}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailMxplanServiceAccountEmailAliasAliasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailAliasAlias>>, TError,{service: string;email: string;alias: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailAliasAlias>>, TError,{service: string;email: string;alias: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailAliasAlias>>, {service: string;email: string;alias: string}> = (props) => {
          const {service,email,alias} = props ?? {};

          return  deleteEmailMxplanServiceAccountEmailAliasAlias(service,email,alias,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailMxplanServiceAccountEmailAliasAliasMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailAliasAlias>>>
    
    export type DeleteEmailMxplanServiceAccountEmailAliasAliasMutationError = unknown

    /**
 * @summary Delete existing alias
 */
export const useDeleteEmailMxplanServiceAccountEmailAliasAlias = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailAliasAlias>>, TError,{service: string;email: string;alias: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailAliasAlias>>,
        TError,
        {service: string;email: string;alias: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailMxplanServiceAccountEmailAliasAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailMxplanServiceAccountEmailAliasAlias = (
    service: string,
    email: string,
    alias: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailMxplanAccountAliasOVH>(
      {url: `/email/mxplan/${service}/account/${email}/alias/${alias}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailAliasAliasQueryKey = (service: string,
    email: string,
    alias: string,) => {
    return [`/email/mxplan/${service}/account/${email}/alias/${alias}`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailAliasAliasQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>, TError = unknown>(service: string,
    email: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailAliasAliasQueryKey(service,email,alias);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>> = ({ signal }) => getEmailMxplanServiceAccountEmailAliasAlias(service,email,alias, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email && alias), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailAliasAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>>
export type GetEmailMxplanServiceAccountEmailAliasAliasQueryError = unknown


export function useGetEmailMxplanServiceAccountEmailAliasAlias<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>, TError = unknown>(
 service: string,
    email: string,
    alias: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailAliasAlias<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>, TError = unknown>(
 service: string,
    email: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailAliasAlias<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>, TError = unknown>(
 service: string,
    email: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanServiceAccountEmailAliasAlias<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>, TError = unknown>(
 service: string,
    email: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailAliasAliasQueryOptions(service,email,alias,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get available capabilities for this account
 */
export const getEmailMxplanServiceAccountEmailCapabilities = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailMxplanAccountCapabilitiesOVH>(
      {url: `/email/mxplan/${service}/account/${email}/capabilities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailCapabilitiesQueryKey = (service: string,
    email: string,) => {
    return [`/email/mxplan/${service}/account/${email}/capabilities`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailCapabilitiesQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>> = ({ signal }) => getEmailMxplanServiceAccountEmailCapabilities(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>>
export type GetEmailMxplanServiceAccountEmailCapabilitiesQueryError = unknown


export function useGetEmailMxplanServiceAccountEmailCapabilities<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailCapabilities<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailCapabilities<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get available capabilities for this account
 */

export function useGetEmailMxplanServiceAccountEmailCapabilities<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailCapabilitiesQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change mailbox password
 */
export const postEmailMxplanServiceAccountEmailChangePassword = (
    service: string,
    email: string,
    postEmailMxplanServiceAccountEmailChangePasswordBody: PostEmailMxplanServiceAccountEmailChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/account/${email}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailMxplanServiceAccountEmailChangePasswordBody, signal
    },
      options);
    }
  


export const getPostEmailMxplanServiceAccountEmailChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailChangePassword>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailChangePassword>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailChangePassword>>, {service: string;email: string;data: PostEmailMxplanServiceAccountEmailChangePasswordBody}> = (props) => {
          const {service,email,data} = props ?? {};

          return  postEmailMxplanServiceAccountEmailChangePassword(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailMxplanServiceAccountEmailChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailChangePassword>>>
    export type PostEmailMxplanServiceAccountEmailChangePasswordMutationBody = PostEmailMxplanServiceAccountEmailChangePasswordBody
    export type PostEmailMxplanServiceAccountEmailChangePasswordMutationError = unknown

    /**
 * @summary Change mailbox password
 */
export const usePostEmailMxplanServiceAccountEmailChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailChangePassword>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailChangePassword>>,
        TError,
        {service: string;email: string;data: PostEmailMxplanServiceAccountEmailChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostEmailMxplanServiceAccountEmailChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailMxplanServiceAccountEmailDiagnostic = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailMxplanAccountDiagnosisOVH>(
      {url: `/email/mxplan/${service}/account/${email}/diagnostic`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailDiagnosticQueryKey = (service: string,
    email: string,) => {
    return [`/email/mxplan/${service}/account/${email}/diagnostic`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailDiagnosticQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailDiagnosticQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>> = ({ signal }) => getEmailMxplanServiceAccountEmailDiagnostic(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailDiagnosticQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>>
export type GetEmailMxplanServiceAccountEmailDiagnosticQueryError = unknown


export function useGetEmailMxplanServiceAccountEmailDiagnostic<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailDiagnostic<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailDiagnostic<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanServiceAccountEmailDiagnostic<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailDiagnostic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailDiagnosticQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new diagnosis request
 */
export const postEmailMxplanServiceAccountEmailDiagnostic = (
    service: string,
    email: string,
    postEmailMxplanServiceAccountEmailDiagnosticBody: PostEmailMxplanServiceAccountEmailDiagnosticBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/account/${email}/diagnostic`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailMxplanServiceAccountEmailDiagnosticBody, signal
    },
      options);
    }
  


export const getPostEmailMxplanServiceAccountEmailDiagnosticMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailDiagnostic>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailDiagnosticBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailDiagnostic>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailDiagnosticBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailDiagnostic>>, {service: string;email: string;data: PostEmailMxplanServiceAccountEmailDiagnosticBody}> = (props) => {
          const {service,email,data} = props ?? {};

          return  postEmailMxplanServiceAccountEmailDiagnostic(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailMxplanServiceAccountEmailDiagnosticMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailDiagnostic>>>
    export type PostEmailMxplanServiceAccountEmailDiagnosticMutationBody = PostEmailMxplanServiceAccountEmailDiagnosticBody
    export type PostEmailMxplanServiceAccountEmailDiagnosticMutationError = unknown

    /**
 * @summary Create new diagnosis request
 */
export const usePostEmailMxplanServiceAccountEmailDiagnostic = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailDiagnostic>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailDiagnosticBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailDiagnostic>>,
        TError,
        {service: string;email: string;data: PostEmailMxplanServiceAccountEmailDiagnosticBody},
        TContext
      > => {

      const mutationOptions = getPostEmailMxplanServiceAccountEmailDiagnosticMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Full access granted users for this mailbox
 */
export const getEmailMxplanServiceAccountEmailFullAccess = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/mxplan/${service}/account/${email}/fullAccess`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailFullAccessQueryKey = (service: string,
    email: string,) => {
    return [`/email/mxplan/${service}/account/${email}/fullAccess`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailFullAccessQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailFullAccessQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>> = ({ signal }) => getEmailMxplanServiceAccountEmailFullAccess(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailFullAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>>
export type GetEmailMxplanServiceAccountEmailFullAccessQueryError = unknown


export function useGetEmailMxplanServiceAccountEmailFullAccess<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailFullAccess<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailFullAccess<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Full access granted users for this mailbox
 */

export function useGetEmailMxplanServiceAccountEmailFullAccess<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailFullAccessQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow full access to a user
 */
export const postEmailMxplanServiceAccountEmailFullAccess = (
    service: string,
    email: string,
    postEmailMxplanServiceAccountEmailFullAccessBody: PostEmailMxplanServiceAccountEmailFullAccessBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/account/${email}/fullAccess`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailMxplanServiceAccountEmailFullAccessBody, signal
    },
      options);
    }
  


export const getPostEmailMxplanServiceAccountEmailFullAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailFullAccess>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailFullAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailFullAccess>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailFullAccessBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailFullAccess>>, {service: string;email: string;data: PostEmailMxplanServiceAccountEmailFullAccessBody}> = (props) => {
          const {service,email,data} = props ?? {};

          return  postEmailMxplanServiceAccountEmailFullAccess(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailMxplanServiceAccountEmailFullAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailFullAccess>>>
    export type PostEmailMxplanServiceAccountEmailFullAccessMutationBody = PostEmailMxplanServiceAccountEmailFullAccessBody
    export type PostEmailMxplanServiceAccountEmailFullAccessMutationError = unknown

    /**
 * @summary Allow full access to a user
 */
export const usePostEmailMxplanServiceAccountEmailFullAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailFullAccess>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailFullAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailFullAccess>>,
        TError,
        {service: string;email: string;data: PostEmailMxplanServiceAccountEmailFullAccessBody},
        TContext
      > => {

      const mutationOptions = getPostEmailMxplanServiceAccountEmailFullAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Revoke full access
 */
export const deleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountId = (
    service: string,
    email: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/account/${email}/fullAccess/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, {service: string;email: string;allowedAccountId: number}> = (props) => {
          const {service,email,allowedAccountId} = props ?? {};

          return  deleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountId(service,email,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>>
    
    export type DeleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdMutationError = unknown

    /**
 * @summary Revoke full access
 */
export const useDeleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>,
        TError,
        {service: string;email: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId = (
    service: string,
    email: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailMxplanAccountFullAccessOVH>(
      {url: `/email/mxplan/${service}/account/${email}/fullAccess/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdQueryKey = (service: string,
    email: string,
    allowedAccountId: number,) => {
    return [`/email/mxplan/${service}/account/${email}/fullAccess/${allowedAccountId}`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError = unknown>(service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdQueryKey(service,email,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>> = ({ signal }) => getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId(service,email,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>>
export type GetEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdQueryError = unknown


export function useGetEmailMxplanServiceAccountEmailFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanServiceAccountEmailFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailFullAccessAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdQueryOptions(service,email,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Send as granted users for this mailbox
 */
export const getEmailMxplanServiceAccountEmailSendAs = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/mxplan/${service}/account/${email}/sendAs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailSendAsQueryKey = (service: string,
    email: string,) => {
    return [`/email/mxplan/${service}/account/${email}/sendAs`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailSendAsQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailSendAsQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>> = ({ signal }) => getEmailMxplanServiceAccountEmailSendAs(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailSendAsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>>
export type GetEmailMxplanServiceAccountEmailSendAsQueryError = unknown


export function useGetEmailMxplanServiceAccountEmailSendAs<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailSendAs<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailSendAs<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Send as granted users for this mailbox
 */

export function useGetEmailMxplanServiceAccountEmailSendAs<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailSendAsQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow another user to send mails from this mailbox
 */
export const postEmailMxplanServiceAccountEmailSendAs = (
    service: string,
    email: string,
    postEmailMxplanServiceAccountEmailSendAsBody: PostEmailMxplanServiceAccountEmailSendAsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/account/${email}/sendAs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailMxplanServiceAccountEmailSendAsBody, signal
    },
      options);
    }
  


export const getPostEmailMxplanServiceAccountEmailSendAsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailSendAs>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailSendAsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailSendAs>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailSendAsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailSendAs>>, {service: string;email: string;data: PostEmailMxplanServiceAccountEmailSendAsBody}> = (props) => {
          const {service,email,data} = props ?? {};

          return  postEmailMxplanServiceAccountEmailSendAs(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailMxplanServiceAccountEmailSendAsMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailSendAs>>>
    export type PostEmailMxplanServiceAccountEmailSendAsMutationBody = PostEmailMxplanServiceAccountEmailSendAsBody
    export type PostEmailMxplanServiceAccountEmailSendAsMutationError = unknown

    /**
 * @summary Allow another user to send mails from this mailbox
 */
export const usePostEmailMxplanServiceAccountEmailSendAs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailSendAs>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailSendAsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailSendAs>>,
        TError,
        {service: string;email: string;data: PostEmailMxplanServiceAccountEmailSendAsBody},
        TContext
      > => {

      const mutationOptions = getPostEmailMxplanServiceAccountEmailSendAsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete allowed user for sendAs
 */
export const deleteEmailMxplanServiceAccountEmailSendAsAllowedAccountId = (
    service: string,
    email: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/account/${email}/sendAs/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailMxplanServiceAccountEmailSendAsAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, {service: string;email: string;allowedAccountId: number}> = (props) => {
          const {service,email,allowedAccountId} = props ?? {};

          return  deleteEmailMxplanServiceAccountEmailSendAsAllowedAccountId(service,email,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailMxplanServiceAccountEmailSendAsAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>>
    
    export type DeleteEmailMxplanServiceAccountEmailSendAsAllowedAccountIdMutationError = unknown

    /**
 * @summary Delete allowed user for sendAs
 */
export const useDeleteEmailMxplanServiceAccountEmailSendAsAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>,
        TError,
        {service: string;email: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailMxplanServiceAccountEmailSendAsAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailMxplanServiceAccountEmailSendAsAllowedAccountId = (
    service: string,
    email: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailMxplanAccountSendAsOVH>(
      {url: `/email/mxplan/${service}/account/${email}/sendAs/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailSendAsAllowedAccountIdQueryKey = (service: string,
    email: string,
    allowedAccountId: number,) => {
    return [`/email/mxplan/${service}/account/${email}/sendAs/${allowedAccountId}`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailSendAsAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError = unknown>(service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailSendAsAllowedAccountIdQueryKey(service,email,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>> = ({ signal }) => getEmailMxplanServiceAccountEmailSendAsAllowedAccountId(service,email,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailSendAsAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>>
export type GetEmailMxplanServiceAccountEmailSendAsAllowedAccountIdQueryError = unknown


export function useGetEmailMxplanServiceAccountEmailSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanServiceAccountEmailSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailSendAsAllowedAccountIdQueryOptions(service,email,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary SendOnBehalfTo granted users for this mailbox
 */
export const getEmailMxplanServiceAccountEmailSendOnBehalfTo = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/mxplan/${service}/account/${email}/sendOnBehalfTo`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailSendOnBehalfToQueryKey = (service: string,
    email: string,) => {
    return [`/email/mxplan/${service}/account/${email}/sendOnBehalfTo`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailSendOnBehalfToQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailSendOnBehalfToQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>> = ({ signal }) => getEmailMxplanServiceAccountEmailSendOnBehalfTo(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailSendOnBehalfToQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>>
export type GetEmailMxplanServiceAccountEmailSendOnBehalfToQueryError = unknown


export function useGetEmailMxplanServiceAccountEmailSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary SendOnBehalfTo granted users for this mailbox
 */

export function useGetEmailMxplanServiceAccountEmailSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailSendOnBehalfToQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow another user to Send On Behalf To mails from this mailbox
 */
export const postEmailMxplanServiceAccountEmailSendOnBehalfTo = (
    service: string,
    email: string,
    postEmailMxplanServiceAccountEmailSendOnBehalfToBody: PostEmailMxplanServiceAccountEmailSendOnBehalfToBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/account/${email}/sendOnBehalfTo`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailMxplanServiceAccountEmailSendOnBehalfToBody, signal
    },
      options);
    }
  


export const getPostEmailMxplanServiceAccountEmailSendOnBehalfToMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailSendOnBehalfToBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailSendOnBehalfToBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailSendOnBehalfTo>>, {service: string;email: string;data: PostEmailMxplanServiceAccountEmailSendOnBehalfToBody}> = (props) => {
          const {service,email,data} = props ?? {};

          return  postEmailMxplanServiceAccountEmailSendOnBehalfTo(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailMxplanServiceAccountEmailSendOnBehalfToMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailSendOnBehalfTo>>>
    export type PostEmailMxplanServiceAccountEmailSendOnBehalfToMutationBody = PostEmailMxplanServiceAccountEmailSendOnBehalfToBody
    export type PostEmailMxplanServiceAccountEmailSendOnBehalfToMutationError = unknown

    /**
 * @summary Allow another user to Send On Behalf To mails from this mailbox
 */
export const usePostEmailMxplanServiceAccountEmailSendOnBehalfTo = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailSendOnBehalfTo>>, TError,{service: string;email: string;data: PostEmailMxplanServiceAccountEmailSendOnBehalfToBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailMxplanServiceAccountEmailSendOnBehalfTo>>,
        TError,
        {service: string;email: string;data: PostEmailMxplanServiceAccountEmailSendOnBehalfToBody},
        TContext
      > => {

      const mutationOptions = getPostEmailMxplanServiceAccountEmailSendOnBehalfToMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete allowed user for SendOnBehalfTo
 */
export const deleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId = (
    service: string,
    email: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/account/${email}/sendOnBehalfTo/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, {service: string;email: string;allowedAccountId: number}> = (props) => {
          const {service,email,allowedAccountId} = props ?? {};

          return  deleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId(service,email,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>>
    
    export type DeleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdMutationError = unknown

    /**
 * @summary Delete allowed user for SendOnBehalfTo
 */
export const useDeleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>,
        TError,
        {service: string;email: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId = (
    service: string,
    email: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailMxplanAccountSendOnBehalfToOVH>(
      {url: `/email/mxplan/${service}/account/${email}/sendOnBehalfTo/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdQueryKey = (service: string,
    email: string,
    allowedAccountId: number,) => {
    return [`/email/mxplan/${service}/account/${email}/sendOnBehalfTo/${allowedAccountId}`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError = unknown>(service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdQueryKey(service,email,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>> = ({ signal }) => getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId(service,email,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>>
export type GetEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdQueryError = unknown


export function useGetEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdQueryOptions(service,email,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Pending task for this mailbox
 */
export const getEmailMxplanServiceAccountEmailTask = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/mxplan/${service}/account/${email}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailTaskQueryKey = (service: string,
    email: string,) => {
    return [`/email/mxplan/${service}/account/${email}/task`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailTaskQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailTaskQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>> = ({ signal }) => getEmailMxplanServiceAccountEmailTask(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>>
export type GetEmailMxplanServiceAccountEmailTaskQueryError = unknown


export function useGetEmailMxplanServiceAccountEmailTask<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailTask<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailTask<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Pending task for this mailbox
 */

export function useGetEmailMxplanServiceAccountEmailTask<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailTaskQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailMxplanServiceAccountEmailTaskId = (
    service: string,
    email: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/account/${email}/task/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceAccountEmailTaskIdQueryKey = (service: string,
    email: string,
    id: number,) => {
    return [`/email/mxplan/${service}/account/${email}/task/${id}`] as const;
    }

    
export const getGetEmailMxplanServiceAccountEmailTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>, TError = unknown>(service: string,
    email: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceAccountEmailTaskIdQueryKey(service,email,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>> = ({ signal }) => getEmailMxplanServiceAccountEmailTaskId(service,email,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceAccountEmailTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>>
export type GetEmailMxplanServiceAccountEmailTaskIdQueryError = unknown


export function useGetEmailMxplanServiceAccountEmailTaskId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>, TError = unknown>(
 service: string,
    email: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailTaskId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>, TError = unknown>(
 service: string,
    email: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceAccountEmailTaskId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>, TError = unknown>(
 service: string,
    email: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanServiceAccountEmailTaskId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>, TError = unknown>(
 service: string,
    email: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceAccountEmailTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceAccountEmailTaskIdQueryOptions(service,email,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Domains associated to this service
 */
export const getEmailMxplanServiceDomain = (
    service: string,
    params?: GetEmailMxplanServiceDomainParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/mxplan/${service}/domain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceDomainQueryKey = (service: string,
    params?: GetEmailMxplanServiceDomainParams,) => {
    return [`/email/mxplan/${service}/domain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailMxplanServiceDomainQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>, TError = unknown>(service: string,
    params?: GetEmailMxplanServiceDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceDomainQueryKey(service,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>> = ({ signal }) => getEmailMxplanServiceDomain(service,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>>
export type GetEmailMxplanServiceDomainQueryError = unknown


export function useGetEmailMxplanServiceDomain<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>, TError = unknown>(
 service: string,
    params: undefined |  GetEmailMxplanServiceDomainParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceDomain<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>, TError = unknown>(
 service: string,
    params?: GetEmailMxplanServiceDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceDomain<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>, TError = unknown>(
 service: string,
    params?: GetEmailMxplanServiceDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Domains associated to this service
 */

export function useGetEmailMxplanServiceDomain<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>, TError = unknown>(
 service: string,
    params?: GetEmailMxplanServiceDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceDomainQueryOptions(service,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailMxplanServiceDomainDomainName = (
    service: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailMxplanDomainOVH>(
      {url: `/email/mxplan/${service}/domain/${domainName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceDomainDomainNameQueryKey = (service: string,
    domainName: string,) => {
    return [`/email/mxplan/${service}/domain/${domainName}`] as const;
    }

    
export const getGetEmailMxplanServiceDomainDomainNameQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>, TError = unknown>(service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceDomainDomainNameQueryKey(service,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>> = ({ signal }) => getEmailMxplanServiceDomainDomainName(service,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceDomainDomainNameQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>>
export type GetEmailMxplanServiceDomainDomainNameQueryError = unknown


export function useGetEmailMxplanServiceDomainDomainName<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>, TError = unknown>(
 service: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceDomainDomainName<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceDomainDomainName<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanServiceDomainDomainName<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceDomainDomainNameQueryOptions(service,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailMxplanServiceDomainDomainName = (
    service: string,
    domainName: string,
    emailMxplanDomainOVH: NonReadonly<EmailMxplanDomainOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/mxplan/${service}/domain/${domainName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailMxplanDomainOVH
    },
      options);
    }
  


export const getPutEmailMxplanServiceDomainDomainNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanServiceDomainDomainName>>, TError,{service: string;domainName: string;data: NonReadonly<EmailMxplanDomainOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanServiceDomainDomainName>>, TError,{service: string;domainName: string;data: NonReadonly<EmailMxplanDomainOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailMxplanServiceDomainDomainName>>, {service: string;domainName: string;data: NonReadonly<EmailMxplanDomainOVH>}> = (props) => {
          const {service,domainName,data} = props ?? {};

          return  putEmailMxplanServiceDomainDomainName(service,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailMxplanServiceDomainDomainNameMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailMxplanServiceDomainDomainName>>>
    export type PutEmailMxplanServiceDomainDomainNameMutationBody = NonReadonly<EmailMxplanDomainOVH>
    export type PutEmailMxplanServiceDomainDomainNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailMxplanServiceDomainDomainName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanServiceDomainDomainName>>, TError,{service: string;domainName: string;data: NonReadonly<EmailMxplanDomainOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailMxplanServiceDomainDomainName>>,
        TError,
        {service: string;domainName: string;data: NonReadonly<EmailMxplanDomainOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailMxplanServiceDomainDomainNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing organization disclaimer
 */
export const deleteEmailMxplanServiceDomainDomainNameDisclaimer = (
    service: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/domain/${domainName}/disclaimer`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailMxplanServiceDomainDomainNameDisclaimerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailMxplanServiceDomainDomainNameDisclaimer>>, {service: string;domainName: string}> = (props) => {
          const {service,domainName} = props ?? {};

          return  deleteEmailMxplanServiceDomainDomainNameDisclaimer(service,domainName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailMxplanServiceDomainDomainNameDisclaimerMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailMxplanServiceDomainDomainNameDisclaimer>>>
    
    export type DeleteEmailMxplanServiceDomainDomainNameDisclaimerMutationError = unknown

    /**
 * @summary Delete existing organization disclaimer
 */
export const useDeleteEmailMxplanServiceDomainDomainNameDisclaimer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailMxplanServiceDomainDomainNameDisclaimer>>,
        TError,
        {service: string;domainName: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailMxplanServiceDomainDomainNameDisclaimerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailMxplanServiceDomainDomainNameDisclaimer = (
    service: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProDisclaimerOVH>(
      {url: `/email/mxplan/${service}/domain/${domainName}/disclaimer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceDomainDomainNameDisclaimerQueryKey = (service: string,
    domainName: string,) => {
    return [`/email/mxplan/${service}/domain/${domainName}/disclaimer`] as const;
    }

    
export const getGetEmailMxplanServiceDomainDomainNameDisclaimerQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>, TError = unknown>(service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceDomainDomainNameDisclaimerQueryKey(service,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>> = ({ signal }) => getEmailMxplanServiceDomainDomainNameDisclaimer(service,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceDomainDomainNameDisclaimerQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>>
export type GetEmailMxplanServiceDomainDomainNameDisclaimerQueryError = unknown


export function useGetEmailMxplanServiceDomainDomainNameDisclaimer<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>, TError = unknown>(
 service: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceDomainDomainNameDisclaimer<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceDomainDomainNameDisclaimer<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanServiceDomainDomainNameDisclaimer<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceDomainDomainNameDisclaimerQueryOptions(service,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create organization disclaimer of each email
 */
export const postEmailMxplanServiceDomainDomainNameDisclaimer = (
    service: string,
    domainName: string,
    postEmailMxplanServiceDomainDomainNameDisclaimerBody: PostEmailMxplanServiceDomainDomainNameDisclaimerBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/domain/${domainName}/disclaimer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailMxplanServiceDomainDomainNameDisclaimerBody, signal
    },
      options);
    }
  


export const getPostEmailMxplanServiceDomainDomainNameDisclaimerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string;data: PostEmailMxplanServiceDomainDomainNameDisclaimerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string;data: PostEmailMxplanServiceDomainDomainNameDisclaimerBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailMxplanServiceDomainDomainNameDisclaimer>>, {service: string;domainName: string;data: PostEmailMxplanServiceDomainDomainNameDisclaimerBody}> = (props) => {
          const {service,domainName,data} = props ?? {};

          return  postEmailMxplanServiceDomainDomainNameDisclaimer(service,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailMxplanServiceDomainDomainNameDisclaimerMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailMxplanServiceDomainDomainNameDisclaimer>>>
    export type PostEmailMxplanServiceDomainDomainNameDisclaimerMutationBody = PostEmailMxplanServiceDomainDomainNameDisclaimerBody
    export type PostEmailMxplanServiceDomainDomainNameDisclaimerMutationError = unknown

    /**
 * @summary Create organization disclaimer of each email
 */
export const usePostEmailMxplanServiceDomainDomainNameDisclaimer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string;data: PostEmailMxplanServiceDomainDomainNameDisclaimerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailMxplanServiceDomainDomainNameDisclaimer>>,
        TError,
        {service: string;domainName: string;data: PostEmailMxplanServiceDomainDomainNameDisclaimerBody},
        TContext
      > => {

      const mutationOptions = getPostEmailMxplanServiceDomainDomainNameDisclaimerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Alter this object properties
 */
export const putEmailMxplanServiceDomainDomainNameDisclaimer = (
    service: string,
    domainName: string,
    emailProDisclaimerOVH: NonReadonly<EmailProDisclaimerOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/mxplan/${service}/domain/${domainName}/disclaimer`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailProDisclaimerOVH
    },
      options);
    }
  


export const getPutEmailMxplanServiceDomainDomainNameDisclaimerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string;data: NonReadonly<EmailProDisclaimerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string;data: NonReadonly<EmailProDisclaimerOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailMxplanServiceDomainDomainNameDisclaimer>>, {service: string;domainName: string;data: NonReadonly<EmailProDisclaimerOVH>}> = (props) => {
          const {service,domainName,data} = props ?? {};

          return  putEmailMxplanServiceDomainDomainNameDisclaimer(service,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailMxplanServiceDomainDomainNameDisclaimerMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailMxplanServiceDomainDomainNameDisclaimer>>>
    export type PutEmailMxplanServiceDomainDomainNameDisclaimerMutationBody = NonReadonly<EmailProDisclaimerOVH>
    export type PutEmailMxplanServiceDomainDomainNameDisclaimerMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailMxplanServiceDomainDomainNameDisclaimer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string;data: NonReadonly<EmailProDisclaimerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailMxplanServiceDomainDomainNameDisclaimer>>,
        TError,
        {service: string;domainName: string;data: NonReadonly<EmailProDisclaimerOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailMxplanServiceDomainDomainNameDisclaimerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get diclaimer attributes to substitute with Active Directory properties
 */
export const getEmailMxplanServiceDomainDomainNameDisclaimerAttribute = (
    service: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProDisclaimerAttributeEnumOVH[]>(
      {url: `/email/mxplan/${service}/domain/${domainName}/disclaimerAttribute`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceDomainDomainNameDisclaimerAttributeQueryKey = (service: string,
    domainName: string,) => {
    return [`/email/mxplan/${service}/domain/${domainName}/disclaimerAttribute`] as const;
    }

    
export const getGetEmailMxplanServiceDomainDomainNameDisclaimerAttributeQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceDomainDomainNameDisclaimerAttributeQueryKey(service,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>> = ({ signal }) => getEmailMxplanServiceDomainDomainNameDisclaimerAttribute(service,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceDomainDomainNameDisclaimerAttributeQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>>
export type GetEmailMxplanServiceDomainDomainNameDisclaimerAttributeQueryError = unknown


export function useGetEmailMxplanServiceDomainDomainNameDisclaimerAttribute<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(
 service: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceDomainDomainNameDisclaimerAttribute<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceDomainDomainNameDisclaimerAttribute<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get diclaimer attributes to substitute with Active Directory properties
 */

export function useGetEmailMxplanServiceDomainDomainNameDisclaimerAttribute<TData = Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceDomainDomainNameDisclaimerAttributeQueryOptions(service,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary External contacts for this service
 */
export const getEmailMxplanServiceExternalContact = (
    service: string,
    params?: GetEmailMxplanServiceExternalContactParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/mxplan/${service}/externalContact`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceExternalContactQueryKey = (service: string,
    params?: GetEmailMxplanServiceExternalContactParams,) => {
    return [`/email/mxplan/${service}/externalContact`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailMxplanServiceExternalContactQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>, TError = unknown>(service: string,
    params?: GetEmailMxplanServiceExternalContactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceExternalContactQueryKey(service,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>> = ({ signal }) => getEmailMxplanServiceExternalContact(service,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceExternalContactQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>>
export type GetEmailMxplanServiceExternalContactQueryError = unknown


export function useGetEmailMxplanServiceExternalContact<TData = Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>, TError = unknown>(
 service: string,
    params: undefined |  GetEmailMxplanServiceExternalContactParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceExternalContact<TData = Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>, TError = unknown>(
 service: string,
    params?: GetEmailMxplanServiceExternalContactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceExternalContact<TData = Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>, TError = unknown>(
 service: string,
    params?: GetEmailMxplanServiceExternalContactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary External contacts for this service
 */

export function useGetEmailMxplanServiceExternalContact<TData = Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>, TError = unknown>(
 service: string,
    params?: GetEmailMxplanServiceExternalContactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceExternalContactQueryOptions(service,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary create new external contact
 */
export const postEmailMxplanServiceExternalContact = (
    service: string,
    postEmailMxplanServiceExternalContactBody: PostEmailMxplanServiceExternalContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/externalContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailMxplanServiceExternalContactBody, signal
    },
      options);
    }
  


export const getPostEmailMxplanServiceExternalContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceExternalContact>>, TError,{service: string;data: PostEmailMxplanServiceExternalContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceExternalContact>>, TError,{service: string;data: PostEmailMxplanServiceExternalContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailMxplanServiceExternalContact>>, {service: string;data: PostEmailMxplanServiceExternalContactBody}> = (props) => {
          const {service,data} = props ?? {};

          return  postEmailMxplanServiceExternalContact(service,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailMxplanServiceExternalContactMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailMxplanServiceExternalContact>>>
    export type PostEmailMxplanServiceExternalContactMutationBody = PostEmailMxplanServiceExternalContactBody
    export type PostEmailMxplanServiceExternalContactMutationError = unknown

    /**
 * @summary create new external contact
 */
export const usePostEmailMxplanServiceExternalContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceExternalContact>>, TError,{service: string;data: PostEmailMxplanServiceExternalContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailMxplanServiceExternalContact>>,
        TError,
        {service: string;data: PostEmailMxplanServiceExternalContactBody},
        TContext
      > => {

      const mutationOptions = getPostEmailMxplanServiceExternalContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary delete external contact
 */
export const deleteEmailMxplanServiceExternalContactExternalEmailAddress = (
    service: string,
    externalEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/externalContact/${externalEmailAddress}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailMxplanServiceExternalContactExternalEmailAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceExternalContactExternalEmailAddress>>, TError,{service: string;externalEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceExternalContactExternalEmailAddress>>, TError,{service: string;externalEmailAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailMxplanServiceExternalContactExternalEmailAddress>>, {service: string;externalEmailAddress: string}> = (props) => {
          const {service,externalEmailAddress} = props ?? {};

          return  deleteEmailMxplanServiceExternalContactExternalEmailAddress(service,externalEmailAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailMxplanServiceExternalContactExternalEmailAddressMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailMxplanServiceExternalContactExternalEmailAddress>>>
    
    export type DeleteEmailMxplanServiceExternalContactExternalEmailAddressMutationError = unknown

    /**
 * @summary delete external contact
 */
export const useDeleteEmailMxplanServiceExternalContactExternalEmailAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailMxplanServiceExternalContactExternalEmailAddress>>, TError,{service: string;externalEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailMxplanServiceExternalContactExternalEmailAddress>>,
        TError,
        {service: string;externalEmailAddress: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailMxplanServiceExternalContactExternalEmailAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailMxplanServiceExternalContactExternalEmailAddress = (
    service: string,
    externalEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailMxplanExternalContactOVH>(
      {url: `/email/mxplan/${service}/externalContact/${externalEmailAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceExternalContactExternalEmailAddressQueryKey = (service: string,
    externalEmailAddress: string,) => {
    return [`/email/mxplan/${service}/externalContact/${externalEmailAddress}`] as const;
    }

    
export const getGetEmailMxplanServiceExternalContactExternalEmailAddressQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>, TError = unknown>(service: string,
    externalEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceExternalContactExternalEmailAddressQueryKey(service,externalEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>> = ({ signal }) => getEmailMxplanServiceExternalContactExternalEmailAddress(service,externalEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && externalEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceExternalContactExternalEmailAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>>
export type GetEmailMxplanServiceExternalContactExternalEmailAddressQueryError = unknown


export function useGetEmailMxplanServiceExternalContactExternalEmailAddress<TData = Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>, TError = unknown>(
 service: string,
    externalEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceExternalContactExternalEmailAddress<TData = Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>, TError = unknown>(
 service: string,
    externalEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceExternalContactExternalEmailAddress<TData = Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>, TError = unknown>(
 service: string,
    externalEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanServiceExternalContactExternalEmailAddress<TData = Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>, TError = unknown>(
 service: string,
    externalEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceExternalContactExternalEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceExternalContactExternalEmailAddressQueryOptions(service,externalEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailMxplanServiceExternalContactExternalEmailAddress = (
    service: string,
    externalEmailAddress: string,
    emailMxplanExternalContactOVH: NonReadonly<EmailMxplanExternalContactOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/mxplan/${service}/externalContact/${externalEmailAddress}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailMxplanExternalContactOVH
    },
      options);
    }
  


export const getPutEmailMxplanServiceExternalContactExternalEmailAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanServiceExternalContactExternalEmailAddress>>, TError,{service: string;externalEmailAddress: string;data: NonReadonly<EmailMxplanExternalContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanServiceExternalContactExternalEmailAddress>>, TError,{service: string;externalEmailAddress: string;data: NonReadonly<EmailMxplanExternalContactOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailMxplanServiceExternalContactExternalEmailAddress>>, {service: string;externalEmailAddress: string;data: NonReadonly<EmailMxplanExternalContactOVH>}> = (props) => {
          const {service,externalEmailAddress,data} = props ?? {};

          return  putEmailMxplanServiceExternalContactExternalEmailAddress(service,externalEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailMxplanServiceExternalContactExternalEmailAddressMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailMxplanServiceExternalContactExternalEmailAddress>>>
    export type PutEmailMxplanServiceExternalContactExternalEmailAddressMutationBody = NonReadonly<EmailMxplanExternalContactOVH>
    export type PutEmailMxplanServiceExternalContactExternalEmailAddressMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailMxplanServiceExternalContactExternalEmailAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailMxplanServiceExternalContactExternalEmailAddress>>, TError,{service: string;externalEmailAddress: string;data: NonReadonly<EmailMxplanExternalContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailMxplanServiceExternalContactExternalEmailAddress>>,
        TError,
        {service: string;externalEmailAddress: string;data: NonReadonly<EmailMxplanExternalContactOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailMxplanServiceExternalContactExternalEmailAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailMxplanServiceServer = (
    service: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailMxplanServerOVH>(
      {url: `/email/mxplan/${service}/server`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceServerQueryKey = (service: string,) => {
    return [`/email/mxplan/${service}/server`] as const;
    }

    
export const getGetEmailMxplanServiceServerQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceServer>>, TError = unknown>(service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceServerQueryKey(service);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceServer>>> = ({ signal }) => getEmailMxplanServiceServer(service, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceServerQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceServer>>>
export type GetEmailMxplanServiceServerQueryError = unknown


export function useGetEmailMxplanServiceServer<TData = Awaited<ReturnType<typeof getEmailMxplanServiceServer>>, TError = unknown>(
 service: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceServer<TData = Awaited<ReturnType<typeof getEmailMxplanServiceServer>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceServer<TData = Awaited<ReturnType<typeof getEmailMxplanServiceServer>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanServiceServer<TData = Awaited<ReturnType<typeof getEmailMxplanServiceServer>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceServerQueryOptions(service,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Pending actions
 */
export const getEmailMxplanServiceTask = (
    service: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/mxplan/${service}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceTaskQueryKey = (service: string,) => {
    return [`/email/mxplan/${service}/task`] as const;
    }

    
export const getGetEmailMxplanServiceTaskQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceTask>>, TError = unknown>(service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceTaskQueryKey(service);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceTask>>> = ({ signal }) => getEmailMxplanServiceTask(service, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceTask>>>
export type GetEmailMxplanServiceTaskQueryError = unknown


export function useGetEmailMxplanServiceTask<TData = Awaited<ReturnType<typeof getEmailMxplanServiceTask>>, TError = unknown>(
 service: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceTask<TData = Awaited<ReturnType<typeof getEmailMxplanServiceTask>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceTask<TData = Awaited<ReturnType<typeof getEmailMxplanServiceTask>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Pending actions
 */

export function useGetEmailMxplanServiceTask<TData = Awaited<ReturnType<typeof getEmailMxplanServiceTask>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceTaskQueryOptions(service,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailMxplanServiceTaskId = (
    service: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/mxplan/${service}/task/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailMxplanServiceTaskIdQueryKey = (service: string,
    id: number,) => {
    return [`/email/mxplan/${service}/task/${id}`] as const;
    }

    
export const getGetEmailMxplanServiceTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>, TError = unknown>(service: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailMxplanServiceTaskIdQueryKey(service,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>> = ({ signal }) => getEmailMxplanServiceTaskId(service,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailMxplanServiceTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>>
export type GetEmailMxplanServiceTaskIdQueryError = unknown


export function useGetEmailMxplanServiceTaskId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>, TError = unknown>(
 service: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceTaskId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>, TError = unknown>(
 service: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailMxplanServiceTaskId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>, TError = unknown>(
 service: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailMxplanServiceTaskId<TData = Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>, TError = unknown>(
 service: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailMxplanServiceTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailMxplanServiceTaskIdQueryOptions(service,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update spam and virus flags on all active accounts
 */
export const postEmailMxplanServiceUpdateFlagsOnAllAccounts = (
    service: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/mxplan/${service}/updateFlagsOnAllAccounts`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailMxplanServiceUpdateFlagsOnAllAccountsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceUpdateFlagsOnAllAccounts>>, TError,{service: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceUpdateFlagsOnAllAccounts>>, TError,{service: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailMxplanServiceUpdateFlagsOnAllAccounts>>, {service: string}> = (props) => {
          const {service} = props ?? {};

          return  postEmailMxplanServiceUpdateFlagsOnAllAccounts(service,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailMxplanServiceUpdateFlagsOnAllAccountsMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailMxplanServiceUpdateFlagsOnAllAccounts>>>
    
    export type PostEmailMxplanServiceUpdateFlagsOnAllAccountsMutationError = unknown

    /**
 * @summary Update spam and virus flags on all active accounts
 */
export const usePostEmailMxplanServiceUpdateFlagsOnAllAccounts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailMxplanServiceUpdateFlagsOnAllAccounts>>, TError,{service: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailMxplanServiceUpdateFlagsOnAllAccounts>>,
        TError,
        {service: string},
        TContext
      > => {

      const mutationOptions = getPostEmailMxplanServiceUpdateFlagsOnAllAccountsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

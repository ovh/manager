/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DeleteTelephonyBillingAccountParams,
  DeleteTelephonyBillingAccountServiceServiceNameParams,
  GetTelephonyAccessoriesParams,
  GetTelephonyAliasesParams,
  GetTelephonyAvailableDefaultSipDomainsParams,
  GetTelephonyBillingAccountCarrierSipServiceNameCdrsParams,
  GetTelephonyBillingAccountConferenceServiceNameHistoriesParams,
  GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesParams,
  GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsParams,
  GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsParams,
  GetTelephonyBillingAccountHistoryConsumptionDateFileParams,
  GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportParams,
  GetTelephonyBillingAccountOfferTaskParams,
  GetTelephonyBillingAccountPhonebookBookKeyExportParams,
  GetTelephonyBillingAccountSchedulerServiceNameEventsParams,
  GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeParams,
  GetTelephonyBillingAccountServiceServiceNameFaxConsumptionParams,
  GetTelephonyBillingAccountServiceServiceNameOfferTaskParams,
  GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionParams,
  GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionParams,
  GetTelephonyBillingAccountServiceServiceNameTaskParams,
  GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionParams,
  GetTelephonyBillingAccountTaskParams,
  GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionParams,
  GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadParams,
  GetTelephonyBillingAccountVoicemailServiceNameDirectoriesParams,
  GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadParams,
  GetTelephonyBillingAccountVoicemailServiceNameGreetingsParams,
  GetTelephonyDirectoriesAvailableZipCodesParams,
  GetTelephonyDirectoriesCitiesParams,
  GetTelephonyFaxOffersParams,
  GetTelephonyLineOfferPhonesParams,
  GetTelephonyLineOffersParams,
  GetTelephonyLinesParams,
  GetTelephonyNumberDetailedZonesParams,
  GetTelephonyNumberRangesParams,
  GetTelephonyNumberSpecificNumbersParams,
  GetTelephonyNumberZonesParams,
  GetTelephonyParams,
  GetTelephonySearchServicesParams,
  GetTelephonySpareParams,
  GetTelephonyTrunksParams,
  OrderPriceOVH,
  PhoneNumberOVH,
  PostTelephonyAliasesServiceNameChangeContactBody,
  PostTelephonyBillingAccountAbbreviatedNumberBody,
  PostTelephonyBillingAccountBillingAccountSiteBody,
  PostTelephonyBillingAccountCanTransferSecurityDepositBody,
  PostTelephonyBillingAccountChangeContactBody,
  PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadBody,
  PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyBody,
  PostTelephonyBillingAccountConferenceServiceNameRoomsBody,
  PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyBody,
  PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessBody,
  PostTelephonyBillingAccountConferenceServiceNameWebAccessBody,
  PostTelephonyBillingAccountDdiServiceNameChangeDestinationBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadBody,
  PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsBody,
  PostTelephonyBillingAccountEventTokenBody,
  PostTelephonyBillingAccountFaxServiceNameCampaignsBody,
  PostTelephonyBillingAccountFaxServiceNameScreenListsBody,
  PostTelephonyBillingAccountFaxServiceNameScreenListsResetBody,
  PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordBody,
  PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxBody,
  PostTelephonyBillingAccountHistoryRepaymentConsumptionBody,
  PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberBody,
  PostTelephonyBillingAccountLineServiceNameAntihackBody,
  PostTelephonyBillingAccountLineServiceNameAssociateDeviceBody,
  PostTelephonyBillingAccountLineServiceNameAutomaticCallBody,
  PostTelephonyBillingAccountLineServiceNameBlockBody,
  PostTelephonyBillingAccountLineServiceNameChangePasswordBody,
  PostTelephonyBillingAccountLineServiceNameClick2CallBody,
  PostTelephonyBillingAccountLineServiceNameClick2CallUserBody,
  PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordBody,
  PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallBody,
  PostTelephonyBillingAccountLineServiceNameDissociateDeviceBody,
  PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationBody,
  PostTelephonyBillingAccountLineServiceNamePhonePhonebookBody,
  PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportBody,
  PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactBody,
  PostTelephonyBillingAccountLineServiceNamePhoneResetConfigBody,
  PostTelephonyBillingAccountLineServiceNamePhoneRmaBody,
  PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeBody,
  PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesBody,
  PostTelephonyBillingAccountLineServiceNameTonesToneUploadBody,
  PostTelephonyBillingAccountLineServiceNameTrafficExtractsBody,
  PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeBody,
  PostTelephonyBillingAccountNumberServiceNameConvertToLineBody,
  PostTelephonyBillingAccountOutplanNotificationBody,
  PostTelephonyBillingAccountOvhPabxServiceNameDialplanBody,
  PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionBody,
  PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListBody,
  PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeBody,
  PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody,
  PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody,
  PostTelephonyBillingAccountOvhPabxServiceNameMenuBody,
  PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryBody,
  PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadBody,
  PostTelephonyBillingAccountOvhPabxServiceNameTtsBody,
  PostTelephonyBillingAccountPhonebookBody,
  PostTelephonyBillingAccountPhonebookBookKeyImportBody,
  PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactBody,
  PostTelephonyBillingAccountPortabilityIdCancelBody,
  PostTelephonyBillingAccountPortabilityIdChangeDateBody,
  PostTelephonyBillingAccountPortabilityIdDocumentBody,
  PostTelephonyBillingAccountPortabilityIdRelaunchBody,
  PostTelephonyBillingAccountRedirectServiceNameChangeDestinationBody,
  PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeBody,
  PostTelephonyBillingAccountSchedulerServiceNameEventsBody,
  PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarBody,
  PostTelephonyBillingAccountScreenServiceNameScreenListsBody,
  PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountBody,
  PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsBody,
  PostTelephonyBillingAccountServiceServiceNameEventTokenBody,
  PostTelephonyBillingAccountServiceServiceNameOfferChangeBody,
  PostTelephonyBillingAccountTimeConditionServiceNameConditionBody,
  PostTelephonyBillingAccountTransferSecurityDepositBody,
  PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberBody,
  PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveBody,
  PostTelephonyBillingAccountVoicemailServiceNameGreetingsBody,
  PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveBody,
  PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordBody,
  PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingBody,
  PostTelephonyLinesServiceNameChangeContactBody,
  PostTelephonyProcedureBody,
  PostTelephonySetDefaultSipDomainBody,
  PostTelephonySoundsBody,
  PostTelephonySpareSpareReplaceBody,
  PostTelephonyTrunksServiceNameChangeContactBody,
  ServicesServiceOVH,
  SpareTelephonyTelephonySpareWithIAMOVH,
  TelephonyAbbreviatedNumberGroupOVH,
  TelephonyAbbreviatedNumberOVH,
  TelephonyAccessoryOfferOVH,
  TelephonyBannerAccessOVH,
  TelephonyBillingAccountOVH,
  TelephonyBillingAccountWithIAMOVH,
  TelephonyCallsGeneratedOVH,
  TelephonyCarrierSipClusterInfoOVH,
  TelephonyCarrierSipCustomerEndpointOVH,
  TelephonyCarrierSipDetailsOVH,
  TelephonyCarrierSipOVH,
  TelephonyCarrierSipVnoMandateOVH,
  TelephonyCarrierSipVnoRangeOVH,
  TelephonyCityOVH,
  TelephonyClick2CallUserOVH,
  TelephonyConferenceHistoryOVH,
  TelephonyConferenceInformationsOVH,
  TelephonyConferenceOVH,
  TelephonyConferenceParticipantsOVH,
  TelephonyConferencePropertiesOVH,
  TelephonyConferenceRoomOVH,
  TelephonyConferenceRoomsStatisticsOVH,
  TelephonyConferenceWebAccessOVH,
  TelephonyConsumptionThresholdOVH,
  TelephonyDatetimeAndIpvalueOVH,
  TelephonyDdiOVH,
  TelephonyDefaultSipDomainsOVH,
  TelephonyDetailedRateCodeInformationOVH,
  TelephonyDeviceCreateInputOVH,
  TelephonyDeviceEnrollOVH,
  TelephonyDeviceOVH,
  TelephonyDeviceSendProvisioningTokenOVH,
  TelephonyDirectoryHeadingPJOVH,
  TelephonyDirectoryInfoOVH,
  TelephonyDirectoryWayTypeOVH,
  TelephonyDocumentOVH,
  TelephonyEasyHuntingOVH,
  TelephonyEasyHuntingScreenListsConditionsOVH,
  TelephonyEasyHuntingScreenListsConditionsSettingsOVH,
  TelephonyEasyHuntingTimeConditionsOVH,
  TelephonyEasyHuntingTimeConditionsSettingsOVH,
  TelephonyEntrepriseNumberInformationsTaskOVH,
  TelephonyEventCallbackOVH,
  TelephonyEventOVH,
  TelephonyEventTokenOVH,
  TelephonyFaxCampaignDetailOVH,
  TelephonyFaxCampaignOVH,
  TelephonyFaxConsumptionOVH,
  TelephonyFaxOVH,
  TelephonyFaxPropertiesOVH,
  TelephonyFaxScreenOVH,
  TelephonyFunctionKeyOVH,
  TelephonyGenericScreenOVH,
  TelephonyHardwareOfferOVH,
  TelephonyHistoryConsumptionOVH,
  TelephonyHistoryRepaymentConsumptionOVH,
  TelephonyHistoryTollfreeConsumptionOVH,
  TelephonyLineOVH,
  TelephonyLineOfferOVH,
  TelephonyLineOffersAndContractsOVH,
  TelephonyLineOptionsOVH,
  TelephonyLinePhoneAssociableOVH,
  TelephonyLinePhoneOVH,
  TelephonyNumberDetailedZoneOVH,
  TelephonyNumberOVH,
  TelephonyOfferChangeOVH,
  TelephonyOfferTaskOVH,
  TelephonyOldPhoneOVH,
  TelephonyOvhPabxCustomStatusOVH,
  TelephonyOvhPabxDialplanExtensionConditionScreenListOVH,
  TelephonyOvhPabxDialplanExtensionConditionTimeOVH,
  TelephonyOvhPabxDialplanExtensionOVH,
  TelephonyOvhPabxDialplanExtensionRuleOVH,
  TelephonyOvhPabxDialplanOVH,
  TelephonyOvhPabxHuntingAgentLiveStatusOVH,
  TelephonyOvhPabxHuntingAgentOVH,
  TelephonyOvhPabxHuntingAgentQueueOVH,
  TelephonyOvhPabxHuntingOVH,
  TelephonyOvhPabxHuntingQueueLiveCallsOVH,
  TelephonyOvhPabxHuntingQueueLiveStatisticsOVH,
  TelephonyOvhPabxHuntingQueueOVH,
  TelephonyOvhPabxMenuEntryOVH,
  TelephonyOvhPabxMenuOVH,
  TelephonyOvhPabxOVH,
  TelephonyOvhPabxRecordOVH,
  TelephonyOvhPabxSoundOVH,
  TelephonyOvhPabxTtsOVH,
  TelephonyPcsFileOVH,
  TelephonyPhoneCredentialsOVH,
  TelephonyPhoneOVH,
  TelephonyPhonebookContactOVH,
  TelephonyPhonebookMasterOVH,
  TelephonyPhonebookOVH,
  TelephonyPortabilityDocumentOVH,
  TelephonyPortabilityFixErrorPossibleParametersOVH,
  TelephonyPortabilityOVH,
  TelephonyPortabilityStepOVH,
  TelephonyPreviousVoiceConsumptionOVH,
  TelephonyProcedureOVH,
  TelephonyRateCodeInformationOVH,
  TelephonyRedirectOVH,
  TelephonyRegistrationInformationsOVH,
  TelephonyRepaymentConsumptionOVH,
  TelephonyResellerPanelStatusOVH,
  TelephonyResetPhoneInfoOVH,
  TelephonyRmaOVH,
  TelephonyRmaReturnOVH,
  TelephonyRsvaOVH,
  TelephonySchedulerEventOVH,
  TelephonySchedulerOVH,
  TelephonyScreenListOVH,
  TelephonyScreenOVH,
  TelephonySimultaneousChannelsDetailsOVH,
  TelephonySoftphoneBetaEligibilityOVH,
  TelephonySoftphoneBetaStatusOVH,
  TelephonySoftphoneLogoOVH,
  TelephonySoftphoneStoreLinksOVH,
  TelephonySoftphoneThemeInputOVH,
  TelephonySoftphoneThemeOVH,
  TelephonySoundOVH,
  TelephonySpecificNumberOVH,
  TelephonyTaskOVH,
  TelephonyTelephonyGenericServiceWithIAMOVH,
  TelephonyTelephonySearchServiceOVH,
  TelephonyTelephonyServiceOVH,
  TelephonyTemporaryLogsLinkOVH,
  TelephonyTimeConditionOVH,
  TelephonyTimeConditionOptionsOVH,
  TelephonyTonesOVH,
  TelephonyTrafficExtractOVH,
  TelephonyTrunkExternalDisplayedNumberOVH,
  TelephonyTrunkExternalDisplayedNumberValidationOVH,
  TelephonyTrunkOVH,
  TelephonyTrunkSimultaneousPacksRepartitionOVH,
  TelephonyVoiceConsumptionOVH,
  TelephonyVoicefaxRoutingEnumOVH,
  TelephonyVoicemailGreetingsOVH,
  TelephonyVoicemailMessagesOVH,
  TelephonyVoicemailNumbersOVH,
  TelephonyVoicemailOVH,
  TelephonyVoicemailPropertiesOVH,
  TelephonyVxmlOVH,
  TelephonyVxmlPropertiesOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Your telephony billing accounts
 */
export const getTelephony = (
    params?: GetTelephonyParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyQueryKey = (params?: GetTelephonyParams,) => {
    return [`/telephony`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyQueryOptions = <TData = Awaited<ReturnType<typeof getTelephony>>, TError = unknown>(params?: GetTelephonyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephony>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephony>>> = ({ signal }) => getTelephony(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephony>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephony>>>
export type GetTelephonyQueryError = unknown


export function useGetTelephony<TData = Awaited<ReturnType<typeof getTelephony>>, TError = unknown>(
 params: undefined |  GetTelephonyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephony>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephony>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephony<TData = Awaited<ReturnType<typeof getTelephony>>, TError = unknown>(
 params?: GetTelephonyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephony>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephony>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephony<TData = Awaited<ReturnType<typeof getTelephony>>, TError = unknown>(
 params?: GetTelephonyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephony>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Your telephony billing accounts
 */

export function useGetTelephony<TData = Awaited<ReturnType<typeof getTelephony>>, TError = unknown>(
 params?: GetTelephonyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephony>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all available accessories
 */
export const getTelephonyAccessories = (
    params: GetTelephonyAccessoriesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyAccessoryOfferOVH[]>(
      {url: `/telephony/accessories`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyAccessoriesQueryKey = (params: GetTelephonyAccessoriesParams,) => {
    return [`/telephony/accessories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyAccessoriesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyAccessories>>, TError = unknown>(params: GetTelephonyAccessoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAccessories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyAccessoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyAccessories>>> = ({ signal }) => getTelephonyAccessories(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAccessories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyAccessoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyAccessories>>>
export type GetTelephonyAccessoriesQueryError = unknown


export function useGetTelephonyAccessories<TData = Awaited<ReturnType<typeof getTelephonyAccessories>>, TError = unknown>(
 params: GetTelephonyAccessoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAccessories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyAccessories>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyAccessories<TData = Awaited<ReturnType<typeof getTelephonyAccessories>>, TError = unknown>(
 params: GetTelephonyAccessoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAccessories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyAccessories>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyAccessories<TData = Awaited<ReturnType<typeof getTelephonyAccessories>>, TError = unknown>(
 params: GetTelephonyAccessoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAccessories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all available accessories
 */

export function useGetTelephonyAccessories<TData = Awaited<ReturnType<typeof getTelephonyAccessories>>, TError = unknown>(
 params: GetTelephonyAccessoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAccessories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyAccessoriesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Your telephony billing accounts
 */
export const getTelephonyAliases = (
    params?: GetTelephonyAliasesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/aliases`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyAliasesQueryKey = (params?: GetTelephonyAliasesParams,) => {
    return [`/telephony/aliases`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyAliasesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyAliases>>, TError = unknown>(params?: GetTelephonyAliasesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliases>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyAliasesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyAliases>>> = ({ signal }) => getTelephonyAliases(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliases>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyAliasesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyAliases>>>
export type GetTelephonyAliasesQueryError = unknown


export function useGetTelephonyAliases<TData = Awaited<ReturnType<typeof getTelephonyAliases>>, TError = unknown>(
 params: undefined |  GetTelephonyAliasesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliases>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyAliases>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyAliases<TData = Awaited<ReturnType<typeof getTelephonyAliases>>, TError = unknown>(
 params?: GetTelephonyAliasesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliases>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyAliases>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyAliases<TData = Awaited<ReturnType<typeof getTelephonyAliases>>, TError = unknown>(
 params?: GetTelephonyAliasesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliases>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Your telephony billing accounts
 */

export function useGetTelephonyAliases<TData = Awaited<ReturnType<typeof getTelephonyAliases>>, TError = unknown>(
 params?: GetTelephonyAliasesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliases>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyAliasesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyAliasesServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTelephonyGenericServiceWithIAMOVH>(
      {url: `/telephony/aliases/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyAliasesServiceNameQueryKey = (serviceName: string,) => {
    return [`/telephony/aliases/${serviceName}`] as const;
    }

    
export const getGetTelephonyAliasesServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyAliasesServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>> = ({ signal }) => getTelephonyAliasesServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyAliasesServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>>
export type GetTelephonyAliasesServiceNameQueryError = unknown


export function useGetTelephonyAliasesServiceName<TData = Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyAliasesServiceName<TData = Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyAliasesServiceName<TData = Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyAliasesServiceName<TData = Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliasesServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyAliasesServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a contact change procedure
 */
export const postTelephonyAliasesServiceNameChangeContact = (
    serviceName: string,
    postTelephonyAliasesServiceNameChangeContactBody: PostTelephonyAliasesServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/aliases/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyAliasesServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostTelephonyAliasesServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyAliasesServiceNameChangeContact>>, TError,{serviceName: string;data: PostTelephonyAliasesServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyAliasesServiceNameChangeContact>>, TError,{serviceName: string;data: PostTelephonyAliasesServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyAliasesServiceNameChangeContact>>, {serviceName: string;data: PostTelephonyAliasesServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postTelephonyAliasesServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyAliasesServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyAliasesServiceNameChangeContact>>>
    export type PostTelephonyAliasesServiceNameChangeContactMutationBody = PostTelephonyAliasesServiceNameChangeContactBody
    export type PostTelephonyAliasesServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostTelephonyAliasesServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyAliasesServiceNameChangeContact>>, TError,{serviceName: string;data: PostTelephonyAliasesServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyAliasesServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostTelephonyAliasesServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyAliasesServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getTelephonyAliasesServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/telephony/aliases/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyAliasesServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/telephony/aliases/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetTelephonyAliasesServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyAliasesServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>> = ({ signal }) => getTelephonyAliasesServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyAliasesServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>>
export type GetTelephonyAliasesServiceNameServiceInfosQueryError = unknown


export function useGetTelephonyAliasesServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyAliasesServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyAliasesServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetTelephonyAliasesServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAliasesServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyAliasesServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putTelephonyAliasesServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/aliases/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutTelephonyAliasesServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyAliasesServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyAliasesServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyAliasesServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putTelephonyAliasesServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyAliasesServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyAliasesServiceNameServiceInfos>>>
    export type PutTelephonyAliasesServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutTelephonyAliasesServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutTelephonyAliasesServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyAliasesServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyAliasesServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyAliasesServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all available SIP domains by country
 */
export const getTelephonyAvailableDefaultSipDomains = (
    params: GetTelephonyAvailableDefaultSipDomainsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDefaultSipDomainsOVH[]>(
      {url: `/telephony/availableDefaultSipDomains`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyAvailableDefaultSipDomainsQueryKey = (params: GetTelephonyAvailableDefaultSipDomainsParams,) => {
    return [`/telephony/availableDefaultSipDomains`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyAvailableDefaultSipDomainsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>, TError = unknown>(params: GetTelephonyAvailableDefaultSipDomainsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyAvailableDefaultSipDomainsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>> = ({ signal }) => getTelephonyAvailableDefaultSipDomains(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyAvailableDefaultSipDomainsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>>
export type GetTelephonyAvailableDefaultSipDomainsQueryError = unknown


export function useGetTelephonyAvailableDefaultSipDomains<TData = Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>, TError = unknown>(
 params: GetTelephonyAvailableDefaultSipDomainsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyAvailableDefaultSipDomains<TData = Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>, TError = unknown>(
 params: GetTelephonyAvailableDefaultSipDomainsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyAvailableDefaultSipDomains<TData = Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>, TError = unknown>(
 params: GetTelephonyAvailableDefaultSipDomainsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all available SIP domains by country
 */

export function useGetTelephonyAvailableDefaultSipDomains<TData = Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>, TError = unknown>(
 params: GetTelephonyAvailableDefaultSipDomainsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyAvailableDefaultSipDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyAvailableDefaultSipDomainsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get current order ids
 */
export const getTelephonyCurrentOrderIds = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/currentOrderIds`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyCurrentOrderIdsQueryKey = () => {
    return [`/telephony/currentOrderIds`] as const;
    }

    
export const getGetTelephonyCurrentOrderIdsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyCurrentOrderIdsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>> = ({ signal }) => getTelephonyCurrentOrderIds(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyCurrentOrderIdsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>>
export type GetTelephonyCurrentOrderIdsQueryError = unknown


export function useGetTelephonyCurrentOrderIds<TData = Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyCurrentOrderIds<TData = Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyCurrentOrderIds<TData = Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get current order ids
 */

export function useGetTelephonyCurrentOrderIds<TData = Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyCurrentOrderIds>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyCurrentOrderIdsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all zip codes compatible for a number
 */
export const getTelephonyDirectoriesAvailableZipCodes = (
    params: GetTelephonyDirectoriesAvailableZipCodesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/directories/availableZipCodes`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyDirectoriesAvailableZipCodesQueryKey = (params: GetTelephonyDirectoriesAvailableZipCodesParams,) => {
    return [`/telephony/directories/availableZipCodes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyDirectoriesAvailableZipCodesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>, TError = unknown>(params: GetTelephonyDirectoriesAvailableZipCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyDirectoriesAvailableZipCodesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>> = ({ signal }) => getTelephonyDirectoriesAvailableZipCodes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyDirectoriesAvailableZipCodesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>>
export type GetTelephonyDirectoriesAvailableZipCodesQueryError = unknown


export function useGetTelephonyDirectoriesAvailableZipCodes<TData = Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>, TError = unknown>(
 params: GetTelephonyDirectoriesAvailableZipCodesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyDirectoriesAvailableZipCodes<TData = Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>, TError = unknown>(
 params: GetTelephonyDirectoriesAvailableZipCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyDirectoriesAvailableZipCodes<TData = Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>, TError = unknown>(
 params: GetTelephonyDirectoriesAvailableZipCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all zip codes compatible for a number
 */

export function useGetTelephonyDirectoriesAvailableZipCodes<TData = Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>, TError = unknown>(
 params: GetTelephonyDirectoriesAvailableZipCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyDirectoriesAvailableZipCodes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyDirectoriesAvailableZipCodesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get city informations from a zip code
 */
export const getTelephonyDirectoriesCities = (
    params: GetTelephonyDirectoriesCitiesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyCityOVH[]>(
      {url: `/telephony/directories/cities`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyDirectoriesCitiesQueryKey = (params: GetTelephonyDirectoriesCitiesParams,) => {
    return [`/telephony/directories/cities`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyDirectoriesCitiesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>, TError = unknown>(params: GetTelephonyDirectoriesCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyDirectoriesCitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>> = ({ signal }) => getTelephonyDirectoriesCities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyDirectoriesCitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>>
export type GetTelephonyDirectoriesCitiesQueryError = unknown


export function useGetTelephonyDirectoriesCities<TData = Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>, TError = unknown>(
 params: GetTelephonyDirectoriesCitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyDirectoriesCities<TData = Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>, TError = unknown>(
 params: GetTelephonyDirectoriesCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyDirectoriesCities<TData = Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>, TError = unknown>(
 params: GetTelephonyDirectoriesCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get city informations from a zip code
 */

export function useGetTelephonyDirectoriesCities<TData = Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>, TError = unknown>(
 params: GetTelephonyDirectoriesCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyDirectoriesCities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyDirectoriesCitiesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all available fax offer compatible
 */
export const getTelephonyFaxOffers = (
    params: GetTelephonyFaxOffersParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyLineOfferOVH[]>(
      {url: `/telephony/fax/offers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyFaxOffersQueryKey = (params: GetTelephonyFaxOffersParams,) => {
    return [`/telephony/fax/offers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyFaxOffersQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyFaxOffers>>, TError = unknown>(params: GetTelephonyFaxOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyFaxOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyFaxOffersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyFaxOffers>>> = ({ signal }) => getTelephonyFaxOffers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyFaxOffers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyFaxOffersQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyFaxOffers>>>
export type GetTelephonyFaxOffersQueryError = unknown


export function useGetTelephonyFaxOffers<TData = Awaited<ReturnType<typeof getTelephonyFaxOffers>>, TError = unknown>(
 params: GetTelephonyFaxOffersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyFaxOffers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyFaxOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyFaxOffers<TData = Awaited<ReturnType<typeof getTelephonyFaxOffers>>, TError = unknown>(
 params: GetTelephonyFaxOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyFaxOffers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyFaxOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyFaxOffers<TData = Awaited<ReturnType<typeof getTelephonyFaxOffers>>, TError = unknown>(
 params: GetTelephonyFaxOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyFaxOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all available fax offer compatible
 */

export function useGetTelephonyFaxOffers<TData = Awaited<ReturnType<typeof getTelephonyFaxOffers>>, TError = unknown>(
 params: GetTelephonyFaxOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyFaxOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyFaxOffersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all available phone brands compatible with lines
 */
export const getTelephonyLineOfferPhones = (
    params: GetTelephonyLineOfferPhonesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyLinePhoneOVH[]>(
      {url: `/telephony/line/offer/phones`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyLineOfferPhonesQueryKey = (params: GetTelephonyLineOfferPhonesParams,) => {
    return [`/telephony/line/offer/phones`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyLineOfferPhonesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>, TError = unknown>(params: GetTelephonyLineOfferPhonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyLineOfferPhonesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>> = ({ signal }) => getTelephonyLineOfferPhones(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyLineOfferPhonesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>>
export type GetTelephonyLineOfferPhonesQueryError = unknown


export function useGetTelephonyLineOfferPhones<TData = Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>, TError = unknown>(
 params: GetTelephonyLineOfferPhonesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyLineOfferPhones<TData = Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>, TError = unknown>(
 params: GetTelephonyLineOfferPhonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyLineOfferPhones<TData = Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>, TError = unknown>(
 params: GetTelephonyLineOfferPhonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all available phone brands compatible with lines
 */

export function useGetTelephonyLineOfferPhones<TData = Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>, TError = unknown>(
 params: GetTelephonyLineOfferPhonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLineOfferPhones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyLineOfferPhonesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all available line offer compatible
 */
export const getTelephonyLineOffers = (
    params: GetTelephonyLineOffersParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyLineOfferOVH[]>(
      {url: `/telephony/line/offers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyLineOffersQueryKey = (params: GetTelephonyLineOffersParams,) => {
    return [`/telephony/line/offers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyLineOffersQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyLineOffers>>, TError = unknown>(params: GetTelephonyLineOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLineOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyLineOffersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyLineOffers>>> = ({ signal }) => getTelephonyLineOffers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLineOffers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyLineOffersQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyLineOffers>>>
export type GetTelephonyLineOffersQueryError = unknown


export function useGetTelephonyLineOffers<TData = Awaited<ReturnType<typeof getTelephonyLineOffers>>, TError = unknown>(
 params: GetTelephonyLineOffersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLineOffers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyLineOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyLineOffers<TData = Awaited<ReturnType<typeof getTelephonyLineOffers>>, TError = unknown>(
 params: GetTelephonyLineOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLineOffers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyLineOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyLineOffers<TData = Awaited<ReturnType<typeof getTelephonyLineOffers>>, TError = unknown>(
 params: GetTelephonyLineOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLineOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all available line offer compatible
 */

export function useGetTelephonyLineOffers<TData = Awaited<ReturnType<typeof getTelephonyLineOffers>>, TError = unknown>(
 params: GetTelephonyLineOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLineOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyLineOffersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Your telephony billing accounts
 */
export const getTelephonyLines = (
    params?: GetTelephonyLinesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/lines`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyLinesQueryKey = (params?: GetTelephonyLinesParams,) => {
    return [`/telephony/lines`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyLinesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyLines>>, TError = unknown>(params?: GetTelephonyLinesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLines>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyLinesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyLines>>> = ({ signal }) => getTelephonyLines(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLines>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyLinesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyLines>>>
export type GetTelephonyLinesQueryError = unknown


export function useGetTelephonyLines<TData = Awaited<ReturnType<typeof getTelephonyLines>>, TError = unknown>(
 params: undefined |  GetTelephonyLinesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLines>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyLines>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyLines<TData = Awaited<ReturnType<typeof getTelephonyLines>>, TError = unknown>(
 params?: GetTelephonyLinesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLines>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyLines>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyLines<TData = Awaited<ReturnType<typeof getTelephonyLines>>, TError = unknown>(
 params?: GetTelephonyLinesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLines>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Your telephony billing accounts
 */

export function useGetTelephonyLines<TData = Awaited<ReturnType<typeof getTelephonyLines>>, TError = unknown>(
 params?: GetTelephonyLinesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLines>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyLinesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyLinesServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTelephonyGenericServiceWithIAMOVH>(
      {url: `/telephony/lines/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyLinesServiceNameQueryKey = (serviceName: string,) => {
    return [`/telephony/lines/${serviceName}`] as const;
    }

    
export const getGetTelephonyLinesServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyLinesServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLinesServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyLinesServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyLinesServiceName>>> = ({ signal }) => getTelephonyLinesServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLinesServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyLinesServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyLinesServiceName>>>
export type GetTelephonyLinesServiceNameQueryError = unknown


export function useGetTelephonyLinesServiceName<TData = Awaited<ReturnType<typeof getTelephonyLinesServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLinesServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyLinesServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyLinesServiceName<TData = Awaited<ReturnType<typeof getTelephonyLinesServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLinesServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyLinesServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyLinesServiceName<TData = Awaited<ReturnType<typeof getTelephonyLinesServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLinesServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyLinesServiceName<TData = Awaited<ReturnType<typeof getTelephonyLinesServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLinesServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyLinesServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a contact change procedure
 */
export const postTelephonyLinesServiceNameChangeContact = (
    serviceName: string,
    postTelephonyLinesServiceNameChangeContactBody: PostTelephonyLinesServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/lines/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyLinesServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostTelephonyLinesServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyLinesServiceNameChangeContact>>, TError,{serviceName: string;data: PostTelephonyLinesServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyLinesServiceNameChangeContact>>, TError,{serviceName: string;data: PostTelephonyLinesServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyLinesServiceNameChangeContact>>, {serviceName: string;data: PostTelephonyLinesServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postTelephonyLinesServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyLinesServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyLinesServiceNameChangeContact>>>
    export type PostTelephonyLinesServiceNameChangeContactMutationBody = PostTelephonyLinesServiceNameChangeContactBody
    export type PostTelephonyLinesServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostTelephonyLinesServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyLinesServiceNameChangeContact>>, TError,{serviceName: string;data: PostTelephonyLinesServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyLinesServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostTelephonyLinesServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyLinesServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getTelephonyLinesServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/telephony/lines/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyLinesServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/telephony/lines/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetTelephonyLinesServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyLinesServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>> = ({ signal }) => getTelephonyLinesServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyLinesServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>>
export type GetTelephonyLinesServiceNameServiceInfosQueryError = unknown


export function useGetTelephonyLinesServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyLinesServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyLinesServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetTelephonyLinesServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyLinesServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyLinesServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putTelephonyLinesServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/lines/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutTelephonyLinesServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyLinesServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyLinesServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyLinesServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putTelephonyLinesServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyLinesServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyLinesServiceNameServiceInfos>>>
    export type PutTelephonyLinesServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutTelephonyLinesServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutTelephonyLinesServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyLinesServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyLinesServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyLinesServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all available geographic zone with some details, from a country
 */
export const getTelephonyNumberDetailedZones = (
    params: GetTelephonyNumberDetailedZonesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyNumberDetailedZoneOVH[]>(
      {url: `/telephony/number/detailedZones`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyNumberDetailedZonesQueryKey = (params: GetTelephonyNumberDetailedZonesParams,) => {
    return [`/telephony/number/detailedZones`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyNumberDetailedZonesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>, TError = unknown>(params: GetTelephonyNumberDetailedZonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyNumberDetailedZonesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>> = ({ signal }) => getTelephonyNumberDetailedZones(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyNumberDetailedZonesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>>
export type GetTelephonyNumberDetailedZonesQueryError = unknown


export function useGetTelephonyNumberDetailedZones<TData = Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>, TError = unknown>(
 params: GetTelephonyNumberDetailedZonesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyNumberDetailedZones<TData = Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>, TError = unknown>(
 params: GetTelephonyNumberDetailedZonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyNumberDetailedZones<TData = Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>, TError = unknown>(
 params: GetTelephonyNumberDetailedZonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all available geographic zone with some details, from a country
 */

export function useGetTelephonyNumberDetailedZones<TData = Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>, TError = unknown>(
 params: GetTelephonyNumberDetailedZonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberDetailedZones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyNumberDetailedZonesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all available special range from a country
 */
export const getTelephonyNumberRanges = (
    params: GetTelephonyNumberRangesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/number/ranges`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyNumberRangesQueryKey = (params: GetTelephonyNumberRangesParams,) => {
    return [`/telephony/number/ranges`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyNumberRangesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyNumberRanges>>, TError = unknown>(params: GetTelephonyNumberRangesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberRanges>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyNumberRangesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyNumberRanges>>> = ({ signal }) => getTelephonyNumberRanges(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberRanges>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyNumberRangesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyNumberRanges>>>
export type GetTelephonyNumberRangesQueryError = unknown


export function useGetTelephonyNumberRanges<TData = Awaited<ReturnType<typeof getTelephonyNumberRanges>>, TError = unknown>(
 params: GetTelephonyNumberRangesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberRanges>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyNumberRanges>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyNumberRanges<TData = Awaited<ReturnType<typeof getTelephonyNumberRanges>>, TError = unknown>(
 params: GetTelephonyNumberRangesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberRanges>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyNumberRanges>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyNumberRanges<TData = Awaited<ReturnType<typeof getTelephonyNumberRanges>>, TError = unknown>(
 params: GetTelephonyNumberRangesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberRanges>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all available special range from a country
 */

export function useGetTelephonyNumberRanges<TData = Awaited<ReturnType<typeof getTelephonyNumberRanges>>, TError = unknown>(
 params: GetTelephonyNumberRangesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberRanges>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyNumberRangesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all available specific number from a country
 */
export const getTelephonyNumberSpecificNumbers = (
    params: GetTelephonyNumberSpecificNumbersParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySpecificNumberOVH[]>(
      {url: `/telephony/number/specificNumbers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyNumberSpecificNumbersQueryKey = (params: GetTelephonyNumberSpecificNumbersParams,) => {
    return [`/telephony/number/specificNumbers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyNumberSpecificNumbersQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>, TError = unknown>(params: GetTelephonyNumberSpecificNumbersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyNumberSpecificNumbersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>> = ({ signal }) => getTelephonyNumberSpecificNumbers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyNumberSpecificNumbersQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>>
export type GetTelephonyNumberSpecificNumbersQueryError = unknown


export function useGetTelephonyNumberSpecificNumbers<TData = Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>, TError = unknown>(
 params: GetTelephonyNumberSpecificNumbersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyNumberSpecificNumbers<TData = Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>, TError = unknown>(
 params: GetTelephonyNumberSpecificNumbersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyNumberSpecificNumbers<TData = Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>, TError = unknown>(
 params: GetTelephonyNumberSpecificNumbersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all available specific number from a country
 */

export function useGetTelephonyNumberSpecificNumbers<TData = Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>, TError = unknown>(
 params: GetTelephonyNumberSpecificNumbersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberSpecificNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyNumberSpecificNumbersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all available geographic zone from a country
 */
export const getTelephonyNumberZones = (
    params: GetTelephonyNumberZonesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/number/zones`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyNumberZonesQueryKey = (params: GetTelephonyNumberZonesParams,) => {
    return [`/telephony/number/zones`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyNumberZonesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyNumberZones>>, TError = unknown>(params: GetTelephonyNumberZonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberZones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyNumberZonesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyNumberZones>>> = ({ signal }) => getTelephonyNumberZones(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberZones>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyNumberZonesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyNumberZones>>>
export type GetTelephonyNumberZonesQueryError = unknown


export function useGetTelephonyNumberZones<TData = Awaited<ReturnType<typeof getTelephonyNumberZones>>, TError = unknown>(
 params: GetTelephonyNumberZonesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberZones>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyNumberZones>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyNumberZones<TData = Awaited<ReturnType<typeof getTelephonyNumberZones>>, TError = unknown>(
 params: GetTelephonyNumberZonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberZones>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyNumberZones>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyNumberZones<TData = Awaited<ReturnType<typeof getTelephonyNumberZones>>, TError = unknown>(
 params: GetTelephonyNumberZonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberZones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all available geographic zone from a country
 */

export function useGetTelephonyNumberZones<TData = Awaited<ReturnType<typeof getTelephonyNumberZones>>, TError = unknown>(
 params: GetTelephonyNumberZonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyNumberZones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyNumberZonesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Procedures linked to your nichandle
 */
export const getTelephonyProcedure = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/procedure`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyProcedureQueryKey = () => {
    return [`/telephony/procedure`] as const;
    }

    
export const getGetTelephonyProcedureQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyProcedure>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedure>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyProcedureQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyProcedure>>> = ({ signal }) => getTelephonyProcedure(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedure>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyProcedureQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyProcedure>>>
export type GetTelephonyProcedureQueryError = unknown


export function useGetTelephonyProcedure<TData = Awaited<ReturnType<typeof getTelephonyProcedure>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedure>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyProcedure>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyProcedure<TData = Awaited<ReturnType<typeof getTelephonyProcedure>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedure>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyProcedure>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyProcedure<TData = Awaited<ReturnType<typeof getTelephonyProcedure>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedure>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Procedures linked to your nichandle
 */

export function useGetTelephonyProcedure<TData = Awaited<ReturnType<typeof getTelephonyProcedure>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedure>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyProcedureQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a telephony procedure
 */
export const postTelephonyProcedure = (
    postTelephonyProcedureBody: PostTelephonyProcedureBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyProcedureOVH>(
      {url: `/telephony/procedure`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyProcedureBody, signal
    },
      options);
    }
  


export const getPostTelephonyProcedureMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyProcedure>>, TError,{data: PostTelephonyProcedureBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyProcedure>>, TError,{data: PostTelephonyProcedureBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyProcedure>>, {data: PostTelephonyProcedureBody}> = (props) => {
          const {data} = props ?? {};

          return  postTelephonyProcedure(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyProcedureMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyProcedure>>>
    export type PostTelephonyProcedureMutationBody = PostTelephonyProcedureBody
    export type PostTelephonyProcedureMutationError = unknown

    /**
 * @summary Create a telephony procedure
 */
export const usePostTelephonyProcedure = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyProcedure>>, TError,{data: PostTelephonyProcedureBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyProcedure>>,
        TError,
        {data: PostTelephonyProcedureBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyProcedureMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Tells whether the procedure is necessary to order telephony products or not
 */
export const getTelephonyProcedureRequired = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/telephony/procedure/required`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyProcedureRequiredQueryKey = () => {
    return [`/telephony/procedure/required`] as const;
    }

    
export const getGetTelephonyProcedureRequiredQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyProcedureRequired>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedureRequired>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyProcedureRequiredQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyProcedureRequired>>> = ({ signal }) => getTelephonyProcedureRequired(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedureRequired>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyProcedureRequiredQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyProcedureRequired>>>
export type GetTelephonyProcedureRequiredQueryError = unknown


export function useGetTelephonyProcedureRequired<TData = Awaited<ReturnType<typeof getTelephonyProcedureRequired>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedureRequired>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyProcedureRequired>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyProcedureRequired<TData = Awaited<ReturnType<typeof getTelephonyProcedureRequired>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedureRequired>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyProcedureRequired>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyProcedureRequired<TData = Awaited<ReturnType<typeof getTelephonyProcedureRequired>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedureRequired>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Tells whether the procedure is necessary to order telephony products or not
 */

export function useGetTelephonyProcedureRequired<TData = Awaited<ReturnType<typeof getTelephonyProcedureRequired>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedureRequired>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyProcedureRequiredQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyProcedureId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyProcedureOVH>(
      {url: `/telephony/procedure/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyProcedureIdQueryKey = (id: number,) => {
    return [`/telephony/procedure/${id}`] as const;
    }

    
export const getGetTelephonyProcedureIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyProcedureId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedureId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyProcedureIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyProcedureId>>> = ({ signal }) => getTelephonyProcedureId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedureId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyProcedureIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyProcedureId>>>
export type GetTelephonyProcedureIdQueryError = unknown


export function useGetTelephonyProcedureId<TData = Awaited<ReturnType<typeof getTelephonyProcedureId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedureId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyProcedureId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyProcedureId<TData = Awaited<ReturnType<typeof getTelephonyProcedureId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedureId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyProcedureId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyProcedureId<TData = Awaited<ReturnType<typeof getTelephonyProcedureId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedureId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyProcedureId<TData = Awaited<ReturnType<typeof getTelephonyProcedureId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyProcedureId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyProcedureIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Cancel the given procedure.
 */
export const postTelephonyProcedureIdCancel = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/procedure/${id}/cancel`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyProcedureIdCancelMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyProcedureIdCancel>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyProcedureIdCancel>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyProcedureIdCancel>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postTelephonyProcedureIdCancel(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyProcedureIdCancelMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyProcedureIdCancel>>>
    
    export type PostTelephonyProcedureIdCancelMutationError = unknown

    /**
 * @summary Cancel the given procedure.
 */
export const usePostTelephonyProcedureIdCancel = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyProcedureIdCancel>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyProcedureIdCancel>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyProcedureIdCancelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate a new password for the reseller panel
 */
export const postTelephonyResellerPanelGeneratePassword = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/resellerPanel/generatePassword`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyResellerPanelGeneratePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyResellerPanelGeneratePassword>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyResellerPanelGeneratePassword>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyResellerPanelGeneratePassword>>, void> = () => {
          

          return  postTelephonyResellerPanelGeneratePassword(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyResellerPanelGeneratePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyResellerPanelGeneratePassword>>>
    
    export type PostTelephonyResellerPanelGeneratePasswordMutationError = unknown

    /**
 * @summary Generate a new password for the reseller panel
 */
export const usePostTelephonyResellerPanelGeneratePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyResellerPanelGeneratePassword>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyResellerPanelGeneratePassword>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostTelephonyResellerPanelGeneratePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Status of customer reseller panel
 */
export const getTelephonyResellerPanelStatus = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyResellerPanelStatusOVH>(
      {url: `/telephony/resellerPanel/status`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyResellerPanelStatusQueryKey = () => {
    return [`/telephony/resellerPanel/status`] as const;
    }

    
export const getGetTelephonyResellerPanelStatusQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyResellerPanelStatusQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>> = ({ signal }) => getTelephonyResellerPanelStatus(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyResellerPanelStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>>
export type GetTelephonyResellerPanelStatusQueryError = unknown


export function useGetTelephonyResellerPanelStatus<TData = Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyResellerPanelStatus<TData = Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyResellerPanelStatus<TData = Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Status of customer reseller panel
 */

export function useGetTelephonyResellerPanelStatus<TData = Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyResellerPanelStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyResellerPanelStatusQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Search a service with its domain, to get its billing account and type
 */
export const getTelephonySearchServices = (
    params: GetTelephonySearchServicesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTelephonySearchServiceOVH[]>(
      {url: `/telephony/searchServices`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonySearchServicesQueryKey = (params: GetTelephonySearchServicesParams,) => {
    return [`/telephony/searchServices`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonySearchServicesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonySearchServices>>, TError = unknown>(params: GetTelephonySearchServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySearchServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonySearchServicesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonySearchServices>>> = ({ signal }) => getTelephonySearchServices(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonySearchServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonySearchServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonySearchServices>>>
export type GetTelephonySearchServicesQueryError = unknown


export function useGetTelephonySearchServices<TData = Awaited<ReturnType<typeof getTelephonySearchServices>>, TError = unknown>(
 params: GetTelephonySearchServicesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySearchServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySearchServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySearchServices<TData = Awaited<ReturnType<typeof getTelephonySearchServices>>, TError = unknown>(
 params: GetTelephonySearchServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySearchServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySearchServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySearchServices<TData = Awaited<ReturnType<typeof getTelephonySearchServices>>, TError = unknown>(
 params: GetTelephonySearchServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySearchServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Search a service with its domain, to get its billing account and type
 */

export function useGetTelephonySearchServices<TData = Awaited<ReturnType<typeof getTelephonySearchServices>>, TError = unknown>(
 params: GetTelephonySearchServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySearchServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonySearchServicesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all available SIP domains by country
 */
export const postTelephonySetDefaultSipDomain = (
    postTelephonySetDefaultSipDomainBody: PostTelephonySetDefaultSipDomainBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/setDefaultSipDomain`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonySetDefaultSipDomainBody, signal
    },
      options);
    }
  


export const getPostTelephonySetDefaultSipDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonySetDefaultSipDomain>>, TError,{data: PostTelephonySetDefaultSipDomainBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonySetDefaultSipDomain>>, TError,{data: PostTelephonySetDefaultSipDomainBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonySetDefaultSipDomain>>, {data: PostTelephonySetDefaultSipDomainBody}> = (props) => {
          const {data} = props ?? {};

          return  postTelephonySetDefaultSipDomain(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonySetDefaultSipDomainMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonySetDefaultSipDomain>>>
    export type PostTelephonySetDefaultSipDomainMutationBody = PostTelephonySetDefaultSipDomainBody
    export type PostTelephonySetDefaultSipDomainMutationError = unknown

    /**
 * @summary Get all available SIP domains by country
 */
export const usePostTelephonySetDefaultSipDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonySetDefaultSipDomain>>, TError,{data: PostTelephonySetDefaultSipDomainBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonySetDefaultSipDomain>>,
        TError,
        {data: PostTelephonySetDefaultSipDomainBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonySetDefaultSipDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get softphone application stores links
 */
export const getTelephonySoftphoneStoreLinks = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySoftphoneStoreLinksOVH>(
      {url: `/telephony/softphone/storeLinks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonySoftphoneStoreLinksQueryKey = () => {
    return [`/telephony/softphone/storeLinks`] as const;
    }

    
export const getGetTelephonySoftphoneStoreLinksQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonySoftphoneStoreLinksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>> = ({ signal }) => getTelephonySoftphoneStoreLinks(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonySoftphoneStoreLinksQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>>
export type GetTelephonySoftphoneStoreLinksQueryError = unknown


export function useGetTelephonySoftphoneStoreLinks<TData = Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySoftphoneStoreLinks<TData = Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySoftphoneStoreLinks<TData = Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get softphone application stores links
 */

export function useGetTelephonySoftphoneStoreLinks<TData = Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneStoreLinks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonySoftphoneStoreLinksQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get IDs of available softphone themes
 */
export const getTelephonySoftphoneThemes = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/softphone/themes`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonySoftphoneThemesQueryKey = () => {
    return [`/telephony/softphone/themes`] as const;
    }

    
export const getGetTelephonySoftphoneThemesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonySoftphoneThemesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>> = ({ signal }) => getTelephonySoftphoneThemes(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonySoftphoneThemesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>>
export type GetTelephonySoftphoneThemesQueryError = unknown


export function useGetTelephonySoftphoneThemes<TData = Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySoftphoneThemes<TData = Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySoftphoneThemes<TData = Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get IDs of available softphone themes
 */

export function useGetTelephonySoftphoneThemes<TData = Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneThemes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonySoftphoneThemesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get softphone theme information
 */
export const getTelephonySoftphoneThemesThemeId = (
    themeId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySoftphoneThemeOVH>(
      {url: `/telephony/softphone/themes/${themeId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonySoftphoneThemesThemeIdQueryKey = (themeId: number,) => {
    return [`/telephony/softphone/themes/${themeId}`] as const;
    }

    
export const getGetTelephonySoftphoneThemesThemeIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>, TError = unknown>(themeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonySoftphoneThemesThemeIdQueryKey(themeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>> = ({ signal }) => getTelephonySoftphoneThemesThemeId(themeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(themeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonySoftphoneThemesThemeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>>
export type GetTelephonySoftphoneThemesThemeIdQueryError = unknown


export function useGetTelephonySoftphoneThemesThemeId<TData = Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>, TError = unknown>(
 themeId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySoftphoneThemesThemeId<TData = Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>, TError = unknown>(
 themeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySoftphoneThemesThemeId<TData = Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>, TError = unknown>(
 themeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get softphone theme information
 */

export function useGetTelephonySoftphoneThemesThemeId<TData = Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>, TError = unknown>(
 themeId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneThemesThemeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonySoftphoneThemesThemeIdQueryOptions(themeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the Softphone beta eligibility status of the account
 */
export const getTelephonySoftphoneBetaEligibility = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySoftphoneBetaEligibilityOVH>(
      {url: `/telephony/softphoneBetaEligibility`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonySoftphoneBetaEligibilityQueryKey = () => {
    return [`/telephony/softphoneBetaEligibility`] as const;
    }

    
export const getGetTelephonySoftphoneBetaEligibilityQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonySoftphoneBetaEligibilityQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>> = ({ signal }) => getTelephonySoftphoneBetaEligibility(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonySoftphoneBetaEligibilityQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>>
export type GetTelephonySoftphoneBetaEligibilityQueryError = unknown


export function useGetTelephonySoftphoneBetaEligibility<TData = Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySoftphoneBetaEligibility<TData = Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySoftphoneBetaEligibility<TData = Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the Softphone beta eligibility status of the account
 */

export function useGetTelephonySoftphoneBetaEligibility<TData = Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoftphoneBetaEligibility>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonySoftphoneBetaEligibilityQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Sounds attached to this telephony account
 */
export const getTelephonySounds = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/sounds`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonySoundsQueryKey = () => {
    return [`/telephony/sounds`] as const;
    }

    
export const getGetTelephonySoundsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonySounds>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySounds>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonySoundsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonySounds>>> = ({ signal }) => getTelephonySounds(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonySounds>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonySoundsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonySounds>>>
export type GetTelephonySoundsQueryError = unknown


export function useGetTelephonySounds<TData = Awaited<ReturnType<typeof getTelephonySounds>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySounds>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySounds>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySounds<TData = Awaited<ReturnType<typeof getTelephonySounds>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySounds>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySounds>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySounds<TData = Awaited<ReturnType<typeof getTelephonySounds>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySounds>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Sounds attached to this telephony account
 */

export function useGetTelephonySounds<TData = Awaited<ReturnType<typeof getTelephonySounds>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySounds>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonySoundsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new sound
 */
export const postTelephonySounds = (
    postTelephonySoundsBody: PostTelephonySoundsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySoundOVH>(
      {url: `/telephony/sounds`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonySoundsBody, signal
    },
      options);
    }
  


export const getPostTelephonySoundsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonySounds>>, TError,{data: PostTelephonySoundsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonySounds>>, TError,{data: PostTelephonySoundsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonySounds>>, {data: PostTelephonySoundsBody}> = (props) => {
          const {data} = props ?? {};

          return  postTelephonySounds(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonySoundsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonySounds>>>
    export type PostTelephonySoundsMutationBody = PostTelephonySoundsBody
    export type PostTelephonySoundsMutationError = unknown

    /**
 * @summary Create a new sound
 */
export const usePostTelephonySounds = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonySounds>>, TError,{data: PostTelephonySoundsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonySounds>>,
        TError,
        {data: PostTelephonySoundsBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonySoundsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the sound
 */
export const deleteTelephonySoundsId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/sounds/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonySoundsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonySoundsId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonySoundsId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonySoundsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteTelephonySoundsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonySoundsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonySoundsId>>>
    
    export type DeleteTelephonySoundsIdMutationError = unknown

    /**
 * @summary Delete the sound
 */
export const useDeleteTelephonySoundsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonySoundsId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonySoundsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonySoundsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonySoundsId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySoundOVH>(
      {url: `/telephony/sounds/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonySoundsIdQueryKey = (id: number,) => {
    return [`/telephony/sounds/${id}`] as const;
    }

    
export const getGetTelephonySoundsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonySoundsId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoundsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonySoundsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonySoundsId>>> = ({ signal }) => getTelephonySoundsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoundsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonySoundsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonySoundsId>>>
export type GetTelephonySoundsIdQueryError = unknown


export function useGetTelephonySoundsId<TData = Awaited<ReturnType<typeof getTelephonySoundsId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoundsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySoundsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySoundsId<TData = Awaited<ReturnType<typeof getTelephonySoundsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoundsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySoundsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySoundsId<TData = Awaited<ReturnType<typeof getTelephonySoundsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoundsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonySoundsId<TData = Awaited<ReturnType<typeof getTelephonySoundsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySoundsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonySoundsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonySoundsId = (
    id: number,
    telephonySoundOVH: NonReadonly<TelephonySoundOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/sounds/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonySoundOVH
    },
      options);
    }
  


export const getPutTelephonySoundsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonySoundsId>>, TError,{id: number;data: NonReadonly<TelephonySoundOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonySoundsId>>, TError,{id: number;data: NonReadonly<TelephonySoundOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonySoundsId>>, {id: number;data: NonReadonly<TelephonySoundOVH>}> = (props) => {
          const {id,data} = props ?? {};

          return  putTelephonySoundsId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonySoundsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonySoundsId>>>
    export type PutTelephonySoundsIdMutationBody = NonReadonly<TelephonySoundOVH>
    export type PutTelephonySoundsIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonySoundsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonySoundsId>>, TError,{id: number;data: NonReadonly<TelephonySoundOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonySoundsId>>,
        TError,
        {id: number;data: NonReadonly<TelephonySoundOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonySoundsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getTelephonySpare = (
    params?: GetTelephonySpareParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/spare`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonySpareQueryKey = (params?: GetTelephonySpareParams,) => {
    return [`/telephony/spare`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonySpareQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonySpare>>, TError = unknown>(params?: GetTelephonySpareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonySpareQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonySpare>>> = ({ signal }) => getTelephonySpare(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpare>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonySpareQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonySpare>>>
export type GetTelephonySpareQueryError = unknown


export function useGetTelephonySpare<TData = Awaited<ReturnType<typeof getTelephonySpare>>, TError = unknown>(
 params: undefined |  GetTelephonySpareParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpare>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySpare>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySpare<TData = Awaited<ReturnType<typeof getTelephonySpare>>, TError = unknown>(
 params?: GetTelephonySpareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpare>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySpare>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySpare<TData = Awaited<ReturnType<typeof getTelephonySpare>>, TError = unknown>(
 params?: GetTelephonySpareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetTelephonySpare<TData = Awaited<ReturnType<typeof getTelephonySpare>>, TError = unknown>(
 params?: GetTelephonySpareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonySpareQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all available spare brands
 */
export const getTelephonySpareBrands = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/spare/brands`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonySpareBrandsQueryKey = () => {
    return [`/telephony/spare/brands`] as const;
    }

    
export const getGetTelephonySpareBrandsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonySpareBrands>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareBrands>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonySpareBrandsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonySpareBrands>>> = ({ signal }) => getTelephonySpareBrands(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareBrands>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonySpareBrandsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonySpareBrands>>>
export type GetTelephonySpareBrandsQueryError = unknown


export function useGetTelephonySpareBrands<TData = Awaited<ReturnType<typeof getTelephonySpareBrands>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareBrands>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySpareBrands>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySpareBrands<TData = Awaited<ReturnType<typeof getTelephonySpareBrands>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareBrands>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySpareBrands>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySpareBrands<TData = Awaited<ReturnType<typeof getTelephonySpareBrands>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareBrands>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all available spare brands
 */

export function useGetTelephonySpareBrands<TData = Awaited<ReturnType<typeof getTelephonySpareBrands>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareBrands>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonySpareBrandsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the spare as if it was not belonging to OVH anymore
 */
export const deleteTelephonySpareSpare = (
    spare: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/spare/${spare}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonySpareSpareMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonySpareSpare>>, TError,{spare: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonySpareSpare>>, TError,{spare: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonySpareSpare>>, {spare: string}> = (props) => {
          const {spare} = props ?? {};

          return  deleteTelephonySpareSpare(spare,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonySpareSpareMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonySpareSpare>>>
    
    export type DeleteTelephonySpareSpareMutationError = unknown

    /**
 * @summary Delete the spare as if it was not belonging to OVH anymore
 */
export const useDeleteTelephonySpareSpare = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonySpareSpare>>, TError,{spare: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonySpareSpare>>,
        TError,
        {spare: string},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonySpareSpareMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonySpareSpare = (
    spare: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SpareTelephonyTelephonySpareWithIAMOVH>(
      {url: `/telephony/spare/${spare}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonySpareSpareQueryKey = (spare: string,) => {
    return [`/telephony/spare/${spare}`] as const;
    }

    
export const getGetTelephonySpareSpareQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonySpareSpare>>, TError = unknown>(spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonySpareSpareQueryKey(spare);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonySpareSpare>>> = ({ signal }) => getTelephonySpareSpare(spare, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(spare), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpare>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonySpareSpareQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonySpareSpare>>>
export type GetTelephonySpareSpareQueryError = unknown


export function useGetTelephonySpareSpare<TData = Awaited<ReturnType<typeof getTelephonySpareSpare>>, TError = unknown>(
 spare: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpare>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySpareSpare>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySpareSpare<TData = Awaited<ReturnType<typeof getTelephonySpareSpare>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpare>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySpareSpare>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySpareSpare<TData = Awaited<ReturnType<typeof getTelephonySpareSpare>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonySpareSpare<TData = Awaited<ReturnType<typeof getTelephonySpareSpare>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonySpareSpareQueryOptions(spare,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return the list of phone domains compatible to be replaced
 */
export const getTelephonySpareSpareCompatibleReplacement = (
    spare: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/spare/${spare}/compatibleReplacement`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonySpareSpareCompatibleReplacementQueryKey = (spare: string,) => {
    return [`/telephony/spare/${spare}/compatibleReplacement`] as const;
    }

    
export const getGetTelephonySpareSpareCompatibleReplacementQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>, TError = unknown>(spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonySpareSpareCompatibleReplacementQueryKey(spare);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>> = ({ signal }) => getTelephonySpareSpareCompatibleReplacement(spare, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(spare), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonySpareSpareCompatibleReplacementQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>>
export type GetTelephonySpareSpareCompatibleReplacementQueryError = unknown


export function useGetTelephonySpareSpareCompatibleReplacement<TData = Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>, TError = unknown>(
 spare: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySpareSpareCompatibleReplacement<TData = Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySpareSpareCompatibleReplacement<TData = Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return the list of phone domains compatible to be replaced
 */

export function useGetTelephonySpareSpareCompatibleReplacement<TData = Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpareCompatibleReplacement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonySpareSpareCompatibleReplacementQueryOptions(spare,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Replace the phone by its spare. The broken phone became a spare if it was bought. An RMA is created if the broken phone is under securitydeposit.
 * @summary Replace the phone by its spare
 */
export const postTelephonySpareSpareReplace = (
    spare: string,
    postTelephonySpareSpareReplaceBody: PostTelephonySpareSpareReplaceBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/spare/${spare}/replace`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonySpareSpareReplaceBody, signal
    },
      options);
    }
  


export const getPostTelephonySpareSpareReplaceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonySpareSpareReplace>>, TError,{spare: string;data: PostTelephonySpareSpareReplaceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonySpareSpareReplace>>, TError,{spare: string;data: PostTelephonySpareSpareReplaceBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonySpareSpareReplace>>, {spare: string;data: PostTelephonySpareSpareReplaceBody}> = (props) => {
          const {spare,data} = props ?? {};

          return  postTelephonySpareSpareReplace(spare,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonySpareSpareReplaceMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonySpareSpareReplace>>>
    export type PostTelephonySpareSpareReplaceMutationBody = PostTelephonySpareSpareReplaceBody
    export type PostTelephonySpareSpareReplaceMutationError = unknown

    /**
 * @summary Replace the phone by its spare
 */
export const usePostTelephonySpareSpareReplace = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonySpareSpareReplace>>, TError,{spare: string;data: PostTelephonySpareSpareReplaceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonySpareSpareReplace>>,
        TError,
        {spare: string;data: PostTelephonySpareSpareReplaceBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonySpareSpareReplaceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getTelephonySpareSpareServiceInfos = (
    spare: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/telephony/spare/${spare}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonySpareSpareServiceInfosQueryKey = (spare: string,) => {
    return [`/telephony/spare/${spare}/serviceInfos`] as const;
    }

    
export const getGetTelephonySpareSpareServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>, TError = unknown>(spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonySpareSpareServiceInfosQueryKey(spare);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>> = ({ signal }) => getTelephonySpareSpareServiceInfos(spare, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(spare), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonySpareSpareServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>>
export type GetTelephonySpareSpareServiceInfosQueryError = unknown


export function useGetTelephonySpareSpareServiceInfos<TData = Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>, TError = unknown>(
 spare: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySpareSpareServiceInfos<TData = Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonySpareSpareServiceInfos<TData = Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetTelephonySpareSpareServiceInfos<TData = Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonySpareSpareServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonySpareSpareServiceInfosQueryOptions(spare,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putTelephonySpareSpareServiceInfos = (
    spare: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/spare/${spare}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutTelephonySpareSpareServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonySpareSpareServiceInfos>>, TError,{spare: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonySpareSpareServiceInfos>>, TError,{spare: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonySpareSpareServiceInfos>>, {spare: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {spare,data} = props ?? {};

          return  putTelephonySpareSpareServiceInfos(spare,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonySpareSpareServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonySpareSpareServiceInfos>>>
    export type PutTelephonySpareSpareServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutTelephonySpareSpareServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutTelephonySpareSpareServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonySpareSpareServiceInfos>>, TError,{spare: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonySpareSpareServiceInfos>>,
        TError,
        {spare: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonySpareSpareServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Your telephony trunks
 */
export const getTelephonyTrunks = (
    params?: GetTelephonyTrunksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/trunks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyTrunksQueryKey = (params?: GetTelephonyTrunksParams,) => {
    return [`/telephony/trunks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyTrunksQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyTrunks>>, TError = unknown>(params?: GetTelephonyTrunksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyTrunksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyTrunks>>> = ({ signal }) => getTelephonyTrunks(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyTrunksQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyTrunks>>>
export type GetTelephonyTrunksQueryError = unknown


export function useGetTelephonyTrunks<TData = Awaited<ReturnType<typeof getTelephonyTrunks>>, TError = unknown>(
 params: undefined |  GetTelephonyTrunksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyTrunks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyTrunks<TData = Awaited<ReturnType<typeof getTelephonyTrunks>>, TError = unknown>(
 params?: GetTelephonyTrunksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyTrunks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyTrunks<TData = Awaited<ReturnType<typeof getTelephonyTrunks>>, TError = unknown>(
 params?: GetTelephonyTrunksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Your telephony trunks
 */

export function useGetTelephonyTrunks<TData = Awaited<ReturnType<typeof getTelephonyTrunks>>, TError = unknown>(
 params?: GetTelephonyTrunksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyTrunksQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyTrunksServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTelephonyGenericServiceWithIAMOVH>(
      {url: `/telephony/trunks/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyTrunksServiceNameQueryKey = (serviceName: string,) => {
    return [`/telephony/trunks/${serviceName}`] as const;
    }

    
export const getGetTelephonyTrunksServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyTrunksServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>> = ({ signal }) => getTelephonyTrunksServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyTrunksServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>>
export type GetTelephonyTrunksServiceNameQueryError = unknown


export function useGetTelephonyTrunksServiceName<TData = Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyTrunksServiceName<TData = Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyTrunksServiceName<TData = Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyTrunksServiceName<TData = Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunksServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyTrunksServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a contact change procedure
 */
export const postTelephonyTrunksServiceNameChangeContact = (
    serviceName: string,
    postTelephonyTrunksServiceNameChangeContactBody: PostTelephonyTrunksServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/trunks/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyTrunksServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostTelephonyTrunksServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyTrunksServiceNameChangeContact>>, TError,{serviceName: string;data: PostTelephonyTrunksServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyTrunksServiceNameChangeContact>>, TError,{serviceName: string;data: PostTelephonyTrunksServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyTrunksServiceNameChangeContact>>, {serviceName: string;data: PostTelephonyTrunksServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postTelephonyTrunksServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyTrunksServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyTrunksServiceNameChangeContact>>>
    export type PostTelephonyTrunksServiceNameChangeContactMutationBody = PostTelephonyTrunksServiceNameChangeContactBody
    export type PostTelephonyTrunksServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostTelephonyTrunksServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyTrunksServiceNameChangeContact>>, TError,{serviceName: string;data: PostTelephonyTrunksServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyTrunksServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostTelephonyTrunksServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyTrunksServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getTelephonyTrunksServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/telephony/trunks/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyTrunksServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/telephony/trunks/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetTelephonyTrunksServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyTrunksServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>> = ({ signal }) => getTelephonyTrunksServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyTrunksServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>>
export type GetTelephonyTrunksServiceNameServiceInfosQueryError = unknown


export function useGetTelephonyTrunksServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyTrunksServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyTrunksServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetTelephonyTrunksServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyTrunksServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyTrunksServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putTelephonyTrunksServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/trunks/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutTelephonyTrunksServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyTrunksServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyTrunksServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyTrunksServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putTelephonyTrunksServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyTrunksServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyTrunksServiceNameServiceInfos>>>
    export type PutTelephonyTrunksServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutTelephonyTrunksServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutTelephonyTrunksServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyTrunksServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyTrunksServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyTrunksServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ask for a billing account termination.
 */
export const deleteTelephonyBillingAccount = (
    billingAccount: string,
    params: DeleteTelephonyBillingAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccount>>, TError,{billingAccount: string;params: DeleteTelephonyBillingAccountParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccount>>, TError,{billingAccount: string;params: DeleteTelephonyBillingAccountParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccount>>, {billingAccount: string;params: DeleteTelephonyBillingAccountParams}> = (props) => {
          const {billingAccount,params} = props ?? {};

          return  deleteTelephonyBillingAccount(billingAccount,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccount>>>
    
    export type DeleteTelephonyBillingAccountMutationError = unknown

    /**
 * @summary Ask for a billing account termination.
 */
export const useDeleteTelephonyBillingAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccount>>, TError,{billingAccount: string;params: DeleteTelephonyBillingAccountParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccount>>,
        TError,
        {billingAccount: string;params: DeleteTelephonyBillingAccountParams},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccount = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyBillingAccountWithIAMOVH>(
      {url: `/telephony/${billingAccount}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}`] as const;
    }

    
export const getGetTelephonyBillingAccountQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccount>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccount>>> = ({ signal }) => getTelephonyBillingAccount(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccount>>>
export type GetTelephonyBillingAccountQueryError = unknown


export function useGetTelephonyBillingAccount<TData = Awaited<ReturnType<typeof getTelephonyBillingAccount>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccount<TData = Awaited<ReturnType<typeof getTelephonyBillingAccount>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccount<TData = Awaited<ReturnType<typeof getTelephonyBillingAccount>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccount<TData = Awaited<ReturnType<typeof getTelephonyBillingAccount>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccount = (
    billingAccount: string,
    telephonyBillingAccountOVH: NonReadonly<TelephonyBillingAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyBillingAccountOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccount>>, TError,{billingAccount: string;data: NonReadonly<TelephonyBillingAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccount>>, TError,{billingAccount: string;data: NonReadonly<TelephonyBillingAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccount>>, {billingAccount: string;data: NonReadonly<TelephonyBillingAccountOVH>}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  putTelephonyBillingAccount(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccount>>>
    export type PutTelephonyBillingAccountMutationBody = NonReadonly<TelephonyBillingAccountOVH>
    export type PutTelephonyBillingAccountMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccount>>, TError,{billingAccount: string;data: NonReadonly<TelephonyBillingAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccount>>,
        TError,
        {billingAccount: string;data: NonReadonly<TelephonyBillingAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Abbreviated numbers for the billing account
 */
export const getTelephonyBillingAccountAbbreviatedNumber = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/abbreviatedNumber`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountAbbreviatedNumberQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/abbreviatedNumber`] as const;
    }

    
export const getGetTelephonyBillingAccountAbbreviatedNumberQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountAbbreviatedNumberQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>> = ({ signal }) => getTelephonyBillingAccountAbbreviatedNumber(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountAbbreviatedNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>>
export type GetTelephonyBillingAccountAbbreviatedNumberQueryError = unknown


export function useGetTelephonyBillingAccountAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Abbreviated numbers for the billing account
 */

export function useGetTelephonyBillingAccountAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountAbbreviatedNumberQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new abbreviated number for the billing account
 */
export const postTelephonyBillingAccountAbbreviatedNumber = (
    billingAccount: string,
    postTelephonyBillingAccountAbbreviatedNumberBody: PostTelephonyBillingAccountAbbreviatedNumberBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyAbbreviatedNumberGroupOVH>(
      {url: `/telephony/${billingAccount}/abbreviatedNumber`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountAbbreviatedNumberBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountAbbreviatedNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountAbbreviatedNumber>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountAbbreviatedNumberBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountAbbreviatedNumber>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountAbbreviatedNumberBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountAbbreviatedNumber>>, {billingAccount: string;data: PostTelephonyBillingAccountAbbreviatedNumberBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postTelephonyBillingAccountAbbreviatedNumber(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountAbbreviatedNumberMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountAbbreviatedNumber>>>
    export type PostTelephonyBillingAccountAbbreviatedNumberMutationBody = PostTelephonyBillingAccountAbbreviatedNumberBody
    export type PostTelephonyBillingAccountAbbreviatedNumberMutationError = unknown

    /**
 * @summary Create a new abbreviated number for the billing account
 */
export const usePostTelephonyBillingAccountAbbreviatedNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountAbbreviatedNumber>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountAbbreviatedNumberBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountAbbreviatedNumber>>,
        TError,
        {billingAccount: string;data: PostTelephonyBillingAccountAbbreviatedNumberBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountAbbreviatedNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given abbreviated number
 */
export const deleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber = (
    billingAccount: string,
    abbreviatedNumber: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/abbreviatedNumber/${abbreviatedNumber}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError,{billingAccount: string;abbreviatedNumber: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError,{billingAccount: string;abbreviatedNumber: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, {billingAccount: string;abbreviatedNumber: number}> = (props) => {
          const {billingAccount,abbreviatedNumber} = props ?? {};

          return  deleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber(billingAccount,abbreviatedNumber,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>>
    
    export type DeleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberMutationError = unknown

    /**
 * @summary Delete the given abbreviated number
 */
export const useDeleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError,{billingAccount: string;abbreviatedNumber: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>,
        TError,
        {billingAccount: string;abbreviatedNumber: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber = (
    billingAccount: string,
    abbreviatedNumber: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyAbbreviatedNumberGroupOVH>(
      {url: `/telephony/${billingAccount}/abbreviatedNumber/${abbreviatedNumber}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberQueryKey = (billingAccount: string,
    abbreviatedNumber: number,) => {
    return [`/telephony/${billingAccount}/abbreviatedNumber/${abbreviatedNumber}`] as const;
    }

    
export const getGetTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError = unknown>(billingAccount: string,
    abbreviatedNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberQueryKey(billingAccount,abbreviatedNumber);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>> = ({ signal }) => getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber(billingAccount,abbreviatedNumber, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && abbreviatedNumber), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>>
export type GetTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberQueryError = unknown


export function useGetTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string,
    abbreviatedNumber: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string,
    abbreviatedNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string,
    abbreviatedNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string,
    abbreviatedNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberQueryOptions(billingAccount,abbreviatedNumber,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber = (
    billingAccount: string,
    abbreviatedNumber: number,
    telephonyAbbreviatedNumberGroupOVH: NonReadonly<TelephonyAbbreviatedNumberGroupOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/abbreviatedNumber/${abbreviatedNumber}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyAbbreviatedNumberGroupOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError,{billingAccount: string;abbreviatedNumber: number;data: NonReadonly<TelephonyAbbreviatedNumberGroupOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError,{billingAccount: string;abbreviatedNumber: number;data: NonReadonly<TelephonyAbbreviatedNumberGroupOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, {billingAccount: string;abbreviatedNumber: number;data: NonReadonly<TelephonyAbbreviatedNumberGroupOVH>}> = (props) => {
          const {billingAccount,abbreviatedNumber,data} = props ?? {};

          return  putTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber(billingAccount,abbreviatedNumber,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>>
    export type PutTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberMutationBody = NonReadonly<TelephonyAbbreviatedNumberGroupOVH>
    export type PutTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>, TError,{billingAccount: string;abbreviatedNumber: number;data: NonReadonly<TelephonyAbbreviatedNumberGroupOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumber>>,
        TError,
        {billingAccount: string;abbreviatedNumber: number;data: NonReadonly<TelephonyAbbreviatedNumberGroupOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the allowed creditThreshold for this billing account
 */
export const getTelephonyBillingAccountAllowedCreditThreshold = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH[]>(
      {url: `/telephony/${billingAccount}/allowedCreditThreshold`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountAllowedCreditThresholdQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/allowedCreditThreshold`] as const;
    }

    
export const getGetTelephonyBillingAccountAllowedCreditThresholdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountAllowedCreditThresholdQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>> = ({ signal }) => getTelephonyBillingAccountAllowedCreditThreshold(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountAllowedCreditThresholdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>>
export type GetTelephonyBillingAccountAllowedCreditThresholdQueryError = unknown


export function useGetTelephonyBillingAccountAllowedCreditThreshold<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountAllowedCreditThreshold<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountAllowedCreditThreshold<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the allowed creditThreshold for this billing account
 */

export function useGetTelephonyBillingAccountAllowedCreditThreshold<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAllowedCreditThreshold>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountAllowedCreditThresholdQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Give all amounts availables for your billing account
 */
export const getTelephonyBillingAccountAmountSecurityDeposit = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH[]>(
      {url: `/telephony/${billingAccount}/amountSecurityDeposit`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountAmountSecurityDepositQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/amountSecurityDeposit`] as const;
    }

    
export const getGetTelephonyBillingAccountAmountSecurityDepositQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountAmountSecurityDepositQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>> = ({ signal }) => getTelephonyBillingAccountAmountSecurityDeposit(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountAmountSecurityDepositQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>>
export type GetTelephonyBillingAccountAmountSecurityDepositQueryError = unknown


export function useGetTelephonyBillingAccountAmountSecurityDeposit<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountAmountSecurityDeposit<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountAmountSecurityDeposit<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Give all amounts availables for your billing account
 */

export function useGetTelephonyBillingAccountAmountSecurityDeposit<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountAmountSecurityDeposit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountAmountSecurityDepositQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Current billing account site (billing account features are overwritten by the site)
 */
export const getTelephonyBillingAccountBillingAccountSite = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/telephony/${billingAccount}/billingAccountSite`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountBillingAccountSiteQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/billingAccountSite`] as const;
    }

    
export const getGetTelephonyBillingAccountBillingAccountSiteQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountBillingAccountSiteQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>> = ({ signal }) => getTelephonyBillingAccountBillingAccountSite(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountBillingAccountSiteQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>>
export type GetTelephonyBillingAccountBillingAccountSiteQueryError = unknown


export function useGetTelephonyBillingAccountBillingAccountSite<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountBillingAccountSite<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountBillingAccountSite<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Current billing account site (billing account features are overwritten by the site)
 */

export function useGetTelephonyBillingAccountBillingAccountSite<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountBillingAccountSite>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountBillingAccountSiteQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Used to overwrite current billing account feature by the billing account site
 */
export const postTelephonyBillingAccountBillingAccountSite = (
    billingAccount: string,
    postTelephonyBillingAccountBillingAccountSiteBody: PostTelephonyBillingAccountBillingAccountSiteBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/billingAccountSite`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountBillingAccountSiteBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountBillingAccountSiteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountBillingAccountSite>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountBillingAccountSiteBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountBillingAccountSite>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountBillingAccountSiteBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountBillingAccountSite>>, {billingAccount: string;data: PostTelephonyBillingAccountBillingAccountSiteBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postTelephonyBillingAccountBillingAccountSite(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountBillingAccountSiteMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountBillingAccountSite>>>
    export type PostTelephonyBillingAccountBillingAccountSiteMutationBody = PostTelephonyBillingAccountBillingAccountSiteBody
    export type PostTelephonyBillingAccountBillingAccountSiteMutationError = unknown

    /**
 * @summary Used to overwrite current billing account feature by the billing account site
 */
export const usePostTelephonyBillingAccountBillingAccountSite = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountBillingAccountSite>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountBillingAccountSiteBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountBillingAccountSite>>,
        TError,
        {billingAccount: string;data: PostTelephonyBillingAccountBillingAccountSiteBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountBillingAccountSiteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Check if security deposit transfer is possible between two billing accounts
 */
export const postTelephonyBillingAccountCanTransferSecurityDeposit = (
    billingAccount: string,
    postTelephonyBillingAccountCanTransferSecurityDepositBody: PostTelephonyBillingAccountCanTransferSecurityDepositBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/telephony/${billingAccount}/canTransferSecurityDeposit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountCanTransferSecurityDepositBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountCanTransferSecurityDepositMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountCanTransferSecurityDeposit>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountCanTransferSecurityDepositBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountCanTransferSecurityDeposit>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountCanTransferSecurityDepositBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountCanTransferSecurityDeposit>>, {billingAccount: string;data: PostTelephonyBillingAccountCanTransferSecurityDepositBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postTelephonyBillingAccountCanTransferSecurityDeposit(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountCanTransferSecurityDepositMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountCanTransferSecurityDeposit>>>
    export type PostTelephonyBillingAccountCanTransferSecurityDepositMutationBody = PostTelephonyBillingAccountCanTransferSecurityDepositBody
    export type PostTelephonyBillingAccountCanTransferSecurityDepositMutationError = unknown

    /**
 * @summary Check if security deposit transfer is possible between two billing accounts
 */
export const usePostTelephonyBillingAccountCanTransferSecurityDeposit = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountCanTransferSecurityDeposit>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountCanTransferSecurityDepositBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountCanTransferSecurityDeposit>>,
        TError,
        {billingAccount: string;data: PostTelephonyBillingAccountCanTransferSecurityDepositBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountCanTransferSecurityDepositMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Cancel the billing account termination
 */
export const postTelephonyBillingAccountCancelTermination = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/cancelTermination`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountCancelTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountCancelTermination>>, TError,{billingAccount: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountCancelTermination>>, TError,{billingAccount: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountCancelTermination>>, {billingAccount: string}> = (props) => {
          const {billingAccount} = props ?? {};

          return  postTelephonyBillingAccountCancelTermination(billingAccount,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountCancelTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountCancelTermination>>>
    
    export type PostTelephonyBillingAccountCancelTerminationMutationError = unknown

    /**
 * @summary Cancel the billing account termination
 */
export const usePostTelephonyBillingAccountCancelTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountCancelTermination>>, TError,{billingAccount: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountCancelTermination>>,
        TError,
        {billingAccount: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountCancelTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Carrier SIP trunks associated with this billing account
 */
export const getTelephonyBillingAccountCarrierSip = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/carrierSip`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountCarrierSipQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/carrierSip`] as const;
    }

    
export const getGetTelephonyBillingAccountCarrierSipQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountCarrierSipQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>> = ({ signal }) => getTelephonyBillingAccountCarrierSip(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountCarrierSipQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>>
export type GetTelephonyBillingAccountCarrierSipQueryError = unknown


export function useGetTelephonyBillingAccountCarrierSip<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSip<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSip<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Carrier SIP trunks associated with this billing account
 */

export function useGetTelephonyBillingAccountCarrierSip<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSip>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountCarrierSipQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountCarrierSipServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyCarrierSipOVH>(
      {url: `/telephony/${billingAccount}/carrierSip/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountCarrierSipServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/carrierSip/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountCarrierSipServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountCarrierSipServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>> = ({ signal }) => getTelephonyBillingAccountCarrierSipServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountCarrierSipServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>>
export type GetTelephonyBillingAccountCarrierSipServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountCarrierSipServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountCarrierSipServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountCarrierSipServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the Call Detail Records of your Carrier SIP service
 */
export const getTelephonyBillingAccountCarrierSipServiceNameCdrs = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountCarrierSipServiceNameCdrsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDocumentOVH>(
      {url: `/telephony/${billingAccount}/carrierSip/${serviceName}/cdrs`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountCarrierSipServiceNameCdrsQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountCarrierSipServiceNameCdrsParams,) => {
    return [`/telephony/${billingAccount}/carrierSip/${serviceName}/cdrs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountCarrierSipServiceNameCdrsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountCarrierSipServiceNameCdrsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountCarrierSipServiceNameCdrsQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>> = ({ signal }) => getTelephonyBillingAccountCarrierSipServiceNameCdrs(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountCarrierSipServiceNameCdrsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>>
export type GetTelephonyBillingAccountCarrierSipServiceNameCdrsQueryError = unknown


export function useGetTelephonyBillingAccountCarrierSipServiceNameCdrs<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountCarrierSipServiceNameCdrsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameCdrs<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountCarrierSipServiceNameCdrsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameCdrs<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountCarrierSipServiceNameCdrsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the Call Detail Records of your Carrier SIP service
 */

export function useGetTelephonyBillingAccountCarrierSipServiceNameCdrs<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountCarrierSipServiceNameCdrsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameCdrs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountCarrierSipServiceNameCdrsQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get details about the carrier sip cluster of your stack
 */
export const getTelephonyBillingAccountCarrierSipServiceNameClusterDetails = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyCarrierSipClusterInfoOVH>(
      {url: `/telephony/${billingAccount}/carrierSip/${serviceName}/clusterDetails`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountCarrierSipServiceNameClusterDetailsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/carrierSip/${serviceName}/clusterDetails`] as const;
    }

    
export const getGetTelephonyBillingAccountCarrierSipServiceNameClusterDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountCarrierSipServiceNameClusterDetailsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>> = ({ signal }) => getTelephonyBillingAccountCarrierSipServiceNameClusterDetails(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountCarrierSipServiceNameClusterDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>>
export type GetTelephonyBillingAccountCarrierSipServiceNameClusterDetailsQueryError = unknown


export function useGetTelephonyBillingAccountCarrierSipServiceNameClusterDetails<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameClusterDetails<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameClusterDetails<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details about the carrier sip cluster of your stack
 */

export function useGetTelephonyBillingAccountCarrierSipServiceNameClusterDetails<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameClusterDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountCarrierSipServiceNameClusterDetailsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of your remote sip endpoints (ips, ports, protocol) of your carrier sip trunk service
 */
export const getTelephonyBillingAccountCarrierSipServiceNameEndpoints = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/carrierSip/${serviceName}/endpoints`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountCarrierSipServiceNameEndpointsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/carrierSip/${serviceName}/endpoints`] as const;
    }

    
export const getGetTelephonyBillingAccountCarrierSipServiceNameEndpointsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountCarrierSipServiceNameEndpointsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>> = ({ signal }) => getTelephonyBillingAccountCarrierSipServiceNameEndpoints(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountCarrierSipServiceNameEndpointsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>>
export type GetTelephonyBillingAccountCarrierSipServiceNameEndpointsQueryError = unknown


export function useGetTelephonyBillingAccountCarrierSipServiceNameEndpoints<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameEndpoints<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameEndpoints<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of your remote sip endpoints (ips, ports, protocol) of your carrier sip trunk service
 */

export function useGetTelephonyBillingAccountCarrierSipServiceNameEndpoints<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpoints>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountCarrierSipServiceNameEndpointsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountCarrierSipServiceNameEndpointsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyCarrierSipCustomerEndpointOVH>(
      {url: `/telephony/${billingAccount}/carrierSip/${serviceName}/endpoints/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountCarrierSipServiceNameEndpointsIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/carrierSip/${serviceName}/endpoints/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountCarrierSipServiceNameEndpointsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountCarrierSipServiceNameEndpointsIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>> = ({ signal }) => getTelephonyBillingAccountCarrierSipServiceNameEndpointsId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountCarrierSipServiceNameEndpointsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>>
export type GetTelephonyBillingAccountCarrierSipServiceNameEndpointsIdQueryError = unknown


export function useGetTelephonyBillingAccountCarrierSipServiceNameEndpointsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameEndpointsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameEndpointsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountCarrierSipServiceNameEndpointsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameEndpointsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountCarrierSipServiceNameEndpointsIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountCarrierSipServiceNameSettings = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyCarrierSipDetailsOVH>(
      {url: `/telephony/${billingAccount}/carrierSip/${serviceName}/settings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountCarrierSipServiceNameSettingsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/carrierSip/${serviceName}/settings`] as const;
    }

    
export const getGetTelephonyBillingAccountCarrierSipServiceNameSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountCarrierSipServiceNameSettingsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>> = ({ signal }) => getTelephonyBillingAccountCarrierSipServiceNameSettings(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountCarrierSipServiceNameSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>>
export type GetTelephonyBillingAccountCarrierSipServiceNameSettingsQueryError = unknown


export function useGetTelephonyBillingAccountCarrierSipServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountCarrierSipServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountCarrierSipServiceNameSettingsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountCarrierSipServiceNameSettings = (
    billingAccount: string,
    serviceName: string,
    telephonyCarrierSipDetailsOVH: NonReadonly<TelephonyCarrierSipDetailsOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/carrierSip/${serviceName}/settings`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyCarrierSipDetailsOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountCarrierSipServiceNameSettingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyCarrierSipDetailsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyCarrierSipDetailsOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountCarrierSipServiceNameSettings>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyCarrierSipDetailsOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountCarrierSipServiceNameSettings(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountCarrierSipServiceNameSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountCarrierSipServiceNameSettings>>>
    export type PutTelephonyBillingAccountCarrierSipServiceNameSettingsMutationBody = NonReadonly<TelephonyCarrierSipDetailsOVH>
    export type PutTelephonyBillingAccountCarrierSipServiceNameSettingsMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountCarrierSipServiceNameSettings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountCarrierSipServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyCarrierSipDetailsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountCarrierSipServiceNameSettings>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyCarrierSipDetailsOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountCarrierSipServiceNameSettingsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of your VNO mandates
 */
export const getTelephonyBillingAccountCarrierSipServiceNameVno = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/carrierSip/${serviceName}/vno`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountCarrierSipServiceNameVnoQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/carrierSip/${serviceName}/vno`] as const;
    }

    
export const getGetTelephonyBillingAccountCarrierSipServiceNameVnoQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountCarrierSipServiceNameVnoQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>> = ({ signal }) => getTelephonyBillingAccountCarrierSipServiceNameVno(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountCarrierSipServiceNameVnoQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>>
export type GetTelephonyBillingAccountCarrierSipServiceNameVnoQueryError = unknown


export function useGetTelephonyBillingAccountCarrierSipServiceNameVno<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameVno<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameVno<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of your VNO mandates
 */

export function useGetTelephonyBillingAccountCarrierSipServiceNameVno<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVno>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountCarrierSipServiceNameVnoQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference = (
    billingAccount: string,
    serviceName: string,
    contractReference: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyCarrierSipVnoMandateOVH>(
      {url: `/telephony/${billingAccount}/carrierSip/${serviceName}/vno/${contractReference}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceQueryKey = (billingAccount: string,
    serviceName: string,
    contractReference: string,) => {
    return [`/telephony/${billingAccount}/carrierSip/${serviceName}/vno/${contractReference}`] as const;
    }

    
export const getGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    contractReference: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceQueryKey(billingAccount,serviceName,contractReference);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>> = ({ signal }) => getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference(billingAccount,serviceName,contractReference, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && contractReference), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>>
export type GetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceQueryError = unknown


export function useGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReference<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    contractReference: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReference<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    contractReference: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReference<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    contractReference: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReference<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    contractReference: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReference>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceQueryOptions(billingAccount,serviceName,contractReference,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Number ranges associated with you mandate.
 */
export const getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges = (
    billingAccount: string,
    serviceName: string,
    contractReference: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/carrierSip/${serviceName}/vno/${contractReference}/ranges`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesQueryKey = (billingAccount: string,
    serviceName: string,
    contractReference: string,) => {
    return [`/telephony/${billingAccount}/carrierSip/${serviceName}/vno/${contractReference}/ranges`] as const;
    }

    
export const getGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    contractReference: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesQueryKey(billingAccount,serviceName,contractReference);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>> = ({ signal }) => getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges(billingAccount,serviceName,contractReference, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && contractReference), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>>
export type GetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesQueryError = unknown


export function useGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    contractReference: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    contractReference: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    contractReference: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Number ranges associated with you mandate.
 */

export function useGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    contractReference: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRanges>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesQueryOptions(billingAccount,serviceName,contractReference,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix = (
    billingAccount: string,
    serviceName: string,
    contractReference: string,
    prefix: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyCarrierSipVnoRangeOVH>(
      {url: `/telephony/${billingAccount}/carrierSip/${serviceName}/vno/${contractReference}/ranges/${prefix}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixQueryKey = (billingAccount: string,
    serviceName: string,
    contractReference: string,
    prefix: string,) => {
    return [`/telephony/${billingAccount}/carrierSip/${serviceName}/vno/${contractReference}/ranges/${prefix}`] as const;
    }

    
export const getGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    contractReference: string,
    prefix: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixQueryKey(billingAccount,serviceName,contractReference,prefix);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>> = ({ signal }) => getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix(billingAccount,serviceName,contractReference,prefix, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && contractReference && prefix), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>>
export type GetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixQueryError = unknown


export function useGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    contractReference: string,
    prefix: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    contractReference: string,
    prefix: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    contractReference: string,
    prefix: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    contractReference: string,
    prefix: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixQueryOptions(billingAccount,serviceName,contractReference,prefix,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix = (
    billingAccount: string,
    serviceName: string,
    contractReference: string,
    prefix: string,
    telephonyCarrierSipVnoRangeOVH: NonReadonly<TelephonyCarrierSipVnoRangeOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/carrierSip/${serviceName}/vno/${contractReference}/ranges/${prefix}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyCarrierSipVnoRangeOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError,{billingAccount: string;serviceName: string;contractReference: string;prefix: string;data: NonReadonly<TelephonyCarrierSipVnoRangeOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError,{billingAccount: string;serviceName: string;contractReference: string;prefix: string;data: NonReadonly<TelephonyCarrierSipVnoRangeOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, {billingAccount: string;serviceName: string;contractReference: string;prefix: string;data: NonReadonly<TelephonyCarrierSipVnoRangeOVH>}> = (props) => {
          const {billingAccount,serviceName,contractReference,prefix,data} = props ?? {};

          return  putTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix(billingAccount,serviceName,contractReference,prefix,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>>
    export type PutTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixMutationBody = NonReadonly<TelephonyCarrierSipVnoRangeOVH>
    export type PutTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>, TError,{billingAccount: string;serviceName: string;contractReference: string;prefix: string;data: NonReadonly<TelephonyCarrierSipVnoRangeOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefix>>,
        TError,
        {billingAccount: string;serviceName: string;contractReference: string;prefix: string;data: NonReadonly<TelephonyCarrierSipVnoRangeOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postTelephonyBillingAccountChangeContact = (
    billingAccount: string,
    postTelephonyBillingAccountChangeContactBody: PostTelephonyBillingAccountChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountChangeContactBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountChangeContact>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountChangeContact>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountChangeContact>>, {billingAccount: string;data: PostTelephonyBillingAccountChangeContactBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postTelephonyBillingAccountChangeContact(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountChangeContact>>>
    export type PostTelephonyBillingAccountChangeContactMutationBody = PostTelephonyBillingAccountChangeContactBody
    export type PostTelephonyBillingAccountChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostTelephonyBillingAccountChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountChangeContact>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountChangeContact>>,
        TError,
        {billingAccount: string;data: PostTelephonyBillingAccountChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Conferences associated with this billing account
 */
export const getTelephonyBillingAccountConference = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/conference`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/conference`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>> = ({ signal }) => getTelephonyBillingAccountConference(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>>
export type GetTelephonyBillingAccountConferenceQueryError = unknown


export function useGetTelephonyBillingAccountConference<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConference<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConference<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Conferences associated with this billing account
 */

export function useGetTelephonyBillingAccountConference<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConference>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountConferenceServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>>
export type GetTelephonyBillingAccountConferenceServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountConferenceServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the sound played at the beginning of the conference
 */
export const postTelephonyBillingAccountConferenceServiceNameAnnounceUpload = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountConferenceServiceNameAnnounceUploadBody: PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/announceUpload`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountConferenceServiceNameAnnounceUploadBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameAnnounceUploadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameAnnounceUpload>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameAnnounceUpload>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameAnnounceUpload>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameAnnounceUpload(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameAnnounceUpload>>>
    export type PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadMutationBody = PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadBody
    export type PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadMutationError = unknown

    /**
 * @summary Change the sound played at the beginning of the conference
 */
export const usePostTelephonyBillingAccountConferenceServiceNameAnnounceUpload = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameAnnounceUpload>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameAnnounceUpload>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameAnnounceUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List your past conferences for this number
 */
export const getTelephonyBillingAccountConferenceServiceNameHistories = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountConferenceServiceNameHistoriesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/histories`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameHistoriesQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountConferenceServiceNameHistoriesParams,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/histories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameHistoriesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountConferenceServiceNameHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameHistoriesQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameHistories(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameHistoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>>
export type GetTelephonyBillingAccountConferenceServiceNameHistoriesQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameHistories<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountConferenceServiceNameHistoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameHistories<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountConferenceServiceNameHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameHistories<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountConferenceServiceNameHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List your past conferences for this number
 */

export function useGetTelephonyBillingAccountConferenceServiceNameHistories<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountConferenceServiceNameHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameHistoriesQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountConferenceServiceNameHistoriesId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceHistoryOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/histories/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameHistoriesIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/histories/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameHistoriesIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameHistoriesIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameHistoriesId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameHistoriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>>
export type GetTelephonyBillingAccountConferenceServiceNameHistoriesIdQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameHistoriesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameHistoriesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameHistoriesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountConferenceServiceNameHistoriesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameHistoriesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameHistoriesIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get realtime conference informations
 */
export const getTelephonyBillingAccountConferenceServiceNameInformations = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceInformationsOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/informations`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameInformationsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/informations`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameInformationsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameInformationsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameInformations(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameInformationsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>>
export type GetTelephonyBillingAccountConferenceServiceNameInformationsQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameInformations<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameInformations<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameInformations<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get realtime conference informations
 */

export function useGetTelephonyBillingAccountConferenceServiceNameInformations<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameInformations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameInformationsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Lock the conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameLock = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/lock`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameLockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameLock>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameLock>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameLock>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameLock(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameLockMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameLock>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameLockMutationError = unknown

    /**
 * @summary Lock the conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameLock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameLock>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameLock>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameLockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Current participants of the associate conference
 */
export const getTelephonyBillingAccountConferenceServiceNameParticipants = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/participants`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameParticipantsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/participants`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameParticipantsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameParticipantsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameParticipants(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameParticipantsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>>
export type GetTelephonyBillingAccountConferenceServiceNameParticipantsQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameParticipants<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameParticipants<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameParticipants<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Current participants of the associate conference
 */

export function useGetTelephonyBillingAccountConferenceServiceNameParticipants<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipants>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameParticipantsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountConferenceServiceNameParticipantsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceParticipantsOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/participants/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameParticipantsIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/participants/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameParticipantsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameParticipantsIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameParticipantsId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameParticipantsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>>
export type GetTelephonyBillingAccountConferenceServiceNameParticipantsIdQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameParticipantsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameParticipantsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameParticipantsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountConferenceServiceNameParticipantsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameParticipantsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameParticipantsIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Make a participant deaf in your conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameParticipantsIdDeaf = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/participants/${id}/deaf`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameParticipantsIdDeafMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdDeaf>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdDeaf>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdDeaf>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameParticipantsIdDeaf(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdDeafMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdDeaf>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdDeafMutationError = unknown

    /**
 * @summary Make a participant deaf in your conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameParticipantsIdDeaf = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdDeaf>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdDeaf>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameParticipantsIdDeafMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change a participant level of audio transmission
 */
export const postTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergy = (
    billingAccount: string,
    serviceName: string,
    id: number,
    postTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyBody: PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/participants/${id}/energy`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergy>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergy>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergy>>, {billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyBody}> = (props) => {
          const {billingAccount,serviceName,id,data} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergy(billingAccount,serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergy>>>
    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyMutationBody = PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyBody
    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyMutationError = unknown

    /**
 * @summary Change a participant level of audio transmission
 */
export const usePostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergy>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergy>>,
        TError,
        {billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Eject a participant from your conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameParticipantsIdKick = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/participants/${id}/kick`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameParticipantsIdKickMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdKick>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdKick>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdKick>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameParticipantsIdKick(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdKickMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdKick>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdKickMutationError = unknown

    /**
 * @summary Eject a participant from your conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameParticipantsIdKick = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdKick>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdKick>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameParticipantsIdKickMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Mute a participant in your conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameParticipantsIdMute = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/participants/${id}/mute`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameParticipantsIdMuteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdMute>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdMute>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdMute>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameParticipantsIdMute(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdMuteMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdMute>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdMuteMutationError = unknown

    /**
 * @summary Mute a participant in your conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameParticipantsIdMute = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdMute>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdMute>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameParticipantsIdMuteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Make a participant undeaf your conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeaf = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/participants/${id}/undeaf`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeafMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeaf>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeaf>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeaf>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeaf(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeafMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeaf>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeafMutationError = unknown

    /**
 * @summary Make a participant undeaf your conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeaf = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeaf>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeaf>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeafMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Unmute a participant in your conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmute = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/participants/${id}/unmute`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmuteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmute>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmute>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmute>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmute(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmuteMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmute>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmuteMutationError = unknown

    /**
 * @summary Unmute a participant in your conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmute = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmute>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmute>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmuteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List your conferences rooms for this number
 */
export const getTelephonyBillingAccountConferenceServiceNameRooms = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameRoomsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/rooms`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameRoomsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameRoomsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameRooms(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameRoomsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>>
export type GetTelephonyBillingAccountConferenceServiceNameRoomsQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameRooms<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRooms<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRooms<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List your conferences rooms for this number
 */

export function useGetTelephonyBillingAccountConferenceServiceNameRooms<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRooms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameRoomsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new conference room on your conference service
 */
export const postTelephonyBillingAccountConferenceServiceNameRooms = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountConferenceServiceNameRoomsBody: PostTelephonyBillingAccountConferenceServiceNameRoomsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceRoomOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountConferenceServiceNameRoomsBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameRoomsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRooms>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameRoomsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRooms>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameRoomsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRooms>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameRoomsBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameRooms(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameRoomsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRooms>>>
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsMutationBody = PostTelephonyBillingAccountConferenceServiceNameRoomsBody
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsMutationError = unknown

    /**
 * @summary Create a new conference room on your conference service
 */
export const usePostTelephonyBillingAccountConferenceServiceNameRooms = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRooms>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameRoomsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRooms>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameRoomsBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameRoomsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceRoomOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberQueryKey = (billingAccount: string,
    serviceName: string,
    roomNumber: number,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    roomNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberQueryKey(billingAccount,serviceName,roomNumber);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber(billingAccount,serviceName,roomNumber, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && roomNumber), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>>
export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberQueryOptions(billingAccount,serviceName,roomNumber,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    telephonyConferenceRoomOVH: NonReadonly<TelephonyConferenceRoomOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyConferenceRoomOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;data: NonReadonly<TelephonyConferenceRoomOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;data: NonReadonly<TelephonyConferenceRoomOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, {billingAccount: string;serviceName: string;roomNumber: number;data: NonReadonly<TelephonyConferenceRoomOVH>}> = (props) => {
          const {billingAccount,serviceName,roomNumber,data} = props ?? {};

          return  putTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber(billingAccount,serviceName,roomNumber,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>>
    export type PutTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberMutationBody = NonReadonly<TelephonyConferenceRoomOVH>
    export type PutTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;data: NonReadonly<TelephonyConferenceRoomOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountConferenceServiceNameRoomsRoomNumber>>,
        TError,
        {billingAccount: string;serviceName: string;roomNumber: number;data: NonReadonly<TelephonyConferenceRoomOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List your past conferences for this room
 */
export const getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    params?: GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/histories`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesQueryKey = (billingAccount: string,
    serviceName: string,
    roomNumber: number,
    params?: GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesParams,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/histories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    roomNumber: number,
    params?: GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesQueryKey(billingAccount,serviceName,roomNumber,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories(billingAccount,serviceName,roomNumber,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && roomNumber), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>>
export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    params: undefined |  GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    params?: GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    params?: GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List your past conferences for this room
 */

export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    params?: GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesQueryOptions(billingAccount,serviceName,roomNumber,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceHistoryOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/histories/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesIdQueryKey = (billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/histories/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesIdQueryKey(billingAccount,serviceName,roomNumber,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId(billingAccount,serviceName,roomNumber,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && roomNumber && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>>
export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesIdQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesIdQueryOptions(billingAccount,serviceName,roomNumber,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Lock the conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLock = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/lock`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLock>>, TError,{billingAccount: string;serviceName: string;roomNumber: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLock>>, TError,{billingAccount: string;serviceName: string;roomNumber: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLock>>, {billingAccount: string;serviceName: string;roomNumber: number}> = (props) => {
          const {billingAccount,serviceName,roomNumber} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLock(billingAccount,serviceName,roomNumber,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLockMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLock>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLockMutationError = unknown

    /**
 * @summary Lock the conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLock>>, TError,{billingAccount: string;serviceName: string;roomNumber: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLock>>,
        TError,
        {billingAccount: string;serviceName: string;roomNumber: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Current participants of the conference room
 */
export const getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/participants`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsQueryKey = (billingAccount: string,
    serviceName: string,
    roomNumber: number,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/participants`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    roomNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsQueryKey(billingAccount,serviceName,roomNumber);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants(billingAccount,serviceName,roomNumber, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && roomNumber), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>>
export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Current participants of the conference room
 */

export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipants>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsQueryOptions(billingAccount,serviceName,roomNumber,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceParticipantsOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/participants/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdQueryKey = (billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/participants/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdQueryKey(billingAccount,serviceName,roomNumber,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId(billingAccount,serviceName,roomNumber,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && roomNumber && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>>
export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdQueryOptions(billingAccount,serviceName,roomNumber,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Make a participant deaf in your conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeaf = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/participants/${id}/deaf`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeafMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeaf>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeaf>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeaf>>, {billingAccount: string;serviceName: string;roomNumber: number;id: number}> = (props) => {
          const {billingAccount,serviceName,roomNumber,id} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeaf(billingAccount,serviceName,roomNumber,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeafMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeaf>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeafMutationError = unknown

    /**
 * @summary Make a participant deaf in your conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeaf = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeaf>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeaf>>,
        TError,
        {billingAccount: string;serviceName: string;roomNumber: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeafMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change a participant level of audio transmission
 */
export const postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergy = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,
    postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyBody: PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/participants/${id}/energy`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergy>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number;data: PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergy>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number;data: PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergy>>, {billingAccount: string;serviceName: string;roomNumber: number;id: number;data: PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyBody}> = (props) => {
          const {billingAccount,serviceName,roomNumber,id,data} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergy(billingAccount,serviceName,roomNumber,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergy>>>
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyMutationBody = PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyBody
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyMutationError = unknown

    /**
 * @summary Change a participant level of audio transmission
 */
export const usePostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergy>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number;data: PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergy>>,
        TError,
        {billingAccount: string;serviceName: string;roomNumber: number;id: number;data: PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Eject a participant from your conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKick = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/participants/${id}/kick`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKickMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKick>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKick>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKick>>, {billingAccount: string;serviceName: string;roomNumber: number;id: number}> = (props) => {
          const {billingAccount,serviceName,roomNumber,id} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKick(billingAccount,serviceName,roomNumber,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKickMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKick>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKickMutationError = unknown

    /**
 * @summary Eject a participant from your conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKick = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKick>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKick>>,
        TError,
        {billingAccount: string;serviceName: string;roomNumber: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKickMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Mute a participant in your conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMute = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/participants/${id}/mute`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMuteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMute>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMute>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMute>>, {billingAccount: string;serviceName: string;roomNumber: number;id: number}> = (props) => {
          const {billingAccount,serviceName,roomNumber,id} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMute(billingAccount,serviceName,roomNumber,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMuteMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMute>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMuteMutationError = unknown

    /**
 * @summary Mute a participant in your conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMute = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMute>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMute>>,
        TError,
        {billingAccount: string;serviceName: string;roomNumber: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMuteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Make a participant undeaf your conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeaf = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/participants/${id}/undeaf`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeafMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeaf>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeaf>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeaf>>, {billingAccount: string;serviceName: string;roomNumber: number;id: number}> = (props) => {
          const {billingAccount,serviceName,roomNumber,id} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeaf(billingAccount,serviceName,roomNumber,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeafMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeaf>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeafMutationError = unknown

    /**
 * @summary Make a participant undeaf your conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeaf = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeaf>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeaf>>,
        TError,
        {billingAccount: string;serviceName: string;roomNumber: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeafMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Unmute a participant in your conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmute = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/participants/${id}/unmute`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmuteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmute>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmute>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmute>>, {billingAccount: string;serviceName: string;roomNumber: number;id: number}> = (props) => {
          const {billingAccount,serviceName,roomNumber,id} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmute(billingAccount,serviceName,roomNumber,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmuteMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmute>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmuteMutationError = unknown

    /**
 * @summary Unmute a participant in your conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmute = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmute>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmute>>,
        TError,
        {billingAccount: string;serviceName: string;roomNumber: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmuteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Unlock the conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlock = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/unlock`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlock>>, TError,{billingAccount: string;serviceName: string;roomNumber: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlock>>, TError,{billingAccount: string;serviceName: string;roomNumber: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlock>>, {billingAccount: string;serviceName: string;roomNumber: number}> = (props) => {
          const {billingAccount,serviceName,roomNumber} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlock(billingAccount,serviceName,roomNumber,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlockMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlock>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlockMutationError = unknown

    /**
 * @summary Unlock the conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlock>>, TError,{billingAccount: string;serviceName: string;roomNumber: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlock>>,
        TError,
        {billingAccount: string;serviceName: string;roomNumber: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List your conference room  web access
 */
export const getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/webAccess`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessQueryKey = (billingAccount: string,
    serviceName: string,
    roomNumber: number,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/webAccess`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    roomNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessQueryKey(billingAccount,serviceName,roomNumber);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess(billingAccount,serviceName,roomNumber, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && roomNumber), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>>
export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List your conference room  web access
 */

export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessQueryOptions(billingAccount,serviceName,roomNumber,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a public web access to your conference
 */
export const postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessBody: PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceWebAccessOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/webAccess`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;data: PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;data: PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, {billingAccount: string;serviceName: string;roomNumber: number;data: PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessBody}> = (props) => {
          const {billingAccount,serviceName,roomNumber,data} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess(billingAccount,serviceName,roomNumber,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>>
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessMutationBody = PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessBody
    export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessMutationError = unknown

    /**
 * @summary Add a public web access to your conference
 */
export const usePostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;data: PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccess>>,
        TError,
        {billingAccount: string;serviceName: string;roomNumber: number;data: PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a public web access to your conference
 */
export const deleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/webAccess/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, {billingAccount: string;serviceName: string;roomNumber: number;id: number}> = (props) => {
          const {billingAccount,serviceName,roomNumber,id} = props ?? {};

          return  deleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId(billingAccount,serviceName,roomNumber,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>>
    
    export type DeleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdMutationError = unknown

    /**
 * @summary Delete a public web access to your conference
 */
export const useDeleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError,{billingAccount: string;serviceName: string;roomNumber: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>,
        TError,
        {billingAccount: string;serviceName: string;roomNumber: number;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId = (
    billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceWebAccessOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/webAccess/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdQueryKey = (billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/rooms/${roomNumber}/webAccess/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdQueryKey(billingAccount,serviceName,roomNumber,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId(billingAccount,serviceName,roomNumber,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && roomNumber && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>>
export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    roomNumber: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdQueryOptions(billingAccount,serviceName,roomNumber,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get realtime statistics about all rooms of your conference number
 */
export const getTelephonyBillingAccountConferenceServiceNameRoomsStats = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceRoomsStatisticsOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/roomsStats`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameRoomsStatsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/roomsStats`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameRoomsStatsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameRoomsStatsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameRoomsStats(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameRoomsStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>>
export type GetTelephonyBillingAccountConferenceServiceNameRoomsStatsQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameRoomsStats<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsStats<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameRoomsStats<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get realtime statistics about all rooms of your conference number
 */

export function useGetTelephonyBillingAccountConferenceServiceNameRoomsStats<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameRoomsStats>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameRoomsStatsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountConferenceServiceNameSettings = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferencePropertiesOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/settings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameSettingsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/settings`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameSettingsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameSettings(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>>
export type GetTelephonyBillingAccountConferenceServiceNameSettingsQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountConferenceServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameSettingsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountConferenceServiceNameSettings = (
    billingAccount: string,
    serviceName: string,
    telephonyConferencePropertiesOVH: NonReadonly<TelephonyConferencePropertiesOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/settings`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyConferencePropertiesOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountConferenceServiceNameSettingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountConferenceServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyConferencePropertiesOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountConferenceServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyConferencePropertiesOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountConferenceServiceNameSettings>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyConferencePropertiesOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountConferenceServiceNameSettings(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountConferenceServiceNameSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountConferenceServiceNameSettings>>>
    export type PutTelephonyBillingAccountConferenceServiceNameSettingsMutationBody = NonReadonly<TelephonyConferencePropertiesOVH>
    export type PutTelephonyBillingAccountConferenceServiceNameSettingsMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountConferenceServiceNameSettings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountConferenceServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyConferencePropertiesOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountConferenceServiceNameSettings>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyConferencePropertiesOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountConferenceServiceNameSettingsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Unlock the conference room
 */
export const postTelephonyBillingAccountConferenceServiceNameUnlock = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/unlock`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameUnlockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameUnlock>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameUnlock>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameUnlock>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameUnlock(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameUnlockMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameUnlock>>>
    
    export type PostTelephonyBillingAccountConferenceServiceNameUnlockMutationError = unknown

    /**
 * @summary Unlock the conference room
 */
export const usePostTelephonyBillingAccountConferenceServiceNameUnlock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameUnlock>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameUnlock>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameUnlockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List your conference web access
 */
export const getTelephonyBillingAccountConferenceServiceNameWebAccess = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/webAccess`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameWebAccessQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/webAccess`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameWebAccessQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameWebAccessQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameWebAccess(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameWebAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>>
export type GetTelephonyBillingAccountConferenceServiceNameWebAccessQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameWebAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameWebAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameWebAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List your conference web access
 */

export function useGetTelephonyBillingAccountConferenceServiceNameWebAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameWebAccessQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a public web access to your conference
 */
export const postTelephonyBillingAccountConferenceServiceNameWebAccess = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountConferenceServiceNameWebAccessBody: PostTelephonyBillingAccountConferenceServiceNameWebAccessBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceWebAccessOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/webAccess`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountConferenceServiceNameWebAccessBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountConferenceServiceNameWebAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameWebAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameWebAccessBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameWebAccess>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameWebAccessBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountConferenceServiceNameWebAccess(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountConferenceServiceNameWebAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameWebAccess>>>
    export type PostTelephonyBillingAccountConferenceServiceNameWebAccessMutationBody = PostTelephonyBillingAccountConferenceServiceNameWebAccessBody
    export type PostTelephonyBillingAccountConferenceServiceNameWebAccessMutationError = unknown

    /**
 * @summary Add a public web access to your conference
 */
export const usePostTelephonyBillingAccountConferenceServiceNameWebAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameWebAccess>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameWebAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountConferenceServiceNameWebAccess>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountConferenceServiceNameWebAccessBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountConferenceServiceNameWebAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a public web access to your conference
 */
export const deleteTelephonyBillingAccountConferenceServiceNameWebAccessId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/webAccess/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountConferenceServiceNameWebAccessIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountConferenceServiceNameWebAccessId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountConferenceServiceNameWebAccessId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountConferenceServiceNameWebAccessIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountConferenceServiceNameWebAccessId>>>
    
    export type DeleteTelephonyBillingAccountConferenceServiceNameWebAccessIdMutationError = unknown

    /**
 * @summary Delete a public web access to your conference
 */
export const useDeleteTelephonyBillingAccountConferenceServiceNameWebAccessId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountConferenceServiceNameWebAccessId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountConferenceServiceNameWebAccessIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountConferenceServiceNameWebAccessId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConferenceWebAccessOVH>(
      {url: `/telephony/${billingAccount}/conference/${serviceName}/webAccess/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountConferenceServiceNameWebAccessIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/conference/${serviceName}/webAccess/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountConferenceServiceNameWebAccessIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountConferenceServiceNameWebAccessIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>> = ({ signal }) => getTelephonyBillingAccountConferenceServiceNameWebAccessId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountConferenceServiceNameWebAccessIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>>
export type GetTelephonyBillingAccountConferenceServiceNameWebAccessIdQueryError = unknown


export function useGetTelephonyBillingAccountConferenceServiceNameWebAccessId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameWebAccessId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountConferenceServiceNameWebAccessId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountConferenceServiceNameWebAccessId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountConferenceServiceNameWebAccessId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountConferenceServiceNameWebAccessIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary DDIs (direct dial-in) associated with this billing account
 */
export const getTelephonyBillingAccountDdi = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/ddi`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountDdiQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/ddi`] as const;
    }

    
export const getGetTelephonyBillingAccountDdiQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountDdiQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>> = ({ signal }) => getTelephonyBillingAccountDdi(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountDdiQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>>
export type GetTelephonyBillingAccountDdiQueryError = unknown


export function useGetTelephonyBillingAccountDdi<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountDdi<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountDdi<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary DDIs (direct dial-in) associated with this billing account
 */

export function useGetTelephonyBillingAccountDdi<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountDdi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountDdiQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountDdiServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDdiOVH>(
      {url: `/telephony/${billingAccount}/ddi/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountDdiServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/ddi/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountDdiServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountDdiServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>> = ({ signal }) => getTelephonyBillingAccountDdiServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountDdiServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>>
export type GetTelephonyBillingAccountDdiServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountDdiServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountDdiServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountDdiServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountDdiServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountDdiServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountDdiServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountDdiServiceName = (
    billingAccount: string,
    serviceName: string,
    telephonyDdiOVH: NonReadonly<TelephonyDdiOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ddi/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyDdiOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountDdiServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountDdiServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyDdiOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountDdiServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyDdiOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountDdiServiceName>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyDdiOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountDdiServiceName(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountDdiServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountDdiServiceName>>>
    export type PutTelephonyBillingAccountDdiServiceNameMutationBody = NonReadonly<TelephonyDdiOVH>
    export type PutTelephonyBillingAccountDdiServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountDdiServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountDdiServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyDdiOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountDdiServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyDdiOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountDdiServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the destination of the DDI
 */
export const postTelephonyBillingAccountDdiServiceNameChangeDestination = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountDdiServiceNameChangeDestinationBody: PostTelephonyBillingAccountDdiServiceNameChangeDestinationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ddi/${serviceName}/changeDestination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountDdiServiceNameChangeDestinationBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountDdiServiceNameChangeDestinationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountDdiServiceNameChangeDestination>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountDdiServiceNameChangeDestinationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountDdiServiceNameChangeDestination>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountDdiServiceNameChangeDestinationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountDdiServiceNameChangeDestination>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountDdiServiceNameChangeDestinationBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountDdiServiceNameChangeDestination(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountDdiServiceNameChangeDestinationMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountDdiServiceNameChangeDestination>>>
    export type PostTelephonyBillingAccountDdiServiceNameChangeDestinationMutationBody = PostTelephonyBillingAccountDdiServiceNameChangeDestinationBody
    export type PostTelephonyBillingAccountDdiServiceNameChangeDestinationMutationError = unknown

    /**
 * @summary Change the destination of the DDI
 */
export const usePostTelephonyBillingAccountDdiServiceNameChangeDestination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountDdiServiceNameChangeDestination>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountDdiServiceNameChangeDestinationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountDdiServiceNameChangeDestination>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountDdiServiceNameChangeDestinationBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountDdiServiceNameChangeDestinationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary OVH easy calls queues associated with this billing account
 */
export const getTelephonyBillingAccountEasyHunting = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/easyHunting`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/easyHunting`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>> = ({ signal }) => getTelephonyBillingAccountEasyHunting(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>>
export type GetTelephonyBillingAccountEasyHuntingQueryError = unknown


export function useGetTelephonyBillingAccountEasyHunting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHunting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHunting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary OVH easy calls queues associated with this billing account
 */

export function useGetTelephonyBillingAccountEasyHunting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHunting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEasyHuntingOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountEasyHuntingServiceName = (
    billingAccount: string,
    serviceName: string,
    telephonyEasyHuntingOVH: NonReadonly<TelephonyEasyHuntingOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyEasyHuntingOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountEasyHuntingServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyEasyHuntingOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyEasyHuntingOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceName>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyEasyHuntingOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountEasyHuntingServiceName(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountEasyHuntingServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceName>>>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameMutationBody = NonReadonly<TelephonyEasyHuntingOVH>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountEasyHuntingServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyEasyHuntingOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyEasyHuntingOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountEasyHuntingServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHunting = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHunting(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHunting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHunting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHunting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHunting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountEasyHuntingServiceNameHunting = (
    billingAccount: string,
    serviceName: string,
    telephonyOvhPabxHuntingOVH: NonReadonly<TelephonyOvhPabxHuntingOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxHuntingOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountEasyHuntingServiceNameHuntingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxHuntingOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxHuntingOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHunting>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxHuntingOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountEasyHuntingServiceNameHunting(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHunting>>>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingMutationBody = NonReadonly<TelephonyOvhPabxHuntingOVH>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountEasyHuntingServiceNameHunting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHunting>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxHuntingOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHunting>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxHuntingOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountEasyHuntingServiceNameHuntingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Calls agents
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Calls agents
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new agent
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentMutationError = unknown

    /**
 * @summary Create a new agent
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgent>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given agent
 */
export const deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, {billingAccount: string;serviceName: string;agentId: number}> = (props) => {
          const {billingAccount,serviceName,agentId} = props ?? {};

          return  deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId(billingAccount,serviceName,agentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>>
    
    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdMutationError = unknown

    /**
 * @summary Delete the given agent
 */
export const useDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueryKey(billingAccount,serviceName,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId(billingAccount,serviceName,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueryOptions(billingAccount,serviceName,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    telephonyOvhPabxHuntingAgentOVH: NonReadonly<TelephonyOvhPabxHuntingAgentOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxHuntingAgentOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, {billingAccount: string;serviceName: string;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentOVH>}> = (props) => {
          const {billingAccount,serviceName,agentId,data} = props ?? {};

          return  putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId(billingAccount,serviceName,agentId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdMutationBody = NonReadonly<TelephonyOvhPabxHuntingAgentOVH>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentId>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given web access
 */
export const deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/bannerAccess`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, {billingAccount: string;serviceName: string;agentId: number}> = (props) => {
          const {billingAccount,serviceName,agentId} = props ?? {};

          return  deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess(billingAccount,serviceName,agentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>>
    
    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessMutationError = unknown

    /**
 * @summary Delete the given web access
 */
export const useDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyBannerAccessOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/bannerAccess`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/bannerAccess`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessQueryKey(billingAccount,serviceName,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess(billingAccount,serviceName,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessQueryOptions(billingAccount,serviceName,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new web access for this ressource
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyBannerAccessOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/bannerAccess`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, {billingAccount: string;serviceName: string;agentId: number}> = (props) => {
          const {billingAccount,serviceName,agentId} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess(billingAccount,serviceName,agentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>>
    
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessMutationError = unknown

    /**
 * @summary Create a new web access for this ressource
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccess>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Current calls of the callcenter agent
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/calls`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/calls`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsQueryKey(billingAccount,serviceName,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls(billingAccount,serviceName,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Current calls of the callcenter agent
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsQueryOptions(billingAccount,serviceName,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingQueueLiveCallsOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/calls/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/calls/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdQueryKey(billingAccount,serviceName,agentId,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId(billingAccount,serviceName,agentId,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdQueryOptions(billingAccount,serviceName,agentId,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Eavesdrop on a call
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdrop = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/calls/${id}/eavesdrop`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdrop>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdrop>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdrop>>, {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropBody}> = (props) => {
          const {billingAccount,serviceName,agentId,id,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdrop(billingAccount,serviceName,agentId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdrop>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropMutationError = unknown

    /**
 * @summary Eavesdrop on a call
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdrop = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdrop>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdrop>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Hangup a call
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangup = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/calls/${id}/hangup`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangup>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangup>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangup>>, {billingAccount: string;serviceName: string;agentId: number;id: number}> = (props) => {
          const {billingAccount,serviceName,agentId,id} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangup(billingAccount,serviceName,agentId,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangupMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangup>>>
    
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangupMutationError = unknown

    /**
 * @summary Hangup a call
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangup>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangup>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Toogle hold on call
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHold = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/calls/${id}/hold`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHoldMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHold>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHold>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHold>>, {billingAccount: string;serviceName: string;agentId: number;id: number}> = (props) => {
          const {billingAccount,serviceName,agentId,id} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHold(billingAccount,serviceName,agentId,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHoldMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHold>>>
    
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHoldMutationError = unknown

    /**
 * @summary Toogle hold on call
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHold = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHold>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHold>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHoldMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Intercept a non answered call
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdIntercept = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/calls/${id}/intercept`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdIntercept>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdIntercept>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdIntercept>>, {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptBody}> = (props) => {
          const {billingAccount,serviceName,agentId,id,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdIntercept(billingAccount,serviceName,agentId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdIntercept>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptMutationError = unknown

    /**
 * @summary Intercept a non answered call
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdIntercept = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdIntercept>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdIntercept>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Transfer an answered call
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransfer = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/calls/${id}/transfer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransfer>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransfer>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransfer>>, {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferBody}> = (props) => {
          const {billingAccount,serviceName,agentId,id,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransfer(billingAccount,serviceName,agentId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransfer>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferMutationError = unknown

    /**
 * @summary Transfer an answered call
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransfer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransfer>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransfer>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Whisper on a call
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisper = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/calls/${id}/whisper`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisper>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisper>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisper>>, {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperBody}> = (props) => {
          const {billingAccount,serviceName,agentId,id,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisper(billingAccount,serviceName,agentId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisper>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperMutationError = unknown

    /**
 * @summary Whisper on a call
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisper = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisper>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisper>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given token
 */
export const deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/eventToken`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, {billingAccount: string;serviceName: string;agentId: number}> = (props) => {
          const {billingAccount,serviceName,agentId} = props ?? {};

          return  deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken(billingAccount,serviceName,agentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>>
    
    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenMutationError = unknown

    /**
 * @summary Delete the given token
 */
export const useDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEventTokenOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/eventToken`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/eventToken`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenQueryKey(billingAccount,serviceName,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken(billingAccount,serviceName,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenQueryOptions(billingAccount,serviceName,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new token
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/eventToken`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, {billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenBody}> = (props) => {
          const {billingAccount,serviceName,agentId,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken(billingAccount,serviceName,agentId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenMutationError = unknown

    /**
 * @summary Create a new token
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventToken>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentLiveStatusOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/liveStatus`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatusQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/liveStatus`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatusQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatusQueryKey(billingAccount,serviceName,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus(billingAccount,serviceName,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatusQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatusQueryOptions(billingAccount,serviceName,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Agent assigned to the queues
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/queue`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/queue`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueryKey(billingAccount,serviceName,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue(billingAccount,serviceName,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Agent assigned to the queues
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueryOptions(billingAccount,serviceName,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new skill for an agent (it adds the agent in a queue)
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentQueueOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/queue`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, {billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueBody}> = (props) => {
          const {billingAccount,serviceName,agentId,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue(billingAccount,serviceName,agentId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueMutationError = unknown

    /**
 * @summary Create a new skill for an agent (it adds the agent in a queue)
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueue>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given skill
 */
export const deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/queue/${queueId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError,{billingAccount: string;serviceName: string;agentId: number;queueId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError,{billingAccount: string;serviceName: string;agentId: number;queueId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, {billingAccount: string;serviceName: string;agentId: number;queueId: number}> = (props) => {
          const {billingAccount,serviceName,agentId,queueId} = props ?? {};

          return  deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId(billingAccount,serviceName,agentId,queueId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>>
    
    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdMutationError = unknown

    /**
 * @summary Delete the given skill
 */
export const useDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError,{billingAccount: string;serviceName: string;agentId: number;queueId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;queueId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentQueueOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/queue/${queueId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/queue/${queueId}`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdQueryKey(billingAccount,serviceName,agentId,queueId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId(billingAccount,serviceName,agentId,queueId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId && queueId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdQueryOptions(billingAccount,serviceName,agentId,queueId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number,
    telephonyOvhPabxHuntingAgentQueueOVH: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/queue/${queueId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxHuntingAgentQueueOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError,{billingAccount: string;serviceName: string;agentId: number;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError,{billingAccount: string;serviceName: string;agentId: number;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, {billingAccount: string;serviceName: string;agentId: number;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}> = (props) => {
          const {billingAccount,serviceName,agentId,queueId,data} = props ?? {};

          return  putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId(billingAccount,serviceName,agentId,queueId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdMutationBody = NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>, TError,{billingAccount: string;serviceName: string;agentId: number;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueId>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentLiveStatusOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/queue/${queueId}/liveStatus`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/agent/${agentId}/queue/${queueId}/liveStatus`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusQueryKey(billingAccount,serviceName,agentId,queueId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus(billingAccount,serviceName,agentId,queueId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId && queueId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusQueryOptions(billingAccount,serviceName,agentId,queueId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Custom statuses of your agents
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/customStatus`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/customStatus`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Custom statuses of your agents
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new custom status
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxCustomStatusOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/customStatus`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusMutationError = unknown

    /**
 * @summary Create a new custom status
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatus>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given custom status
 */
export const deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/customStatus/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>>
    
    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdMutationError = unknown

    /**
 * @summary Delete the given custom status
 */
export const useDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxCustomStatusOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/customStatus/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/customStatus/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the given token
 */
export const deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/eventToken`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>>
    
    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenMutationError = unknown

    /**
 * @summary Delete the given token
 */
export const useDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEventTokenOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/eventToken`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/eventToken`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new token
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/eventToken`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenMutationError = unknown

    /**
 * @summary Create a new token
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingEventToken>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Calls queues
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Calls queues
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new queue
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingQueueOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueMutationError = unknown

    /**
 * @summary Create a new queue
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueue>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given queue
 */
export const deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError,{billingAccount: string;serviceName: string;queueId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError,{billingAccount: string;serviceName: string;queueId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, {billingAccount: string;serviceName: string;queueId: number}> = (props) => {
          const {billingAccount,serviceName,queueId} = props ?? {};

          return  deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId(billingAccount,serviceName,queueId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>>
    
    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdMutationError = unknown

    /**
 * @summary Delete the given queue
 */
export const useDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError,{billingAccount: string;serviceName: string;queueId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingQueueOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdQueryKey(billingAccount,serviceName,queueId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId(billingAccount,serviceName,queueId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdQueryOptions(billingAccount,serviceName,queueId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    telephonyOvhPabxHuntingQueueOVH: NonReadonly<TelephonyOvhPabxHuntingQueueOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxHuntingQueueOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError,{billingAccount: string;serviceName: string;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingQueueOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError,{billingAccount: string;serviceName: string;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingQueueOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, {billingAccount: string;serviceName: string;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingQueueOVH>}> = (props) => {
          const {billingAccount,serviceName,queueId,data} = props ?? {};

          return  putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId(billingAccount,serviceName,queueId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdMutationBody = NonReadonly<TelephonyOvhPabxHuntingQueueOVH>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>, TError,{billingAccount: string;serviceName: string;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingQueueOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueId>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingQueueOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Agent assigned to the queue
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/agent`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/agent`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentQueryKey(billingAccount,serviceName,queueId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent(billingAccount,serviceName,queueId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Agent assigned to the queue
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentQueryOptions(billingAccount,serviceName,queueId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the given skill
 */
export const deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/agent/${agentId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError,{billingAccount: string;serviceName: string;queueId: number;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError,{billingAccount: string;serviceName: string;queueId: number;agentId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, {billingAccount: string;serviceName: string;queueId: number;agentId: number}> = (props) => {
          const {billingAccount,serviceName,queueId,agentId} = props ?? {};

          return  deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId(billingAccount,serviceName,queueId,agentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>>
    
    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdMutationError = unknown

    /**
 * @summary Delete the given skill
 */
export const useDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError,{billingAccount: string;serviceName: string;queueId: number;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;agentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentQueueOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/agent/${agentId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/agent/${agentId}`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdQueryKey(billingAccount,serviceName,queueId,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId(billingAccount,serviceName,queueId,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdQueryOptions(billingAccount,serviceName,queueId,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number,
    telephonyOvhPabxHuntingAgentQueueOVH: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/agent/${agentId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxHuntingAgentQueueOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError,{billingAccount: string;serviceName: string;queueId: number;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError,{billingAccount: string;serviceName: string;queueId: number;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, {billingAccount: string;serviceName: string;queueId: number;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}> = (props) => {
          const {billingAccount,serviceName,queueId,agentId,data} = props ?? {};

          return  putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId(billingAccount,serviceName,queueId,agentId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdMutationBody = NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>, TError,{billingAccount: string;serviceName: string;queueId: number;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentId>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentLiveStatusOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/agent/${agentId}/liveStatus`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/agent/${agentId}/liveStatus`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusQueryKey(billingAccount,serviceName,queueId,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus(billingAccount,serviceName,queueId,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusQueryOptions(billingAccount,serviceName,queueId,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Live calls of the queue
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/liveCalls`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/liveCalls`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsQueryKey(billingAccount,serviceName,queueId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls(billingAccount,serviceName,queueId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Live calls of the queue
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsQueryOptions(billingAccount,serviceName,queueId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingQueueLiveCallsOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdQueryKey(billingAccount,serviceName,queueId,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId(billingAccount,serviceName,queueId,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdQueryOptions(billingAccount,serviceName,queueId,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Eavesdrop on a call
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}/eavesdrop`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop>>, {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody}> = (props) => {
          const {billingAccount,serviceName,queueId,id,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop(billingAccount,serviceName,queueId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropMutationError = unknown

    /**
 * @summary Eavesdrop on a call
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Hangup a call
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangup = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}/hangup`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangup>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangup>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangup>>, {billingAccount: string;serviceName: string;queueId: number;id: number}> = (props) => {
          const {billingAccount,serviceName,queueId,id} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangup(billingAccount,serviceName,queueId,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangupMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangup>>>
    
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangupMutationError = unknown

    /**
 * @summary Hangup a call
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangup>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangup>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Toogle hold on call
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHold = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}/hold`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHoldMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHold>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHold>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHold>>, {billingAccount: string;serviceName: string;queueId: number;id: number}> = (props) => {
          const {billingAccount,serviceName,queueId,id} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHold(billingAccount,serviceName,queueId,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHoldMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHold>>>
    
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHoldMutationError = unknown

    /**
 * @summary Toogle hold on call
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHold = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHold>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHold>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHoldMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Intercept a non answered call
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdIntercept = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}/intercept`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdIntercept>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdIntercept>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdIntercept>>, {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody}> = (props) => {
          const {billingAccount,serviceName,queueId,id,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdIntercept(billingAccount,serviceName,queueId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdIntercept>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptMutationError = unknown

    /**
 * @summary Intercept a non answered call
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdIntercept = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdIntercept>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdIntercept>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Transfer an answered call
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransfer = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}/transfer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransfer>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransfer>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransfer>>, {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody}> = (props) => {
          const {billingAccount,serviceName,queueId,id,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransfer(billingAccount,serviceName,queueId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransfer>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferMutationError = unknown

    /**
 * @summary Transfer an answered call
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransfer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransfer>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransfer>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Whisper on a call
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisper = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
    postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}/whisper`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisper>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisper>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisper>>, {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody}> = (props) => {
          const {billingAccount,serviceName,queueId,id,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisper(billingAccount,serviceName,queueId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisper>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperMutationError = unknown

    /**
 * @summary Whisper on a call
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisper = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisper>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisper>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingQueueLiveStatisticsOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/liveStatistics`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatisticsQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/hunting/queue/${queueId}/liveStatistics`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatisticsQueryKey(billingAccount,serviceName,queueId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics(billingAccount,serviceName,queueId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatisticsQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatisticsQueryOptions(billingAccount,serviceName,queueId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Records associated with this PABX
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameRecords = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/records`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameRecordsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/records`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameRecordsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameRecordsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameRecords(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameRecordsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameRecordsQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameRecords<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameRecords<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameRecords<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Records associated with this PABX
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameRecords<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameRecordsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the given record
 */
export const deleteTelephonyBillingAccountEasyHuntingServiceNameRecordsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/records/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEasyHuntingServiceNameRecordsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountEasyHuntingServiceNameRecordsId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameRecordsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>>
    
    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameRecordsIdMutationError = unknown

    /**
 * @summary Delete the given record
 */
export const useDeleteTelephonyBillingAccountEasyHuntingServiceNameRecordsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEasyHuntingServiceNameRecordsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameRecordsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxRecordOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/records/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameRecordsIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/records/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameRecordsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameRecordsIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameRecordsId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameRecordsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameRecordsIdQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameRecordsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameRecordsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameRecordsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameRecordsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameRecordsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameRecordsIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEasyHuntingScreenListsConditionsSettingsOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/screenListConditions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/screenListConditions`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions = (
    billingAccount: string,
    serviceName: string,
    telephonyEasyHuntingScreenListsConditionsSettingsOVH: TelephonyEasyHuntingScreenListsConditionsSettingsOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/screenListConditions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyEasyHuntingScreenListsConditionsSettingsOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError,{billingAccount: string;serviceName: string;data: TelephonyEasyHuntingScreenListsConditionsSettingsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError,{billingAccount: string;serviceName: string;data: TelephonyEasyHuntingScreenListsConditionsSettingsOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, {billingAccount: string;serviceName: string;data: TelephonyEasyHuntingScreenListsConditionsSettingsOVH}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsMutationBody = TelephonyEasyHuntingScreenListsConditionsSettingsOVH
    export type PutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>, TError,{billingAccount: string;serviceName: string;data: TelephonyEasyHuntingScreenListsConditionsSettingsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditions>>,
        TError,
        {billingAccount: string;serviceName: string;data: TelephonyEasyHuntingScreenListsConditionsSettingsOVH},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Screen lists conditions checked when a call is received
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/screenListConditions/conditions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsParams,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/screenListConditions/conditions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Screen lists conditions checked when a call is received
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new screenlist condition for an extension
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsBody: PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEasyHuntingScreenListsConditionsOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/screenListConditions/conditions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsMutationError = unknown

    /**
 * @summary Create a new screenlist condition for an extension
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditions>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given condition
 */
export const deleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId = (
    billingAccount: string,
    serviceName: string,
    conditionId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/screenListConditions/conditions/${conditionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError,{billingAccount: string;serviceName: string;conditionId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError,{billingAccount: string;serviceName: string;conditionId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, {billingAccount: string;serviceName: string;conditionId: number}> = (props) => {
          const {billingAccount,serviceName,conditionId} = props ?? {};

          return  deleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId(billingAccount,serviceName,conditionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>>
    
    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdMutationError = unknown

    /**
 * @summary Delete the given condition
 */
export const useDeleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError,{billingAccount: string;serviceName: string;conditionId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>,
        TError,
        {billingAccount: string;serviceName: string;conditionId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId = (
    billingAccount: string,
    serviceName: string,
    conditionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEasyHuntingScreenListsConditionsOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/screenListConditions/conditions/${conditionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdQueryKey = (billingAccount: string,
    serviceName: string,
    conditionId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/screenListConditions/conditions/${conditionId}`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdQueryKey(billingAccount,serviceName,conditionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId(billingAccount,serviceName,conditionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && conditionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    conditionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdQueryOptions(billingAccount,serviceName,conditionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId = (
    billingAccount: string,
    serviceName: string,
    conditionId: number,
    telephonyEasyHuntingScreenListsConditionsOVH: NonReadonly<TelephonyEasyHuntingScreenListsConditionsOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/screenListConditions/conditions/${conditionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyEasyHuntingScreenListsConditionsOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError,{billingAccount: string;serviceName: string;conditionId: number;data: NonReadonly<TelephonyEasyHuntingScreenListsConditionsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError,{billingAccount: string;serviceName: string;conditionId: number;data: NonReadonly<TelephonyEasyHuntingScreenListsConditionsOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, {billingAccount: string;serviceName: string;conditionId: number;data: NonReadonly<TelephonyEasyHuntingScreenListsConditionsOVH>}> = (props) => {
          const {billingAccount,serviceName,conditionId,data} = props ?? {};

          return  putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId(billingAccount,serviceName,conditionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdMutationBody = NonReadonly<TelephonyEasyHuntingScreenListsConditionsOVH>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>, TError,{billingAccount: string;serviceName: string;conditionId: number;data: NonReadonly<TelephonyEasyHuntingScreenListsConditionsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionId>>,
        TError,
        {billingAccount: string;serviceName: string;conditionId: number;data: NonReadonly<TelephonyEasyHuntingScreenListsConditionsOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Sounds associated with this PABX
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameSound = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/sound`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameSoundQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/sound`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameSoundQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameSoundQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameSound(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameSoundQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameSoundQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameSound<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameSound<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameSound<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Sounds associated with this PABX
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameSound<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSound>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameSoundQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the given sound
 */
export const deleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId = (
    billingAccount: string,
    serviceName: string,
    soundId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/sound/${soundId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError,{billingAccount: string;serviceName: string;soundId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError,{billingAccount: string;serviceName: string;soundId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, {billingAccount: string;serviceName: string;soundId: number}> = (props) => {
          const {billingAccount,serviceName,soundId} = props ?? {};

          return  deleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId(billingAccount,serviceName,soundId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>>
    
    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdMutationError = unknown

    /**
 * @summary Delete the given sound
 */
export const useDeleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError,{billingAccount: string;serviceName: string;soundId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>,
        TError,
        {billingAccount: string;serviceName: string;soundId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId = (
    billingAccount: string,
    serviceName: string,
    soundId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxSoundOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/sound/${soundId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdQueryKey = (billingAccount: string,
    serviceName: string,
    soundId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/sound/${soundId}`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    soundId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdQueryKey(billingAccount,serviceName,soundId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId(billingAccount,serviceName,soundId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && soundId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    soundId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    soundId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    soundId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    soundId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameSoundSoundId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdQueryOptions(billingAccount,serviceName,soundId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Upload new sound file
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameSoundUpload = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountEasyHuntingServiceNameSoundUploadBody: PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/soundUpload`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameSoundUploadBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameSoundUpload>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameSoundUpload>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameSoundUpload>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameSoundUpload(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameSoundUpload>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadMutationError = unknown

    /**
 * @summary Upload new sound file
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameSoundUpload = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameSoundUpload>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameSoundUpload>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEasyHuntingTimeConditionsSettingsOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/timeConditions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/timeConditions`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountEasyHuntingServiceNameTimeConditions = (
    billingAccount: string,
    serviceName: string,
    telephonyEasyHuntingTimeConditionsSettingsOVH: TelephonyEasyHuntingTimeConditionsSettingsOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/timeConditions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyEasyHuntingTimeConditionsSettingsOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError,{billingAccount: string;serviceName: string;data: TelephonyEasyHuntingTimeConditionsSettingsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError,{billingAccount: string;serviceName: string;data: TelephonyEasyHuntingTimeConditionsSettingsOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, {billingAccount: string;serviceName: string;data: TelephonyEasyHuntingTimeConditionsSettingsOVH}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountEasyHuntingServiceNameTimeConditions(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsMutationBody = TelephonyEasyHuntingTimeConditionsSettingsOVH
    export type PutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountEasyHuntingServiceNameTimeConditions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>, TError,{billingAccount: string;serviceName: string;data: TelephonyEasyHuntingTimeConditionsSettingsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameTimeConditions>>,
        TError,
        {billingAccount: string;serviceName: string;data: TelephonyEasyHuntingTimeConditionsSettingsOVH},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Time conditions checked when a call is received
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/timeConditions/conditions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsParams,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/timeConditions/conditions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Time conditions checked when a call is received
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new time condition
 */
export const postTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsBody: PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEasyHuntingTimeConditionsOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/timeConditions/conditions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>>
    export type PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsMutationBody = PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsBody
    export type PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsMutationError = unknown

    /**
 * @summary Create a new time condition
 */
export const usePostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditions>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given condition
 */
export const deleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId = (
    billingAccount: string,
    serviceName: string,
    conditionId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/timeConditions/conditions/${conditionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError,{billingAccount: string;serviceName: string;conditionId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError,{billingAccount: string;serviceName: string;conditionId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, {billingAccount: string;serviceName: string;conditionId: number}> = (props) => {
          const {billingAccount,serviceName,conditionId} = props ?? {};

          return  deleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId(billingAccount,serviceName,conditionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>>
    
    export type DeleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdMutationError = unknown

    /**
 * @summary Delete the given condition
 */
export const useDeleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError,{billingAccount: string;serviceName: string;conditionId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>,
        TError,
        {billingAccount: string;serviceName: string;conditionId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId = (
    billingAccount: string,
    serviceName: string,
    conditionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEasyHuntingTimeConditionsOVH>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/timeConditions/conditions/${conditionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdQueryKey = (billingAccount: string,
    serviceName: string,
    conditionId: number,) => {
    return [`/telephony/${billingAccount}/easyHunting/${serviceName}/timeConditions/conditions/${conditionId}`] as const;
    }

    
export const getGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdQueryKey(billingAccount,serviceName,conditionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>> = ({ signal }) => getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId(billingAccount,serviceName,conditionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && conditionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>>
export type GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdQueryError = unknown


export function useGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    conditionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdQueryOptions(billingAccount,serviceName,conditionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId = (
    billingAccount: string,
    serviceName: string,
    conditionId: number,
    telephonyEasyHuntingTimeConditionsOVH: NonReadonly<TelephonyEasyHuntingTimeConditionsOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/easyHunting/${serviceName}/timeConditions/conditions/${conditionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyEasyHuntingTimeConditionsOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError,{billingAccount: string;serviceName: string;conditionId: number;data: NonReadonly<TelephonyEasyHuntingTimeConditionsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError,{billingAccount: string;serviceName: string;conditionId: number;data: NonReadonly<TelephonyEasyHuntingTimeConditionsOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, {billingAccount: string;serviceName: string;conditionId: number;data: NonReadonly<TelephonyEasyHuntingTimeConditionsOVH>}> = (props) => {
          const {billingAccount,serviceName,conditionId,data} = props ?? {};

          return  putTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId(billingAccount,serviceName,conditionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdMutationBody = NonReadonly<TelephonyEasyHuntingTimeConditionsOVH>
    export type PutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>, TError,{billingAccount: string;serviceName: string;conditionId: number;data: NonReadonly<TelephonyEasyHuntingTimeConditionsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionId>>,
        TError,
        {billingAccount: string;serviceName: string;conditionId: number;data: NonReadonly<TelephonyEasyHuntingTimeConditionsOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given token
 */
export const deleteTelephonyBillingAccountEventToken = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/eventToken`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountEventTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEventToken>>, TError,{billingAccount: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEventToken>>, TError,{billingAccount: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEventToken>>, {billingAccount: string}> = (props) => {
          const {billingAccount} = props ?? {};

          return  deleteTelephonyBillingAccountEventToken(billingAccount,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountEventTokenMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEventToken>>>
    
    export type DeleteTelephonyBillingAccountEventTokenMutationError = unknown

    /**
 * @summary Delete the given token
 */
export const useDeleteTelephonyBillingAccountEventToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountEventToken>>, TError,{billingAccount: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountEventToken>>,
        TError,
        {billingAccount: string},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountEventTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountEventToken = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEventTokenOVH>(
      {url: `/telephony/${billingAccount}/eventToken`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountEventTokenQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/eventToken`] as const;
    }

    
export const getGetTelephonyBillingAccountEventTokenQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountEventTokenQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>> = ({ signal }) => getTelephonyBillingAccountEventToken(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountEventTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>>
export type GetTelephonyBillingAccountEventTokenQueryError = unknown


export function useGetTelephonyBillingAccountEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountEventTokenQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new token
 */
export const postTelephonyBillingAccountEventToken = (
    billingAccount: string,
    postTelephonyBillingAccountEventTokenBody: PostTelephonyBillingAccountEventTokenBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/telephony/${billingAccount}/eventToken`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountEventTokenBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountEventTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEventToken>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountEventTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEventToken>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountEventTokenBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountEventToken>>, {billingAccount: string;data: PostTelephonyBillingAccountEventTokenBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postTelephonyBillingAccountEventToken(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountEventTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountEventToken>>>
    export type PostTelephonyBillingAccountEventTokenMutationBody = PostTelephonyBillingAccountEventTokenBody
    export type PostTelephonyBillingAccountEventTokenMutationError = unknown

    /**
 * @summary Create a new token
 */
export const usePostTelephonyBillingAccountEventToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountEventToken>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountEventTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountEventToken>>,
        TError,
        {billingAccount: string;data: PostTelephonyBillingAccountEventTokenBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountEventTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Faxes associated with this billing account
 */
export const getTelephonyBillingAccountFax = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/fax`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountFaxQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/fax`] as const;
    }

    
export const getGetTelephonyBillingAccountFaxQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountFaxQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>> = ({ signal }) => getTelephonyBillingAccountFax(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountFaxQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>>
export type GetTelephonyBillingAccountFaxQueryError = unknown


export function useGetTelephonyBillingAccountFax<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFax<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFax<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Faxes associated with this billing account
 */

export function useGetTelephonyBillingAccountFax<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFax>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountFaxQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountFaxServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyFaxOVH>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountFaxServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/fax/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountFaxServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountFaxServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>> = ({ signal }) => getTelephonyBillingAccountFaxServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountFaxServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>>
export type GetTelephonyBillingAccountFaxServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountFaxServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFaxServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFaxServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountFaxServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountFaxServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountFaxServiceName = (
    billingAccount: string,
    serviceName: string,
    telephonyFaxOVH: NonReadonly<TelephonyFaxOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyFaxOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountFaxServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceName>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountFaxServiceName(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountFaxServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceName>>>
    export type PutTelephonyBillingAccountFaxServiceNameMutationBody = NonReadonly<TelephonyFaxOVH>
    export type PutTelephonyBillingAccountFaxServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountFaxServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountFaxServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Fax campaigns of the associate fax
 */
export const getTelephonyBillingAccountFaxServiceNameCampaigns = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/campaigns`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountFaxServiceNameCampaignsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/fax/${serviceName}/campaigns`] as const;
    }

    
export const getGetTelephonyBillingAccountFaxServiceNameCampaignsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountFaxServiceNameCampaignsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>> = ({ signal }) => getTelephonyBillingAccountFaxServiceNameCampaigns(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountFaxServiceNameCampaignsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>>
export type GetTelephonyBillingAccountFaxServiceNameCampaignsQueryError = unknown


export function useGetTelephonyBillingAccountFaxServiceNameCampaigns<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFaxServiceNameCampaigns<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFaxServiceNameCampaigns<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Fax campaigns of the associate fax
 */

export function useGetTelephonyBillingAccountFaxServiceNameCampaigns<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaigns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountFaxServiceNameCampaignsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new fax campaign
 */
export const postTelephonyBillingAccountFaxServiceNameCampaigns = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountFaxServiceNameCampaignsBody: PostTelephonyBillingAccountFaxServiceNameCampaignsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyFaxCampaignOVH>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/campaigns`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountFaxServiceNameCampaignsBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountFaxServiceNameCampaignsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaigns>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameCampaignsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaigns>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameCampaignsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaigns>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameCampaignsBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountFaxServiceNameCampaigns(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountFaxServiceNameCampaignsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaigns>>>
    export type PostTelephonyBillingAccountFaxServiceNameCampaignsMutationBody = PostTelephonyBillingAccountFaxServiceNameCampaignsBody
    export type PostTelephonyBillingAccountFaxServiceNameCampaignsMutationError = unknown

    /**
 * @summary Create a new fax campaign
 */
export const usePostTelephonyBillingAccountFaxServiceNameCampaigns = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaigns>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameCampaignsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaigns>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameCampaignsBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountFaxServiceNameCampaignsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a fax campaign
 */
export const deleteTelephonyBillingAccountFaxServiceNameCampaignsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/campaigns/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountFaxServiceNameCampaignsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountFaxServiceNameCampaignsId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountFaxServiceNameCampaignsId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountFaxServiceNameCampaignsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountFaxServiceNameCampaignsId>>>
    
    export type DeleteTelephonyBillingAccountFaxServiceNameCampaignsIdMutationError = unknown

    /**
 * @summary Delete a fax campaign
 */
export const useDeleteTelephonyBillingAccountFaxServiceNameCampaignsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountFaxServiceNameCampaignsId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountFaxServiceNameCampaignsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountFaxServiceNameCampaignsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyFaxCampaignOVH>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/campaigns/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountFaxServiceNameCampaignsIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/fax/${serviceName}/campaigns/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountFaxServiceNameCampaignsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountFaxServiceNameCampaignsIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>> = ({ signal }) => getTelephonyBillingAccountFaxServiceNameCampaignsId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountFaxServiceNameCampaignsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>>
export type GetTelephonyBillingAccountFaxServiceNameCampaignsIdQueryError = unknown


export function useGetTelephonyBillingAccountFaxServiceNameCampaignsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFaxServiceNameCampaignsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFaxServiceNameCampaignsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountFaxServiceNameCampaignsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountFaxServiceNameCampaignsIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Detail of the fax recipients by status
 */
export const getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyFaxCampaignDetailOVH>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/campaigns/${id}/detail`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountFaxServiceNameCampaignsIdDetailQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/fax/${serviceName}/campaigns/${id}/detail`] as const;
    }

    
export const getGetTelephonyBillingAccountFaxServiceNameCampaignsIdDetailQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountFaxServiceNameCampaignsIdDetailQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>> = ({ signal }) => getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountFaxServiceNameCampaignsIdDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>>
export type GetTelephonyBillingAccountFaxServiceNameCampaignsIdDetailQueryError = unknown


export function useGetTelephonyBillingAccountFaxServiceNameCampaignsIdDetail<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFaxServiceNameCampaignsIdDetail<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFaxServiceNameCampaignsIdDetail<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Detail of the fax recipients by status
 */

export function useGetTelephonyBillingAccountFaxServiceNameCampaignsIdDetail<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameCampaignsIdDetail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountFaxServiceNameCampaignsIdDetailQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Start a fax campaign
 */
export const postTelephonyBillingAccountFaxServiceNameCampaignsIdStart = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/campaigns/${id}/start`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountFaxServiceNameCampaignsIdStartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaignsIdStart>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaignsIdStart>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaignsIdStart>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  postTelephonyBillingAccountFaxServiceNameCampaignsIdStart(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountFaxServiceNameCampaignsIdStartMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaignsIdStart>>>
    
    export type PostTelephonyBillingAccountFaxServiceNameCampaignsIdStartMutationError = unknown

    /**
 * @summary Start a fax campaign
 */
export const usePostTelephonyBillingAccountFaxServiceNameCampaignsIdStart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaignsIdStart>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaignsIdStart>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountFaxServiceNameCampaignsIdStartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Stop a fax campaign
 */
export const postTelephonyBillingAccountFaxServiceNameCampaignsIdStop = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/campaigns/${id}/stop`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountFaxServiceNameCampaignsIdStopMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaignsIdStop>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaignsIdStop>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaignsIdStop>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  postTelephonyBillingAccountFaxServiceNameCampaignsIdStop(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountFaxServiceNameCampaignsIdStopMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaignsIdStop>>>
    
    export type PostTelephonyBillingAccountFaxServiceNameCampaignsIdStopMutationError = unknown

    /**
 * @summary Stop a fax campaign
 */
export const usePostTelephonyBillingAccountFaxServiceNameCampaignsIdStop = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaignsIdStop>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameCampaignsIdStop>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountFaxServiceNameCampaignsIdStopMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete all fax screenLists
 */
export const deleteTelephonyBillingAccountFaxServiceNameScreenLists = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/screenLists`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountFaxServiceNameScreenListsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountFaxServiceNameScreenLists>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountFaxServiceNameScreenLists>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountFaxServiceNameScreenLists>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  deleteTelephonyBillingAccountFaxServiceNameScreenLists(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountFaxServiceNameScreenListsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountFaxServiceNameScreenLists>>>
    
    export type DeleteTelephonyBillingAccountFaxServiceNameScreenListsMutationError = unknown

    /**
 * @summary Delete all fax screenLists
 */
export const useDeleteTelephonyBillingAccountFaxServiceNameScreenLists = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountFaxServiceNameScreenLists>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountFaxServiceNameScreenLists>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountFaxServiceNameScreenListsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountFaxServiceNameScreenLists = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyFaxScreenOVH>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/screenLists`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountFaxServiceNameScreenListsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/fax/${serviceName}/screenLists`] as const;
    }

    
export const getGetTelephonyBillingAccountFaxServiceNameScreenListsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountFaxServiceNameScreenListsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>> = ({ signal }) => getTelephonyBillingAccountFaxServiceNameScreenLists(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountFaxServiceNameScreenListsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>>
export type GetTelephonyBillingAccountFaxServiceNameScreenListsQueryError = unknown


export function useGetTelephonyBillingAccountFaxServiceNameScreenLists<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFaxServiceNameScreenLists<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFaxServiceNameScreenLists<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountFaxServiceNameScreenLists<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameScreenLists>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountFaxServiceNameScreenListsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new fax ScreenLists
 */
export const postTelephonyBillingAccountFaxServiceNameScreenLists = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountFaxServiceNameScreenListsBody: PostTelephonyBillingAccountFaxServiceNameScreenListsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyFaxScreenOVH>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/screenLists`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountFaxServiceNameScreenListsBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountFaxServiceNameScreenListsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameScreenLists>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameScreenListsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameScreenLists>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameScreenListsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameScreenLists>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameScreenListsBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountFaxServiceNameScreenLists(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountFaxServiceNameScreenListsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameScreenLists>>>
    export type PostTelephonyBillingAccountFaxServiceNameScreenListsMutationBody = PostTelephonyBillingAccountFaxServiceNameScreenListsBody
    export type PostTelephonyBillingAccountFaxServiceNameScreenListsMutationError = unknown

    /**
 * @summary Create a new fax ScreenLists
 */
export const usePostTelephonyBillingAccountFaxServiceNameScreenLists = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameScreenLists>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameScreenListsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameScreenLists>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameScreenListsBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountFaxServiceNameScreenListsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountFaxServiceNameScreenLists = (
    billingAccount: string,
    serviceName: string,
    telephonyFaxScreenOVH: NonReadonly<TelephonyFaxScreenOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/screenLists`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyFaxScreenOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountFaxServiceNameScreenListsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceNameScreenLists>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxScreenOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceNameScreenLists>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxScreenOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceNameScreenLists>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxScreenOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountFaxServiceNameScreenLists(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountFaxServiceNameScreenListsMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceNameScreenLists>>>
    export type PutTelephonyBillingAccountFaxServiceNameScreenListsMutationBody = NonReadonly<TelephonyFaxScreenOVH>
    export type PutTelephonyBillingAccountFaxServiceNameScreenListsMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountFaxServiceNameScreenLists = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceNameScreenLists>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxScreenOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceNameScreenLists>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxScreenOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountFaxServiceNameScreenListsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reset a specifical fax screenList
 */
export const postTelephonyBillingAccountFaxServiceNameScreenListsReset = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountFaxServiceNameScreenListsResetBody: PostTelephonyBillingAccountFaxServiceNameScreenListsResetBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/screenLists/reset`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountFaxServiceNameScreenListsResetBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountFaxServiceNameScreenListsResetMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameScreenListsReset>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameScreenListsResetBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameScreenListsReset>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameScreenListsResetBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameScreenListsReset>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameScreenListsResetBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountFaxServiceNameScreenListsReset(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountFaxServiceNameScreenListsResetMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameScreenListsReset>>>
    export type PostTelephonyBillingAccountFaxServiceNameScreenListsResetMutationBody = PostTelephonyBillingAccountFaxServiceNameScreenListsResetBody
    export type PostTelephonyBillingAccountFaxServiceNameScreenListsResetMutationError = unknown

    /**
 * @summary Reset a specifical fax screenList
 */
export const usePostTelephonyBillingAccountFaxServiceNameScreenListsReset = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameScreenListsReset>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameScreenListsResetBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameScreenListsReset>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameScreenListsResetBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountFaxServiceNameScreenListsResetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountFaxServiceNameSettings = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyFaxPropertiesOVH>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/settings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountFaxServiceNameSettingsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/fax/${serviceName}/settings`] as const;
    }

    
export const getGetTelephonyBillingAccountFaxServiceNameSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountFaxServiceNameSettingsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>> = ({ signal }) => getTelephonyBillingAccountFaxServiceNameSettings(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountFaxServiceNameSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>>
export type GetTelephonyBillingAccountFaxServiceNameSettingsQueryError = unknown


export function useGetTelephonyBillingAccountFaxServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFaxServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountFaxServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountFaxServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountFaxServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountFaxServiceNameSettingsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountFaxServiceNameSettings = (
    billingAccount: string,
    serviceName: string,
    telephonyFaxPropertiesOVH: NonReadonly<TelephonyFaxPropertiesOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/settings`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyFaxPropertiesOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountFaxServiceNameSettingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxPropertiesOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxPropertiesOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceNameSettings>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxPropertiesOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountFaxServiceNameSettings(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountFaxServiceNameSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceNameSettings>>>
    export type PutTelephonyBillingAccountFaxServiceNameSettingsMutationBody = NonReadonly<TelephonyFaxPropertiesOVH>
    export type PutTelephonyBillingAccountFaxServiceNameSettingsMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountFaxServiceNameSettings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxPropertiesOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountFaxServiceNameSettings>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyFaxPropertiesOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountFaxServiceNameSettingsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generates a new password for your fax account
 */
export const postTelephonyBillingAccountFaxServiceNameSettingsChangePassword = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountFaxServiceNameSettingsChangePasswordBody: PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/settings/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountFaxServiceNameSettingsChangePasswordBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameSettingsChangePassword>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameSettingsChangePassword>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameSettingsChangePassword>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountFaxServiceNameSettingsChangePassword(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameSettingsChangePassword>>>
    export type PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordMutationBody = PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordBody
    export type PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordMutationError = unknown

    /**
 * @summary Generates a new password for your fax account
 */
export const usePostTelephonyBillingAccountFaxServiceNameSettingsChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameSettingsChangePassword>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameSettingsChangePassword>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Send a fax
 */
export const postTelephonyBillingAccountFaxServiceNameSettingsSendFax = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountFaxServiceNameSettingsSendFaxBody: PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/fax/${serviceName}/settings/sendFax`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountFaxServiceNameSettingsSendFaxBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountFaxServiceNameSettingsSendFaxMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameSettingsSendFax>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameSettingsSendFax>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameSettingsSendFax>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountFaxServiceNameSettingsSendFax(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameSettingsSendFax>>>
    export type PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxMutationBody = PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxBody
    export type PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxMutationError = unknown

    /**
 * @summary Send a fax
 */
export const usePostTelephonyBillingAccountFaxServiceNameSettingsSendFax = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameSettingsSendFax>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountFaxServiceNameSettingsSendFax>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountFaxServiceNameSettingsSendFaxMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Check if the billing account contains at least one special number
 */
export const getTelephonyBillingAccountHasSpecialNumbers = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/telephony/${billingAccount}/hasSpecialNumbers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountHasSpecialNumbersQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/hasSpecialNumbers`] as const;
    }

    
export const getGetTelephonyBillingAccountHasSpecialNumbersQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountHasSpecialNumbersQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>> = ({ signal }) => getTelephonyBillingAccountHasSpecialNumbers(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountHasSpecialNumbersQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>>
export type GetTelephonyBillingAccountHasSpecialNumbersQueryError = unknown


export function useGetTelephonyBillingAccountHasSpecialNumbers<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHasSpecialNumbers<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHasSpecialNumbers<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check if the billing account contains at least one special number
 */

export function useGetTelephonyBillingAccountHasSpecialNumbers<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHasSpecialNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountHasSpecialNumbersQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Previous billed consumptions
 */
export const getTelephonyBillingAccountHistoryConsumption = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/historyConsumption`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountHistoryConsumptionQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/historyConsumption`] as const;
    }

    
export const getGetTelephonyBillingAccountHistoryConsumptionQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountHistoryConsumptionQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>> = ({ signal }) => getTelephonyBillingAccountHistoryConsumption(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountHistoryConsumptionQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>>
export type GetTelephonyBillingAccountHistoryConsumptionQueryError = unknown


export function useGetTelephonyBillingAccountHistoryConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Previous billed consumptions
 */

export function useGetTelephonyBillingAccountHistoryConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountHistoryConsumptionQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountHistoryConsumptionDate = (
    billingAccount: string,
    date: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyHistoryConsumptionOVH>(
      {url: `/telephony/${billingAccount}/historyConsumption/${date}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountHistoryConsumptionDateQueryKey = (billingAccount: string,
    date: string,) => {
    return [`/telephony/${billingAccount}/historyConsumption/${date}`] as const;
    }

    
export const getGetTelephonyBillingAccountHistoryConsumptionDateQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>, TError = unknown>(billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountHistoryConsumptionDateQueryKey(billingAccount,date);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>> = ({ signal }) => getTelephonyBillingAccountHistoryConsumptionDate(billingAccount,date, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && date), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountHistoryConsumptionDateQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>>
export type GetTelephonyBillingAccountHistoryConsumptionDateQueryError = unknown


export function useGetTelephonyBillingAccountHistoryConsumptionDate<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>, TError = unknown>(
 billingAccount: string,
    date: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryConsumptionDate<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryConsumptionDate<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountHistoryConsumptionDate<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountHistoryConsumptionDateQueryOptions(billingAccount,date,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Previous billed consumption files
 */
export const getTelephonyBillingAccountHistoryConsumptionDateFile = (
    billingAccount: string,
    date: string,
    params: GetTelephonyBillingAccountHistoryConsumptionDateFileParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPcsFileOVH>(
      {url: `/telephony/${billingAccount}/historyConsumption/${date}/file`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountHistoryConsumptionDateFileQueryKey = (billingAccount: string,
    date: string,
    params: GetTelephonyBillingAccountHistoryConsumptionDateFileParams,) => {
    return [`/telephony/${billingAccount}/historyConsumption/${date}/file`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountHistoryConsumptionDateFileQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>, TError = unknown>(billingAccount: string,
    date: string,
    params: GetTelephonyBillingAccountHistoryConsumptionDateFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountHistoryConsumptionDateFileQueryKey(billingAccount,date,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>> = ({ signal }) => getTelephonyBillingAccountHistoryConsumptionDateFile(billingAccount,date,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && date), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountHistoryConsumptionDateFileQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>>
export type GetTelephonyBillingAccountHistoryConsumptionDateFileQueryError = unknown


export function useGetTelephonyBillingAccountHistoryConsumptionDateFile<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>, TError = unknown>(
 billingAccount: string,
    date: string,
    params: GetTelephonyBillingAccountHistoryConsumptionDateFileParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryConsumptionDateFile<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>, TError = unknown>(
 billingAccount: string,
    date: string,
    params: GetTelephonyBillingAccountHistoryConsumptionDateFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryConsumptionDateFile<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>, TError = unknown>(
 billingAccount: string,
    date: string,
    params: GetTelephonyBillingAccountHistoryConsumptionDateFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Previous billed consumption files
 */

export function useGetTelephonyBillingAccountHistoryConsumptionDateFile<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>, TError = unknown>(
 billingAccount: string,
    date: string,
    params: GetTelephonyBillingAccountHistoryConsumptionDateFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryConsumptionDateFile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountHistoryConsumptionDateFileQueryOptions(billingAccount,date,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Previous repayment bill
 */
export const getTelephonyBillingAccountHistoryRepaymentConsumption = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/historyRepaymentConsumption`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountHistoryRepaymentConsumptionQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/historyRepaymentConsumption`] as const;
    }

    
export const getGetTelephonyBillingAccountHistoryRepaymentConsumptionQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountHistoryRepaymentConsumptionQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>> = ({ signal }) => getTelephonyBillingAccountHistoryRepaymentConsumption(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountHistoryRepaymentConsumptionQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>>
export type GetTelephonyBillingAccountHistoryRepaymentConsumptionQueryError = unknown


export function useGetTelephonyBillingAccountHistoryRepaymentConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryRepaymentConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryRepaymentConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Previous repayment bill
 */

export function useGetTelephonyBillingAccountHistoryRepaymentConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountHistoryRepaymentConsumptionQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ask for a new repayment
 */
export const postTelephonyBillingAccountHistoryRepaymentConsumption = (
    billingAccount: string,
    postTelephonyBillingAccountHistoryRepaymentConsumptionBody: PostTelephonyBillingAccountHistoryRepaymentConsumptionBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyHistoryRepaymentConsumptionOVH>(
      {url: `/telephony/${billingAccount}/historyRepaymentConsumption`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountHistoryRepaymentConsumptionBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountHistoryRepaymentConsumptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountHistoryRepaymentConsumption>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountHistoryRepaymentConsumptionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountHistoryRepaymentConsumption>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountHistoryRepaymentConsumptionBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountHistoryRepaymentConsumption>>, {billingAccount: string;data: PostTelephonyBillingAccountHistoryRepaymentConsumptionBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postTelephonyBillingAccountHistoryRepaymentConsumption(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountHistoryRepaymentConsumptionMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountHistoryRepaymentConsumption>>>
    export type PostTelephonyBillingAccountHistoryRepaymentConsumptionMutationBody = PostTelephonyBillingAccountHistoryRepaymentConsumptionBody
    export type PostTelephonyBillingAccountHistoryRepaymentConsumptionMutationError = unknown

    /**
 * @summary Ask for a new repayment
 */
export const usePostTelephonyBillingAccountHistoryRepaymentConsumption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountHistoryRepaymentConsumption>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountHistoryRepaymentConsumptionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountHistoryRepaymentConsumption>>,
        TError,
        {billingAccount: string;data: PostTelephonyBillingAccountHistoryRepaymentConsumptionBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountHistoryRepaymentConsumptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountHistoryRepaymentConsumptionDate = (
    billingAccount: string,
    date: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyHistoryRepaymentConsumptionOVH>(
      {url: `/telephony/${billingAccount}/historyRepaymentConsumption/${date}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountHistoryRepaymentConsumptionDateQueryKey = (billingAccount: string,
    date: string,) => {
    return [`/telephony/${billingAccount}/historyRepaymentConsumption/${date}`] as const;
    }

    
export const getGetTelephonyBillingAccountHistoryRepaymentConsumptionDateQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>, TError = unknown>(billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountHistoryRepaymentConsumptionDateQueryKey(billingAccount,date);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>> = ({ signal }) => getTelephonyBillingAccountHistoryRepaymentConsumptionDate(billingAccount,date, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && date), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountHistoryRepaymentConsumptionDateQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>>
export type GetTelephonyBillingAccountHistoryRepaymentConsumptionDateQueryError = unknown


export function useGetTelephonyBillingAccountHistoryRepaymentConsumptionDate<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>, TError = unknown>(
 billingAccount: string,
    date: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryRepaymentConsumptionDate<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryRepaymentConsumptionDate<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountHistoryRepaymentConsumptionDate<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountHistoryRepaymentConsumptionDateQueryOptions(billingAccount,date,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the csv document
 */
export const getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument = (
    billingAccount: string,
    date: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPcsFileOVH>(
      {url: `/telephony/${billingAccount}/historyRepaymentConsumption/${date}/document`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountHistoryRepaymentConsumptionDateDocumentQueryKey = (billingAccount: string,
    date: string,) => {
    return [`/telephony/${billingAccount}/historyRepaymentConsumption/${date}/document`] as const;
    }

    
export const getGetTelephonyBillingAccountHistoryRepaymentConsumptionDateDocumentQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>, TError = unknown>(billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountHistoryRepaymentConsumptionDateDocumentQueryKey(billingAccount,date);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>> = ({ signal }) => getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument(billingAccount,date, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && date), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountHistoryRepaymentConsumptionDateDocumentQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>>
export type GetTelephonyBillingAccountHistoryRepaymentConsumptionDateDocumentQueryError = unknown


export function useGetTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>, TError = unknown>(
 billingAccount: string,
    date: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the csv document
 */

export function useGetTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryRepaymentConsumptionDateDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountHistoryRepaymentConsumptionDateDocumentQueryOptions(billingAccount,date,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Previous tollfree bill
 */
export const getTelephonyBillingAccountHistoryTollfreeConsumption = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/historyTollfreeConsumption`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountHistoryTollfreeConsumptionQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/historyTollfreeConsumption`] as const;
    }

    
export const getGetTelephonyBillingAccountHistoryTollfreeConsumptionQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountHistoryTollfreeConsumptionQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>> = ({ signal }) => getTelephonyBillingAccountHistoryTollfreeConsumption(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountHistoryTollfreeConsumptionQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>>
export type GetTelephonyBillingAccountHistoryTollfreeConsumptionQueryError = unknown


export function useGetTelephonyBillingAccountHistoryTollfreeConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryTollfreeConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryTollfreeConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Previous tollfree bill
 */

export function useGetTelephonyBillingAccountHistoryTollfreeConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountHistoryTollfreeConsumptionQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountHistoryTollfreeConsumptionDate = (
    billingAccount: string,
    date: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyHistoryTollfreeConsumptionOVH>(
      {url: `/telephony/${billingAccount}/historyTollfreeConsumption/${date}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountHistoryTollfreeConsumptionDateQueryKey = (billingAccount: string,
    date: string,) => {
    return [`/telephony/${billingAccount}/historyTollfreeConsumption/${date}`] as const;
    }

    
export const getGetTelephonyBillingAccountHistoryTollfreeConsumptionDateQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>, TError = unknown>(billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountHistoryTollfreeConsumptionDateQueryKey(billingAccount,date);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>> = ({ signal }) => getTelephonyBillingAccountHistoryTollfreeConsumptionDate(billingAccount,date, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && date), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountHistoryTollfreeConsumptionDateQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>>
export type GetTelephonyBillingAccountHistoryTollfreeConsumptionDateQueryError = unknown


export function useGetTelephonyBillingAccountHistoryTollfreeConsumptionDate<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>, TError = unknown>(
 billingAccount: string,
    date: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryTollfreeConsumptionDate<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryTollfreeConsumptionDate<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountHistoryTollfreeConsumptionDate<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountHistoryTollfreeConsumptionDateQueryOptions(billingAccount,date,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the csv document
 */
export const getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument = (
    billingAccount: string,
    date: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPcsFileOVH>(
      {url: `/telephony/${billingAccount}/historyTollfreeConsumption/${date}/document`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountHistoryTollfreeConsumptionDateDocumentQueryKey = (billingAccount: string,
    date: string,) => {
    return [`/telephony/${billingAccount}/historyTollfreeConsumption/${date}/document`] as const;
    }

    
export const getGetTelephonyBillingAccountHistoryTollfreeConsumptionDateDocumentQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>, TError = unknown>(billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountHistoryTollfreeConsumptionDateDocumentQueryKey(billingAccount,date);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>> = ({ signal }) => getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument(billingAccount,date, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && date), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountHistoryTollfreeConsumptionDateDocumentQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>>
export type GetTelephonyBillingAccountHistoryTollfreeConsumptionDateDocumentQueryError = unknown


export function useGetTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>, TError = unknown>(
 billingAccount: string,
    date: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the csv document
 */

export function useGetTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>, TError = unknown>(
 billingAccount: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountHistoryTollfreeConsumptionDateDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountHistoryTollfreeConsumptionDateDocumentQueryOptions(billingAccount,date,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Lines associated with this billing account
 */
export const getTelephonyBillingAccountLine = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/line`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/line`] as const;
    }

    
export const getGetTelephonyBillingAccountLineQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>> = ({ signal }) => getTelephonyBillingAccountLine(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>>
export type GetTelephonyBillingAccountLineQueryError = unknown


export function useGetTelephonyBillingAccountLine<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLine<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLine<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Lines associated with this billing account
 */

export function useGetTelephonyBillingAccountLine<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLine>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyLineOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>> = ({ signal }) => getTelephonyBillingAccountLineServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>>
export type GetTelephonyBillingAccountLineServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountLineServiceName = (
    billingAccount: string,
    serviceName: string,
    telephonyLineOVH: NonReadonly<TelephonyLineOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyLineOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyLineOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyLineOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceName>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyLineOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceName(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceName>>>
    export type PutTelephonyBillingAccountLineServiceNameMutationBody = NonReadonly<TelephonyLineOVH>
    export type PutTelephonyBillingAccountLineServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountLineServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyLineOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyLineOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Abbreviated numbers for the line
 */
export const getTelephonyBillingAccountLineServiceNameAbbreviatedNumber = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/abbreviatedNumber`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameAbbreviatedNumberQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/abbreviatedNumber`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameAbbreviatedNumberQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameAbbreviatedNumberQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameAbbreviatedNumber(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameAbbreviatedNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>>
export type GetTelephonyBillingAccountLineServiceNameAbbreviatedNumberQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Abbreviated numbers for the line
 */

export function useGetTelephonyBillingAccountLineServiceNameAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameAbbreviatedNumberQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new abbreviated number for the line
 */
export const postTelephonyBillingAccountLineServiceNameAbbreviatedNumber = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNameAbbreviatedNumberBody: PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyAbbreviatedNumberOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/abbreviatedNumber`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameAbbreviatedNumberBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameAbbreviatedNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameAbbreviatedNumber(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>>
    export type PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberMutationBody = PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberBody
    export type PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberMutationError = unknown

    /**
 * @summary Create a new abbreviated number for the line
 */
export const usePostTelephonyBillingAccountLineServiceNameAbbreviatedNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAbbreviatedNumber>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameAbbreviatedNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given abbreviated number
 */
export const deleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber = (
    billingAccount: string,
    serviceName: string,
    abbreviatedNumber: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/abbreviatedNumber/${abbreviatedNumber}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError,{billingAccount: string;serviceName: string;abbreviatedNumber: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError,{billingAccount: string;serviceName: string;abbreviatedNumber: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, {billingAccount: string;serviceName: string;abbreviatedNumber: number}> = (props) => {
          const {billingAccount,serviceName,abbreviatedNumber} = props ?? {};

          return  deleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber(billingAccount,serviceName,abbreviatedNumber,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>>
    
    export type DeleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberMutationError = unknown

    /**
 * @summary Delete the given abbreviated number
 */
export const useDeleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError,{billingAccount: string;serviceName: string;abbreviatedNumber: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>,
        TError,
        {billingAccount: string;serviceName: string;abbreviatedNumber: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber = (
    billingAccount: string,
    serviceName: string,
    abbreviatedNumber: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyAbbreviatedNumberOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/abbreviatedNumber/${abbreviatedNumber}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberQueryKey = (billingAccount: string,
    serviceName: string,
    abbreviatedNumber: number,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/abbreviatedNumber/${abbreviatedNumber}`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    abbreviatedNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberQueryKey(billingAccount,serviceName,abbreviatedNumber);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber(billingAccount,serviceName,abbreviatedNumber, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && abbreviatedNumber), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>>
export type GetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    abbreviatedNumber: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    abbreviatedNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    abbreviatedNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    abbreviatedNumber: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberQueryOptions(billingAccount,serviceName,abbreviatedNumber,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber = (
    billingAccount: string,
    serviceName: string,
    abbreviatedNumber: number,
    telephonyAbbreviatedNumberOVH: NonReadonly<TelephonyAbbreviatedNumberOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/abbreviatedNumber/${abbreviatedNumber}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyAbbreviatedNumberOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError,{billingAccount: string;serviceName: string;abbreviatedNumber: number;data: NonReadonly<TelephonyAbbreviatedNumberOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError,{billingAccount: string;serviceName: string;abbreviatedNumber: number;data: NonReadonly<TelephonyAbbreviatedNumberOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, {billingAccount: string;serviceName: string;abbreviatedNumber: number;data: NonReadonly<TelephonyAbbreviatedNumberOVH>}> = (props) => {
          const {billingAccount,serviceName,abbreviatedNumber,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber(billingAccount,serviceName,abbreviatedNumber,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>>
    export type PutTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberMutationBody = NonReadonly<TelephonyAbbreviatedNumberOVH>
    export type PutTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>, TError,{billingAccount: string;serviceName: string;abbreviatedNumber: number;data: NonReadonly<TelephonyAbbreviatedNumberOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumber>>,
        TError,
        {billingAccount: string;serviceName: string;abbreviatedNumber: number;data: NonReadonly<TelephonyAbbreviatedNumberOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Check if there is a new phone to activate and if it's possible, in case of phone switch
 */
export const getTelephonyBillingAccountLineServiceNameActivateNewPhone = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/activateNewPhone`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameActivateNewPhoneQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/activateNewPhone`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameActivateNewPhoneQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameActivateNewPhoneQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameActivateNewPhone(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameActivateNewPhoneQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>>
export type GetTelephonyBillingAccountLineServiceNameActivateNewPhoneQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameActivateNewPhone<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameActivateNewPhone<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameActivateNewPhone<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check if there is a new phone to activate and if it's possible, in case of phone switch
 */

export function useGetTelephonyBillingAccountLineServiceNameActivateNewPhone<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameActivateNewPhoneQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow to activate new phone, in case of phone switch
 */
export const postTelephonyBillingAccountLineServiceNameActivateNewPhone = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/activateNewPhone`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameActivateNewPhoneMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameActivateNewPhone>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameActivateNewPhone(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameActivateNewPhoneMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameActivateNewPhone>>>
    
    export type PostTelephonyBillingAccountLineServiceNameActivateNewPhoneMutationError = unknown

    /**
 * @summary Allow to activate new phone, in case of phone switch
 */
export const usePostTelephonyBillingAccountLineServiceNameActivateNewPhone = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameActivateNewPhone>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameActivateNewPhone>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameActivateNewPhoneMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Current list of numbers or short code numbers restricted by an auto antihack
 */
export const getTelephonyBillingAccountLineServiceNameAntihack = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/antihack`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameAntihackQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/antihack`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameAntihackQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameAntihackQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameAntihack(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameAntihackQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>>
export type GetTelephonyBillingAccountLineServiceNameAntihackQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameAntihack<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameAntihack<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameAntihack<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Current list of numbers or short code numbers restricted by an auto antihack
 */

export function useGetTelephonyBillingAccountLineServiceNameAntihack<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAntihack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameAntihackQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Clean the antihack or add it on active filter screen list
 */
export const postTelephonyBillingAccountLineServiceNameAntihack = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNameAntihackBody: PostTelephonyBillingAccountLineServiceNameAntihackBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/antihack`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameAntihackBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameAntihackMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAntihack>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAntihackBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAntihack>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAntihackBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAntihack>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAntihackBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameAntihack(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameAntihackMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAntihack>>>
    export type PostTelephonyBillingAccountLineServiceNameAntihackMutationBody = PostTelephonyBillingAccountLineServiceNameAntihackBody
    export type PostTelephonyBillingAccountLineServiceNameAntihackMutationError = unknown

    /**
 * @summary Clean the antihack or add it on active filter screen list
 */
export const usePostTelephonyBillingAccountLineServiceNameAntihack = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAntihack>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAntihackBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAntihack>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAntihackBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameAntihackMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Associate a device to the current line with the device mac address
 */
export const postTelephonyBillingAccountLineServiceNameAssociateDevice = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNameAssociateDeviceBody: PostTelephonyBillingAccountLineServiceNameAssociateDeviceBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/associateDevice`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameAssociateDeviceBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameAssociateDeviceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAssociateDevice>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAssociateDeviceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAssociateDevice>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAssociateDeviceBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAssociateDevice>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAssociateDeviceBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameAssociateDevice(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameAssociateDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAssociateDevice>>>
    export type PostTelephonyBillingAccountLineServiceNameAssociateDeviceMutationBody = PostTelephonyBillingAccountLineServiceNameAssociateDeviceBody
    export type PostTelephonyBillingAccountLineServiceNameAssociateDeviceMutationError = unknown

    /**
 * @summary Associate a device to the current line with the device mac address
 */
export const usePostTelephonyBillingAccountLineServiceNameAssociateDevice = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAssociateDevice>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAssociateDeviceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAssociateDevice>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAssociateDeviceBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameAssociateDeviceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Automatic Calls made by Calls Generator on this line
 */
export const getTelephonyBillingAccountLineServiceNameAutomaticCall = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/automaticCall`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameAutomaticCallQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/automaticCall`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameAutomaticCallQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameAutomaticCallQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameAutomaticCall(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameAutomaticCallQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>>
export type GetTelephonyBillingAccountLineServiceNameAutomaticCallQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameAutomaticCall<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameAutomaticCall<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameAutomaticCall<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Automatic Calls made by Calls Generator on this line
 */

export function useGetTelephonyBillingAccountLineServiceNameAutomaticCall<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameAutomaticCallQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Make an automatic phone call. Return generated call identifier
 */
export const postTelephonyBillingAccountLineServiceNameAutomaticCall = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNameAutomaticCallBody: PostTelephonyBillingAccountLineServiceNameAutomaticCallBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/automaticCall`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameAutomaticCallBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameAutomaticCallMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAutomaticCallBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAutomaticCallBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAutomaticCall>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAutomaticCallBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameAutomaticCall(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameAutomaticCallMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAutomaticCall>>>
    export type PostTelephonyBillingAccountLineServiceNameAutomaticCallMutationBody = PostTelephonyBillingAccountLineServiceNameAutomaticCallBody
    export type PostTelephonyBillingAccountLineServiceNameAutomaticCallMutationError = unknown

    /**
 * @summary Make an automatic phone call. Return generated call identifier
 */
export const usePostTelephonyBillingAccountLineServiceNameAutomaticCall = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAutomaticCall>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAutomaticCallBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameAutomaticCall>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameAutomaticCallBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameAutomaticCallMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier = (
    billingAccount: string,
    serviceName: string,
    identifier: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyCallsGeneratedOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/automaticCall/${identifier}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameAutomaticCallIdentifierQueryKey = (billingAccount: string,
    serviceName: string,
    identifier: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/automaticCall/${identifier}`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameAutomaticCallIdentifierQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameAutomaticCallIdentifierQueryKey(billingAccount,serviceName,identifier);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier(billingAccount,serviceName,identifier, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && identifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameAutomaticCallIdentifierQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>>
export type GetTelephonyBillingAccountLineServiceNameAutomaticCallIdentifierQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    identifier: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAutomaticCallIdentifier>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameAutomaticCallIdentifierQueryOptions(billingAccount,serviceName,identifier,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Listing of domains Sip availables
 */
export const getTelephonyBillingAccountLineServiceNameAvailableSipDomains = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/availableSipDomains`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameAvailableSipDomainsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/availableSipDomains`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameAvailableSipDomainsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameAvailableSipDomainsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameAvailableSipDomains(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameAvailableSipDomainsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>>
export type GetTelephonyBillingAccountLineServiceNameAvailableSipDomainsQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameAvailableSipDomains<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameAvailableSipDomains<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameAvailableSipDomains<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Listing of domains Sip availables
 */

export function useGetTelephonyBillingAccountLineServiceNameAvailableSipDomains<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameAvailableSipDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameAvailableSipDomainsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Block the line. By default it will block incoming and outgoing calls (except for emergency numbers)
 */
export const postTelephonyBillingAccountLineServiceNameBlock = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNameBlockBody: PostTelephonyBillingAccountLineServiceNameBlockBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/block`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameBlockBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameBlockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameBlock>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameBlockBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameBlock>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameBlockBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameBlock>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameBlockBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameBlock(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameBlockMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameBlock>>>
    export type PostTelephonyBillingAccountLineServiceNameBlockMutationBody = PostTelephonyBillingAccountLineServiceNameBlockBody
    export type PostTelephonyBillingAccountLineServiceNameBlockMutationError = unknown

    /**
 * @summary Block the line. By default it will block incoming and outgoing calls (except for emergency numbers)
 */
export const usePostTelephonyBillingAccountLineServiceNameBlock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameBlock>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameBlockBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameBlock>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameBlockBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameBlockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Cancel a scheduled conversion to number
 */
export const postTelephonyBillingAccountLineServiceNameCancelConvertToNumber = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/cancelConvertToNumber`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameCancelConvertToNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameCancelConvertToNumber>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameCancelConvertToNumber>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameCancelConvertToNumber>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameCancelConvertToNumber(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameCancelConvertToNumberMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameCancelConvertToNumber>>>
    
    export type PostTelephonyBillingAccountLineServiceNameCancelConvertToNumberMutationError = unknown

    /**
 * @summary Cancel a scheduled conversion to number
 */
export const usePostTelephonyBillingAccountLineServiceNameCancelConvertToNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameCancelConvertToNumber>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameCancelConvertToNumber>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameCancelConvertToNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Change the SIP account password. It must be more than 7 and less than 21 alpha and numerical characters.
 * @summary Change the SIP account password
 */
export const postTelephonyBillingAccountLineServiceNameChangePassword = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNameChangePasswordBody: PostTelephonyBillingAccountLineServiceNameChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameChangePasswordBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameChangePassword>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameChangePassword>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameChangePassword>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameChangePasswordBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameChangePassword(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameChangePassword>>>
    export type PostTelephonyBillingAccountLineServiceNameChangePasswordMutationBody = PostTelephonyBillingAccountLineServiceNameChangePasswordBody
    export type PostTelephonyBillingAccountLineServiceNameChangePasswordMutationError = unknown

    /**
 * @summary Change the SIP account password
 */
export const usePostTelephonyBillingAccountLineServiceNameChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameChangePassword>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameChangePassword>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Make a phone call from the current line
 */
export const postTelephonyBillingAccountLineServiceNameClick2Call = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNameClick2CallBody: PostTelephonyBillingAccountLineServiceNameClick2CallBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/click2Call`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameClick2CallBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameClick2CallMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2Call>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameClick2CallBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2Call>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameClick2CallBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2Call>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameClick2CallBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameClick2Call(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameClick2CallMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2Call>>>
    export type PostTelephonyBillingAccountLineServiceNameClick2CallMutationBody = PostTelephonyBillingAccountLineServiceNameClick2CallBody
    export type PostTelephonyBillingAccountLineServiceNameClick2CallMutationError = unknown

    /**
 * @summary Make a phone call from the current line
 */
export const usePostTelephonyBillingAccountLineServiceNameClick2Call = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2Call>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameClick2CallBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2Call>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameClick2CallBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameClick2CallMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary User which can use click 2 call on the line
 */
export const getTelephonyBillingAccountLineServiceNameClick2CallUser = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/click2CallUser`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameClick2CallUserQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/click2CallUser`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameClick2CallUserQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameClick2CallUserQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameClick2CallUser(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameClick2CallUserQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>>
export type GetTelephonyBillingAccountLineServiceNameClick2CallUserQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameClick2CallUser<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameClick2CallUser<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameClick2CallUser<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary User which can use click 2 call on the line
 */

export function useGetTelephonyBillingAccountLineServiceNameClick2CallUser<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameClick2CallUserQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new user for click 2 call
 */
export const postTelephonyBillingAccountLineServiceNameClick2CallUser = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNameClick2CallUserBody: PostTelephonyBillingAccountLineServiceNameClick2CallUserBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/click2CallUser`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameClick2CallUserBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameClick2CallUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUser>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameClick2CallUser(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameClick2CallUserMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUser>>>
    export type PostTelephonyBillingAccountLineServiceNameClick2CallUserMutationBody = PostTelephonyBillingAccountLineServiceNameClick2CallUserBody
    export type PostTelephonyBillingAccountLineServiceNameClick2CallUserMutationError = unknown

    /**
 * @summary Create a new user for click 2 call
 */
export const usePostTelephonyBillingAccountLineServiceNameClick2CallUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUser>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUser>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameClick2CallUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a click 2 call user
 */
export const deleteTelephonyBillingAccountLineServiceNameClick2CallUserId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/click2CallUser/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountLineServiceNameClick2CallUserIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameClick2CallUserId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountLineServiceNameClick2CallUserId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountLineServiceNameClick2CallUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameClick2CallUserId>>>
    
    export type DeleteTelephonyBillingAccountLineServiceNameClick2CallUserIdMutationError = unknown

    /**
 * @summary Delete a click 2 call user
 */
export const useDeleteTelephonyBillingAccountLineServiceNameClick2CallUserId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameClick2CallUserId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountLineServiceNameClick2CallUserIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNameClick2CallUserId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyClick2CallUserOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/click2CallUser/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameClick2CallUserIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/click2CallUser/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameClick2CallUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameClick2CallUserIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameClick2CallUserId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameClick2CallUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>>
export type GetTelephonyBillingAccountLineServiceNameClick2CallUserIdQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameClick2CallUserId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameClick2CallUserId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameClick2CallUserId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNameClick2CallUserId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameClick2CallUserId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameClick2CallUserIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the password of the click2call user
 */
export const postTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePassword = (
    billingAccount: string,
    serviceName: string,
    id: number,
    postTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordBody: PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/click2CallUser/${id}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePassword>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePassword>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePassword>>, {billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordBody}> = (props) => {
          const {billingAccount,serviceName,id,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePassword(billingAccount,serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePassword>>>
    export type PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordMutationBody = PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordBody
    export type PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordMutationError = unknown

    /**
 * @summary Change the password of the click2call user
 */
export const usePostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePassword>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePassword>>,
        TError,
        {billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Make a phone call from the current line
 */
export const postTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2Call = (
    billingAccount: string,
    serviceName: string,
    id: number,
    postTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallBody: PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/click2CallUser/${id}/click2Call`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2Call>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2Call>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2Call>>, {billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallBody}> = (props) => {
          const {billingAccount,serviceName,id,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2Call(billingAccount,serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2Call>>>
    export type PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallMutationBody = PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallBody
    export type PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallMutationError = unknown

    /**
 * @summary Make a phone call from the current line
 */
export const usePostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2Call = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2Call>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2Call>>,
        TError,
        {billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Schedule a conversion to number
 */
export const postTelephonyBillingAccountLineServiceNameConvertToNumber = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOfferTaskOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/convertToNumber`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameConvertToNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameConvertToNumber>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameConvertToNumber>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameConvertToNumber>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameConvertToNumber(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameConvertToNumberMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameConvertToNumber>>>
    
    export type PostTelephonyBillingAccountLineServiceNameConvertToNumberMutationError = unknown

    /**
 * @summary Schedule a conversion to number
 */
export const usePostTelephonyBillingAccountLineServiceNameConvertToNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameConvertToNumber>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameConvertToNumber>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameConvertToNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get device ids linked to the line
 */
export const getTelephonyBillingAccountLineServiceNameDevices = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/devices`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameDevicesQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/devices`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameDevicesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameDevicesQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameDevices(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameDevicesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>>
export type GetTelephonyBillingAccountLineServiceNameDevicesQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameDevices<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameDevices<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameDevices<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get device ids linked to the line
 */

export function useGetTelephonyBillingAccountLineServiceNameDevices<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameDevicesQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a device for this line
 */
export const postTelephonyBillingAccountLineServiceNameDevices = (
    billingAccount: string,
    serviceName: string,
    telephonyDeviceCreateInputOVH: TelephonyDeviceCreateInputOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDeviceOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/devices`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: telephonyDeviceCreateInputOVH, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameDevicesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevices>>, TError,{billingAccount: string;serviceName: string;data: TelephonyDeviceCreateInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevices>>, TError,{billingAccount: string;serviceName: string;data: TelephonyDeviceCreateInputOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevices>>, {billingAccount: string;serviceName: string;data: TelephonyDeviceCreateInputOVH}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameDevices(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameDevicesMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevices>>>
    export type PostTelephonyBillingAccountLineServiceNameDevicesMutationBody = TelephonyDeviceCreateInputOVH
    export type PostTelephonyBillingAccountLineServiceNameDevicesMutationError = unknown

    /**
 * @summary Create a device for this line
 */
export const usePostTelephonyBillingAccountLineServiceNameDevices = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevices>>, TError,{billingAccount: string;serviceName: string;data: TelephonyDeviceCreateInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevices>>,
        TError,
        {billingAccount: string;serviceName: string;data: TelephonyDeviceCreateInputOVH},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameDevicesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete device
 */
export const deleteTelephonyBillingAccountLineServiceNameDevicesId = (
    billingAccount: string,
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/devices/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountLineServiceNameDevicesIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameDevicesId>>, TError,{billingAccount: string;serviceName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameDevicesId>>, TError,{billingAccount: string;serviceName: string;id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameDevicesId>>, {billingAccount: string;serviceName: string;id: string}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountLineServiceNameDevicesId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountLineServiceNameDevicesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameDevicesId>>>
    
    export type DeleteTelephonyBillingAccountLineServiceNameDevicesIdMutationError = unknown

    /**
 * @summary Delete device
 */
export const useDeleteTelephonyBillingAccountLineServiceNameDevicesId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameDevicesId>>, TError,{billingAccount: string;serviceName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameDevicesId>>,
        TError,
        {billingAccount: string;serviceName: string;id: string},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountLineServiceNameDevicesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get device information
 */
export const getTelephonyBillingAccountLineServiceNameDevicesId = (
    billingAccount: string,
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDeviceOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/devices/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameDevicesIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/devices/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameDevicesIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameDevicesIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameDevicesId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameDevicesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>>
export type GetTelephonyBillingAccountLineServiceNameDevicesIdQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameDevicesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameDevicesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameDevicesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get device information
 */

export function useGetTelephonyBillingAccountLineServiceNameDevicesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameDevicesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameDevicesIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Edit device information
 */
export const putTelephonyBillingAccountLineServiceNameDevicesId = (
    billingAccount: string,
    serviceName: string,
    id: string,
    telephonyDeviceOVH: NonReadonly<TelephonyDeviceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<TelephonyDeviceOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/devices/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyDeviceOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNameDevicesIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameDevicesId>>, TError,{billingAccount: string;serviceName: string;id: string;data: NonReadonly<TelephonyDeviceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameDevicesId>>, TError,{billingAccount: string;serviceName: string;id: string;data: NonReadonly<TelephonyDeviceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameDevicesId>>, {billingAccount: string;serviceName: string;id: string;data: NonReadonly<TelephonyDeviceOVH>}> = (props) => {
          const {billingAccount,serviceName,id,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceNameDevicesId(billingAccount,serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNameDevicesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameDevicesId>>>
    export type PutTelephonyBillingAccountLineServiceNameDevicesIdMutationBody = NonReadonly<TelephonyDeviceOVH>
    export type PutTelephonyBillingAccountLineServiceNameDevicesIdMutationError = unknown

    /**
 * @summary Edit device information
 */
export const usePutTelephonyBillingAccountLineServiceNameDevicesId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameDevicesId>>, TError,{billingAccount: string;serviceName: string;id: string;data: NonReadonly<TelephonyDeviceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameDevicesId>>,
        TError,
        {billingAccount: string;serviceName: string;id: string;data: NonReadonly<TelephonyDeviceOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNameDevicesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Regenerate softphone provisioning token
 */
export const postTelephonyBillingAccountLineServiceNameDevicesIdEnroll = (
    billingAccount: string,
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDeviceEnrollOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/devices/${id}/enroll`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameDevicesIdEnrollMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevicesIdEnroll>>, TError,{billingAccount: string;serviceName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevicesIdEnroll>>, TError,{billingAccount: string;serviceName: string;id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevicesIdEnroll>>, {billingAccount: string;serviceName: string;id: string}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameDevicesIdEnroll(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameDevicesIdEnrollMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevicesIdEnroll>>>
    
    export type PostTelephonyBillingAccountLineServiceNameDevicesIdEnrollMutationError = unknown

    /**
 * @summary Regenerate softphone provisioning token
 */
export const usePostTelephonyBillingAccountLineServiceNameDevicesIdEnroll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevicesIdEnroll>>, TError,{billingAccount: string;serviceName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevicesIdEnroll>>,
        TError,
        {billingAccount: string;serviceName: string;id: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameDevicesIdEnrollMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Send softphone provisioning token by email
 */
export const postTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningToken = (
    billingAccount: string,
    serviceName: string,
    id: string,
    telephonyDeviceSendProvisioningTokenOVH: TelephonyDeviceSendProvisioningTokenOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/devices/${id}/sendProvisioningToken`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: telephonyDeviceSendProvisioningTokenOVH, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningToken>>, TError,{billingAccount: string;serviceName: string;id: string;data: TelephonyDeviceSendProvisioningTokenOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningToken>>, TError,{billingAccount: string;serviceName: string;id: string;data: TelephonyDeviceSendProvisioningTokenOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningToken>>, {billingAccount: string;serviceName: string;id: string;data: TelephonyDeviceSendProvisioningTokenOVH}> = (props) => {
          const {billingAccount,serviceName,id,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningToken(billingAccount,serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningToken>>>
    export type PostTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningTokenMutationBody = TelephonyDeviceSendProvisioningTokenOVH
    export type PostTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningTokenMutationError = unknown

    /**
 * @summary Send softphone provisioning token by email
 */
export const usePostTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningToken>>, TError,{billingAccount: string;serviceName: string;id: string;data: TelephonyDeviceSendProvisioningTokenOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningToken>>,
        TError,
        {billingAccount: string;serviceName: string;id: string;data: TelephonyDeviceSendProvisioningTokenOVH},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameDevicesIdSendProvisioningTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Dissociate a device from the current line with the device mac address
 */
export const postTelephonyBillingAccountLineServiceNameDissociateDevice = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNameDissociateDeviceBody: PostTelephonyBillingAccountLineServiceNameDissociateDeviceBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/dissociateDevice`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameDissociateDeviceBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameDissociateDeviceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDissociateDevice>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameDissociateDeviceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDissociateDevice>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameDissociateDeviceBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDissociateDevice>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameDissociateDeviceBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameDissociateDevice(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameDissociateDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDissociateDevice>>>
    export type PostTelephonyBillingAccountLineServiceNameDissociateDeviceMutationBody = PostTelephonyBillingAccountLineServiceNameDissociateDeviceBody
    export type PostTelephonyBillingAccountLineServiceNameDissociateDeviceMutationError = unknown

    /**
 * @summary Dissociate a device from the current line with the device mac address
 */
export const usePostTelephonyBillingAccountLineServiceNameDissociateDevice = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDissociateDevice>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameDissociateDeviceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameDissociateDevice>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameDissociateDeviceBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameDissociateDeviceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Event triggered by the line
 */
export const getTelephonyBillingAccountLineServiceNameEvents = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/events`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameEventsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/events`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameEventsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameEventsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameEvents(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>>
export type GetTelephonyBillingAccountLineServiceNameEventsQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameEvents<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameEvents<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameEvents<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Event triggered by the line
 */

export function useGetTelephonyBillingAccountLineServiceNameEvents<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEvents>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameEventsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNameEventsId = (
    billingAccount: string,
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEventOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/events/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameEventsIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/events/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameEventsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameEventsIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameEventsId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameEventsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>>
export type GetTelephonyBillingAccountLineServiceNameEventsIdQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameEventsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameEventsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameEventsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNameEventsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameEventsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameEventsIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Listing of last ips registry
 */
export const getTelephonyBillingAccountLineServiceNameIps = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDatetimeAndIpvalueOVH[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/ips`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameIpsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/ips`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameIpsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameIpsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameIps(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameIpsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>>
export type GetTelephonyBillingAccountLineServiceNameIpsQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameIps<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameIps<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameIps<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Listing of last ips registry
 */

export function useGetTelephonyBillingAccountLineServiceNameIps<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameIpsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List the informations about the last registrations (i.e. IP, port, User-Agent...)
 */
export const getTelephonyBillingAccountLineServiceNameLastRegistrations = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyRegistrationInformationsOVH[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/lastRegistrations`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameLastRegistrationsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/lastRegistrations`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameLastRegistrationsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameLastRegistrationsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameLastRegistrations(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameLastRegistrationsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>>
export type GetTelephonyBillingAccountLineServiceNameLastRegistrationsQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameLastRegistrations<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameLastRegistrations<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameLastRegistrations<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the informations about the last registrations (i.e. IP, port, User-Agent...)
 */

export function useGetTelephonyBillingAccountLineServiceNameLastRegistrations<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameLastRegistrations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameLastRegistrationsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List phones with available slots where this line can be attached
 */
export const getTelephonyBillingAccountLineServiceNameListAssociablePhones = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyLinePhoneAssociableOVH[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/listAssociablePhones`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameListAssociablePhonesQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/listAssociablePhones`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameListAssociablePhonesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameListAssociablePhonesQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameListAssociablePhones(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameListAssociablePhonesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>>
export type GetTelephonyBillingAccountLineServiceNameListAssociablePhonesQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameListAssociablePhones<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameListAssociablePhones<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameListAssociablePhones<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List phones with available slots where this line can be attached
 */

export function useGetTelephonyBillingAccountLineServiceNameListAssociablePhones<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameListAssociablePhones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameListAssociablePhonesQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the maximum available simultaneous lines for this line
 */
export const getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/maximumAvailableSimultaneousLines`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLinesQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/maximumAvailableSimultaneousLines`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLinesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLinesQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLinesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>>
export type GetTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLinesQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the maximum available simultaneous lines for this line
 */

export function useGetTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLines>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLinesQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return public offer property
 */
export const getTelephonyBillingAccountLineServiceNameOffer = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyLineOfferOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/offer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameOfferQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/offer`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameOfferQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameOfferQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameOffer(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameOfferQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>>
export type GetTelephonyBillingAccountLineServiceNameOfferQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameOffer<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameOffer<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameOffer<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return public offer property
 */

export function useGetTelephonyBillingAccountLineServiceNameOffer<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameOfferQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNameOptions = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyLineOptionsOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/options`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameOptionsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/options`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameOptionsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameOptions(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>>
export type GetTelephonyBillingAccountLineServiceNameOptionsQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameOptions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameOptions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameOptions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNameOptions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameOptionsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountLineServiceNameOptions = (
    billingAccount: string,
    serviceName: string,
    telephonyLineOptionsOVH: NonReadonly<TelephonyLineOptionsOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/options`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyLineOptionsOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNameOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameOptions>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyLineOptionsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameOptions>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyLineOptionsOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameOptions>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyLineOptionsOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceNameOptions(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNameOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameOptions>>>
    export type PutTelephonyBillingAccountLineServiceNameOptionsMutationBody = NonReadonly<TelephonyLineOptionsOVH>
    export type PutTelephonyBillingAccountLineServiceNameOptionsMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountLineServiceNameOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameOptions>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyLineOptionsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameOptions>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyLineOptionsOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNameOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of codecs combinaisons available for this line
 */
export const getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/options/availableCodecs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameOptionsAvailableCodecsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/options/availableCodecs`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameOptionsAvailableCodecsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameOptionsAvailableCodecsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameOptionsAvailableCodecsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>>
export type GetTelephonyBillingAccountLineServiceNameOptionsAvailableCodecsQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of codecs combinaisons available for this line
 */

export function useGetTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsAvailableCodecs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameOptionsAvailableCodecsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the default codecs for this line if none are set
 */
export const getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/options/defaultCodecs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameOptionsDefaultCodecsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/options/defaultCodecs`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameOptionsDefaultCodecsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameOptionsDefaultCodecsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameOptionsDefaultCodecsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>>
export type GetTelephonyBillingAccountLineServiceNameOptionsDefaultCodecsQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the default codecs for this line if none are set
 */

export function useGetTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameOptionsDefaultCodecs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameOptionsDefaultCodecsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNamePhone = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPhoneOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhoneQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhoneQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhoneQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhone(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhoneQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>>
export type GetTelephonyBillingAccountLineServiceNamePhoneQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhone<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhone<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhone<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNamePhone<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhoneQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountLineServiceNamePhone = (
    billingAccount: string,
    serviceName: string,
    telephonyPhoneOVH: NonReadonly<TelephonyPhoneOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyPhoneOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNamePhoneMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhone>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyPhoneOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhone>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyPhoneOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhone>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyPhoneOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceNamePhone(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNamePhoneMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhone>>>
    export type PutTelephonyBillingAccountLineServiceNamePhoneMutationBody = NonReadonly<TelephonyPhoneOVH>
    export type PutTelephonyBillingAccountLineServiceNamePhoneMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountLineServiceNamePhone = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhone>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyPhoneOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhone>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyPhoneOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNamePhoneMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the administration user and password of the phone if you are a VIP
 */
export const getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPhoneCredentialsOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/adminCredentials`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhoneAdminCredentialsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/adminCredentials`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhoneAdminCredentialsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhoneAdminCredentialsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhoneAdminCredentialsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>>
export type GetTelephonyBillingAccountLineServiceNamePhoneAdminCredentialsQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhoneAdminCredentials<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneAdminCredentials<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneAdminCredentials<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the administration user and password of the phone if you are a VIP
 */

export function useGetTelephonyBillingAccountLineServiceNamePhoneAdminCredentials<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneAdminCredentials>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhoneAdminCredentialsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Edit configuration of the phone remotely by provisioning
 */
export const postTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfiguration = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationBody: PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/changePhoneConfiguration`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfiguration>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfiguration>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfiguration>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfiguration(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfiguration>>>
    export type PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationMutationBody = PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationBody
    export type PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationMutationError = unknown

    /**
 * @summary Edit configuration of the phone remotely by provisioning
 */
export const usePostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfiguration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfiguration>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfiguration>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Plug & Phone function keys
 */
export const getTelephonyBillingAccountLineServiceNamePhoneFunctionKey = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/functionKey`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/functionKey`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhoneFunctionKey(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>>
export type GetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhoneFunctionKey<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneFunctionKey<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneFunctionKey<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Plug & Phone function keys
 */

export function useGetTelephonyBillingAccountLineServiceNamePhoneFunctionKey<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum = (
    billingAccount: string,
    serviceName: string,
    keyNum: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyFunctionKeyOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/functionKey/${keyNum}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumQueryKey = (billingAccount: string,
    serviceName: string,
    keyNum: number,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/functionKey/${keyNum}`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    keyNum: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumQueryKey(billingAccount,serviceName,keyNum);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum(billingAccount,serviceName,keyNum, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && keyNum), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>>
export type GetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    keyNum: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    keyNum: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    keyNum: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    keyNum: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumQueryOptions(billingAccount,serviceName,keyNum,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum = (
    billingAccount: string,
    serviceName: string,
    keyNum: number,
    telephonyFunctionKeyOVH: NonReadonly<TelephonyFunctionKeyOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/functionKey/${keyNum}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyFunctionKeyOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError,{billingAccount: string;serviceName: string;keyNum: number;data: NonReadonly<TelephonyFunctionKeyOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError,{billingAccount: string;serviceName: string;keyNum: number;data: NonReadonly<TelephonyFunctionKeyOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, {billingAccount: string;serviceName: string;keyNum: number;data: NonReadonly<TelephonyFunctionKeyOVH>}> = (props) => {
          const {billingAccount,serviceName,keyNum,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum(billingAccount,serviceName,keyNum,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>>
    export type PutTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumMutationBody = NonReadonly<TelephonyFunctionKeyOVH>
    export type PutTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>, TError,{billingAccount: string;serviceName: string;keyNum: number;data: NonReadonly<TelephonyFunctionKeyOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNum>>,
        TError,
        {billingAccount: string;serviceName: string;keyNum: number;data: NonReadonly<TelephonyFunctionKeyOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List the available functions for the key
 */
export const getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction = (
    billingAccount: string,
    serviceName: string,
    keyNum: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/functionKey/${keyNum}/availableFunction`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunctionQueryKey = (billingAccount: string,
    serviceName: string,
    keyNum: number,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/functionKey/${keyNum}/availableFunction`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunctionQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    keyNum: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunctionQueryKey(billingAccount,serviceName,keyNum);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction(billingAccount,serviceName,keyNum, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && keyNum), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunctionQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>>
export type GetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunctionQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    keyNum: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    keyNum: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    keyNum: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the available functions for the key
 */

export function useGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    keyNum: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunctionQueryOptions(billingAccount,serviceName,keyNum,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of available exchange merchandise brand
 */
export const getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyHardwareOfferOVH[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/merchandiseAvailable`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailableQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/merchandiseAvailable`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailableQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>>
export type GetTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailableQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of available exchange merchandise brand
 */

export function useGetTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailableQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return phonebooks associated
 */
export const getTelephonyBillingAccountLineServiceNamePhonePhonebook = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/phonebook`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhonePhonebookQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/phonebook`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhonePhonebookQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhonePhonebookQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhonePhonebook(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhonePhonebookQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>>
export type GetTelephonyBillingAccountLineServiceNamePhonePhonebookQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebook<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebook<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebook<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return phonebooks associated
 */

export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebook<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhonePhonebookQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a phonebook. Return the bookKey.
 */
export const postTelephonyBillingAccountLineServiceNamePhonePhonebook = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNamePhonePhonebookBody: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/phonebook`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNamePhonePhonebookBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNamePhonePhonebookMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebook>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNamePhonePhonebook(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNamePhonePhonebookMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebook>>>
    export type PostTelephonyBillingAccountLineServiceNamePhonePhonebookMutationBody = PostTelephonyBillingAccountLineServiceNamePhonePhonebookBody
    export type PostTelephonyBillingAccountLineServiceNamePhonePhonebookMutationError = unknown

    /**
 * @summary Add a phonebook. Return the bookKey.
 */
export const usePostTelephonyBillingAccountLineServiceNamePhonePhonebook = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebook>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebook>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNamePhonePhonebookMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a phonebook
 */
export const deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey = (
    billingAccount: string,
    serviceName: string,
    bookKey: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError,{billingAccount: string;serviceName: string;bookKey: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError,{billingAccount: string;serviceName: string;bookKey: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, {billingAccount: string;serviceName: string;bookKey: string}> = (props) => {
          const {billingAccount,serviceName,bookKey} = props ?? {};

          return  deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey(billingAccount,serviceName,bookKey,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>>
    
    export type DeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyMutationError = unknown

    /**
 * @summary Delete a phonebook
 */
export const useDeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError,{billingAccount: string;serviceName: string;bookKey: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>,
        TError,
        {billingAccount: string;serviceName: string;bookKey: string},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey = (
    billingAccount: string,
    serviceName: string,
    bookKey: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPhonebookOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyQueryKey = (billingAccount: string,
    serviceName: string,
    bookKey: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyQueryKey(billingAccount,serviceName,bookKey);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey(billingAccount,serviceName,bookKey, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && bookKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>>
export type GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyQueryOptions(billingAccount,serviceName,bookKey,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey = (
    billingAccount: string,
    serviceName: string,
    bookKey: string,
    telephonyPhonebookOVH: NonReadonly<TelephonyPhonebookOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyPhonebookOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError,{billingAccount: string;serviceName: string;bookKey: string;data: NonReadonly<TelephonyPhonebookOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError,{billingAccount: string;serviceName: string;bookKey: string;data: NonReadonly<TelephonyPhonebookOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, {billingAccount: string;serviceName: string;bookKey: string;data: NonReadonly<TelephonyPhonebookOVH>}> = (props) => {
          const {billingAccount,serviceName,bookKey,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey(billingAccount,serviceName,bookKey,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>>
    export type PutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyMutationBody = NonReadonly<TelephonyPhonebookOVH>
    export type PutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>, TError,{billingAccount: string;serviceName: string;bookKey: string;data: NonReadonly<TelephonyPhonebookOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKey>>,
        TError,
        {billingAccount: string;serviceName: string;bookKey: string;data: NonReadonly<TelephonyPhonebookOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Export the phonebook's contacts
 */
export const getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport = (
    billingAccount: string,
    serviceName: string,
    bookKey: string,
    params: GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPcsFileOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}/export`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportQueryKey = (billingAccount: string,
    serviceName: string,
    bookKey: string,
    params: GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportParams,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}/export`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    bookKey: string,
    params: GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportQueryKey(billingAccount,serviceName,bookKey,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport(billingAccount,serviceName,bookKey,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && bookKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>>
export type GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string,
    params: GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string,
    params: GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string,
    params: GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Export the phonebook's contacts
 */

export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string,
    params: GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportQueryOptions(billingAccount,serviceName,bookKey,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Import a contacts file. Supported formats are Excel (.xls and .xlsx) and CSV
 */
export const postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImport = (
    billingAccount: string,
    serviceName: string,
    bookKey: string,
    postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportBody: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}/import`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImport>>, TError,{billingAccount: string;serviceName: string;bookKey: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImport>>, TError,{billingAccount: string;serviceName: string;bookKey: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImport>>, {billingAccount: string;serviceName: string;bookKey: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportBody}> = (props) => {
          const {billingAccount,serviceName,bookKey,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImport(billingAccount,serviceName,bookKey,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImport>>>
    export type PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportMutationBody = PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportBody
    export type PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportMutationError = unknown

    /**
 * @summary Import a contacts file. Supported formats are Excel (.xls and .xlsx) and CSV
 */
export const usePostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImport>>, TError,{billingAccount: string;serviceName: string;bookKey: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImport>>,
        TError,
        {billingAccount: string;serviceName: string;bookKey: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Phonebook contacts
 */
export const getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact = (
    billingAccount: string,
    serviceName: string,
    bookKey: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}/phonebookContact`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactQueryKey = (billingAccount: string,
    serviceName: string,
    bookKey: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}/phonebookContact`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactQueryKey(billingAccount,serviceName,bookKey);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact(billingAccount,serviceName,bookKey, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && bookKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>>
export type GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Phonebook contacts
 */

export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactQueryOptions(billingAccount,serviceName,bookKey,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a phonebook contact. Return identifier of the phonebook contact.
 */
export const postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact = (
    billingAccount: string,
    serviceName: string,
    bookKey: string,
    postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactBody: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}/phonebookContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError,{billingAccount: string;serviceName: string;bookKey: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError,{billingAccount: string;serviceName: string;bookKey: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, {billingAccount: string;serviceName: string;bookKey: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactBody}> = (props) => {
          const {billingAccount,serviceName,bookKey,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact(billingAccount,serviceName,bookKey,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>>
    export type PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactMutationBody = PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactBody
    export type PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactMutationError = unknown

    /**
 * @summary Create a phonebook contact. Return identifier of the phonebook contact.
 */
export const usePostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>, TError,{billingAccount: string;serviceName: string;bookKey: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContact>>,
        TError,
        {billingAccount: string;serviceName: string;bookKey: string;data: PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a phonebook contact
 */
export const deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId = (
    billingAccount: string,
    serviceName: string,
    bookKey: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}/phonebookContact/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError,{billingAccount: string;serviceName: string;bookKey: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError,{billingAccount: string;serviceName: string;bookKey: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, {billingAccount: string;serviceName: string;bookKey: string;id: number}> = (props) => {
          const {billingAccount,serviceName,bookKey,id} = props ?? {};

          return  deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId(billingAccount,serviceName,bookKey,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>>
    
    export type DeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdMutationError = unknown

    /**
 * @summary Delete a phonebook contact
 */
export const useDeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError,{billingAccount: string;serviceName: string;bookKey: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>,
        TError,
        {billingAccount: string;serviceName: string;bookKey: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId = (
    billingAccount: string,
    serviceName: string,
    bookKey: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPhonebookContactOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}/phonebookContact/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdQueryKey = (billingAccount: string,
    serviceName: string,
    bookKey: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}/phonebookContact/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    bookKey: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdQueryKey(billingAccount,serviceName,bookKey,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId(billingAccount,serviceName,bookKey,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && bookKey && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>>
export type GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    bookKey: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdQueryOptions(billingAccount,serviceName,bookKey,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId = (
    billingAccount: string,
    serviceName: string,
    bookKey: string,
    id: number,
    telephonyPhonebookContactOVH: NonReadonly<TelephonyPhonebookContactOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/phonebook/${bookKey}/phonebookContact/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyPhonebookContactOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError,{billingAccount: string;serviceName: string;bookKey: string;id: number;data: NonReadonly<TelephonyPhonebookContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError,{billingAccount: string;serviceName: string;bookKey: string;id: number;data: NonReadonly<TelephonyPhonebookContactOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, {billingAccount: string;serviceName: string;bookKey: string;id: number;data: NonReadonly<TelephonyPhonebookContactOVH>}> = (props) => {
          const {billingAccount,serviceName,bookKey,id,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId(billingAccount,serviceName,bookKey,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>>
    export type PutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdMutationBody = NonReadonly<TelephonyPhonebookContactOVH>
    export type PutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>, TError,{billingAccount: string;serviceName: string;bookKey: string;id: number;data: NonReadonly<TelephonyPhonebookContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactId>>,
        TError,
        {billingAccount: string;serviceName: string;bookKey: string;id: number;data: NonReadonly<TelephonyPhonebookContactOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create a task to reboot the phone
 */
export const postTelephonyBillingAccountLineServiceNamePhoneReboot = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/reboot`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNamePhoneRebootMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneReboot>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneReboot>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneReboot>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNamePhoneReboot(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNamePhoneRebootMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneReboot>>>
    
    export type PostTelephonyBillingAccountLineServiceNamePhoneRebootMutationError = unknown

    /**
 * @summary Create a task to reboot the phone
 */
export const usePostTelephonyBillingAccountLineServiceNamePhoneReboot = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneReboot>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneReboot>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNamePhoneRebootMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create a task to refresh the screen of the MGCP phone
 */
export const postTelephonyBillingAccountLineServiceNamePhoneRefreshScreen = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/refreshScreen`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNamePhoneRefreshScreenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRefreshScreen>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRefreshScreen>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRefreshScreen>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNamePhoneRefreshScreen(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNamePhoneRefreshScreenMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRefreshScreen>>>
    
    export type PostTelephonyBillingAccountLineServiceNamePhoneRefreshScreenMutationError = unknown

    /**
 * @summary Create a task to refresh the screen of the MGCP phone
 */
export const usePostTelephonyBillingAccountLineServiceNamePhoneRefreshScreen = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRefreshScreen>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRefreshScreen>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNamePhoneRefreshScreenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reinitialize the phone configuration
 */
export const postTelephonyBillingAccountLineServiceNamePhoneResetConfig = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNamePhoneResetConfigBody: PostTelephonyBillingAccountLineServiceNamePhoneResetConfigBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyResetPhoneInfoOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/resetConfig`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNamePhoneResetConfigBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNamePhoneResetConfigMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneResetConfig>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneResetConfigBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneResetConfig>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneResetConfigBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneResetConfig>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneResetConfigBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNamePhoneResetConfig(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNamePhoneResetConfigMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneResetConfig>>>
    export type PostTelephonyBillingAccountLineServiceNamePhoneResetConfigMutationBody = PostTelephonyBillingAccountLineServiceNamePhoneResetConfigBody
    export type PostTelephonyBillingAccountLineServiceNamePhoneResetConfigMutationError = unknown

    /**
 * @summary Reinitialize the phone configuration
 */
export const usePostTelephonyBillingAccountLineServiceNamePhoneResetConfig = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneResetConfig>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneResetConfigBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneResetConfig>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneResetConfigBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNamePhoneResetConfigMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Return Merchandise Authorisation associated
 */
export const getTelephonyBillingAccountLineServiceNamePhoneRma = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/rma`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhoneRmaQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/rma`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhoneRmaQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhoneRmaQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhoneRma(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhoneRmaQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>>
export type GetTelephonyBillingAccountLineServiceNamePhoneRmaQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhoneRma<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneRma<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneRma<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return Merchandise Authorisation associated
 */

export function useGetTelephonyBillingAccountLineServiceNamePhoneRma<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRma>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhoneRmaQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a specific rma
 */
export const postTelephonyBillingAccountLineServiceNamePhoneRma = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNamePhoneRmaBody: PostTelephonyBillingAccountLineServiceNamePhoneRmaBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyRmaReturnOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/rma`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNamePhoneRmaBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNamePhoneRmaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRma>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneRmaBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRma>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneRmaBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRma>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneRmaBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNamePhoneRma(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNamePhoneRmaMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRma>>>
    export type PostTelephonyBillingAccountLineServiceNamePhoneRmaMutationBody = PostTelephonyBillingAccountLineServiceNamePhoneRmaBody
    export type PostTelephonyBillingAccountLineServiceNamePhoneRmaMutationError = unknown

    /**
 * @summary Create a specific rma
 */
export const usePostTelephonyBillingAccountLineServiceNamePhoneRma = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRma>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneRmaBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRma>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNamePhoneRmaBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNamePhoneRmaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Cancel the rma
 */
export const deleteTelephonyBillingAccountLineServiceNamePhoneRmaId = (
    billingAccount: string,
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/rma/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountLineServiceNamePhoneRmaIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError,{billingAccount: string;serviceName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError,{billingAccount: string;serviceName: string;id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhoneRmaId>>, {billingAccount: string;serviceName: string;id: string}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountLineServiceNamePhoneRmaId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountLineServiceNamePhoneRmaIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhoneRmaId>>>
    
    export type DeleteTelephonyBillingAccountLineServiceNamePhoneRmaIdMutationError = unknown

    /**
 * @summary Cancel the rma
 */
export const useDeleteTelephonyBillingAccountLineServiceNamePhoneRmaId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError,{billingAccount: string;serviceName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNamePhoneRmaId>>,
        TError,
        {billingAccount: string;serviceName: string;id: string},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountLineServiceNamePhoneRmaIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNamePhoneRmaId = (
    billingAccount: string,
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyRmaOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/rma/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhoneRmaIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/rma/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhoneRmaIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhoneRmaIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhoneRmaId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhoneRmaIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>>
export type GetTelephonyBillingAccountLineServiceNamePhoneRmaIdQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhoneRmaId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneRmaId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneRmaId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNamePhoneRmaId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhoneRmaIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountLineServiceNamePhoneRmaId = (
    billingAccount: string,
    serviceName: string,
    id: string,
    telephonyRmaOVH: NonReadonly<TelephonyRmaOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/rma/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyRmaOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNamePhoneRmaIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError,{billingAccount: string;serviceName: string;id: string;data: NonReadonly<TelephonyRmaOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError,{billingAccount: string;serviceName: string;id: string;data: NonReadonly<TelephonyRmaOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhoneRmaId>>, {billingAccount: string;serviceName: string;id: string;data: NonReadonly<TelephonyRmaOVH>}> = (props) => {
          const {billingAccount,serviceName,id,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceNamePhoneRmaId(billingAccount,serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNamePhoneRmaIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhoneRmaId>>>
    export type PutTelephonyBillingAccountLineServiceNamePhoneRmaIdMutationBody = NonReadonly<TelephonyRmaOVH>
    export type PutTelephonyBillingAccountLineServiceNamePhoneRmaIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountLineServiceNamePhoneRmaId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhoneRmaId>>, TError,{billingAccount: string;serviceName: string;id: string;data: NonReadonly<TelephonyRmaOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNamePhoneRmaId>>,
        TError,
        {billingAccount: string;serviceName: string;id: string;data: NonReadonly<TelephonyRmaOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNamePhoneRmaIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change RMA type
 */
export const postTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeType = (
    billingAccount: string,
    serviceName: string,
    id: string,
    postTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeBody: PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/rma/${id}/changeType`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeType>>, TError,{billingAccount: string;serviceName: string;id: string;data: PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeType>>, TError,{billingAccount: string;serviceName: string;id: string;data: PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeType>>, {billingAccount: string;serviceName: string;id: string;data: PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeBody}> = (props) => {
          const {billingAccount,serviceName,id,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeType(billingAccount,serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeType>>>
    export type PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeMutationBody = PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeBody
    export type PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeMutationError = unknown

    /**
 * @summary Change RMA type
 */
export const usePostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeType>>, TError,{billingAccount: string;serviceName: string;id: string;data: PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeType>>,
        TError,
        {billingAccount: string;serviceName: string;id: string;data: PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Does the phone manages phonebooks?
 */
export const getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/phone/supportsPhonebook`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebookQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/phone/supportsPhonebook`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebookQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebookQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebookQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>>
export type GetTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebookQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Does the phone manages phonebooks?
 */

export function useGetTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebook>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebookQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary The recordings of your line outgoing calls
 */
export const getTelephonyBillingAccountLineServiceNameRecords = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/records`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameRecordsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/records`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameRecordsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameRecordsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameRecords(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameRecordsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>>
export type GetTelephonyBillingAccountLineServiceNameRecordsQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameRecords<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameRecords<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameRecords<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary The recordings of your line outgoing calls
 */

export function useGetTelephonyBillingAccountLineServiceNameRecords<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameRecordsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the given record
 */
export const deleteTelephonyBillingAccountLineServiceNameRecordsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/records/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountLineServiceNameRecordsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameRecordsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameRecordsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameRecordsId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountLineServiceNameRecordsId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountLineServiceNameRecordsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameRecordsId>>>
    
    export type DeleteTelephonyBillingAccountLineServiceNameRecordsIdMutationError = unknown

    /**
 * @summary Delete the given record
 */
export const useDeleteTelephonyBillingAccountLineServiceNameRecordsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameRecordsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameRecordsId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountLineServiceNameRecordsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNameRecordsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxRecordOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/records/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameRecordsIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/records/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameRecordsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameRecordsIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameRecordsId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameRecordsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>>
export type GetTelephonyBillingAccountLineServiceNameRecordsIdQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameRecordsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameRecordsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameRecordsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNameRecordsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameRecordsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameRecordsIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Remove extra simultaneous lines
 */
export const postTelephonyBillingAccountLineServiceNameRemoveSimultaneousLines = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesBody: PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/removeSimultaneousLines`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameRemoveSimultaneousLines>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameRemoveSimultaneousLines>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameRemoveSimultaneousLines>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameRemoveSimultaneousLines(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameRemoveSimultaneousLines>>>
    export type PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesMutationBody = PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesBody
    export type PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesMutationError = unknown

    /**
 * @summary Remove extra simultaneous lines
 */
export const usePostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLines = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameRemoveSimultaneousLines>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameRemoveSimultaneousLines>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Details about simultaneous channels of this line.
 */
export const getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySimultaneousChannelsDetailsOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/simultaneousChannelsDetails`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetailsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/simultaneousChannelsDetails`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetailsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>>
export type GetTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetailsQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Details about simultaneous channels of this line.
 */

export function useGetTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetailsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get beta status for line softphone
 */
export const getTelephonyBillingAccountLineServiceNameSoftphoneBeta = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySoftphoneBetaStatusOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/softphone/beta`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameSoftphoneBetaQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/softphone/beta`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameSoftphoneBetaQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameSoftphoneBetaQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameSoftphoneBeta(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameSoftphoneBetaQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>>
export type GetTelephonyBillingAccountLineServiceNameSoftphoneBetaQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameSoftphoneBeta<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameSoftphoneBeta<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameSoftphoneBeta<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get beta status for line softphone
 */

export function useGetTelephonyBillingAccountLineServiceNameSoftphoneBeta<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameSoftphoneBetaQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Enable or disable beta statuses for line softphone
 */
export const putTelephonyBillingAccountLineServiceNameSoftphoneBeta = (
    billingAccount: string,
    serviceName: string,
    telephonySoftphoneBetaStatusOVH: TelephonySoftphoneBetaStatusOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<TelephonySoftphoneBetaStatusOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/softphone/beta`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonySoftphoneBetaStatusOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNameSoftphoneBetaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError,{billingAccount: string;serviceName: string;data: TelephonySoftphoneBetaStatusOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError,{billingAccount: string;serviceName: string;data: TelephonySoftphoneBetaStatusOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, {billingAccount: string;serviceName: string;data: TelephonySoftphoneBetaStatusOVH}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceNameSoftphoneBeta(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNameSoftphoneBetaMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneBeta>>>
    export type PutTelephonyBillingAccountLineServiceNameSoftphoneBetaMutationBody = TelephonySoftphoneBetaStatusOVH
    export type PutTelephonyBillingAccountLineServiceNameSoftphoneBetaMutationError = unknown

    /**
 * @summary Enable or disable beta statuses for line softphone
 */
export const usePutTelephonyBillingAccountLineServiceNameSoftphoneBeta = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneBeta>>, TError,{billingAccount: string;serviceName: string;data: TelephonySoftphoneBetaStatusOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneBeta>>,
        TError,
        {billingAccount: string;serviceName: string;data: TelephonySoftphoneBetaStatusOVH},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNameSoftphoneBetaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Regenerate softphone token for registration
 */
export const postTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateToken = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/softphone/beta/regenerateToken`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateToken>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateToken>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateToken>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateToken(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateToken>>>
    
    export type PostTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateTokenMutationError = unknown

    /**
 * @summary Regenerate softphone token for registration
 */
export const usePostTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateToken>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateToken>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get line softphone logo
 */
export const getTelephonyBillingAccountLineServiceNameSoftphoneLogo = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySoftphoneLogoOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/softphone/logo`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameSoftphoneLogoQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/softphone/logo`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameSoftphoneLogoQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameSoftphoneLogoQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameSoftphoneLogo(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameSoftphoneLogoQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>>
export type GetTelephonyBillingAccountLineServiceNameSoftphoneLogoQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameSoftphoneLogo<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameSoftphoneLogo<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameSoftphoneLogo<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get line softphone logo
 */

export function useGetTelephonyBillingAccountLineServiceNameSoftphoneLogo<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameSoftphoneLogoQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Set line softphone logo
 */
export const putTelephonyBillingAccountLineServiceNameSoftphoneLogo = (
    billingAccount: string,
    serviceName: string,
    telephonySoftphoneLogoOVH: TelephonySoftphoneLogoOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<TelephonySoftphoneLogoOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/softphone/logo`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonySoftphoneLogoOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNameSoftphoneLogoMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError,{billingAccount: string;serviceName: string;data: TelephonySoftphoneLogoOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError,{billingAccount: string;serviceName: string;data: TelephonySoftphoneLogoOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, {billingAccount: string;serviceName: string;data: TelephonySoftphoneLogoOVH}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceNameSoftphoneLogo(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNameSoftphoneLogoMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneLogo>>>
    export type PutTelephonyBillingAccountLineServiceNameSoftphoneLogoMutationBody = TelephonySoftphoneLogoOVH
    export type PutTelephonyBillingAccountLineServiceNameSoftphoneLogoMutationError = unknown

    /**
 * @summary Set line softphone logo
 */
export const usePutTelephonyBillingAccountLineServiceNameSoftphoneLogo = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneLogo>>, TError,{billingAccount: string;serviceName: string;data: TelephonySoftphoneLogoOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneLogo>>,
        TError,
        {billingAccount: string;serviceName: string;data: TelephonySoftphoneLogoOVH},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNameSoftphoneLogoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get line softphone theme
 */
export const getTelephonyBillingAccountLineServiceNameSoftphoneTheme = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySoftphoneThemeOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/softphone/theme`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameSoftphoneThemeQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/softphone/theme`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameSoftphoneThemeQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameSoftphoneThemeQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameSoftphoneTheme(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameSoftphoneThemeQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>>
export type GetTelephonyBillingAccountLineServiceNameSoftphoneThemeQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameSoftphoneTheme<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameSoftphoneTheme<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameSoftphoneTheme<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get line softphone theme
 */

export function useGetTelephonyBillingAccountLineServiceNameSoftphoneTheme<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameSoftphoneThemeQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Set line softphone theme
 */
export const putTelephonyBillingAccountLineServiceNameSoftphoneTheme = (
    billingAccount: string,
    serviceName: string,
    telephonySoftphoneThemeInputOVH: TelephonySoftphoneThemeInputOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<TelephonySoftphoneThemeOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/softphone/theme`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonySoftphoneThemeInputOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNameSoftphoneThemeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError,{billingAccount: string;serviceName: string;data: TelephonySoftphoneThemeInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError,{billingAccount: string;serviceName: string;data: TelephonySoftphoneThemeInputOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, {billingAccount: string;serviceName: string;data: TelephonySoftphoneThemeInputOVH}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceNameSoftphoneTheme(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNameSoftphoneThemeMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneTheme>>>
    export type PutTelephonyBillingAccountLineServiceNameSoftphoneThemeMutationBody = TelephonySoftphoneThemeInputOVH
    export type PutTelephonyBillingAccountLineServiceNameSoftphoneThemeMutationError = unknown

    /**
 * @summary Set line softphone theme
 */
export const usePutTelephonyBillingAccountLineServiceNameSoftphoneTheme = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneTheme>>, TError,{billingAccount: string;serviceName: string;data: TelephonySoftphoneThemeInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameSoftphoneTheme>>,
        TError,
        {billingAccount: string;serviceName: string;data: TelephonySoftphoneThemeInputOVH},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNameSoftphoneThemeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNameTones = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTonesOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/tones`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameTonesQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/tones`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameTonesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameTonesQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameTones(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameTonesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>>
export type GetTelephonyBillingAccountLineServiceNameTonesQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameTones<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameTones<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameTones<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNameTones<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameTonesQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountLineServiceNameTones = (
    billingAccount: string,
    serviceName: string,
    telephonyTonesOVH: TelephonyTonesOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/tones`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyTonesOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountLineServiceNameTonesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameTones>>, TError,{billingAccount: string;serviceName: string;data: TelephonyTonesOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameTones>>, TError,{billingAccount: string;serviceName: string;data: TelephonyTonesOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameTones>>, {billingAccount: string;serviceName: string;data: TelephonyTonesOVH}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountLineServiceNameTones(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountLineServiceNameTonesMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameTones>>>
    export type PutTelephonyBillingAccountLineServiceNameTonesMutationBody = TelephonyTonesOVH
    export type PutTelephonyBillingAccountLineServiceNameTonesMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountLineServiceNameTones = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameTones>>, TError,{billingAccount: string;serviceName: string;data: TelephonyTonesOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountLineServiceNameTones>>,
        TError,
        {billingAccount: string;serviceName: string;data: TelephonyTonesOVH},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountLineServiceNameTonesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Upload new tone file
 */
export const postTelephonyBillingAccountLineServiceNameTonesToneUpload = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNameTonesToneUploadBody: PostTelephonyBillingAccountLineServiceNameTonesToneUploadBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/tones/toneUpload`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameTonesToneUploadBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameTonesToneUploadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameTonesToneUpload>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameTonesToneUploadBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameTonesToneUpload>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameTonesToneUploadBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameTonesToneUpload>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameTonesToneUploadBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameTonesToneUpload(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameTonesToneUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameTonesToneUpload>>>
    export type PostTelephonyBillingAccountLineServiceNameTonesToneUploadMutationBody = PostTelephonyBillingAccountLineServiceNameTonesToneUploadBody
    export type PostTelephonyBillingAccountLineServiceNameTonesToneUploadMutationError = unknown

    /**
 * @summary Upload new tone file
 */
export const usePostTelephonyBillingAccountLineServiceNameTonesToneUpload = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameTonesToneUpload>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameTonesToneUploadBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameTonesToneUpload>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameTonesToneUploadBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameTonesToneUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary The traffic extracts (SIP only) of your line
 */
export const getTelephonyBillingAccountLineServiceNameTrafficExtracts = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/trafficExtracts`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameTrafficExtractsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/trafficExtracts`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameTrafficExtractsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameTrafficExtractsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameTrafficExtracts(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameTrafficExtractsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>>
export type GetTelephonyBillingAccountLineServiceNameTrafficExtractsQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameTrafficExtracts<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameTrafficExtracts<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameTrafficExtracts<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary The traffic extracts (SIP only) of your line
 */

export function useGetTelephonyBillingAccountLineServiceNameTrafficExtracts<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameTrafficExtractsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a traffic extract on your line
 */
export const postTelephonyBillingAccountLineServiceNameTrafficExtracts = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountLineServiceNameTrafficExtractsBody: PostTelephonyBillingAccountLineServiceNameTrafficExtractsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTrafficExtractOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/trafficExtracts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountLineServiceNameTrafficExtractsBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameTrafficExtractsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameTrafficExtractsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameTrafficExtractsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameTrafficExtracts>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameTrafficExtractsBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameTrafficExtracts(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameTrafficExtractsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameTrafficExtracts>>>
    export type PostTelephonyBillingAccountLineServiceNameTrafficExtractsMutationBody = PostTelephonyBillingAccountLineServiceNameTrafficExtractsBody
    export type PostTelephonyBillingAccountLineServiceNameTrafficExtractsMutationError = unknown

    /**
 * @summary Launch a traffic extract on your line
 */
export const usePostTelephonyBillingAccountLineServiceNameTrafficExtracts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameTrafficExtracts>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameTrafficExtractsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameTrafficExtracts>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountLineServiceNameTrafficExtractsBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameTrafficExtractsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a traffic extract
 */
export const deleteTelephonyBillingAccountLineServiceNameTrafficExtractsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/trafficExtracts/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountLineServiceNameTrafficExtractsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountLineServiceNameTrafficExtractsId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountLineServiceNameTrafficExtractsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameTrafficExtractsId>>>
    
    export type DeleteTelephonyBillingAccountLineServiceNameTrafficExtractsIdMutationError = unknown

    /**
 * @summary Delete a traffic extract
 */
export const useDeleteTelephonyBillingAccountLineServiceNameTrafficExtractsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountLineServiceNameTrafficExtractsId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountLineServiceNameTrafficExtractsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountLineServiceNameTrafficExtractsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTrafficExtractOVH>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/trafficExtracts/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountLineServiceNameTrafficExtractsIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/line/${serviceName}/trafficExtracts/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountLineServiceNameTrafficExtractsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountLineServiceNameTrafficExtractsIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>> = ({ signal }) => getTelephonyBillingAccountLineServiceNameTrafficExtractsId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountLineServiceNameTrafficExtractsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>>
export type GetTelephonyBillingAccountLineServiceNameTrafficExtractsIdQueryError = unknown


export function useGetTelephonyBillingAccountLineServiceNameTrafficExtractsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameTrafficExtractsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountLineServiceNameTrafficExtractsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountLineServiceNameTrafficExtractsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountLineServiceNameTrafficExtractsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountLineServiceNameTrafficExtractsIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Unblock the line. It will remove any incoming and outboing block made earlier
 */
export const postTelephonyBillingAccountLineServiceNameUnblock = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/line/${serviceName}/unblock`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountLineServiceNameUnblockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameUnblock>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameUnblock>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameUnblock>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountLineServiceNameUnblock(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountLineServiceNameUnblockMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameUnblock>>>
    
    export type PostTelephonyBillingAccountLineServiceNameUnblockMutationError = unknown

    /**
 * @summary Unblock the line. It will remove any incoming and outboing block made earlier
 */
export const usePostTelephonyBillingAccountLineServiceNameUnblock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameUnblock>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountLineServiceNameUnblock>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountLineServiceNameUnblockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Additional numbers associated with this billing account
 */
export const getTelephonyBillingAccountNumber = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/number`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountNumberQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/number`] as const;
    }

    
export const getGetTelephonyBillingAccountNumberQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountNumberQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>> = ({ signal }) => getTelephonyBillingAccountNumber(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>>
export type GetTelephonyBillingAccountNumberQueryError = unknown


export function useGetTelephonyBillingAccountNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Additional numbers associated with this billing account
 */

export function useGetTelephonyBillingAccountNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountNumberQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountNumberServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyNumberOVH>(
      {url: `/telephony/${billingAccount}/number/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountNumberServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/number/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountNumberServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountNumberServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>> = ({ signal }) => getTelephonyBillingAccountNumberServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountNumberServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>>
export type GetTelephonyBillingAccountNumberServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountNumberServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountNumberServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountNumberServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountNumberServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountNumberServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountNumberServiceName = (
    billingAccount: string,
    serviceName: string,
    telephonyNumberOVH: NonReadonly<TelephonyNumberOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/number/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyNumberOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountNumberServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountNumberServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyNumberOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountNumberServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyNumberOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountNumberServiceName>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyNumberOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountNumberServiceName(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountNumberServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountNumberServiceName>>>
    export type PutTelephonyBillingAccountNumberServiceNameMutationBody = NonReadonly<TelephonyNumberOVH>
    export type PutTelephonyBillingAccountNumberServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountNumberServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountNumberServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyNumberOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountNumberServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyNumberOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountNumberServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Cancel a scheduled conversion to line
 */
export const postTelephonyBillingAccountNumberServiceNameCancelConvertToLine = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/number/${serviceName}/cancelConvertToLine`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountNumberServiceNameCancelConvertToLineMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameCancelConvertToLine>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameCancelConvertToLine>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameCancelConvertToLine>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountNumberServiceNameCancelConvertToLine(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountNumberServiceNameCancelConvertToLineMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameCancelConvertToLine>>>
    
    export type PostTelephonyBillingAccountNumberServiceNameCancelConvertToLineMutationError = unknown

    /**
 * @summary Cancel a scheduled conversion to line
 */
export const usePostTelephonyBillingAccountNumberServiceNameCancelConvertToLine = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameCancelConvertToLine>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameCancelConvertToLine>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountNumberServiceNameCancelConvertToLineMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the feature type of the phone number
 */
export const postTelephonyBillingAccountNumberServiceNameChangeFeatureType = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountNumberServiceNameChangeFeatureTypeBody: PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/number/${serviceName}/changeFeatureType`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountNumberServiceNameChangeFeatureTypeBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameChangeFeatureType>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameChangeFeatureType>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameChangeFeatureType>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountNumberServiceNameChangeFeatureType(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameChangeFeatureType>>>
    export type PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeMutationBody = PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeBody
    export type PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeMutationError = unknown

    /**
 * @summary Change the feature type of the phone number
 */
export const usePostTelephonyBillingAccountNumberServiceNameChangeFeatureType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameChangeFeatureType>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameChangeFeatureType>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Schedule a conversion to line
 */
export const postTelephonyBillingAccountNumberServiceNameConvertToLine = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountNumberServiceNameConvertToLineBody: PostTelephonyBillingAccountNumberServiceNameConvertToLineBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOfferTaskOVH>(
      {url: `/telephony/${billingAccount}/number/${serviceName}/convertToLine`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountNumberServiceNameConvertToLineBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountNumberServiceNameConvertToLineMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameConvertToLine>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountNumberServiceNameConvertToLineBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameConvertToLine>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountNumberServiceNameConvertToLineBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameConvertToLine>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountNumberServiceNameConvertToLineBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountNumberServiceNameConvertToLine(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountNumberServiceNameConvertToLineMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameConvertToLine>>>
    export type PostTelephonyBillingAccountNumberServiceNameConvertToLineMutationBody = PostTelephonyBillingAccountNumberServiceNameConvertToLineBody
    export type PostTelephonyBillingAccountNumberServiceNameConvertToLineMutationError = unknown

    /**
 * @summary Schedule a conversion to line
 */
export const usePostTelephonyBillingAccountNumberServiceNameConvertToLine = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameConvertToLine>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountNumberServiceNameConvertToLineBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountNumberServiceNameConvertToLine>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountNumberServiceNameConvertToLineBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountNumberServiceNameConvertToLineMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the available line offers to schedule a conversion to line
 */
export const getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyLineOffersAndContractsOVH>(
      {url: `/telephony/${billingAccount}/number/${serviceName}/convertToLineAvailableOffers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffersQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/number/${serviceName}/convertToLineAvailableOffers`] as const;
    }

    
export const getGetTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffersQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffersQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>> = ({ signal }) => getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffersQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>>
export type GetTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffersQueryError = unknown


export function useGetTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the available line offers to schedule a conversion to line
 */

export function useGetTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffersQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Operations on a telephony service's offer
 */
export const getTelephonyBillingAccountOfferTask = (
    billingAccount: string,
    params?: GetTelephonyBillingAccountOfferTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/offerTask`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOfferTaskQueryKey = (billingAccount: string,
    params?: GetTelephonyBillingAccountOfferTaskParams,) => {
    return [`/telephony/${billingAccount}/offerTask`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountOfferTaskQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>, TError = unknown>(billingAccount: string,
    params?: GetTelephonyBillingAccountOfferTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOfferTaskQueryKey(billingAccount,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>> = ({ signal }) => getTelephonyBillingAccountOfferTask(billingAccount,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOfferTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>>
export type GetTelephonyBillingAccountOfferTaskQueryError = unknown


export function useGetTelephonyBillingAccountOfferTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>, TError = unknown>(
 billingAccount: string,
    params: undefined |  GetTelephonyBillingAccountOfferTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOfferTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>, TError = unknown>(
 billingAccount: string,
    params?: GetTelephonyBillingAccountOfferTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOfferTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>, TError = unknown>(
 billingAccount: string,
    params?: GetTelephonyBillingAccountOfferTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Operations on a telephony service's offer
 */

export function useGetTelephonyBillingAccountOfferTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>, TError = unknown>(
 billingAccount: string,
    params?: GetTelephonyBillingAccountOfferTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOfferTaskQueryOptions(billingAccount,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOfferTaskTaskId = (
    billingAccount: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOfferTaskOVH>(
      {url: `/telephony/${billingAccount}/offerTask/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOfferTaskTaskIdQueryKey = (billingAccount: string,
    taskId: number,) => {
    return [`/telephony/${billingAccount}/offerTask/${taskId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOfferTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>, TError = unknown>(billingAccount: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOfferTaskTaskIdQueryKey(billingAccount,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>> = ({ signal }) => getTelephonyBillingAccountOfferTaskTaskId(billingAccount,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOfferTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>>
export type GetTelephonyBillingAccountOfferTaskTaskIdQueryError = unknown


export function useGetTelephonyBillingAccountOfferTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOfferTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOfferTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOfferTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOfferTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOfferTaskTaskIdQueryOptions(billingAccount,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update the given pending action
 */
export const putTelephonyBillingAccountOfferTaskTaskId = (
    billingAccount: string,
    taskId: number,
    telephonyOfferTaskOVH: NonReadonly<TelephonyOfferTaskOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/offerTask/${taskId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOfferTaskOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOfferTaskTaskIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOfferTaskTaskId>>, TError,{billingAccount: string;taskId: number;data: NonReadonly<TelephonyOfferTaskOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOfferTaskTaskId>>, TError,{billingAccount: string;taskId: number;data: NonReadonly<TelephonyOfferTaskOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOfferTaskTaskId>>, {billingAccount: string;taskId: number;data: NonReadonly<TelephonyOfferTaskOVH>}> = (props) => {
          const {billingAccount,taskId,data} = props ?? {};

          return  putTelephonyBillingAccountOfferTaskTaskId(billingAccount,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOfferTaskTaskIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOfferTaskTaskId>>>
    export type PutTelephonyBillingAccountOfferTaskTaskIdMutationBody = NonReadonly<TelephonyOfferTaskOVH>
    export type PutTelephonyBillingAccountOfferTaskTaskIdMutationError = unknown

    /**
 * @summary Update the given pending action
 */
export const usePutTelephonyBillingAccountOfferTaskTaskId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOfferTaskTaskId>>, TError,{billingAccount: string;taskId: number;data: NonReadonly<TelephonyOfferTaskOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOfferTaskTaskId>>,
        TError,
        {billingAccount: string;taskId: number;data: NonReadonly<TelephonyOfferTaskOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOfferTaskTaskIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List old phones archived as they were not returned after an RMA
 */
export const getTelephonyBillingAccountOldPhone = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOldPhoneOVH[]>(
      {url: `/telephony/${billingAccount}/oldPhone`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOldPhoneQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/oldPhone`] as const;
    }

    
export const getGetTelephonyBillingAccountOldPhoneQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOldPhoneQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>> = ({ signal }) => getTelephonyBillingAccountOldPhone(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOldPhoneQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>>
export type GetTelephonyBillingAccountOldPhoneQueryError = unknown


export function useGetTelephonyBillingAccountOldPhone<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOldPhone<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOldPhone<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List old phones archived as they were not returned after an RMA
 */

export function useGetTelephonyBillingAccountOldPhone<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOldPhone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOldPhoneQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Outplan notifications configured for this billing account
 */
export const getTelephonyBillingAccountOutplanNotification = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/outplanNotification`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOutplanNotificationQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/outplanNotification`] as const;
    }

    
export const getGetTelephonyBillingAccountOutplanNotificationQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOutplanNotificationQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>> = ({ signal }) => getTelephonyBillingAccountOutplanNotification(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOutplanNotificationQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>>
export type GetTelephonyBillingAccountOutplanNotificationQueryError = unknown


export function useGetTelephonyBillingAccountOutplanNotification<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOutplanNotification<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOutplanNotification<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Outplan notifications configured for this billing account
 */

export function useGetTelephonyBillingAccountOutplanNotification<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotification>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOutplanNotificationQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add an outplan notification on the billing account
 */
export const postTelephonyBillingAccountOutplanNotification = (
    billingAccount: string,
    postTelephonyBillingAccountOutplanNotificationBody: PostTelephonyBillingAccountOutplanNotificationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConsumptionThresholdOVH>(
      {url: `/telephony/${billingAccount}/outplanNotification`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOutplanNotificationBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOutplanNotificationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOutplanNotification>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountOutplanNotificationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOutplanNotification>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountOutplanNotificationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOutplanNotification>>, {billingAccount: string;data: PostTelephonyBillingAccountOutplanNotificationBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postTelephonyBillingAccountOutplanNotification(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOutplanNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOutplanNotification>>>
    export type PostTelephonyBillingAccountOutplanNotificationMutationBody = PostTelephonyBillingAccountOutplanNotificationBody
    export type PostTelephonyBillingAccountOutplanNotificationMutationError = unknown

    /**
 * @summary Add an outplan notification on the billing account
 */
export const usePostTelephonyBillingAccountOutplanNotification = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOutplanNotification>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountOutplanNotificationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOutplanNotification>>,
        TError,
        {billingAccount: string;data: PostTelephonyBillingAccountOutplanNotificationBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOutplanNotificationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an outplan notification
 */
export const deleteTelephonyBillingAccountOutplanNotificationId = (
    billingAccount: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/outplanNotification/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOutplanNotificationIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOutplanNotificationId>>, TError,{billingAccount: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOutplanNotificationId>>, TError,{billingAccount: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOutplanNotificationId>>, {billingAccount: string;id: number}> = (props) => {
          const {billingAccount,id} = props ?? {};

          return  deleteTelephonyBillingAccountOutplanNotificationId(billingAccount,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOutplanNotificationIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOutplanNotificationId>>>
    
    export type DeleteTelephonyBillingAccountOutplanNotificationIdMutationError = unknown

    /**
 * @summary Delete an outplan notification
 */
export const useDeleteTelephonyBillingAccountOutplanNotificationId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOutplanNotificationId>>, TError,{billingAccount: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOutplanNotificationId>>,
        TError,
        {billingAccount: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOutplanNotificationIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOutplanNotificationId = (
    billingAccount: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyConsumptionThresholdOVH>(
      {url: `/telephony/${billingAccount}/outplanNotification/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOutplanNotificationIdQueryKey = (billingAccount: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/outplanNotification/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountOutplanNotificationIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>, TError = unknown>(billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOutplanNotificationIdQueryKey(billingAccount,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>> = ({ signal }) => getTelephonyBillingAccountOutplanNotificationId(billingAccount,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOutplanNotificationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>>
export type GetTelephonyBillingAccountOutplanNotificationIdQueryError = unknown


export function useGetTelephonyBillingAccountOutplanNotificationId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>, TError = unknown>(
 billingAccount: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOutplanNotificationId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOutplanNotificationId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOutplanNotificationId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOutplanNotificationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOutplanNotificationIdQueryOptions(billingAccount,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary OVH calls queues and OVH IVRs (Interactive Voice Response) associated with this billing account
 */
export const getTelephonyBillingAccountOvhPabx = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/ovhPabx`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/ovhPabx`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>> = ({ signal }) => getTelephonyBillingAccountOvhPabx(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>>
export type GetTelephonyBillingAccountOvhPabxQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabx<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabx<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabx<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary OVH calls queues and OVH IVRs (Interactive Voice Response) associated with this billing account
 */

export function useGetTelephonyBillingAccountOvhPabx<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabx>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceName = (
    billingAccount: string,
    serviceName: string,
    telephonyOvhPabxOVH: NonReadonly<TelephonyOvhPabxOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceName>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceName(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceName>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameMutationBody = NonReadonly<TelephonyOvhPabxOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Dialplans associated with this PABX
 */
export const getTelephonyBillingAccountOvhPabxServiceNameDialplan = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameDialplanQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameDialplan(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplan<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplan<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplan<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Dialplans associated with this PABX
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplan<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameDialplanQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new dialplan
 */
export const postTelephonyBillingAccountOvhPabxServiceNameDialplan = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountOvhPabxServiceNameDialplanBody: PostTelephonyBillingAccountOvhPabxServiceNameDialplanBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxDialplanOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameDialplanBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameDialplanMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplan>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameDialplan(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplan>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameDialplanBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanMutationError = unknown

    /**
 * @summary Create a new dialplan
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameDialplan = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplan>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplan>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameDialplanMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given dialplan
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, {billingAccount: string;serviceName: string;dialplanId: number}> = (props) => {
          const {billingAccount,serviceName,dialplanId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId(billingAccount,serviceName,dialplanId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdMutationError = unknown

    /**
 * @summary Delete the given dialplan
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxDialplanOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdQueryKey = (billingAccount: string,
    serviceName: string,
    dialplanId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    dialplanId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdQueryKey(billingAccount,serviceName,dialplanId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId(billingAccount,serviceName,dialplanId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && dialplanId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdQueryOptions(billingAccount,serviceName,dialplanId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    telephonyOvhPabxDialplanOVH: NonReadonly<TelephonyOvhPabxDialplanOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxDialplanOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;data: NonReadonly<TelephonyOvhPabxDialplanOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;data: NonReadonly<TelephonyOvhPabxDialplanOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, {billingAccount: string;serviceName: string;dialplanId: number;data: NonReadonly<TelephonyOvhPabxDialplanOVH>}> = (props) => {
          const {billingAccount,serviceName,dialplanId,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId(billingAccount,serviceName,dialplanId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdMutationBody = NonReadonly<TelephonyOvhPabxDialplanOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;data: NonReadonly<TelephonyOvhPabxDialplanOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanId>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number;data: NonReadonly<TelephonyOvhPabxDialplanOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Extensions contained in the dialplan
 */
export const getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionQueryKey = (billingAccount: string,
    serviceName: string,
    dialplanId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    dialplanId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionQueryKey(billingAccount,serviceName,dialplanId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension(billingAccount,serviceName,dialplanId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && dialplanId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Extensions contained in the dialplan
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionQueryOptions(billingAccount,serviceName,dialplanId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new extension for a dialplan
 */
export const postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionBody: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxDialplanExtensionOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, {billingAccount: string;serviceName: string;dialplanId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionBody}> = (props) => {
          const {billingAccount,serviceName,dialplanId,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension(billingAccount,serviceName,dialplanId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionMutationError = unknown

    /**
 * @summary Create a new extension for a dialplan
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtension>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given extension
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number}> = (props) => {
          const {billingAccount,serviceName,dialplanId,extensionId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId(billingAccount,serviceName,dialplanId,extensionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdMutationError = unknown

    /**
 * @summary Delete the given extension
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxDialplanExtensionOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdQueryKey = (billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdQueryKey(billingAccount,serviceName,dialplanId,extensionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId(billingAccount,serviceName,dialplanId,extensionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && dialplanId && extensionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdQueryOptions(billingAccount,serviceName,dialplanId,extensionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    telephonyOvhPabxDialplanExtensionOVH: NonReadonly<TelephonyOvhPabxDialplanExtensionOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxDialplanExtensionOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionOVH>}> = (props) => {
          const {billingAccount,serviceName,dialplanId,extensionId,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId(billingAccount,serviceName,dialplanId,extensionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdMutationBody = NonReadonly<TelephonyOvhPabxDialplanExtensionOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionId>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Screenlist conditions checked when executing the extension
 */
export const getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionScreenList`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListQueryKey = (billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionScreenList`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListQueryKey(billingAccount,serviceName,dialplanId,extensionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList(billingAccount,serviceName,dialplanId,extensionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && dialplanId && extensionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Screenlist conditions checked when executing the extension
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListQueryOptions(billingAccount,serviceName,dialplanId,extensionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new screenlist condition for an extension
 */
export const postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListBody: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxDialplanExtensionConditionScreenListOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionScreenList`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListBody}> = (props) => {
          const {billingAccount,serviceName,dialplanId,extensionId,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList(billingAccount,serviceName,dialplanId,extensionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListMutationError = unknown

    /**
 * @summary Create a new screenlist condition for an extension
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenList>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given condition
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionScreenList/${conditionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number}> = (props) => {
          const {billingAccount,serviceName,dialplanId,extensionId,conditionId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId(billingAccount,serviceName,dialplanId,extensionId,conditionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdMutationError = unknown

    /**
 * @summary Delete the given condition
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxDialplanExtensionConditionScreenListOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionScreenList/${conditionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdQueryKey = (billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionScreenList/${conditionId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdQueryKey(billingAccount,serviceName,dialplanId,extensionId,conditionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId(billingAccount,serviceName,dialplanId,extensionId,conditionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && dialplanId && extensionId && conditionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdQueryOptions(billingAccount,serviceName,dialplanId,extensionId,conditionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Time conditions checked when executing the extension
 */
export const getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionTime`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeQueryKey = (billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionTime`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeQueryKey(billingAccount,serviceName,dialplanId,extensionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime(billingAccount,serviceName,dialplanId,extensionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && dialplanId && extensionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Time conditions checked when executing the extension
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeQueryOptions(billingAccount,serviceName,dialplanId,extensionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new time condition for an extension
 */
export const postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeBody: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxDialplanExtensionConditionTimeOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionTime`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeBody}> = (props) => {
          const {billingAccount,serviceName,dialplanId,extensionId,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime(billingAccount,serviceName,dialplanId,extensionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeMutationError = unknown

    /**
 * @summary Create a new time condition for an extension
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTime>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given condition
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionTime/${conditionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number}> = (props) => {
          const {billingAccount,serviceName,dialplanId,extensionId,conditionId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId(billingAccount,serviceName,dialplanId,extensionId,conditionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdMutationError = unknown

    /**
 * @summary Delete the given condition
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxDialplanExtensionConditionTimeOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionTime/${conditionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdQueryKey = (billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionTime/${conditionId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdQueryKey(billingAccount,serviceName,dialplanId,extensionId,conditionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId(billingAccount,serviceName,dialplanId,extensionId,conditionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && dialplanId && extensionId && conditionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdQueryOptions(billingAccount,serviceName,dialplanId,extensionId,conditionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    conditionId: number,
    telephonyOvhPabxDialplanExtensionConditionTimeOVH: NonReadonly<TelephonyOvhPabxDialplanExtensionConditionTimeOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/conditionTime/${conditionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxDialplanExtensionConditionTimeOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionConditionTimeOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionConditionTimeOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionConditionTimeOVH>}> = (props) => {
          const {billingAccount,serviceName,dialplanId,extensionId,conditionId,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId(billingAccount,serviceName,dialplanId,extensionId,conditionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdMutationBody = NonReadonly<TelephonyOvhPabxDialplanExtensionConditionTimeOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionConditionTimeOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionId>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;conditionId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionConditionTimeOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Rules contained in the extension
 */
export const getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/rule`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleQueryKey = (billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/rule`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleQueryKey(billingAccount,serviceName,dialplanId,extensionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule(billingAccount,serviceName,dialplanId,extensionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && dialplanId && extensionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Rules contained in the extension
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleQueryOptions(billingAccount,serviceName,dialplanId,extensionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new rule for an extension
 */
export const postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleBody: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxDialplanExtensionRuleOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/rule`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleBody}> = (props) => {
          const {billingAccount,serviceName,dialplanId,extensionId,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule(billingAccount,serviceName,dialplanId,extensionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleMutationError = unknown

    /**
 * @summary Create a new rule for an extension
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRule>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given rule
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    ruleId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/rule/${ruleId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;ruleId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;ruleId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;ruleId: number}> = (props) => {
          const {billingAccount,serviceName,dialplanId,extensionId,ruleId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId(billingAccount,serviceName,dialplanId,extensionId,ruleId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdMutationError = unknown

    /**
 * @summary Delete the given rule
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;ruleId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;ruleId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    ruleId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxDialplanExtensionRuleOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/rule/${ruleId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdQueryKey = (billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    ruleId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/rule/${ruleId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    ruleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdQueryKey(billingAccount,serviceName,dialplanId,extensionId,ruleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId(billingAccount,serviceName,dialplanId,extensionId,ruleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && dialplanId && extensionId && ruleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    ruleId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    ruleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    ruleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    ruleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdQueryOptions(billingAccount,serviceName,dialplanId,extensionId,ruleId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId = (
    billingAccount: string,
    serviceName: string,
    dialplanId: number,
    extensionId: number,
    ruleId: number,
    telephonyOvhPabxDialplanExtensionRuleOVH: NonReadonly<TelephonyOvhPabxDialplanExtensionRuleOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/dialplan/${dialplanId}/extension/${extensionId}/rule/${ruleId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxDialplanExtensionRuleOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;ruleId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionRuleOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;ruleId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionRuleOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;ruleId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionRuleOVH>}> = (props) => {
          const {billingAccount,serviceName,dialplanId,extensionId,ruleId,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId(billingAccount,serviceName,dialplanId,extensionId,ruleId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdMutationBody = NonReadonly<TelephonyOvhPabxDialplanExtensionRuleOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>, TError,{billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;ruleId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionRuleOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleId>>,
        TError,
        {billingAccount: string;serviceName: string;dialplanId: number;extensionId: number;ruleId: number;data: NonReadonly<TelephonyOvhPabxDialplanExtensionRuleOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHunting = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHunting(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHunting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHunting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHunting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHunting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceNameHunting = (
    billingAccount: string,
    serviceName: string,
    telephonyOvhPabxHuntingOVH: NonReadonly<TelephonyOvhPabxHuntingOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxHuntingOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameHuntingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxHuntingOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxHuntingOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHunting>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxHuntingOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceNameHunting(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHunting>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingMutationBody = NonReadonly<TelephonyOvhPabxHuntingOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceNameHunting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHunting>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxHuntingOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHunting>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyOvhPabxHuntingOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameHuntingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Calls agents
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Calls agents
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new agent
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingAgent = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingAgent(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentMutationError = unknown

    /**
 * @summary Create a new agent
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingAgent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgent>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given agent
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, {billingAccount: string;serviceName: string;agentId: number}> = (props) => {
          const {billingAccount,serviceName,agentId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId(billingAccount,serviceName,agentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdMutationError = unknown

    /**
 * @summary Delete the given agent
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueryKey(billingAccount,serviceName,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId(billingAccount,serviceName,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueryOptions(billingAccount,serviceName,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    telephonyOvhPabxHuntingAgentOVH: NonReadonly<TelephonyOvhPabxHuntingAgentOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxHuntingAgentOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, {billingAccount: string;serviceName: string;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentOVH>}> = (props) => {
          const {billingAccount,serviceName,agentId,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId(billingAccount,serviceName,agentId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdMutationBody = NonReadonly<TelephonyOvhPabxHuntingAgentOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentId>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given web access
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/bannerAccess`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, {billingAccount: string;serviceName: string;agentId: number}> = (props) => {
          const {billingAccount,serviceName,agentId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess(billingAccount,serviceName,agentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessMutationError = unknown

    /**
 * @summary Delete the given web access
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyBannerAccessOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/bannerAccess`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/bannerAccess`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessQueryKey(billingAccount,serviceName,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess(billingAccount,serviceName,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessQueryOptions(billingAccount,serviceName,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new web access for this ressource
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyBannerAccessOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/bannerAccess`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, {billingAccount: string;serviceName: string;agentId: number}> = (props) => {
          const {billingAccount,serviceName,agentId} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess(billingAccount,serviceName,agentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>>
    
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessMutationError = unknown

    /**
 * @summary Create a new web access for this ressource
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccess>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Current calls of the callcenter agent
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/calls`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/calls`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsQueryKey(billingAccount,serviceName,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls(billingAccount,serviceName,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Current calls of the callcenter agent
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsQueryOptions(billingAccount,serviceName,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingQueueLiveCallsOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/calls/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/calls/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdQueryKey(billingAccount,serviceName,agentId,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId(billingAccount,serviceName,agentId,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdQueryOptions(billingAccount,serviceName,agentId,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Eavesdrop on a call
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdrop = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/calls/${id}/eavesdrop`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdrop>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdrop>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdrop>>, {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropBody}> = (props) => {
          const {billingAccount,serviceName,agentId,id,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdrop(billingAccount,serviceName,agentId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdrop>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropMutationError = unknown

    /**
 * @summary Eavesdrop on a call
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdrop = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdrop>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdrop>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Hangup a call
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangup = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/calls/${id}/hangup`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangup>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangup>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangup>>, {billingAccount: string;serviceName: string;agentId: number;id: number}> = (props) => {
          const {billingAccount,serviceName,agentId,id} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangup(billingAccount,serviceName,agentId,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangupMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangup>>>
    
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangupMutationError = unknown

    /**
 * @summary Hangup a call
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangup>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangup>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Toogle hold on call
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHold = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/calls/${id}/hold`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHoldMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHold>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHold>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHold>>, {billingAccount: string;serviceName: string;agentId: number;id: number}> = (props) => {
          const {billingAccount,serviceName,agentId,id} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHold(billingAccount,serviceName,agentId,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHoldMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHold>>>
    
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHoldMutationError = unknown

    /**
 * @summary Toogle hold on call
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHold = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHold>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHold>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHoldMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Intercept a non answered call
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdIntercept = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/calls/${id}/intercept`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdIntercept>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdIntercept>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdIntercept>>, {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptBody}> = (props) => {
          const {billingAccount,serviceName,agentId,id,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdIntercept(billingAccount,serviceName,agentId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdIntercept>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptMutationError = unknown

    /**
 * @summary Intercept a non answered call
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdIntercept = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdIntercept>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdIntercept>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Transfer an answered call
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransfer = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/calls/${id}/transfer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransfer>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransfer>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransfer>>, {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferBody}> = (props) => {
          const {billingAccount,serviceName,agentId,id,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransfer(billingAccount,serviceName,agentId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransfer>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferMutationError = unknown

    /**
 * @summary Transfer an answered call
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransfer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransfer>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransfer>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Whisper on a call
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisper = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    id: number,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/calls/${id}/whisper`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisper>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisper>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisper>>, {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperBody}> = (props) => {
          const {billingAccount,serviceName,agentId,id,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisper(billingAccount,serviceName,agentId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisper>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperMutationError = unknown

    /**
 * @summary Whisper on a call
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisper = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisper>>, TError,{billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisper>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given token
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/eventToken`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, {billingAccount: string;serviceName: string;agentId: number}> = (props) => {
          const {billingAccount,serviceName,agentId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken(billingAccount,serviceName,agentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenMutationError = unknown

    /**
 * @summary Delete the given token
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError,{billingAccount: string;serviceName: string;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEventTokenOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/eventToken`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/eventToken`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenQueryKey(billingAccount,serviceName,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken(billingAccount,serviceName,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenQueryOptions(billingAccount,serviceName,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new token
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/eventToken`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, {billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenBody}> = (props) => {
          const {billingAccount,serviceName,agentId,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken(billingAccount,serviceName,agentId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenMutationError = unknown

    /**
 * @summary Create a new token
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventToken>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentLiveStatusOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/liveStatus`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatusQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/liveStatus`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatusQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatusQueryKey(billingAccount,serviceName,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus(billingAccount,serviceName,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatusQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatusQueryOptions(billingAccount,serviceName,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Agent assigned to the queues
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/queue`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/queue`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueryKey(billingAccount,serviceName,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue(billingAccount,serviceName,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Agent assigned to the queues
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueryOptions(billingAccount,serviceName,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new skill for an agent (it adds the agent in a queue)
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentQueueOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/queue`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, {billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueBody}> = (props) => {
          const {billingAccount,serviceName,agentId,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue(billingAccount,serviceName,agentId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueMutationError = unknown

    /**
 * @summary Create a new skill for an agent (it adds the agent in a queue)
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>, TError,{billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueue>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given skill
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/queue/${queueId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError,{billingAccount: string;serviceName: string;agentId: number;queueId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError,{billingAccount: string;serviceName: string;agentId: number;queueId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, {billingAccount: string;serviceName: string;agentId: number;queueId: number}> = (props) => {
          const {billingAccount,serviceName,agentId,queueId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId(billingAccount,serviceName,agentId,queueId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdMutationError = unknown

    /**
 * @summary Delete the given skill
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError,{billingAccount: string;serviceName: string;agentId: number;queueId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;queueId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentQueueOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/queue/${queueId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/queue/${queueId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdQueryKey(billingAccount,serviceName,agentId,queueId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId(billingAccount,serviceName,agentId,queueId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId && queueId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdQueryOptions(billingAccount,serviceName,agentId,queueId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number,
    telephonyOvhPabxHuntingAgentQueueOVH: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/queue/${queueId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxHuntingAgentQueueOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError,{billingAccount: string;serviceName: string;agentId: number;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError,{billingAccount: string;serviceName: string;agentId: number;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, {billingAccount: string;serviceName: string;agentId: number;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}> = (props) => {
          const {billingAccount,serviceName,agentId,queueId,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId(billingAccount,serviceName,agentId,queueId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdMutationBody = NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>, TError,{billingAccount: string;serviceName: string;agentId: number;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueId>>,
        TError,
        {billingAccount: string;serviceName: string;agentId: number;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus = (
    billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentLiveStatusOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/queue/${queueId}/liveStatus`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusQueryKey = (billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/agent/${agentId}/queue/${queueId}/liveStatus`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusQueryKey(billingAccount,serviceName,agentId,queueId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus(billingAccount,serviceName,agentId,queueId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && agentId && queueId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    agentId: number,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusQueryOptions(billingAccount,serviceName,agentId,queueId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Custom statuses of your agents
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/customStatus`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/customStatus`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Custom statuses of your agents
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new custom status
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxCustomStatusOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/customStatus`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusMutationError = unknown

    /**
 * @summary Create a new custom status
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatus>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given custom status
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/customStatus/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdMutationError = unknown

    /**
 * @summary Delete the given custom status
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxCustomStatusOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/customStatus/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/customStatus/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the given token
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/eventToken`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenMutationError = unknown

    /**
 * @summary Delete the given token
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEventTokenOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/eventToken`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/eventToken`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new token
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/eventToken`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenMutationError = unknown

    /**
 * @summary Create a new token
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingEventToken>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Calls queues
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Calls queues
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueue<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new queue
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingQueue = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingQueueOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingQueue(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueMutationError = unknown

    /**
 * @summary Create a new queue
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingQueue = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueue>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given queue
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError,{billingAccount: string;serviceName: string;queueId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError,{billingAccount: string;serviceName: string;queueId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, {billingAccount: string;serviceName: string;queueId: number}> = (props) => {
          const {billingAccount,serviceName,queueId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId(billingAccount,serviceName,queueId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdMutationError = unknown

    /**
 * @summary Delete the given queue
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError,{billingAccount: string;serviceName: string;queueId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingQueueOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdQueryKey(billingAccount,serviceName,queueId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId(billingAccount,serviceName,queueId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdQueryOptions(billingAccount,serviceName,queueId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    telephonyOvhPabxHuntingQueueOVH: NonReadonly<TelephonyOvhPabxHuntingQueueOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxHuntingQueueOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError,{billingAccount: string;serviceName: string;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingQueueOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError,{billingAccount: string;serviceName: string;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingQueueOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, {billingAccount: string;serviceName: string;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingQueueOVH>}> = (props) => {
          const {billingAccount,serviceName,queueId,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId(billingAccount,serviceName,queueId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdMutationBody = NonReadonly<TelephonyOvhPabxHuntingQueueOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>, TError,{billingAccount: string;serviceName: string;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingQueueOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueId>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;data: NonReadonly<TelephonyOvhPabxHuntingQueueOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Agent assigned to the queue
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/agent`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/agent`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentQueryKey(billingAccount,serviceName,queueId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent(billingAccount,serviceName,queueId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Agent assigned to the queue
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentQueryOptions(billingAccount,serviceName,queueId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the given skill
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/agent/${agentId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError,{billingAccount: string;serviceName: string;queueId: number;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError,{billingAccount: string;serviceName: string;queueId: number;agentId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, {billingAccount: string;serviceName: string;queueId: number;agentId: number}> = (props) => {
          const {billingAccount,serviceName,queueId,agentId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId(billingAccount,serviceName,queueId,agentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdMutationError = unknown

    /**
 * @summary Delete the given skill
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError,{billingAccount: string;serviceName: string;queueId: number;agentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;agentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentQueueOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/agent/${agentId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/agent/${agentId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdQueryKey(billingAccount,serviceName,queueId,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId(billingAccount,serviceName,queueId,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdQueryOptions(billingAccount,serviceName,queueId,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number,
    telephonyOvhPabxHuntingAgentQueueOVH: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/agent/${agentId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxHuntingAgentQueueOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError,{billingAccount: string;serviceName: string;queueId: number;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError,{billingAccount: string;serviceName: string;queueId: number;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, {billingAccount: string;serviceName: string;queueId: number;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}> = (props) => {
          const {billingAccount,serviceName,queueId,agentId,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId(billingAccount,serviceName,queueId,agentId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdMutationBody = NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>, TError,{billingAccount: string;serviceName: string;queueId: number;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentId>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;agentId: number;data: NonReadonly<TelephonyOvhPabxHuntingAgentQueueOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingAgentLiveStatusOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/agent/${agentId}/liveStatus`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/agent/${agentId}/liveStatus`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusQueryKey(billingAccount,serviceName,queueId,agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus(billingAccount,serviceName,queueId,agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId && agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusQueryOptions(billingAccount,serviceName,queueId,agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Live calls of the queue
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/liveCalls`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/liveCalls`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsQueryKey(billingAccount,serviceName,queueId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls(billingAccount,serviceName,queueId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Live calls of the queue
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsQueryOptions(billingAccount,serviceName,queueId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingQueueLiveCallsOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdQueryKey(billingAccount,serviceName,queueId,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId(billingAccount,serviceName,queueId,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdQueryOptions(billingAccount,serviceName,queueId,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Eavesdrop on a call
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}/eavesdrop`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop>>, {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody}> = (props) => {
          const {billingAccount,serviceName,queueId,id,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop(billingAccount,serviceName,queueId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropMutationError = unknown

    /**
 * @summary Eavesdrop on a call
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdrop>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Hangup a call
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangup = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}/hangup`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangup>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangup>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangup>>, {billingAccount: string;serviceName: string;queueId: number;id: number}> = (props) => {
          const {billingAccount,serviceName,queueId,id} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangup(billingAccount,serviceName,queueId,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangupMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangup>>>
    
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangupMutationError = unknown

    /**
 * @summary Hangup a call
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangup>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangup>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Toogle hold on call
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHold = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}/hold`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHoldMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHold>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHold>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHold>>, {billingAccount: string;serviceName: string;queueId: number;id: number}> = (props) => {
          const {billingAccount,serviceName,queueId,id} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHold(billingAccount,serviceName,queueId,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHoldMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHold>>>
    
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHoldMutationError = unknown

    /**
 * @summary Toogle hold on call
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHold = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHold>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHold>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHoldMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Intercept a non answered call
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdIntercept = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}/intercept`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdIntercept>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdIntercept>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdIntercept>>, {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody}> = (props) => {
          const {billingAccount,serviceName,queueId,id,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdIntercept(billingAccount,serviceName,queueId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdIntercept>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptMutationError = unknown

    /**
 * @summary Intercept a non answered call
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdIntercept = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdIntercept>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdIntercept>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Transfer an answered call
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransfer = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}/transfer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransfer>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransfer>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransfer>>, {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody}> = (props) => {
          const {billingAccount,serviceName,queueId,id,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransfer(billingAccount,serviceName,queueId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransfer>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferMutationError = unknown

    /**
 * @summary Transfer an answered call
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransfer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransfer>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransfer>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Whisper on a call
 */
export const postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisper = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
    id: number,
    postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/liveCalls/${id}/whisper`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisper>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisper>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisper>>, {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody}> = (props) => {
          const {billingAccount,serviceName,queueId,id,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisper(billingAccount,serviceName,queueId,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisper>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperMutationError = unknown

    /**
 * @summary Whisper on a call
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisper = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisper>>, TError,{billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisper>>,
        TError,
        {billingAccount: string;serviceName: string;queueId: number;id: number;data: PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics = (
    billingAccount: string,
    serviceName: string,
    queueId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxHuntingQueueLiveStatisticsOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/liveStatistics`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatisticsQueryKey = (billingAccount: string,
    serviceName: string,
    queueId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/hunting/queue/${queueId}/liveStatistics`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatisticsQueryKey(billingAccount,serviceName,queueId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics(billingAccount,serviceName,queueId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && queueId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatisticsQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    queueId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatisticsQueryOptions(billingAccount,serviceName,queueId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Menus associated with this PABX
 */
export const getTelephonyBillingAccountOvhPabxServiceNameMenu = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/menu`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameMenuQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/menu`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameMenuQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameMenuQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameMenu(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameMenuQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameMenuQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameMenu<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameMenu<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameMenu<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Menus associated with this PABX
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameMenu<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameMenuQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new menu
 */
export const postTelephonyBillingAccountOvhPabxServiceNameMenu = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountOvhPabxServiceNameMenuBody: PostTelephonyBillingAccountOvhPabxServiceNameMenuBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxMenuOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/menu`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameMenuBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameMenuMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameMenuBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameMenuBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameMenu>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameMenuBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameMenu(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameMenuMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameMenu>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameMenuMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameMenuBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameMenuMutationError = unknown

    /**
 * @summary Create a new menu
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameMenu = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameMenu>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameMenuBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameMenu>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameMenuBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameMenuMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given menu
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuId = (
    billingAccount: string,
    serviceName: string,
    menuId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/menu/${menuId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError,{billingAccount: string;serviceName: string;menuId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError,{billingAccount: string;serviceName: string;menuId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, {billingAccount: string;serviceName: string;menuId: number}> = (props) => {
          const {billingAccount,serviceName,menuId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuId(billingAccount,serviceName,menuId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdMutationError = unknown

    /**
 * @summary Delete the given menu
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError,{billingAccount: string;serviceName: string;menuId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>,
        TError,
        {billingAccount: string;serviceName: string;menuId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId = (
    billingAccount: string,
    serviceName: string,
    menuId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxMenuOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/menu/${menuId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdQueryKey = (billingAccount: string,
    serviceName: string,
    menuId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/menu/${menuId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    menuId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdQueryKey(billingAccount,serviceName,menuId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId(billingAccount,serviceName,menuId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && menuId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    menuId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    menuId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    menuId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    menuId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdQueryOptions(billingAccount,serviceName,menuId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceNameMenuMenuId = (
    billingAccount: string,
    serviceName: string,
    menuId: number,
    telephonyOvhPabxMenuOVH: NonReadonly<TelephonyOvhPabxMenuOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/menu/${menuId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxMenuOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError,{billingAccount: string;serviceName: string;menuId: number;data: NonReadonly<TelephonyOvhPabxMenuOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError,{billingAccount: string;serviceName: string;menuId: number;data: NonReadonly<TelephonyOvhPabxMenuOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, {billingAccount: string;serviceName: string;menuId: number;data: NonReadonly<TelephonyOvhPabxMenuOVH>}> = (props) => {
          const {billingAccount,serviceName,menuId,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceNameMenuMenuId(billingAccount,serviceName,menuId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdMutationBody = NonReadonly<TelephonyOvhPabxMenuOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceNameMenuMenuId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>, TError,{billingAccount: string;serviceName: string;menuId: number;data: NonReadonly<TelephonyOvhPabxMenuOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameMenuMenuId>>,
        TError,
        {billingAccount: string;serviceName: string;menuId: number;data: NonReadonly<TelephonyOvhPabxMenuOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Menu entry
 */
export const getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry = (
    billingAccount: string,
    serviceName: string,
    menuId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/menu/${menuId}/entry`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryQueryKey = (billingAccount: string,
    serviceName: string,
    menuId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/menu/${menuId}/entry`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    menuId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryQueryKey(billingAccount,serviceName,menuId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry(billingAccount,serviceName,menuId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && menuId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    menuId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    menuId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    menuId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Menu entry
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    menuId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryQueryOptions(billingAccount,serviceName,menuId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new menu entry
 */
export const postTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry = (
    billingAccount: string,
    serviceName: string,
    menuId: number,
    postTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryBody: PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxMenuEntryOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/menu/${menuId}/entry`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError,{billingAccount: string;serviceName: string;menuId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError,{billingAccount: string;serviceName: string;menuId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, {billingAccount: string;serviceName: string;menuId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryBody}> = (props) => {
          const {billingAccount,serviceName,menuId,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry(billingAccount,serviceName,menuId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryMutationError = unknown

    /**
 * @summary Create a new menu entry
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>, TError,{billingAccount: string;serviceName: string;menuId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntry>>,
        TError,
        {billingAccount: string;serviceName: string;menuId: number;data: PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given menu entry
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId = (
    billingAccount: string,
    serviceName: string,
    menuId: number,
    entryId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/menu/${menuId}/entry/${entryId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError,{billingAccount: string;serviceName: string;menuId: number;entryId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError,{billingAccount: string;serviceName: string;menuId: number;entryId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, {billingAccount: string;serviceName: string;menuId: number;entryId: number}> = (props) => {
          const {billingAccount,serviceName,menuId,entryId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId(billingAccount,serviceName,menuId,entryId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdMutationError = unknown

    /**
 * @summary Delete the given menu entry
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError,{billingAccount: string;serviceName: string;menuId: number;entryId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>,
        TError,
        {billingAccount: string;serviceName: string;menuId: number;entryId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId = (
    billingAccount: string,
    serviceName: string,
    menuId: number,
    entryId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxMenuEntryOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/menu/${menuId}/entry/${entryId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdQueryKey = (billingAccount: string,
    serviceName: string,
    menuId: number,
    entryId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/menu/${menuId}/entry/${entryId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    menuId: number,
    entryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdQueryKey(billingAccount,serviceName,menuId,entryId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId(billingAccount,serviceName,menuId,entryId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && menuId && entryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    menuId: number,
    entryId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    menuId: number,
    entryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    menuId: number,
    entryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    menuId: number,
    entryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdQueryOptions(billingAccount,serviceName,menuId,entryId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId = (
    billingAccount: string,
    serviceName: string,
    menuId: number,
    entryId: number,
    telephonyOvhPabxMenuEntryOVH: NonReadonly<TelephonyOvhPabxMenuEntryOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/menu/${menuId}/entry/${entryId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxMenuEntryOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError,{billingAccount: string;serviceName: string;menuId: number;entryId: number;data: NonReadonly<TelephonyOvhPabxMenuEntryOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError,{billingAccount: string;serviceName: string;menuId: number;entryId: number;data: NonReadonly<TelephonyOvhPabxMenuEntryOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, {billingAccount: string;serviceName: string;menuId: number;entryId: number;data: NonReadonly<TelephonyOvhPabxMenuEntryOVH>}> = (props) => {
          const {billingAccount,serviceName,menuId,entryId,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId(billingAccount,serviceName,menuId,entryId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdMutationBody = NonReadonly<TelephonyOvhPabxMenuEntryOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>, TError,{billingAccount: string;serviceName: string;menuId: number;entryId: number;data: NonReadonly<TelephonyOvhPabxMenuEntryOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryId>>,
        TError,
        {billingAccount: string;serviceName: string;menuId: number;entryId: number;data: NonReadonly<TelephonyOvhPabxMenuEntryOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Records associated with this PABX
 */
export const getTelephonyBillingAccountOvhPabxServiceNameRecords = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/records`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameRecordsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/records`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameRecordsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameRecordsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameRecords(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameRecordsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameRecordsQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameRecords<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameRecords<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameRecords<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Records associated with this PABX
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameRecords<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameRecordsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the given record
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameRecordsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/records/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameRecordsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameRecordsId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameRecordsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameRecordsId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameRecordsIdMutationError = unknown

    /**
 * @summary Delete the given record
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameRecordsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameRecordsId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameRecordsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameRecordsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxRecordOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/records/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameRecordsIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/records/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameRecordsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameRecordsIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameRecordsId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameRecordsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameRecordsIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameRecordsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameRecordsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameRecordsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameRecordsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameRecordsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameRecordsIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Sounds associated with this PABX
 */
export const getTelephonyBillingAccountOvhPabxServiceNameSound = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/sound`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameSoundQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/sound`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameSoundQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameSoundQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameSound(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameSoundQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameSoundQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameSound<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameSound<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameSound<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Sounds associated with this PABX
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameSound<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSound>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameSoundQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the given sound
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundId = (
    billingAccount: string,
    serviceName: string,
    soundId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/sound/${soundId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError,{billingAccount: string;serviceName: string;soundId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError,{billingAccount: string;serviceName: string;soundId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, {billingAccount: string;serviceName: string;soundId: number}> = (props) => {
          const {billingAccount,serviceName,soundId} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundId(billingAccount,serviceName,soundId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdMutationError = unknown

    /**
 * @summary Delete the given sound
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError,{billingAccount: string;serviceName: string;soundId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>,
        TError,
        {billingAccount: string;serviceName: string;soundId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId = (
    billingAccount: string,
    serviceName: string,
    soundId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxSoundOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/sound/${soundId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdQueryKey = (billingAccount: string,
    serviceName: string,
    soundId: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/sound/${soundId}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    soundId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdQueryKey(billingAccount,serviceName,soundId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId(billingAccount,serviceName,soundId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && soundId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameSoundSoundId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    soundId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameSoundSoundId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    soundId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameSoundSoundId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    soundId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameSoundSoundId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    soundId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameSoundSoundId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdQueryOptions(billingAccount,serviceName,soundId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Upload new sound file
 */
export const postTelephonyBillingAccountOvhPabxServiceNameSoundUpload = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountOvhPabxServiceNameSoundUploadBody: PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/soundUpload`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameSoundUploadBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameSoundUploadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameSoundUpload>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameSoundUpload>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameSoundUpload>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameSoundUpload(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameSoundUpload>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadMutationError = unknown

    /**
 * @summary Upload new sound file
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameSoundUpload = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameSoundUpload>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameSoundUpload>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameSoundUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Text to Speech associated with this PABX
 */
export const getTelephonyBillingAccountOvhPabxServiceNameTts = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/tts`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameTtsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/tts`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameTtsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameTtsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameTts(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameTtsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameTtsQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameTts<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameTts<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameTts<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Text to Speech associated with this PABX
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameTts<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameTtsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new text to speech
 */
export const postTelephonyBillingAccountOvhPabxServiceNameTts = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountOvhPabxServiceNameTtsBody: PostTelephonyBillingAccountOvhPabxServiceNameTtsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/tts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountOvhPabxServiceNameTtsBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountOvhPabxServiceNameTtsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameTts>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameTtsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameTts>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameTtsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameTts>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameTtsBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountOvhPabxServiceNameTts(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountOvhPabxServiceNameTtsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameTts>>>
    export type PostTelephonyBillingAccountOvhPabxServiceNameTtsMutationBody = PostTelephonyBillingAccountOvhPabxServiceNameTtsBody
    export type PostTelephonyBillingAccountOvhPabxServiceNameTtsMutationError = unknown

    /**
 * @summary Create a new text to speech
 */
export const usePostTelephonyBillingAccountOvhPabxServiceNameTts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameTts>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameTtsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountOvhPabxServiceNameTts>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountOvhPabxServiceNameTtsBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountOvhPabxServiceNameTtsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given text to speech
 */
export const deleteTelephonyBillingAccountOvhPabxServiceNameTtsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/tts/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountOvhPabxServiceNameTtsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameTtsId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountOvhPabxServiceNameTtsId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountOvhPabxServiceNameTtsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameTtsId>>>
    
    export type DeleteTelephonyBillingAccountOvhPabxServiceNameTtsIdMutationError = unknown

    /**
 * @summary Delete the given text to speech
 */
export const useDeleteTelephonyBillingAccountOvhPabxServiceNameTtsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountOvhPabxServiceNameTtsId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountOvhPabxServiceNameTtsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountOvhPabxServiceNameTtsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOvhPabxTtsOVH>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/tts/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountOvhPabxServiceNameTtsIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/ovhPabx/${serviceName}/tts/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountOvhPabxServiceNameTtsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountOvhPabxServiceNameTtsIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>> = ({ signal }) => getTelephonyBillingAccountOvhPabxServiceNameTtsId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountOvhPabxServiceNameTtsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>>
export type GetTelephonyBillingAccountOvhPabxServiceNameTtsIdQueryError = unknown


export function useGetTelephonyBillingAccountOvhPabxServiceNameTtsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameTtsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountOvhPabxServiceNameTtsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountOvhPabxServiceNameTtsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountOvhPabxServiceNameTtsIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountOvhPabxServiceNameTtsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
    telephonyOvhPabxTtsOVH: NonReadonly<TelephonyOvhPabxTtsOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/ovhPabx/${serviceName}/tts/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOvhPabxTtsOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountOvhPabxServiceNameTtsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError,{billingAccount: string;serviceName: string;id: number;data: NonReadonly<TelephonyOvhPabxTtsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError,{billingAccount: string;serviceName: string;id: number;data: NonReadonly<TelephonyOvhPabxTtsOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameTtsId>>, {billingAccount: string;serviceName: string;id: number;data: NonReadonly<TelephonyOvhPabxTtsOVH>}> = (props) => {
          const {billingAccount,serviceName,id,data} = props ?? {};

          return  putTelephonyBillingAccountOvhPabxServiceNameTtsId(billingAccount,serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountOvhPabxServiceNameTtsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameTtsId>>>
    export type PutTelephonyBillingAccountOvhPabxServiceNameTtsIdMutationBody = NonReadonly<TelephonyOvhPabxTtsOVH>
    export type PutTelephonyBillingAccountOvhPabxServiceNameTtsIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountOvhPabxServiceNameTtsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameTtsId>>, TError,{billingAccount: string;serviceName: string;id: number;data: NonReadonly<TelephonyOvhPabxTtsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountOvhPabxServiceNameTtsId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number;data: NonReadonly<TelephonyOvhPabxTtsOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountOvhPabxServiceNameTtsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Return phonebooks associated to this group
 */
export const getTelephonyBillingAccountPhonebook = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/phonebook`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPhonebookQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/phonebook`] as const;
    }

    
export const getGetTelephonyBillingAccountPhonebookQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPhonebookQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>> = ({ signal }) => getTelephonyBillingAccountPhonebook(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPhonebookQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>>
export type GetTelephonyBillingAccountPhonebookQueryError = unknown


export function useGetTelephonyBillingAccountPhonebook<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPhonebook<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPhonebook<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return phonebooks associated to this group
 */

export function useGetTelephonyBillingAccountPhonebook<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebook>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPhonebookQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a phonebook on group. Return the bookKey.
 */
export const postTelephonyBillingAccountPhonebook = (
    billingAccount: string,
    postTelephonyBillingAccountPhonebookBody: PostTelephonyBillingAccountPhonebookBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/telephony/${billingAccount}/phonebook`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountPhonebookBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountPhonebookMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebook>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountPhonebookBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebook>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountPhonebookBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebook>>, {billingAccount: string;data: PostTelephonyBillingAccountPhonebookBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postTelephonyBillingAccountPhonebook(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountPhonebookMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebook>>>
    export type PostTelephonyBillingAccountPhonebookMutationBody = PostTelephonyBillingAccountPhonebookBody
    export type PostTelephonyBillingAccountPhonebookMutationError = unknown

    /**
 * @summary Add a phonebook on group. Return the bookKey.
 */
export const usePostTelephonyBillingAccountPhonebook = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebook>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountPhonebookBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebook>>,
        TError,
        {billingAccount: string;data: PostTelephonyBillingAccountPhonebookBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountPhonebookMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a phonebook
 */
export const deleteTelephonyBillingAccountPhonebookBookKey = (
    billingAccount: string,
    bookKey: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/phonebook/${bookKey}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountPhonebookBookKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPhonebookBookKey>>, TError,{billingAccount: string;bookKey: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPhonebookBookKey>>, TError,{billingAccount: string;bookKey: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPhonebookBookKey>>, {billingAccount: string;bookKey: string}> = (props) => {
          const {billingAccount,bookKey} = props ?? {};

          return  deleteTelephonyBillingAccountPhonebookBookKey(billingAccount,bookKey,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountPhonebookBookKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPhonebookBookKey>>>
    
    export type DeleteTelephonyBillingAccountPhonebookBookKeyMutationError = unknown

    /**
 * @summary Delete a phonebook
 */
export const useDeleteTelephonyBillingAccountPhonebookBookKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPhonebookBookKey>>, TError,{billingAccount: string;bookKey: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountPhonebookBookKey>>,
        TError,
        {billingAccount: string;bookKey: string},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountPhonebookBookKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountPhonebookBookKey = (
    billingAccount: string,
    bookKey: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPhonebookMasterOVH>(
      {url: `/telephony/${billingAccount}/phonebook/${bookKey}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPhonebookBookKeyQueryKey = (billingAccount: string,
    bookKey: string,) => {
    return [`/telephony/${billingAccount}/phonebook/${bookKey}`] as const;
    }

    
export const getGetTelephonyBillingAccountPhonebookBookKeyQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>, TError = unknown>(billingAccount: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPhonebookBookKeyQueryKey(billingAccount,bookKey);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>> = ({ signal }) => getTelephonyBillingAccountPhonebookBookKey(billingAccount,bookKey, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && bookKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPhonebookBookKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>>
export type GetTelephonyBillingAccountPhonebookBookKeyQueryError = unknown


export function useGetTelephonyBillingAccountPhonebookBookKey<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>, TError = unknown>(
 billingAccount: string,
    bookKey: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPhonebookBookKey<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>, TError = unknown>(
 billingAccount: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPhonebookBookKey<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>, TError = unknown>(
 billingAccount: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountPhonebookBookKey<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>, TError = unknown>(
 billingAccount: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPhonebookBookKeyQueryOptions(billingAccount,bookKey,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountPhonebookBookKey = (
    billingAccount: string,
    bookKey: string,
    telephonyPhonebookMasterOVH: NonReadonly<TelephonyPhonebookMasterOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/phonebook/${bookKey}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyPhonebookMasterOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountPhonebookBookKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountPhonebookBookKey>>, TError,{billingAccount: string;bookKey: string;data: NonReadonly<TelephonyPhonebookMasterOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountPhonebookBookKey>>, TError,{billingAccount: string;bookKey: string;data: NonReadonly<TelephonyPhonebookMasterOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountPhonebookBookKey>>, {billingAccount: string;bookKey: string;data: NonReadonly<TelephonyPhonebookMasterOVH>}> = (props) => {
          const {billingAccount,bookKey,data} = props ?? {};

          return  putTelephonyBillingAccountPhonebookBookKey(billingAccount,bookKey,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountPhonebookBookKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountPhonebookBookKey>>>
    export type PutTelephonyBillingAccountPhonebookBookKeyMutationBody = NonReadonly<TelephonyPhonebookMasterOVH>
    export type PutTelephonyBillingAccountPhonebookBookKeyMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountPhonebookBookKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountPhonebookBookKey>>, TError,{billingAccount: string;bookKey: string;data: NonReadonly<TelephonyPhonebookMasterOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountPhonebookBookKey>>,
        TError,
        {billingAccount: string;bookKey: string;data: NonReadonly<TelephonyPhonebookMasterOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountPhonebookBookKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Export the phonebook's contacts
 */
export const getTelephonyBillingAccountPhonebookBookKeyExport = (
    billingAccount: string,
    bookKey: string,
    params: GetTelephonyBillingAccountPhonebookBookKeyExportParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPcsFileOVH>(
      {url: `/telephony/${billingAccount}/phonebook/${bookKey}/export`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPhonebookBookKeyExportQueryKey = (billingAccount: string,
    bookKey: string,
    params: GetTelephonyBillingAccountPhonebookBookKeyExportParams,) => {
    return [`/telephony/${billingAccount}/phonebook/${bookKey}/export`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountPhonebookBookKeyExportQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>, TError = unknown>(billingAccount: string,
    bookKey: string,
    params: GetTelephonyBillingAccountPhonebookBookKeyExportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPhonebookBookKeyExportQueryKey(billingAccount,bookKey,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>> = ({ signal }) => getTelephonyBillingAccountPhonebookBookKeyExport(billingAccount,bookKey,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && bookKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPhonebookBookKeyExportQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>>
export type GetTelephonyBillingAccountPhonebookBookKeyExportQueryError = unknown


export function useGetTelephonyBillingAccountPhonebookBookKeyExport<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>, TError = unknown>(
 billingAccount: string,
    bookKey: string,
    params: GetTelephonyBillingAccountPhonebookBookKeyExportParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPhonebookBookKeyExport<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>, TError = unknown>(
 billingAccount: string,
    bookKey: string,
    params: GetTelephonyBillingAccountPhonebookBookKeyExportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPhonebookBookKeyExport<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>, TError = unknown>(
 billingAccount: string,
    bookKey: string,
    params: GetTelephonyBillingAccountPhonebookBookKeyExportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Export the phonebook's contacts
 */

export function useGetTelephonyBillingAccountPhonebookBookKeyExport<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>, TError = unknown>(
 billingAccount: string,
    bookKey: string,
    params: GetTelephonyBillingAccountPhonebookBookKeyExportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyExport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPhonebookBookKeyExportQueryOptions(billingAccount,bookKey,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Import a contacts file. Supported formats are Excel (.xls and .xlsx) and CSV
 */
export const postTelephonyBillingAccountPhonebookBookKeyImport = (
    billingAccount: string,
    bookKey: string,
    postTelephonyBillingAccountPhonebookBookKeyImportBody: PostTelephonyBillingAccountPhonebookBookKeyImportBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/phonebook/${bookKey}/import`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountPhonebookBookKeyImportBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountPhonebookBookKeyImportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebookBookKeyImport>>, TError,{billingAccount: string;bookKey: string;data: PostTelephonyBillingAccountPhonebookBookKeyImportBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebookBookKeyImport>>, TError,{billingAccount: string;bookKey: string;data: PostTelephonyBillingAccountPhonebookBookKeyImportBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebookBookKeyImport>>, {billingAccount: string;bookKey: string;data: PostTelephonyBillingAccountPhonebookBookKeyImportBody}> = (props) => {
          const {billingAccount,bookKey,data} = props ?? {};

          return  postTelephonyBillingAccountPhonebookBookKeyImport(billingAccount,bookKey,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountPhonebookBookKeyImportMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebookBookKeyImport>>>
    export type PostTelephonyBillingAccountPhonebookBookKeyImportMutationBody = PostTelephonyBillingAccountPhonebookBookKeyImportBody
    export type PostTelephonyBillingAccountPhonebookBookKeyImportMutationError = unknown

    /**
 * @summary Import a contacts file. Supported formats are Excel (.xls and .xlsx) and CSV
 */
export const usePostTelephonyBillingAccountPhonebookBookKeyImport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebookBookKeyImport>>, TError,{billingAccount: string;bookKey: string;data: PostTelephonyBillingAccountPhonebookBookKeyImportBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebookBookKeyImport>>,
        TError,
        {billingAccount: string;bookKey: string;data: PostTelephonyBillingAccountPhonebookBookKeyImportBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountPhonebookBookKeyImportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Phonebook contacts
 */
export const getTelephonyBillingAccountPhonebookBookKeyPhonebookContact = (
    billingAccount: string,
    bookKey: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/phonebook/${bookKey}/phonebookContact`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPhonebookBookKeyPhonebookContactQueryKey = (billingAccount: string,
    bookKey: string,) => {
    return [`/telephony/${billingAccount}/phonebook/${bookKey}/phonebookContact`] as const;
    }

    
export const getGetTelephonyBillingAccountPhonebookBookKeyPhonebookContactQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError = unknown>(billingAccount: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPhonebookBookKeyPhonebookContactQueryKey(billingAccount,bookKey);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>> = ({ signal }) => getTelephonyBillingAccountPhonebookBookKeyPhonebookContact(billingAccount,bookKey, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && bookKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPhonebookBookKeyPhonebookContactQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>>
export type GetTelephonyBillingAccountPhonebookBookKeyPhonebookContactQueryError = unknown


export function useGetTelephonyBillingAccountPhonebookBookKeyPhonebookContact<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError = unknown>(
 billingAccount: string,
    bookKey: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPhonebookBookKeyPhonebookContact<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError = unknown>(
 billingAccount: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPhonebookBookKeyPhonebookContact<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError = unknown>(
 billingAccount: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Phonebook contacts
 */

export function useGetTelephonyBillingAccountPhonebookBookKeyPhonebookContact<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError = unknown>(
 billingAccount: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPhonebookBookKeyPhonebookContactQueryOptions(billingAccount,bookKey,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a phonebook contact. Return identifier of the phonebook contact.
 */
export const postTelephonyBillingAccountPhonebookBookKeyPhonebookContact = (
    billingAccount: string,
    bookKey: string,
    postTelephonyBillingAccountPhonebookBookKeyPhonebookContactBody: PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number>(
      {url: `/telephony/${billingAccount}/phonebook/${bookKey}/phonebookContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountPhonebookBookKeyPhonebookContactBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountPhonebookBookKeyPhonebookContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError,{billingAccount: string;bookKey: string;data: PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError,{billingAccount: string;bookKey: string;data: PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, {billingAccount: string;bookKey: string;data: PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactBody}> = (props) => {
          const {billingAccount,bookKey,data} = props ?? {};

          return  postTelephonyBillingAccountPhonebookBookKeyPhonebookContact(billingAccount,bookKey,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>>
    export type PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactMutationBody = PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactBody
    export type PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactMutationError = unknown

    /**
 * @summary Create a phonebook contact. Return identifier of the phonebook contact.
 */
export const usePostTelephonyBillingAccountPhonebookBookKeyPhonebookContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>, TError,{billingAccount: string;bookKey: string;data: PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountPhonebookBookKeyPhonebookContact>>,
        TError,
        {billingAccount: string;bookKey: string;data: PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountPhonebookBookKeyPhonebookContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a phonebook contact
 */
export const deleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactId = (
    billingAccount: string,
    bookKey: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/phonebook/${bookKey}/phonebookContact/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError,{billingAccount: string;bookKey: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError,{billingAccount: string;bookKey: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, {billingAccount: string;bookKey: string;id: number}> = (props) => {
          const {billingAccount,bookKey,id} = props ?? {};

          return  deleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactId(billingAccount,bookKey,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>>
    
    export type DeleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdMutationError = unknown

    /**
 * @summary Delete a phonebook contact
 */
export const useDeleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError,{billingAccount: string;bookKey: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>,
        TError,
        {billingAccount: string;bookKey: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId = (
    billingAccount: string,
    bookKey: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPhonebookContactOVH>(
      {url: `/telephony/${billingAccount}/phonebook/${bookKey}/phonebookContact/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdQueryKey = (billingAccount: string,
    bookKey: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/phonebook/${bookKey}/phonebookContact/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError = unknown>(billingAccount: string,
    bookKey: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdQueryKey(billingAccount,bookKey,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>> = ({ signal }) => getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId(billingAccount,bookKey,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && bookKey && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>>
export type GetTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdQueryError = unknown


export function useGetTelephonyBillingAccountPhonebookBookKeyPhonebookContactId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError = unknown>(
 billingAccount: string,
    bookKey: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPhonebookBookKeyPhonebookContactId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError = unknown>(
 billingAccount: string,
    bookKey: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPhonebookBookKeyPhonebookContactId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError = unknown>(
 billingAccount: string,
    bookKey: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountPhonebookBookKeyPhonebookContactId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError = unknown>(
 billingAccount: string,
    bookKey: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdQueryOptions(billingAccount,bookKey,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountPhonebookBookKeyPhonebookContactId = (
    billingAccount: string,
    bookKey: string,
    id: number,
    telephonyPhonebookContactOVH: NonReadonly<TelephonyPhonebookContactOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/phonebook/${bookKey}/phonebookContact/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyPhonebookContactOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError,{billingAccount: string;bookKey: string;id: number;data: NonReadonly<TelephonyPhonebookContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError,{billingAccount: string;bookKey: string;id: number;data: NonReadonly<TelephonyPhonebookContactOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, {billingAccount: string;bookKey: string;id: number;data: NonReadonly<TelephonyPhonebookContactOVH>}> = (props) => {
          const {billingAccount,bookKey,id,data} = props ?? {};

          return  putTelephonyBillingAccountPhonebookBookKeyPhonebookContactId(billingAccount,bookKey,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>>
    export type PutTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdMutationBody = NonReadonly<TelephonyPhonebookContactOVH>
    export type PutTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountPhonebookBookKeyPhonebookContactId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>, TError,{billingAccount: string;bookKey: string;id: number;data: NonReadonly<TelephonyPhonebookContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountPhonebookBookKeyPhonebookContactId>>,
        TError,
        {billingAccount: string;bookKey: string;id: number;data: NonReadonly<TelephonyPhonebookContactOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Current number portabilities for this billing account
 */
export const getTelephonyBillingAccountPortability = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/portability`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPortabilityQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/portability`] as const;
    }

    
export const getGetTelephonyBillingAccountPortabilityQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPortabilityQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>> = ({ signal }) => getTelephonyBillingAccountPortability(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPortabilityQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>>
export type GetTelephonyBillingAccountPortabilityQueryError = unknown


export function useGetTelephonyBillingAccountPortability<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortability<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortability<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Current number portabilities for this billing account
 */

export function useGetTelephonyBillingAccountPortability<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPortabilityQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountPortabilityId = (
    billingAccount: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPortabilityOVH>(
      {url: `/telephony/${billingAccount}/portability/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPortabilityIdQueryKey = (billingAccount: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/portability/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountPortabilityIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>, TError = unknown>(billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPortabilityIdQueryKey(billingAccount,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>> = ({ signal }) => getTelephonyBillingAccountPortabilityId(billingAccount,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPortabilityIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>>
export type GetTelephonyBillingAccountPortabilityIdQueryError = unknown


export function useGetTelephonyBillingAccountPortabilityId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>, TError = unknown>(
 billingAccount: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountPortabilityId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPortabilityIdQueryOptions(billingAccount,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Indicates whether or not the portability can be cancelled
 */
export const getTelephonyBillingAccountPortabilityIdCanBeCancelled = (
    billingAccount: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/telephony/${billingAccount}/portability/${id}/canBeCancelled`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPortabilityIdCanBeCancelledQueryKey = (billingAccount: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/portability/${id}/canBeCancelled`] as const;
    }

    
export const getGetTelephonyBillingAccountPortabilityIdCanBeCancelledQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>, TError = unknown>(billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPortabilityIdCanBeCancelledQueryKey(billingAccount,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>> = ({ signal }) => getTelephonyBillingAccountPortabilityIdCanBeCancelled(billingAccount,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPortabilityIdCanBeCancelledQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>>
export type GetTelephonyBillingAccountPortabilityIdCanBeCancelledQueryError = unknown


export function useGetTelephonyBillingAccountPortabilityIdCanBeCancelled<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>, TError = unknown>(
 billingAccount: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdCanBeCancelled<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdCanBeCancelled<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Indicates whether or not the portability can be cancelled
 */

export function useGetTelephonyBillingAccountPortabilityIdCanBeCancelled<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeCancelled>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPortabilityIdCanBeCancelledQueryOptions(billingAccount,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Indicates whether or not the portability can be executed
 */
export const getTelephonyBillingAccountPortabilityIdCanBeExecuted = (
    billingAccount: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/telephony/${billingAccount}/portability/${id}/canBeExecuted`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPortabilityIdCanBeExecutedQueryKey = (billingAccount: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/portability/${id}/canBeExecuted`] as const;
    }

    
export const getGetTelephonyBillingAccountPortabilityIdCanBeExecutedQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>, TError = unknown>(billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPortabilityIdCanBeExecutedQueryKey(billingAccount,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>> = ({ signal }) => getTelephonyBillingAccountPortabilityIdCanBeExecuted(billingAccount,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPortabilityIdCanBeExecutedQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>>
export type GetTelephonyBillingAccountPortabilityIdCanBeExecutedQueryError = unknown


export function useGetTelephonyBillingAccountPortabilityIdCanBeExecuted<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>, TError = unknown>(
 billingAccount: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdCanBeExecuted<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdCanBeExecuted<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Indicates whether or not the portability can be executed
 */

export function useGetTelephonyBillingAccountPortabilityIdCanBeExecuted<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdCanBeExecuted>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPortabilityIdCanBeExecutedQueryOptions(billingAccount,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ask to cancel the portability
 */
export const postTelephonyBillingAccountPortabilityIdCancel = (
    billingAccount: string,
    id: number,
    postTelephonyBillingAccountPortabilityIdCancelBody: PostTelephonyBillingAccountPortabilityIdCancelBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/portability/${id}/cancel`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountPortabilityIdCancelBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountPortabilityIdCancelMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdCancel>>, TError,{billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdCancelBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdCancel>>, TError,{billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdCancelBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdCancel>>, {billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdCancelBody}> = (props) => {
          const {billingAccount,id,data} = props ?? {};

          return  postTelephonyBillingAccountPortabilityIdCancel(billingAccount,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountPortabilityIdCancelMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdCancel>>>
    export type PostTelephonyBillingAccountPortabilityIdCancelMutationBody = PostTelephonyBillingAccountPortabilityIdCancelBody
    export type PostTelephonyBillingAccountPortabilityIdCancelMutationError = unknown

    /**
 * @summary Ask to cancel the portability
 */
export const usePostTelephonyBillingAccountPortabilityIdCancel = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdCancel>>, TError,{billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdCancelBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdCancel>>,
        TError,
        {billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdCancelBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountPortabilityIdCancelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ask to change the portability date
 */
export const postTelephonyBillingAccountPortabilityIdChangeDate = (
    billingAccount: string,
    id: number,
    postTelephonyBillingAccountPortabilityIdChangeDateBody: PostTelephonyBillingAccountPortabilityIdChangeDateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/portability/${id}/changeDate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountPortabilityIdChangeDateBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountPortabilityIdChangeDateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdChangeDate>>, TError,{billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdChangeDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdChangeDate>>, TError,{billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdChangeDateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdChangeDate>>, {billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdChangeDateBody}> = (props) => {
          const {billingAccount,id,data} = props ?? {};

          return  postTelephonyBillingAccountPortabilityIdChangeDate(billingAccount,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountPortabilityIdChangeDateMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdChangeDate>>>
    export type PostTelephonyBillingAccountPortabilityIdChangeDateMutationBody = PostTelephonyBillingAccountPortabilityIdChangeDateBody
    export type PostTelephonyBillingAccountPortabilityIdChangeDateMutationError = unknown

    /**
 * @summary Ask to change the portability date
 */
export const usePostTelephonyBillingAccountPortabilityIdChangeDate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdChangeDate>>, TError,{billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdChangeDateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdChangeDate>>,
        TError,
        {billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdChangeDateBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountPortabilityIdChangeDateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Indicates whether or not the portability date can be changed
 */
export const getTelephonyBillingAccountPortabilityIdDateCanBeChanged = (
    billingAccount: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/telephony/${billingAccount}/portability/${id}/dateCanBeChanged`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPortabilityIdDateCanBeChangedQueryKey = (billingAccount: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/portability/${id}/dateCanBeChanged`] as const;
    }

    
export const getGetTelephonyBillingAccountPortabilityIdDateCanBeChangedQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>, TError = unknown>(billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPortabilityIdDateCanBeChangedQueryKey(billingAccount,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>> = ({ signal }) => getTelephonyBillingAccountPortabilityIdDateCanBeChanged(billingAccount,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPortabilityIdDateCanBeChangedQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>>
export type GetTelephonyBillingAccountPortabilityIdDateCanBeChangedQueryError = unknown


export function useGetTelephonyBillingAccountPortabilityIdDateCanBeChanged<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>, TError = unknown>(
 billingAccount: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdDateCanBeChanged<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdDateCanBeChanged<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Indicates whether or not the portability date can be changed
 */

export function useGetTelephonyBillingAccountPortabilityIdDateCanBeChanged<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDateCanBeChanged>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPortabilityIdDateCanBeChangedQueryOptions(billingAccount,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Document linked to this portability
 */
export const getTelephonyBillingAccountPortabilityIdDocument = (
    billingAccount: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/portability/${id}/document`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPortabilityIdDocumentQueryKey = (billingAccount: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/portability/${id}/document`] as const;
    }

    
export const getGetTelephonyBillingAccountPortabilityIdDocumentQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>, TError = unknown>(billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPortabilityIdDocumentQueryKey(billingAccount,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>> = ({ signal }) => getTelephonyBillingAccountPortabilityIdDocument(billingAccount,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPortabilityIdDocumentQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>>
export type GetTelephonyBillingAccountPortabilityIdDocumentQueryError = unknown


export function useGetTelephonyBillingAccountPortabilityIdDocument<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>, TError = unknown>(
 billingAccount: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdDocument<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdDocument<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Document linked to this portability
 */

export function useGetTelephonyBillingAccountPortabilityIdDocument<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPortabilityIdDocumentQueryOptions(billingAccount,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a portability document
 */
export const postTelephonyBillingAccountPortabilityIdDocument = (
    billingAccount: string,
    id: number,
    postTelephonyBillingAccountPortabilityIdDocumentBody: PostTelephonyBillingAccountPortabilityIdDocumentBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPortabilityDocumentOVH>(
      {url: `/telephony/${billingAccount}/portability/${id}/document`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountPortabilityIdDocumentBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountPortabilityIdDocumentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdDocument>>, TError,{billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdDocumentBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdDocument>>, TError,{billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdDocumentBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdDocument>>, {billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdDocumentBody}> = (props) => {
          const {billingAccount,id,data} = props ?? {};

          return  postTelephonyBillingAccountPortabilityIdDocument(billingAccount,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountPortabilityIdDocumentMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdDocument>>>
    export type PostTelephonyBillingAccountPortabilityIdDocumentMutationBody = PostTelephonyBillingAccountPortabilityIdDocumentBody
    export type PostTelephonyBillingAccountPortabilityIdDocumentMutationError = unknown

    /**
 * @summary Create a portability document
 */
export const usePostTelephonyBillingAccountPortabilityIdDocument = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdDocument>>, TError,{billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdDocumentBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdDocument>>,
        TError,
        {billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdDocumentBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountPortabilityIdDocumentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the document
 */
export const deleteTelephonyBillingAccountPortabilityIdDocumentDocumentId = (
    billingAccount: string,
    id: number,
    documentId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/portability/${id}/document/${documentId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountPortabilityIdDocumentDocumentIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError,{billingAccount: string;id: number;documentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError,{billingAccount: string;id: number;documentId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, {billingAccount: string;id: number;documentId: number}> = (props) => {
          const {billingAccount,id,documentId} = props ?? {};

          return  deleteTelephonyBillingAccountPortabilityIdDocumentDocumentId(billingAccount,id,documentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountPortabilityIdDocumentDocumentIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPortabilityIdDocumentDocumentId>>>
    
    export type DeleteTelephonyBillingAccountPortabilityIdDocumentDocumentIdMutationError = unknown

    /**
 * @summary Delete the document
 */
export const useDeleteTelephonyBillingAccountPortabilityIdDocumentDocumentId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError,{billingAccount: string;id: number;documentId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountPortabilityIdDocumentDocumentId>>,
        TError,
        {billingAccount: string;id: number;documentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountPortabilityIdDocumentDocumentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountPortabilityIdDocumentDocumentId = (
    billingAccount: string,
    id: number,
    documentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPortabilityDocumentOVH>(
      {url: `/telephony/${billingAccount}/portability/${id}/document/${documentId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPortabilityIdDocumentDocumentIdQueryKey = (billingAccount: string,
    id: number,
    documentId: number,) => {
    return [`/telephony/${billingAccount}/portability/${id}/document/${documentId}`] as const;
    }

    
export const getGetTelephonyBillingAccountPortabilityIdDocumentDocumentIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError = unknown>(billingAccount: string,
    id: number,
    documentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPortabilityIdDocumentDocumentIdQueryKey(billingAccount,id,documentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>> = ({ signal }) => getTelephonyBillingAccountPortabilityIdDocumentDocumentId(billingAccount,id,documentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && id && documentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPortabilityIdDocumentDocumentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>>
export type GetTelephonyBillingAccountPortabilityIdDocumentDocumentIdQueryError = unknown


export function useGetTelephonyBillingAccountPortabilityIdDocumentDocumentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError = unknown>(
 billingAccount: string,
    id: number,
    documentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdDocumentDocumentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError = unknown>(
 billingAccount: string,
    id: number,
    documentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdDocumentDocumentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError = unknown>(
 billingAccount: string,
    id: number,
    documentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountPortabilityIdDocumentDocumentId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError = unknown>(
 billingAccount: string,
    id: number,
    documentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPortabilityIdDocumentDocumentIdQueryOptions(billingAccount,id,documentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountPortabilityIdDocumentDocumentId = (
    billingAccount: string,
    id: number,
    documentId: number,
    telephonyPortabilityDocumentOVH: NonReadonly<TelephonyPortabilityDocumentOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/portability/${id}/document/${documentId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyPortabilityDocumentOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountPortabilityIdDocumentDocumentIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError,{billingAccount: string;id: number;documentId: number;data: NonReadonly<TelephonyPortabilityDocumentOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError,{billingAccount: string;id: number;documentId: number;data: NonReadonly<TelephonyPortabilityDocumentOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, {billingAccount: string;id: number;documentId: number;data: NonReadonly<TelephonyPortabilityDocumentOVH>}> = (props) => {
          const {billingAccount,id,documentId,data} = props ?? {};

          return  putTelephonyBillingAccountPortabilityIdDocumentDocumentId(billingAccount,id,documentId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountPortabilityIdDocumentDocumentIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountPortabilityIdDocumentDocumentId>>>
    export type PutTelephonyBillingAccountPortabilityIdDocumentDocumentIdMutationBody = NonReadonly<TelephonyPortabilityDocumentOVH>
    export type PutTelephonyBillingAccountPortabilityIdDocumentDocumentIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountPortabilityIdDocumentDocumentId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountPortabilityIdDocumentDocumentId>>, TError,{billingAccount: string;id: number;documentId: number;data: NonReadonly<TelephonyPortabilityDocumentOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountPortabilityIdDocumentDocumentId>>,
        TError,
        {billingAccount: string;id: number;documentId: number;data: NonReadonly<TelephonyPortabilityDocumentOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountPortabilityIdDocumentDocumentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ask to execute the portability
 */
export const postTelephonyBillingAccountPortabilityIdExecute = (
    billingAccount: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/portability/${id}/execute`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountPortabilityIdExecuteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdExecute>>, TError,{billingAccount: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdExecute>>, TError,{billingAccount: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdExecute>>, {billingAccount: string;id: number}> = (props) => {
          const {billingAccount,id} = props ?? {};

          return  postTelephonyBillingAccountPortabilityIdExecute(billingAccount,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountPortabilityIdExecuteMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdExecute>>>
    
    export type PostTelephonyBillingAccountPortabilityIdExecuteMutationError = unknown

    /**
 * @summary Ask to execute the portability
 */
export const usePostTelephonyBillingAccountPortabilityIdExecute = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdExecute>>, TError,{billingAccount: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdExecute>>,
        TError,
        {billingAccount: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountPortabilityIdExecuteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Indicates whether or not error can be fixed and portability can be relaunched
 */
export const getTelephonyBillingAccountPortabilityIdRelaunch = (
    billingAccount: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPortabilityFixErrorPossibleParametersOVH>(
      {url: `/telephony/${billingAccount}/portability/${id}/relaunch`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPortabilityIdRelaunchQueryKey = (billingAccount: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/portability/${id}/relaunch`] as const;
    }

    
export const getGetTelephonyBillingAccountPortabilityIdRelaunchQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>, TError = unknown>(billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPortabilityIdRelaunchQueryKey(billingAccount,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>> = ({ signal }) => getTelephonyBillingAccountPortabilityIdRelaunch(billingAccount,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPortabilityIdRelaunchQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>>
export type GetTelephonyBillingAccountPortabilityIdRelaunchQueryError = unknown


export function useGetTelephonyBillingAccountPortabilityIdRelaunch<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>, TError = unknown>(
 billingAccount: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdRelaunch<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdRelaunch<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Indicates whether or not error can be fixed and portability can be relaunched
 */

export function useGetTelephonyBillingAccountPortabilityIdRelaunch<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdRelaunch>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPortabilityIdRelaunchQueryOptions(billingAccount,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Fix error and relaunch portability
 */
export const postTelephonyBillingAccountPortabilityIdRelaunch = (
    billingAccount: string,
    id: number,
    postTelephonyBillingAccountPortabilityIdRelaunchBody: PostTelephonyBillingAccountPortabilityIdRelaunchBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/portability/${id}/relaunch`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountPortabilityIdRelaunchBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountPortabilityIdRelaunchMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdRelaunch>>, TError,{billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdRelaunchBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdRelaunch>>, TError,{billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdRelaunchBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdRelaunch>>, {billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdRelaunchBody}> = (props) => {
          const {billingAccount,id,data} = props ?? {};

          return  postTelephonyBillingAccountPortabilityIdRelaunch(billingAccount,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountPortabilityIdRelaunchMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdRelaunch>>>
    export type PostTelephonyBillingAccountPortabilityIdRelaunchMutationBody = PostTelephonyBillingAccountPortabilityIdRelaunchBody
    export type PostTelephonyBillingAccountPortabilityIdRelaunchMutationError = unknown

    /**
 * @summary Fix error and relaunch portability
 */
export const usePostTelephonyBillingAccountPortabilityIdRelaunch = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdRelaunch>>, TError,{billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdRelaunchBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountPortabilityIdRelaunch>>,
        TError,
        {billingAccount: string;id: number;data: PostTelephonyBillingAccountPortabilityIdRelaunchBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountPortabilityIdRelaunchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Indicates the current status of the portability, with a list of steps
 */
export const getTelephonyBillingAccountPortabilityIdStatus = (
    billingAccount: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPortabilityStepOVH[]>(
      {url: `/telephony/${billingAccount}/portability/${id}/status`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountPortabilityIdStatusQueryKey = (billingAccount: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/portability/${id}/status`] as const;
    }

    
export const getGetTelephonyBillingAccountPortabilityIdStatusQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>, TError = unknown>(billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountPortabilityIdStatusQueryKey(billingAccount,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>> = ({ signal }) => getTelephonyBillingAccountPortabilityIdStatus(billingAccount,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountPortabilityIdStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>>
export type GetTelephonyBillingAccountPortabilityIdStatusQueryError = unknown


export function useGetTelephonyBillingAccountPortabilityIdStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>, TError = unknown>(
 billingAccount: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountPortabilityIdStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Indicates the current status of the portability, with a list of steps
 */

export function useGetTelephonyBillingAccountPortabilityIdStatus<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>, TError = unknown>(
 billingAccount: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountPortabilityIdStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountPortabilityIdStatusQueryOptions(billingAccount,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Redirects associated with this billing account
 */
export const getTelephonyBillingAccountRedirect = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/redirect`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountRedirectQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/redirect`] as const;
    }

    
export const getGetTelephonyBillingAccountRedirectQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountRedirectQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>> = ({ signal }) => getTelephonyBillingAccountRedirect(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountRedirectQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>>
export type GetTelephonyBillingAccountRedirectQueryError = unknown


export function useGetTelephonyBillingAccountRedirect<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRedirect<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRedirect<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Redirects associated with this billing account
 */

export function useGetTelephonyBillingAccountRedirect<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountRedirectQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountRedirectServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyRedirectOVH>(
      {url: `/telephony/${billingAccount}/redirect/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountRedirectServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/redirect/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountRedirectServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountRedirectServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>> = ({ signal }) => getTelephonyBillingAccountRedirectServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountRedirectServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>>
export type GetTelephonyBillingAccountRedirectServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountRedirectServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRedirectServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRedirectServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountRedirectServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRedirectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountRedirectServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountRedirectServiceName = (
    billingAccount: string,
    serviceName: string,
    telephonyRedirectOVH: NonReadonly<TelephonyRedirectOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/redirect/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyRedirectOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountRedirectServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountRedirectServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyRedirectOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountRedirectServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyRedirectOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountRedirectServiceName>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyRedirectOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountRedirectServiceName(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountRedirectServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountRedirectServiceName>>>
    export type PutTelephonyBillingAccountRedirectServiceNameMutationBody = NonReadonly<TelephonyRedirectOVH>
    export type PutTelephonyBillingAccountRedirectServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountRedirectServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountRedirectServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyRedirectOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountRedirectServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyRedirectOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountRedirectServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the destination of the redirect
 */
export const postTelephonyBillingAccountRedirectServiceNameChangeDestination = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountRedirectServiceNameChangeDestinationBody: PostTelephonyBillingAccountRedirectServiceNameChangeDestinationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/redirect/${serviceName}/changeDestination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountRedirectServiceNameChangeDestinationBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountRedirectServiceNameChangeDestinationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountRedirectServiceNameChangeDestination>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountRedirectServiceNameChangeDestinationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountRedirectServiceNameChangeDestination>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountRedirectServiceNameChangeDestinationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountRedirectServiceNameChangeDestination>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountRedirectServiceNameChangeDestinationBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountRedirectServiceNameChangeDestination(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountRedirectServiceNameChangeDestinationMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountRedirectServiceNameChangeDestination>>>
    export type PostTelephonyBillingAccountRedirectServiceNameChangeDestinationMutationBody = PostTelephonyBillingAccountRedirectServiceNameChangeDestinationBody
    export type PostTelephonyBillingAccountRedirectServiceNameChangeDestinationMutationError = unknown

    /**
 * @summary Change the destination of the redirect
 */
export const usePostTelephonyBillingAccountRedirectServiceNameChangeDestination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountRedirectServiceNameChangeDestination>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountRedirectServiceNameChangeDestinationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountRedirectServiceNameChangeDestination>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountRedirectServiceNameChangeDestinationBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountRedirectServiceNameChangeDestinationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Service concerned by the french RSVA reform
 */
export const getTelephonyBillingAccountRsva = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/rsva`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountRsvaQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/rsva`] as const;
    }

    
export const getGetTelephonyBillingAccountRsvaQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountRsvaQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>> = ({ signal }) => getTelephonyBillingAccountRsva(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountRsvaQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>>
export type GetTelephonyBillingAccountRsvaQueryError = unknown


export function useGetTelephonyBillingAccountRsva<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRsva<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRsva<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Service concerned by the french RSVA reform
 */

export function useGetTelephonyBillingAccountRsva<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsva>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountRsvaQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountRsvaServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyRsvaOVH>(
      {url: `/telephony/${billingAccount}/rsva/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountRsvaServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/rsva/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountRsvaServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountRsvaServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>> = ({ signal }) => getTelephonyBillingAccountRsvaServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountRsvaServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>>
export type GetTelephonyBillingAccountRsvaServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountRsvaServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRsvaServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRsvaServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountRsvaServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountRsvaServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountRsvaServiceName = (
    billingAccount: string,
    serviceName: string,
    telephonyRsvaOVH: NonReadonly<TelephonyRsvaOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/rsva/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyRsvaOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountRsvaServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountRsvaServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyRsvaOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountRsvaServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyRsvaOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountRsvaServiceName>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyRsvaOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountRsvaServiceName(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountRsvaServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountRsvaServiceName>>>
    export type PutTelephonyBillingAccountRsvaServiceNameMutationBody = NonReadonly<TelephonyRsvaOVH>
    export type PutTelephonyBillingAccountRsvaServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountRsvaServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountRsvaServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyRsvaOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountRsvaServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyRsvaOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountRsvaServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Compatible rate codes related to this value added service
 */
export const getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyRateCodeInformationOVH[]>(
      {url: `/telephony/${billingAccount}/rsva/${serviceName}/allowedRateCodes`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountRsvaServiceNameAllowedRateCodesQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/rsva/${serviceName}/allowedRateCodes`] as const;
    }

    
export const getGetTelephonyBillingAccountRsvaServiceNameAllowedRateCodesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountRsvaServiceNameAllowedRateCodesQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>> = ({ signal }) => getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountRsvaServiceNameAllowedRateCodesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>>
export type GetTelephonyBillingAccountRsvaServiceNameAllowedRateCodesQueryError = unknown


export function useGetTelephonyBillingAccountRsvaServiceNameAllowedRateCodes<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRsvaServiceNameAllowedRateCodes<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRsvaServiceNameAllowedRateCodes<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Compatible rate codes related to this value added service
 */

export function useGetTelephonyBillingAccountRsvaServiceNameAllowedRateCodes<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameAllowedRateCodes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountRsvaServiceNameAllowedRateCodesQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Cancel a scheduled rate code update
 */
export const postTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCode = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/rsva/${serviceName}/cancelScheduledRateCode`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCode>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCode>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCode>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCode(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCode>>>
    
    export type PostTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCodeMutationError = unknown

    /**
 * @summary Cancel a scheduled rate code update
 */
export const usePostTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCode>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCode>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Current rate code related to this sva
 */
export const getTelephonyBillingAccountRsvaServiceNameCurrentRateCode = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDetailedRateCodeInformationOVH>(
      {url: `/telephony/${billingAccount}/rsva/${serviceName}/currentRateCode`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountRsvaServiceNameCurrentRateCodeQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/rsva/${serviceName}/currentRateCode`] as const;
    }

    
export const getGetTelephonyBillingAccountRsvaServiceNameCurrentRateCodeQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountRsvaServiceNameCurrentRateCodeQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>> = ({ signal }) => getTelephonyBillingAccountRsvaServiceNameCurrentRateCode(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountRsvaServiceNameCurrentRateCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>>
export type GetTelephonyBillingAccountRsvaServiceNameCurrentRateCodeQueryError = unknown


export function useGetTelephonyBillingAccountRsvaServiceNameCurrentRateCode<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRsvaServiceNameCurrentRateCode<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRsvaServiceNameCurrentRateCode<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Current rate code related to this sva
 */

export function useGetTelephonyBillingAccountRsvaServiceNameCurrentRateCode<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameCurrentRateCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountRsvaServiceNameCurrentRateCodeQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Schedule a new rate code for this sva
 */
export const postTelephonyBillingAccountRsvaServiceNameScheduleRateCode = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountRsvaServiceNameScheduleRateCodeBody: PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDetailedRateCodeInformationOVH>(
      {url: `/telephony/${billingAccount}/rsva/${serviceName}/scheduleRateCode`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountRsvaServiceNameScheduleRateCodeBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountRsvaServiceNameScheduleRateCode>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountRsvaServiceNameScheduleRateCode>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountRsvaServiceNameScheduleRateCode>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountRsvaServiceNameScheduleRateCode(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountRsvaServiceNameScheduleRateCode>>>
    export type PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeMutationBody = PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeBody
    export type PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeMutationError = unknown

    /**
 * @summary Schedule a new rate code for this sva
 */
export const usePostTelephonyBillingAccountRsvaServiceNameScheduleRateCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountRsvaServiceNameScheduleRateCode>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountRsvaServiceNameScheduleRateCode>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary New scheduled rate code related to this sva
 */
export const getTelephonyBillingAccountRsvaServiceNameScheduledRateCode = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDetailedRateCodeInformationOVH>(
      {url: `/telephony/${billingAccount}/rsva/${serviceName}/scheduledRateCode`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountRsvaServiceNameScheduledRateCodeQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/rsva/${serviceName}/scheduledRateCode`] as const;
    }

    
export const getGetTelephonyBillingAccountRsvaServiceNameScheduledRateCodeQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountRsvaServiceNameScheduledRateCodeQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>> = ({ signal }) => getTelephonyBillingAccountRsvaServiceNameScheduledRateCode(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountRsvaServiceNameScheduledRateCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>>
export type GetTelephonyBillingAccountRsvaServiceNameScheduledRateCodeQueryError = unknown


export function useGetTelephonyBillingAccountRsvaServiceNameScheduledRateCode<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRsvaServiceNameScheduledRateCode<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountRsvaServiceNameScheduledRateCode<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary New scheduled rate code related to this sva
 */

export function useGetTelephonyBillingAccountRsvaServiceNameScheduledRateCode<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountRsvaServiceNameScheduledRateCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountRsvaServiceNameScheduledRateCodeQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Scheduled events
 */
export const getTelephonyBillingAccountScheduler = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/scheduler`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountSchedulerQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/scheduler`] as const;
    }

    
export const getGetTelephonyBillingAccountSchedulerQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountSchedulerQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>> = ({ signal }) => getTelephonyBillingAccountScheduler(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountSchedulerQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>>
export type GetTelephonyBillingAccountSchedulerQueryError = unknown


export function useGetTelephonyBillingAccountScheduler<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountScheduler<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountScheduler<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Scheduled events
 */

export function useGetTelephonyBillingAccountScheduler<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScheduler>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountSchedulerQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountSchedulerServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySchedulerOVH>(
      {url: `/telephony/${billingAccount}/scheduler/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountSchedulerServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/scheduler/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountSchedulerServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountSchedulerServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>> = ({ signal }) => getTelephonyBillingAccountSchedulerServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountSchedulerServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>>
export type GetTelephonyBillingAccountSchedulerServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountSchedulerServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountSchedulerServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountSchedulerServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountSchedulerServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountSchedulerServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountSchedulerServiceName = (
    billingAccount: string,
    serviceName: string,
    telephonySchedulerOVH: NonReadonly<TelephonySchedulerOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/scheduler/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonySchedulerOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountSchedulerServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountSchedulerServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonySchedulerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountSchedulerServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonySchedulerOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountSchedulerServiceName>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonySchedulerOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountSchedulerServiceName(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountSchedulerServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountSchedulerServiceName>>>
    export type PutTelephonyBillingAccountSchedulerServiceNameMutationBody = NonReadonly<TelephonySchedulerOVH>
    export type PutTelephonyBillingAccountSchedulerServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountSchedulerServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountSchedulerServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonySchedulerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountSchedulerServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonySchedulerOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountSchedulerServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Custom events scheduled
 */
export const getTelephonyBillingAccountSchedulerServiceNameEvents = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountSchedulerServiceNameEventsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/scheduler/${serviceName}/events`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountSchedulerServiceNameEventsQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountSchedulerServiceNameEventsParams,) => {
    return [`/telephony/${billingAccount}/scheduler/${serviceName}/events`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountSchedulerServiceNameEventsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountSchedulerServiceNameEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountSchedulerServiceNameEventsQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>> = ({ signal }) => getTelephonyBillingAccountSchedulerServiceNameEvents(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountSchedulerServiceNameEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>>
export type GetTelephonyBillingAccountSchedulerServiceNameEventsQueryError = unknown


export function useGetTelephonyBillingAccountSchedulerServiceNameEvents<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountSchedulerServiceNameEventsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountSchedulerServiceNameEvents<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountSchedulerServiceNameEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountSchedulerServiceNameEvents<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountSchedulerServiceNameEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Custom events scheduled
 */

export function useGetTelephonyBillingAccountSchedulerServiceNameEvents<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountSchedulerServiceNameEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEvents>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountSchedulerServiceNameEventsQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a scheduler event
 */
export const postTelephonyBillingAccountSchedulerServiceNameEvents = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountSchedulerServiceNameEventsBody: PostTelephonyBillingAccountSchedulerServiceNameEventsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/scheduler/${serviceName}/events`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountSchedulerServiceNameEventsBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountSchedulerServiceNameEventsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountSchedulerServiceNameEvents>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountSchedulerServiceNameEventsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountSchedulerServiceNameEvents>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountSchedulerServiceNameEventsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountSchedulerServiceNameEvents>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountSchedulerServiceNameEventsBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountSchedulerServiceNameEvents(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountSchedulerServiceNameEventsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountSchedulerServiceNameEvents>>>
    export type PostTelephonyBillingAccountSchedulerServiceNameEventsMutationBody = PostTelephonyBillingAccountSchedulerServiceNameEventsBody
    export type PostTelephonyBillingAccountSchedulerServiceNameEventsMutationError = unknown

    /**
 * @summary Add a scheduler event
 */
export const usePostTelephonyBillingAccountSchedulerServiceNameEvents = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountSchedulerServiceNameEvents>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountSchedulerServiceNameEventsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountSchedulerServiceNameEvents>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountSchedulerServiceNameEventsBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountSchedulerServiceNameEventsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given scheduler event
 */
export const deleteTelephonyBillingAccountSchedulerServiceNameEventsUid = (
    billingAccount: string,
    serviceName: string,
    uid: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/scheduler/${serviceName}/events/${uid}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountSchedulerServiceNameEventsUidMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError,{billingAccount: string;serviceName: string;uid: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError,{billingAccount: string;serviceName: string;uid: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountSchedulerServiceNameEventsUid>>, {billingAccount: string;serviceName: string;uid: string}> = (props) => {
          const {billingAccount,serviceName,uid} = props ?? {};

          return  deleteTelephonyBillingAccountSchedulerServiceNameEventsUid(billingAccount,serviceName,uid,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountSchedulerServiceNameEventsUidMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountSchedulerServiceNameEventsUid>>>
    
    export type DeleteTelephonyBillingAccountSchedulerServiceNameEventsUidMutationError = unknown

    /**
 * @summary Delete the given scheduler event
 */
export const useDeleteTelephonyBillingAccountSchedulerServiceNameEventsUid = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError,{billingAccount: string;serviceName: string;uid: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountSchedulerServiceNameEventsUid>>,
        TError,
        {billingAccount: string;serviceName: string;uid: string},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountSchedulerServiceNameEventsUidMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountSchedulerServiceNameEventsUid = (
    billingAccount: string,
    serviceName: string,
    uid: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySchedulerEventOVH>(
      {url: `/telephony/${billingAccount}/scheduler/${serviceName}/events/${uid}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountSchedulerServiceNameEventsUidQueryKey = (billingAccount: string,
    serviceName: string,
    uid: string,) => {
    return [`/telephony/${billingAccount}/scheduler/${serviceName}/events/${uid}`] as const;
    }

    
export const getGetTelephonyBillingAccountSchedulerServiceNameEventsUidQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    uid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountSchedulerServiceNameEventsUidQueryKey(billingAccount,serviceName,uid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>> = ({ signal }) => getTelephonyBillingAccountSchedulerServiceNameEventsUid(billingAccount,serviceName,uid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && uid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountSchedulerServiceNameEventsUidQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>>
export type GetTelephonyBillingAccountSchedulerServiceNameEventsUidQueryError = unknown


export function useGetTelephonyBillingAccountSchedulerServiceNameEventsUid<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    uid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountSchedulerServiceNameEventsUid<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    uid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountSchedulerServiceNameEventsUid<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    uid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountSchedulerServiceNameEventsUid<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    uid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountSchedulerServiceNameEventsUidQueryOptions(billingAccount,serviceName,uid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountSchedulerServiceNameEventsUid = (
    billingAccount: string,
    serviceName: string,
    uid: string,
    telephonySchedulerEventOVH: NonReadonly<TelephonySchedulerEventOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/scheduler/${serviceName}/events/${uid}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonySchedulerEventOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountSchedulerServiceNameEventsUidMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError,{billingAccount: string;serviceName: string;uid: string;data: NonReadonly<TelephonySchedulerEventOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError,{billingAccount: string;serviceName: string;uid: string;data: NonReadonly<TelephonySchedulerEventOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountSchedulerServiceNameEventsUid>>, {billingAccount: string;serviceName: string;uid: string;data: NonReadonly<TelephonySchedulerEventOVH>}> = (props) => {
          const {billingAccount,serviceName,uid,data} = props ?? {};

          return  putTelephonyBillingAccountSchedulerServiceNameEventsUid(billingAccount,serviceName,uid,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountSchedulerServiceNameEventsUidMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountSchedulerServiceNameEventsUid>>>
    export type PutTelephonyBillingAccountSchedulerServiceNameEventsUidMutationBody = NonReadonly<TelephonySchedulerEventOVH>
    export type PutTelephonyBillingAccountSchedulerServiceNameEventsUidMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountSchedulerServiceNameEventsUid = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountSchedulerServiceNameEventsUid>>, TError,{billingAccount: string;serviceName: string;uid: string;data: NonReadonly<TelephonySchedulerEventOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountSchedulerServiceNameEventsUid>>,
        TError,
        {billingAccount: string;serviceName: string;uid: string;data: NonReadonly<TelephonySchedulerEventOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountSchedulerServiceNameEventsUidMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Add scheduler events in ICS format
 */
export const postTelephonyBillingAccountSchedulerServiceNameImportIcsCalendar = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarBody: PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/scheduler/${serviceName}/importIcsCalendar`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountSchedulerServiceNameImportIcsCalendar>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountSchedulerServiceNameImportIcsCalendar>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountSchedulerServiceNameImportIcsCalendar>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountSchedulerServiceNameImportIcsCalendar(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountSchedulerServiceNameImportIcsCalendar>>>
    export type PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarMutationBody = PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarBody
    export type PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarMutationError = unknown

    /**
 * @summary Add scheduler events in ICS format
 */
export const usePostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendar = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountSchedulerServiceNameImportIcsCalendar>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountSchedulerServiceNameImportIcsCalendar>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Screenlist compatible numbers associated with this billing account
 */
export const getTelephonyBillingAccountScreen = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/screen`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountScreenQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/screen`] as const;
    }

    
export const getGetTelephonyBillingAccountScreenQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountScreenQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>> = ({ signal }) => getTelephonyBillingAccountScreen(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountScreenQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>>
export type GetTelephonyBillingAccountScreenQueryError = unknown


export function useGetTelephonyBillingAccountScreen<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountScreen<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountScreen<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Screenlist compatible numbers associated with this billing account
 */

export function useGetTelephonyBillingAccountScreen<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreen>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountScreenQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountScreenServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyScreenOVH>(
      {url: `/telephony/${billingAccount}/screen/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountScreenServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/screen/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountScreenServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountScreenServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>> = ({ signal }) => getTelephonyBillingAccountScreenServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountScreenServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>>
export type GetTelephonyBillingAccountScreenServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountScreenServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountScreenServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountScreenServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountScreenServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountScreenServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountScreenServiceName = (
    billingAccount: string,
    serviceName: string,
    telephonyScreenOVH: NonReadonly<TelephonyScreenOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/screen/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyScreenOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountScreenServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountScreenServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyScreenOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountScreenServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyScreenOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountScreenServiceName>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyScreenOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountScreenServiceName(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountScreenServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountScreenServiceName>>>
    export type PutTelephonyBillingAccountScreenServiceNameMutationBody = NonReadonly<TelephonyScreenOVH>
    export type PutTelephonyBillingAccountScreenServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountScreenServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountScreenServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyScreenOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountScreenServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyScreenOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountScreenServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Rules for call filtering for this service
 */
export const getTelephonyBillingAccountScreenServiceNameScreenLists = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/screen/${serviceName}/screenLists`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountScreenServiceNameScreenListsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/screen/${serviceName}/screenLists`] as const;
    }

    
export const getGetTelephonyBillingAccountScreenServiceNameScreenListsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountScreenServiceNameScreenListsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>> = ({ signal }) => getTelephonyBillingAccountScreenServiceNameScreenLists(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountScreenServiceNameScreenListsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>>
export type GetTelephonyBillingAccountScreenServiceNameScreenListsQueryError = unknown


export function useGetTelephonyBillingAccountScreenServiceNameScreenLists<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountScreenServiceNameScreenLists<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountScreenServiceNameScreenLists<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Rules for call filtering for this service
 */

export function useGetTelephonyBillingAccountScreenServiceNameScreenLists<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenLists>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountScreenServiceNameScreenListsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new screen list rule
 */
export const postTelephonyBillingAccountScreenServiceNameScreenLists = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountScreenServiceNameScreenListsBody: PostTelephonyBillingAccountScreenServiceNameScreenListsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/screen/${serviceName}/screenLists`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountScreenServiceNameScreenListsBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountScreenServiceNameScreenListsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountScreenServiceNameScreenLists>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountScreenServiceNameScreenListsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountScreenServiceNameScreenLists>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountScreenServiceNameScreenListsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountScreenServiceNameScreenLists>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountScreenServiceNameScreenListsBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountScreenServiceNameScreenLists(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountScreenServiceNameScreenListsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountScreenServiceNameScreenLists>>>
    export type PostTelephonyBillingAccountScreenServiceNameScreenListsMutationBody = PostTelephonyBillingAccountScreenServiceNameScreenListsBody
    export type PostTelephonyBillingAccountScreenServiceNameScreenListsMutationError = unknown

    /**
 * @summary Create a new screen list rule
 */
export const usePostTelephonyBillingAccountScreenServiceNameScreenLists = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountScreenServiceNameScreenLists>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountScreenServiceNameScreenListsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountScreenServiceNameScreenLists>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountScreenServiceNameScreenListsBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountScreenServiceNameScreenListsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given screen list
 */
export const deleteTelephonyBillingAccountScreenServiceNameScreenListsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/screen/${serviceName}/screenLists/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountScreenServiceNameScreenListsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountScreenServiceNameScreenListsId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountScreenServiceNameScreenListsId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountScreenServiceNameScreenListsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountScreenServiceNameScreenListsId>>>
    
    export type DeleteTelephonyBillingAccountScreenServiceNameScreenListsIdMutationError = unknown

    /**
 * @summary Delete the given screen list
 */
export const useDeleteTelephonyBillingAccountScreenServiceNameScreenListsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountScreenServiceNameScreenListsId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountScreenServiceNameScreenListsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountScreenServiceNameScreenListsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyScreenListOVH>(
      {url: `/telephony/${billingAccount}/screen/${serviceName}/screenLists/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountScreenServiceNameScreenListsIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/screen/${serviceName}/screenLists/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountScreenServiceNameScreenListsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountScreenServiceNameScreenListsIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>> = ({ signal }) => getTelephonyBillingAccountScreenServiceNameScreenListsId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountScreenServiceNameScreenListsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>>
export type GetTelephonyBillingAccountScreenServiceNameScreenListsIdQueryError = unknown


export function useGetTelephonyBillingAccountScreenServiceNameScreenListsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountScreenServiceNameScreenListsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountScreenServiceNameScreenListsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountScreenServiceNameScreenListsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountScreenServiceNameScreenListsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountScreenServiceNameScreenListsIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Services associated with this billing account
 */
export const getTelephonyBillingAccountService = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/service`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/service`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountService>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountService>>> = ({ signal }) => getTelephonyBillingAccountService(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountService>>>
export type GetTelephonyBillingAccountServiceQueryError = unknown


export function useGetTelephonyBillingAccountService<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountService>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountService<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountService>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountService<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountService>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Services associated with this billing account
 */

export function useGetTelephonyBillingAccountService<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountService>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ask for a service termination.
 */
export const deleteTelephonyBillingAccountServiceServiceName = (
    billingAccount: string,
    serviceName: string,
    params: DeleteTelephonyBillingAccountServiceServiceNameParams,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/service/${serviceName}`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountServiceServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceName>>, TError,{billingAccount: string;serviceName: string;params: DeleteTelephonyBillingAccountServiceServiceNameParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceName>>, TError,{billingAccount: string;serviceName: string;params: DeleteTelephonyBillingAccountServiceServiceNameParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceName>>, {billingAccount: string;serviceName: string;params: DeleteTelephonyBillingAccountServiceServiceNameParams}> = (props) => {
          const {billingAccount,serviceName,params} = props ?? {};

          return  deleteTelephonyBillingAccountServiceServiceName(billingAccount,serviceName,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountServiceServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceName>>>
    
    export type DeleteTelephonyBillingAccountServiceServiceNameMutationError = unknown

    /**
 * @summary Ask for a service termination.
 */
export const useDeleteTelephonyBillingAccountServiceServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceName>>, TError,{billingAccount: string;serviceName: string;params: DeleteTelephonyBillingAccountServiceServiceNameParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;params: DeleteTelephonyBillingAccountServiceServiceNameParams},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountServiceServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountServiceServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTelephonyServiceOVH>(
      {url: `/telephony/${billingAccount}/service/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>>
export type GetTelephonyBillingAccountServiceServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountServiceServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountServiceServiceName = (
    billingAccount: string,
    serviceName: string,
    telephonyTelephonyServiceOVH: NonReadonly<TelephonyTelephonyServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/service/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyTelephonyServiceOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountServiceServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyTelephonyServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyTelephonyServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceName>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyTelephonyServiceOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountServiceServiceName(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountServiceServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceName>>>
    export type PutTelephonyBillingAccountServiceServiceNameMutationBody = NonReadonly<TelephonyTelephonyServiceOVH>
    export type PutTelephonyBillingAccountServiceServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountServiceServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyTelephonyServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyTelephonyServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountServiceServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Cancel the service termination
 */
export const postTelephonyBillingAccountServiceServiceNameCancelTermination = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/cancelTermination`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountServiceServiceNameCancelTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameCancelTermination>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameCancelTermination>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameCancelTermination>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountServiceServiceNameCancelTermination(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountServiceServiceNameCancelTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameCancelTermination>>>
    
    export type PostTelephonyBillingAccountServiceServiceNameCancelTerminationMutationError = unknown

    /**
 * @summary Cancel the service termination
 */
export const usePostTelephonyBillingAccountServiceServiceNameCancelTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameCancelTermination>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameCancelTermination>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountServiceServiceNameCancelTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Move a service of billing account. Source and destination nics should be the same.
 */
export const postTelephonyBillingAccountServiceServiceNameChangeOfBillingAccount = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountBody: PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/changeOfBillingAccount`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameChangeOfBillingAccount>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameChangeOfBillingAccount>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameChangeOfBillingAccount>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountServiceServiceNameChangeOfBillingAccount(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameChangeOfBillingAccount>>>
    export type PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountMutationBody = PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountBody
    export type PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountMutationError = unknown

    /**
 * @summary Move a service of billing account. Source and destination nics should be the same.
 */
export const usePostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameChangeOfBillingAccount>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameChangeOfBillingAccount>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountServiceServiceNameDirectory = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDirectoryInfoOVH>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/directory`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameDirectoryQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/directory`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameDirectoryQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameDirectoryQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameDirectory(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameDirectoryQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>>
export type GetTelephonyBillingAccountServiceServiceNameDirectoryQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameDirectory<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameDirectory<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameDirectory<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountServiceServiceNameDirectory<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameDirectoryQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountServiceServiceNameDirectory = (
    billingAccount: string,
    serviceName: string,
    telephonyDirectoryInfoOVH: NonReadonly<TelephonyDirectoryInfoOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/directory`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyDirectoryInfoOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountServiceServiceNameDirectoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameDirectory>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyDirectoryInfoOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameDirectory>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyDirectoryInfoOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameDirectory>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyDirectoryInfoOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountServiceServiceNameDirectory(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountServiceServiceNameDirectoryMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameDirectory>>>
    export type PutTelephonyBillingAccountServiceServiceNameDirectoryMutationBody = NonReadonly<TelephonyDirectoryInfoOVH>
    export type PutTelephonyBillingAccountServiceServiceNameDirectoryMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountServiceServiceNameDirectory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameDirectory>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyDirectoryInfoOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameDirectory>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyDirectoryInfoOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountServiceServiceNameDirectoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get company entreprise informations by providing entreprise number
 */
export const postTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformations = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsBody: PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEntrepriseNumberInformationsTaskOVH>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/directory/fetchEntrepriseInformations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformations>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformations>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformations>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformations(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformations>>>
    export type PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsMutationBody = PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsBody
    export type PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsMutationError = unknown

    /**
 * @summary Get company entreprise informations by providing entreprise number
 */
export const usePostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformations = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformations>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformations>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get directory service code from an APE code ( principal activity of the firm code )
 */
export const getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode = (
    billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDirectoryHeadingPJOVH[]>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/directory/getDirectoryServiceCode`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeQueryKey = (billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeParams,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/directory/getDirectoryServiceCode`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>>
export type GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get directory service code from an APE code ( principal activity of the firm code )
 */

export function useGetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all the way types availables
 */
export const getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDirectoryWayTypeOVH[]>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/directory/getWayTypes`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypesQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/directory/getWayTypes`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypesQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>>
export type GetTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypesQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all the way types availables
 */

export function useGetTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypesQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountServiceServiceNameEventCallback = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEventCallbackOVH>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/eventCallback`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameEventCallbackQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/eventCallback`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameEventCallbackQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameEventCallbackQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameEventCallback(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameEventCallbackQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>>
export type GetTelephonyBillingAccountServiceServiceNameEventCallbackQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameEventCallback<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameEventCallback<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameEventCallback<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountServiceServiceNameEventCallback<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventCallback>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameEventCallbackQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountServiceServiceNameEventCallback = (
    billingAccount: string,
    serviceName: string,
    telephonyEventCallbackOVH: TelephonyEventCallbackOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/eventCallback`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyEventCallbackOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountServiceServiceNameEventCallbackMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameEventCallback>>, TError,{billingAccount: string;serviceName: string;data: TelephonyEventCallbackOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameEventCallback>>, TError,{billingAccount: string;serviceName: string;data: TelephonyEventCallbackOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameEventCallback>>, {billingAccount: string;serviceName: string;data: TelephonyEventCallbackOVH}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountServiceServiceNameEventCallback(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountServiceServiceNameEventCallbackMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameEventCallback>>>
    export type PutTelephonyBillingAccountServiceServiceNameEventCallbackMutationBody = TelephonyEventCallbackOVH
    export type PutTelephonyBillingAccountServiceServiceNameEventCallbackMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountServiceServiceNameEventCallback = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameEventCallback>>, TError,{billingAccount: string;serviceName: string;data: TelephonyEventCallbackOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameEventCallback>>,
        TError,
        {billingAccount: string;serviceName: string;data: TelephonyEventCallbackOVH},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountServiceServiceNameEventCallbackMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given token
 */
export const deleteTelephonyBillingAccountServiceServiceNameEventToken = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/eventToken`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountServiceServiceNameEventTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceNameEventToken>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceNameEventToken>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceNameEventToken>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  deleteTelephonyBillingAccountServiceServiceNameEventToken(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountServiceServiceNameEventTokenMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceNameEventToken>>>
    
    export type DeleteTelephonyBillingAccountServiceServiceNameEventTokenMutationError = unknown

    /**
 * @summary Delete the given token
 */
export const useDeleteTelephonyBillingAccountServiceServiceNameEventToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceNameEventToken>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceNameEventToken>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountServiceServiceNameEventTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountServiceServiceNameEventToken = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyEventTokenOVH>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/eventToken`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameEventTokenQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/eventToken`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameEventTokenQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameEventTokenQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameEventToken(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameEventTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>>
export type GetTelephonyBillingAccountServiceServiceNameEventTokenQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountServiceServiceNameEventToken<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameEventToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameEventTokenQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new token
 */
export const postTelephonyBillingAccountServiceServiceNameEventToken = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountServiceServiceNameEventTokenBody: PostTelephonyBillingAccountServiceServiceNameEventTokenBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/eventToken`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountServiceServiceNameEventTokenBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountServiceServiceNameEventTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameEventToken>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameEventTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameEventToken>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameEventTokenBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameEventToken>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameEventTokenBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountServiceServiceNameEventToken(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountServiceServiceNameEventTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameEventToken>>>
    export type PostTelephonyBillingAccountServiceServiceNameEventTokenMutationBody = PostTelephonyBillingAccountServiceServiceNameEventTokenBody
    export type PostTelephonyBillingAccountServiceServiceNameEventTokenMutationError = unknown

    /**
 * @summary Create a new token
 */
export const usePostTelephonyBillingAccountServiceServiceNameEventToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameEventToken>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameEventTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameEventToken>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameEventTokenBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountServiceServiceNameEventTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Fax delivery records.
 */
export const getTelephonyBillingAccountServiceServiceNameFaxConsumption = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameFaxConsumptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/faxConsumption`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameFaxConsumptionQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameFaxConsumptionParams,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/faxConsumption`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameFaxConsumptionQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameFaxConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameFaxConsumptionQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameFaxConsumption(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameFaxConsumptionQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>>
export type GetTelephonyBillingAccountServiceServiceNameFaxConsumptionQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameFaxConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountServiceServiceNameFaxConsumptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameFaxConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameFaxConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameFaxConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameFaxConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Fax delivery records.
 */

export function useGetTelephonyBillingAccountServiceServiceNameFaxConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameFaxConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameFaxConsumptionQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId = (
    billingAccount: string,
    serviceName: string,
    consumptionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyFaxConsumptionOVH>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/faxConsumption/${consumptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionIdQueryKey = (billingAccount: string,
    serviceName: string,
    consumptionId: number,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/faxConsumption/${consumptionId}`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionIdQueryKey(billingAccount,serviceName,consumptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId(billingAccount,serviceName,consumptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && consumptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>>
export type GetTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionIdQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionIdQueryOptions(billingAccount,serviceName,consumptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the replacement offer scheduling
 */
export const deleteTelephonyBillingAccountServiceServiceNameOfferChange = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/offerChange`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountServiceServiceNameOfferChangeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceNameOfferChange>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceNameOfferChange>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceNameOfferChange>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  deleteTelephonyBillingAccountServiceServiceNameOfferChange(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountServiceServiceNameOfferChangeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceNameOfferChange>>>
    
    export type DeleteTelephonyBillingAccountServiceServiceNameOfferChangeMutationError = unknown

    /**
 * @summary Delete the replacement offer scheduling
 */
export const useDeleteTelephonyBillingAccountServiceServiceNameOfferChange = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceNameOfferChange>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountServiceServiceNameOfferChange>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountServiceServiceNameOfferChangeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountServiceServiceNameOfferChange = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOfferChangeOVH>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/offerChange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameOfferChangeQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/offerChange`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameOfferChangeQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameOfferChangeQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameOfferChange(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameOfferChangeQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>>
export type GetTelephonyBillingAccountServiceServiceNameOfferChangeQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameOfferChange<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameOfferChange<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameOfferChange<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountServiceServiceNameOfferChange<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameOfferChangeQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new offer change
 */
export const postTelephonyBillingAccountServiceServiceNameOfferChange = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountServiceServiceNameOfferChangeBody: PostTelephonyBillingAccountServiceServiceNameOfferChangeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/offerChange`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountServiceServiceNameOfferChangeBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountServiceServiceNameOfferChangeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameOfferChange>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameOfferChangeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameOfferChange>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameOfferChangeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameOfferChange>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameOfferChangeBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountServiceServiceNameOfferChange(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountServiceServiceNameOfferChangeMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameOfferChange>>>
    export type PostTelephonyBillingAccountServiceServiceNameOfferChangeMutationBody = PostTelephonyBillingAccountServiceServiceNameOfferChangeBody
    export type PostTelephonyBillingAccountServiceServiceNameOfferChangeMutationError = unknown

    /**
 * @summary Add a new offer change
 */
export const usePostTelephonyBillingAccountServiceServiceNameOfferChange = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameOfferChange>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameOfferChangeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountServiceServiceNameOfferChange>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountServiceServiceNameOfferChangeBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountServiceServiceNameOfferChangeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all available offer changes compatibilities
 */
export const getTelephonyBillingAccountServiceServiceNameOfferChanges = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyLineOfferOVH[]>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/offerChanges`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameOfferChangesQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/offerChanges`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameOfferChangesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameOfferChangesQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameOfferChanges(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameOfferChangesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>>
export type GetTelephonyBillingAccountServiceServiceNameOfferChangesQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameOfferChanges<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameOfferChanges<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameOfferChanges<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all available offer changes compatibilities
 */

export function useGetTelephonyBillingAccountServiceServiceNameOfferChanges<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferChanges>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameOfferChangesQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Operations on a telephony service's offer
 */
export const getTelephonyBillingAccountServiceServiceNameOfferTask = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameOfferTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/offerTask`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameOfferTaskQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameOfferTaskParams,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/offerTask`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameOfferTaskQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameOfferTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameOfferTaskQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameOfferTask(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameOfferTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>>
export type GetTelephonyBillingAccountServiceServiceNameOfferTaskQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameOfferTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountServiceServiceNameOfferTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameOfferTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameOfferTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameOfferTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameOfferTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Operations on a telephony service's offer
 */

export function useGetTelephonyBillingAccountServiceServiceNameOfferTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameOfferTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameOfferTaskQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId = (
    billingAccount: string,
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyOfferTaskOVH>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/offerTask/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdQueryKey = (billingAccount: string,
    serviceName: string,
    taskId: number,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/offerTask/${taskId}`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdQueryKey(billingAccount,serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId(billingAccount,serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>>
export type GetTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameOfferTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameOfferTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameOfferTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountServiceServiceNameOfferTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdQueryOptions(billingAccount,serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update the given pending action
 */
export const putTelephonyBillingAccountServiceServiceNameOfferTaskTaskId = (
    billingAccount: string,
    serviceName: string,
    taskId: number,
    telephonyOfferTaskOVH: NonReadonly<TelephonyOfferTaskOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/offerTask/${taskId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyOfferTaskOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError,{billingAccount: string;serviceName: string;taskId: number;data: NonReadonly<TelephonyOfferTaskOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError,{billingAccount: string;serviceName: string;taskId: number;data: NonReadonly<TelephonyOfferTaskOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, {billingAccount: string;serviceName: string;taskId: number;data: NonReadonly<TelephonyOfferTaskOVH>}> = (props) => {
          const {billingAccount,serviceName,taskId,data} = props ?? {};

          return  putTelephonyBillingAccountServiceServiceNameOfferTaskTaskId(billingAccount,serviceName,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>>
    export type PutTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdMutationBody = NonReadonly<TelephonyOfferTaskOVH>
    export type PutTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdMutationError = unknown

    /**
 * @summary Update the given pending action
 */
export const usePutTelephonyBillingAccountServiceServiceNameOfferTaskTaskId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>, TError,{billingAccount: string;serviceName: string;taskId: number;data: NonReadonly<TelephonyOfferTaskOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountServiceServiceNameOfferTaskTaskId>>,
        TError,
        {billingAccount: string;serviceName: string;taskId: number;data: NonReadonly<TelephonyOfferTaskOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Call delivery records of the previous month.
 */
export const getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/previousVoiceConsumption`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionParams,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/previousVoiceConsumption`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>>
export type GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Call delivery records of the previous month.
 */

export function useGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId = (
    billingAccount: string,
    serviceName: string,
    consumptionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPreviousVoiceConsumptionOVH>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/previousVoiceConsumption/${consumptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionIdQueryKey = (billingAccount: string,
    serviceName: string,
    consumptionId: number,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/previousVoiceConsumption/${consumptionId}`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionIdQueryKey(billingAccount,serviceName,consumptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId(billingAccount,serviceName,consumptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && consumptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>>
export type GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionIdQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionIdQueryOptions(billingAccount,serviceName,consumptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Call which could be repayable
 */
export const getTelephonyBillingAccountServiceServiceNameRepaymentConsumption = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/repaymentConsumption`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionParams,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/repaymentConsumption`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameRepaymentConsumption(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>>
export type GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameRepaymentConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameRepaymentConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameRepaymentConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Call which could be repayable
 */

export function useGetTelephonyBillingAccountServiceServiceNameRepaymentConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId = (
    billingAccount: string,
    serviceName: string,
    consumptionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyRepaymentConsumptionOVH>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/repaymentConsumption/${consumptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionIdQueryKey = (billingAccount: string,
    serviceName: string,
    consumptionId: number,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/repaymentConsumption/${consumptionId}`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionIdQueryKey(billingAccount,serviceName,consumptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId(billingAccount,serviceName,consumptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && consumptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>>
export type GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionIdQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionIdQueryOptions(billingAccount,serviceName,consumptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Operations on a telephony service
 */
export const getTelephonyBillingAccountServiceServiceNameTask = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameTaskQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameTaskParams,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameTaskQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameTask(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>>
export type GetTelephonyBillingAccountServiceServiceNameTaskQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountServiceServiceNameTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Operations on a telephony service
 */

export function useGetTelephonyBillingAccountServiceServiceNameTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameTaskQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountServiceServiceNameTaskTaskId = (
    billingAccount: string,
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameTaskTaskIdQueryKey = (billingAccount: string,
    serviceName: string,
    taskId: number,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/task/${taskId}`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameTaskTaskIdQueryKey(billingAccount,serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameTaskTaskId(billingAccount,serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>>
export type GetTelephonyBillingAccountServiceServiceNameTaskTaskIdQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountServiceServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameTaskTaskIdQueryOptions(billingAccount,serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Call delivery records.
 */
export const getTelephonyBillingAccountServiceServiceNameVoiceConsumption = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/voiceConsumption`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameVoiceConsumptionQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionParams,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/voiceConsumption`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameVoiceConsumptionQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameVoiceConsumptionQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameVoiceConsumption(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>>
export type GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameVoiceConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameVoiceConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameVoiceConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Call delivery records.
 */

export function useGetTelephonyBillingAccountServiceServiceNameVoiceConsumption<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameVoiceConsumptionQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId = (
    billingAccount: string,
    serviceName: string,
    consumptionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyVoiceConsumptionOVH>(
      {url: `/telephony/${billingAccount}/service/${serviceName}/voiceConsumption/${consumptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionIdQueryKey = (billingAccount: string,
    serviceName: string,
    consumptionId: number,) => {
    return [`/telephony/${billingAccount}/service/${serviceName}/voiceConsumption/${consumptionId}`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionIdQueryKey(billingAccount,serviceName,consumptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>> = ({ signal }) => getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId(billingAccount,serviceName,consumptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && consumptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>>
export type GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionIdQueryError = unknown


export function useGetTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    consumptionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionIdQueryOptions(billingAccount,serviceName,consumptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getTelephonyBillingAccountServiceInfos = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/telephony/${billingAccount}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountServiceInfosQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/serviceInfos`] as const;
    }

    
export const getGetTelephonyBillingAccountServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountServiceInfosQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>> = ({ signal }) => getTelephonyBillingAccountServiceInfos(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>>
export type GetTelephonyBillingAccountServiceInfosQueryError = unknown


export function useGetTelephonyBillingAccountServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetTelephonyBillingAccountServiceInfos<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountServiceInfosQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putTelephonyBillingAccountServiceInfos = (
    billingAccount: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceInfos>>, TError,{billingAccount: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceInfos>>, TError,{billingAccount: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceInfos>>, {billingAccount: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  putTelephonyBillingAccountServiceInfos(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceInfos>>>
    export type PutTelephonyBillingAccountServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutTelephonyBillingAccountServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutTelephonyBillingAccountServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountServiceInfos>>, TError,{billingAccount: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountServiceInfos>>,
        TError,
        {billingAccount: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get billing account softphone logo
 */
export const getTelephonyBillingAccountSoftphoneLogo = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySoftphoneLogoOVH>(
      {url: `/telephony/${billingAccount}/softphone/logo`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountSoftphoneLogoQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/softphone/logo`] as const;
    }

    
export const getGetTelephonyBillingAccountSoftphoneLogoQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountSoftphoneLogoQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>> = ({ signal }) => getTelephonyBillingAccountSoftphoneLogo(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountSoftphoneLogoQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>>
export type GetTelephonyBillingAccountSoftphoneLogoQueryError = unknown


export function useGetTelephonyBillingAccountSoftphoneLogo<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountSoftphoneLogo<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountSoftphoneLogo<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get billing account softphone logo
 */

export function useGetTelephonyBillingAccountSoftphoneLogo<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneLogo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountSoftphoneLogoQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Set billing account softphone logo
 */
export const putTelephonyBillingAccountSoftphoneLogo = (
    billingAccount: string,
    telephonySoftphoneLogoOVH: TelephonySoftphoneLogoOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<TelephonySoftphoneLogoOVH>(
      {url: `/telephony/${billingAccount}/softphone/logo`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonySoftphoneLogoOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountSoftphoneLogoMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountSoftphoneLogo>>, TError,{billingAccount: string;data: TelephonySoftphoneLogoOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountSoftphoneLogo>>, TError,{billingAccount: string;data: TelephonySoftphoneLogoOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountSoftphoneLogo>>, {billingAccount: string;data: TelephonySoftphoneLogoOVH}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  putTelephonyBillingAccountSoftphoneLogo(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountSoftphoneLogoMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountSoftphoneLogo>>>
    export type PutTelephonyBillingAccountSoftphoneLogoMutationBody = TelephonySoftphoneLogoOVH
    export type PutTelephonyBillingAccountSoftphoneLogoMutationError = unknown

    /**
 * @summary Set billing account softphone logo
 */
export const usePutTelephonyBillingAccountSoftphoneLogo = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountSoftphoneLogo>>, TError,{billingAccount: string;data: TelephonySoftphoneLogoOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountSoftphoneLogo>>,
        TError,
        {billingAccount: string;data: TelephonySoftphoneLogoOVH},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountSoftphoneLogoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get billing account softphone theme
 */
export const getTelephonyBillingAccountSoftphoneTheme = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySoftphoneThemeOVH>(
      {url: `/telephony/${billingAccount}/softphone/theme`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountSoftphoneThemeQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/softphone/theme`] as const;
    }

    
export const getGetTelephonyBillingAccountSoftphoneThemeQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountSoftphoneThemeQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>> = ({ signal }) => getTelephonyBillingAccountSoftphoneTheme(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountSoftphoneThemeQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>>
export type GetTelephonyBillingAccountSoftphoneThemeQueryError = unknown


export function useGetTelephonyBillingAccountSoftphoneTheme<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountSoftphoneTheme<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountSoftphoneTheme<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get billing account softphone theme
 */

export function useGetTelephonyBillingAccountSoftphoneTheme<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountSoftphoneTheme>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountSoftphoneThemeQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Set billing account softphone theme
 */
export const putTelephonyBillingAccountSoftphoneTheme = (
    billingAccount: string,
    telephonySoftphoneThemeInputOVH: TelephonySoftphoneThemeInputOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<TelephonySoftphoneThemeOVH>(
      {url: `/telephony/${billingAccount}/softphone/theme`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonySoftphoneThemeInputOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountSoftphoneThemeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountSoftphoneTheme>>, TError,{billingAccount: string;data: TelephonySoftphoneThemeInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountSoftphoneTheme>>, TError,{billingAccount: string;data: TelephonySoftphoneThemeInputOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountSoftphoneTheme>>, {billingAccount: string;data: TelephonySoftphoneThemeInputOVH}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  putTelephonyBillingAccountSoftphoneTheme(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountSoftphoneThemeMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountSoftphoneTheme>>>
    export type PutTelephonyBillingAccountSoftphoneThemeMutationBody = TelephonySoftphoneThemeInputOVH
    export type PutTelephonyBillingAccountSoftphoneThemeMutationError = unknown

    /**
 * @summary Set billing account softphone theme
 */
export const usePutTelephonyBillingAccountSoftphoneTheme = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountSoftphoneTheme>>, TError,{billingAccount: string;data: TelephonySoftphoneThemeInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountSoftphoneTheme>>,
        TError,
        {billingAccount: string;data: TelephonySoftphoneThemeInputOVH},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountSoftphoneThemeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Operations on a telephony billing account
 */
export const getTelephonyBillingAccountTask = (
    billingAccount: string,
    params?: GetTelephonyBillingAccountTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountTaskQueryKey = (billingAccount: string,
    params?: GetTelephonyBillingAccountTaskParams,) => {
    return [`/telephony/${billingAccount}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountTaskQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>, TError = unknown>(billingAccount: string,
    params?: GetTelephonyBillingAccountTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountTaskQueryKey(billingAccount,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>> = ({ signal }) => getTelephonyBillingAccountTask(billingAccount,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>>
export type GetTelephonyBillingAccountTaskQueryError = unknown


export function useGetTelephonyBillingAccountTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>, TError = unknown>(
 billingAccount: string,
    params: undefined |  GetTelephonyBillingAccountTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>, TError = unknown>(
 billingAccount: string,
    params?: GetTelephonyBillingAccountTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>, TError = unknown>(
 billingAccount: string,
    params?: GetTelephonyBillingAccountTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Operations on a telephony billing account
 */

export function useGetTelephonyBillingAccountTask<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>, TError = unknown>(
 billingAccount: string,
    params?: GetTelephonyBillingAccountTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountTaskQueryOptions(billingAccount,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountTaskTaskId = (
    billingAccount: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/telephony/${billingAccount}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountTaskTaskIdQueryKey = (billingAccount: string,
    taskId: number,) => {
    return [`/telephony/${billingAccount}/task/${taskId}`] as const;
    }

    
export const getGetTelephonyBillingAccountTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>, TError = unknown>(billingAccount: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountTaskTaskIdQueryKey(billingAccount,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>> = ({ signal }) => getTelephonyBillingAccountTaskTaskId(billingAccount,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>>
export type GetTelephonyBillingAccountTaskTaskIdQueryError = unknown


export function useGetTelephonyBillingAccountTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountTaskTaskId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>, TError = unknown>(
 billingAccount: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountTaskTaskIdQueryOptions(billingAccount,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Time conditions compatible numbers associated with this billing account
 */
export const getTelephonyBillingAccountTimeCondition = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/timeCondition`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountTimeConditionQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/timeCondition`] as const;
    }

    
export const getGetTelephonyBillingAccountTimeConditionQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountTimeConditionQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>> = ({ signal }) => getTelephonyBillingAccountTimeCondition(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountTimeConditionQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>>
export type GetTelephonyBillingAccountTimeConditionQueryError = unknown


export function useGetTelephonyBillingAccountTimeCondition<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTimeCondition<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTimeCondition<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Time conditions compatible numbers associated with this billing account
 */

export function useGetTelephonyBillingAccountTimeCondition<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeCondition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountTimeConditionQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountTimeConditionServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyGenericScreenOVH>(
      {url: `/telephony/${billingAccount}/timeCondition/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountTimeConditionServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/timeCondition/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountTimeConditionServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountTimeConditionServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>> = ({ signal }) => getTelephonyBillingAccountTimeConditionServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountTimeConditionServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>>
export type GetTelephonyBillingAccountTimeConditionServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountTimeConditionServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTimeConditionServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTimeConditionServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountTimeConditionServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountTimeConditionServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Rules for time conditions for this service
 */
export const getTelephonyBillingAccountTimeConditionServiceNameCondition = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/timeCondition/${serviceName}/condition`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountTimeConditionServiceNameConditionQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/timeCondition/${serviceName}/condition`] as const;
    }

    
export const getGetTelephonyBillingAccountTimeConditionServiceNameConditionQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountTimeConditionServiceNameConditionQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>> = ({ signal }) => getTelephonyBillingAccountTimeConditionServiceNameCondition(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountTimeConditionServiceNameConditionQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>>
export type GetTelephonyBillingAccountTimeConditionServiceNameConditionQueryError = unknown


export function useGetTelephonyBillingAccountTimeConditionServiceNameCondition<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTimeConditionServiceNameCondition<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTimeConditionServiceNameCondition<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Rules for time conditions for this service
 */

export function useGetTelephonyBillingAccountTimeConditionServiceNameCondition<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountTimeConditionServiceNameConditionQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new time condition rule
 */
export const postTelephonyBillingAccountTimeConditionServiceNameCondition = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountTimeConditionServiceNameConditionBody: PostTelephonyBillingAccountTimeConditionServiceNameConditionBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTimeConditionOVH>(
      {url: `/telephony/${billingAccount}/timeCondition/${serviceName}/condition`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountTimeConditionServiceNameConditionBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountTimeConditionServiceNameConditionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountTimeConditionServiceNameConditionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountTimeConditionServiceNameConditionBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountTimeConditionServiceNameCondition>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountTimeConditionServiceNameConditionBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountTimeConditionServiceNameCondition(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountTimeConditionServiceNameConditionMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountTimeConditionServiceNameCondition>>>
    export type PostTelephonyBillingAccountTimeConditionServiceNameConditionMutationBody = PostTelephonyBillingAccountTimeConditionServiceNameConditionBody
    export type PostTelephonyBillingAccountTimeConditionServiceNameConditionMutationError = unknown

    /**
 * @summary Create a new time condition rule
 */
export const usePostTelephonyBillingAccountTimeConditionServiceNameCondition = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountTimeConditionServiceNameCondition>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountTimeConditionServiceNameConditionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountTimeConditionServiceNameCondition>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountTimeConditionServiceNameConditionBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountTimeConditionServiceNameConditionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given screen list
 */
export const deleteTelephonyBillingAccountTimeConditionServiceNameConditionId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/timeCondition/${serviceName}/condition/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountTimeConditionServiceNameConditionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountTimeConditionServiceNameConditionId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountTimeConditionServiceNameConditionId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountTimeConditionServiceNameConditionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountTimeConditionServiceNameConditionId>>>
    
    export type DeleteTelephonyBillingAccountTimeConditionServiceNameConditionIdMutationError = unknown

    /**
 * @summary Delete the given screen list
 */
export const useDeleteTelephonyBillingAccountTimeConditionServiceNameConditionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountTimeConditionServiceNameConditionId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountTimeConditionServiceNameConditionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountTimeConditionServiceNameConditionId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTimeConditionOVH>(
      {url: `/telephony/${billingAccount}/timeCondition/${serviceName}/condition/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountTimeConditionServiceNameConditionIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/timeCondition/${serviceName}/condition/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountTimeConditionServiceNameConditionIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountTimeConditionServiceNameConditionIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>> = ({ signal }) => getTelephonyBillingAccountTimeConditionServiceNameConditionId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountTimeConditionServiceNameConditionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>>
export type GetTelephonyBillingAccountTimeConditionServiceNameConditionIdQueryError = unknown


export function useGetTelephonyBillingAccountTimeConditionServiceNameConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTimeConditionServiceNameConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTimeConditionServiceNameConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountTimeConditionServiceNameConditionId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountTimeConditionServiceNameConditionIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountTimeConditionServiceNameConditionId = (
    billingAccount: string,
    serviceName: string,
    id: number,
    telephonyTimeConditionOVH: NonReadonly<TelephonyTimeConditionOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/timeCondition/${serviceName}/condition/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyTimeConditionOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountTimeConditionServiceNameConditionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError,{billingAccount: string;serviceName: string;id: number;data: NonReadonly<TelephonyTimeConditionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError,{billingAccount: string;serviceName: string;id: number;data: NonReadonly<TelephonyTimeConditionOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountTimeConditionServiceNameConditionId>>, {billingAccount: string;serviceName: string;id: number;data: NonReadonly<TelephonyTimeConditionOVH>}> = (props) => {
          const {billingAccount,serviceName,id,data} = props ?? {};

          return  putTelephonyBillingAccountTimeConditionServiceNameConditionId(billingAccount,serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountTimeConditionServiceNameConditionIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountTimeConditionServiceNameConditionId>>>
    export type PutTelephonyBillingAccountTimeConditionServiceNameConditionIdMutationBody = NonReadonly<TelephonyTimeConditionOVH>
    export type PutTelephonyBillingAccountTimeConditionServiceNameConditionIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountTimeConditionServiceNameConditionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountTimeConditionServiceNameConditionId>>, TError,{billingAccount: string;serviceName: string;id: number;data: NonReadonly<TelephonyTimeConditionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountTimeConditionServiceNameConditionId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number;data: NonReadonly<TelephonyTimeConditionOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountTimeConditionServiceNameConditionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountTimeConditionServiceNameOptions = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTimeConditionOptionsOVH>(
      {url: `/telephony/${billingAccount}/timeCondition/${serviceName}/options`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountTimeConditionServiceNameOptionsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/timeCondition/${serviceName}/options`] as const;
    }

    
export const getGetTelephonyBillingAccountTimeConditionServiceNameOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountTimeConditionServiceNameOptionsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>> = ({ signal }) => getTelephonyBillingAccountTimeConditionServiceNameOptions(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountTimeConditionServiceNameOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>>
export type GetTelephonyBillingAccountTimeConditionServiceNameOptionsQueryError = unknown


export function useGetTelephonyBillingAccountTimeConditionServiceNameOptions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTimeConditionServiceNameOptions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTimeConditionServiceNameOptions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountTimeConditionServiceNameOptions<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountTimeConditionServiceNameOptionsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountTimeConditionServiceNameOptions = (
    billingAccount: string,
    serviceName: string,
    telephonyTimeConditionOptionsOVH: TelephonyTimeConditionOptionsOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/timeCondition/${serviceName}/options`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyTimeConditionOptionsOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountTimeConditionServiceNameOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError,{billingAccount: string;serviceName: string;data: TelephonyTimeConditionOptionsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError,{billingAccount: string;serviceName: string;data: TelephonyTimeConditionOptionsOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountTimeConditionServiceNameOptions>>, {billingAccount: string;serviceName: string;data: TelephonyTimeConditionOptionsOVH}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountTimeConditionServiceNameOptions(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountTimeConditionServiceNameOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountTimeConditionServiceNameOptions>>>
    export type PutTelephonyBillingAccountTimeConditionServiceNameOptionsMutationBody = TelephonyTimeConditionOptionsOVH
    export type PutTelephonyBillingAccountTimeConditionServiceNameOptionsMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountTimeConditionServiceNameOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountTimeConditionServiceNameOptions>>, TError,{billingAccount: string;serviceName: string;data: TelephonyTimeConditionOptionsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountTimeConditionServiceNameOptions>>,
        TError,
        {billingAccount: string;serviceName: string;data: TelephonyTimeConditionOptionsOVH},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountTimeConditionServiceNameOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Transfer security deposit between two billing accounts
 */
export const postTelephonyBillingAccountTransferSecurityDeposit = (
    billingAccount: string,
    postTelephonyBillingAccountTransferSecurityDepositBody: PostTelephonyBillingAccountTransferSecurityDepositBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/transferSecurityDeposit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountTransferSecurityDepositBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountTransferSecurityDepositMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountTransferSecurityDeposit>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountTransferSecurityDepositBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountTransferSecurityDeposit>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountTransferSecurityDepositBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountTransferSecurityDeposit>>, {billingAccount: string;data: PostTelephonyBillingAccountTransferSecurityDepositBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postTelephonyBillingAccountTransferSecurityDeposit(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountTransferSecurityDepositMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountTransferSecurityDeposit>>>
    export type PostTelephonyBillingAccountTransferSecurityDepositMutationBody = PostTelephonyBillingAccountTransferSecurityDepositBody
    export type PostTelephonyBillingAccountTransferSecurityDepositMutationError = unknown

    /**
 * @summary Transfer security deposit between two billing accounts
 */
export const usePostTelephonyBillingAccountTransferSecurityDeposit = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountTransferSecurityDeposit>>, TError,{billingAccount: string;data: PostTelephonyBillingAccountTransferSecurityDepositBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountTransferSecurityDeposit>>,
        TError,
        {billingAccount: string;data: PostTelephonyBillingAccountTransferSecurityDepositBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountTransferSecurityDepositMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Trunk associated with this billing account
 */
export const getTelephonyBillingAccountTrunk = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/trunk`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountTrunkQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/trunk`] as const;
    }

    
export const getGetTelephonyBillingAccountTrunkQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountTrunkQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>> = ({ signal }) => getTelephonyBillingAccountTrunk(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountTrunkQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>>
export type GetTelephonyBillingAccountTrunkQueryError = unknown


export function useGetTelephonyBillingAccountTrunk<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTrunk<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTrunk<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Trunk associated with this billing account
 */

export function useGetTelephonyBillingAccountTrunk<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountTrunkQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountTrunkServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTrunkOVH>(
      {url: `/telephony/${billingAccount}/trunk/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountTrunkServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/trunk/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountTrunkServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountTrunkServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>> = ({ signal }) => getTelephonyBillingAccountTrunkServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountTrunkServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>>
export type GetTelephonyBillingAccountTrunkServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountTrunkServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTrunkServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTrunkServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountTrunkServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountTrunkServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Determine the best channels packs combination for a given channel quantity
 */
export const getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition = (
    billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTrunkSimultaneousPacksRepartitionOVH>(
      {url: `/telephony/${billingAccount}/trunk/${serviceName}/channelsPacksRepartition`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionQueryKey = (billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionParams,) => {
    return [`/telephony/${billingAccount}/trunk/${serviceName}/channelsPacksRepartition`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>> = ({ signal }) => getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>>
export type GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionQueryError = unknown


export function useGetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Determine the best channels packs combination for a given channel quantity
 */

export function useGetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary External displayed number linked to this trunk
 */
export const getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<PhoneNumberOVH[]>(
      {url: `/telephony/${billingAccount}/trunk/${serviceName}/externalDisplayedNumber`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/trunk/${serviceName}/externalDisplayedNumber`] as const;
    }

    
export const getGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>> = ({ signal }) => getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>>
export type GetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberQueryError = unknown


export function useGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary External displayed number linked to this trunk
 */

export function useGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary External displayed number creation for a given trunk
 */
export const postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberBody: PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTrunkExternalDisplayedNumberOVH>(
      {url: `/telephony/${billingAccount}/trunk/${serviceName}/externalDisplayedNumber`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>>
    export type PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberMutationBody = PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberBody
    export type PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberMutationError = unknown

    /**
 * @summary External displayed number creation for a given trunk
 */
export const usePostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumber>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an external displayed number for a given trunk
 */
export const deleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber = (
    billingAccount: string,
    serviceName: string,
    number: PhoneNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/trunk/${serviceName}/externalDisplayedNumber/${number}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError,{billingAccount: string;serviceName: string;number: PhoneNumberOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError,{billingAccount: string;serviceName: string;number: PhoneNumberOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, {billingAccount: string;serviceName: string;number: PhoneNumberOVH}> = (props) => {
          const {billingAccount,serviceName,number} = props ?? {};

          return  deleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber(billingAccount,serviceName,number,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>>
    
    export type DeleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberMutationError = unknown

    /**
 * @summary Delete an external displayed number for a given trunk
 */
export const useDeleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError,{billingAccount: string;serviceName: string;number: PhoneNumberOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>,
        TError,
        {billingAccount: string;serviceName: string;number: PhoneNumberOVH},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber = (
    billingAccount: string,
    serviceName: string,
    number: PhoneNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTrunkExternalDisplayedNumberOVH>(
      {url: `/telephony/${billingAccount}/trunk/${serviceName}/externalDisplayedNumber/${number}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberQueryKey = (billingAccount: string,
    serviceName: string,
    number: PhoneNumberOVH,) => {
    return [`/telephony/${billingAccount}/trunk/${serviceName}/externalDisplayedNumber/${number}`] as const;
    }

    
export const getGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    number: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberQueryKey(billingAccount,serviceName,number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>> = ({ signal }) => getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber(billingAccount,serviceName,number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>>
export type GetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberQueryError = unknown


export function useGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    number: PhoneNumberOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    number: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    number: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    number: PhoneNumberOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberQueryOptions(billingAccount,serviceName,number,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate a phone call for validation. Returned validation code should be typed when asked.
 */
export const postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidate = (
    billingAccount: string,
    serviceName: string,
    number: PhoneNumberOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTrunkExternalDisplayedNumberValidationOVH>(
      {url: `/telephony/${billingAccount}/trunk/${serviceName}/externalDisplayedNumber/${number}/validate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidate>>, TError,{billingAccount: string;serviceName: string;number: PhoneNumberOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidate>>, TError,{billingAccount: string;serviceName: string;number: PhoneNumberOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidate>>, {billingAccount: string;serviceName: string;number: PhoneNumberOVH}> = (props) => {
          const {billingAccount,serviceName,number} = props ?? {};

          return  postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidate(billingAccount,serviceName,number,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidateMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidate>>>
    
    export type PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidateMutationError = unknown

    /**
 * @summary Generate a phone call for validation. Returned validation code should be typed when asked.
 */
export const usePostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidate>>, TError,{billingAccount: string;serviceName: string;number: PhoneNumberOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidate>>,
        TError,
        {billingAccount: string;serviceName: string;number: PhoneNumberOVH},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Voicemails associated with this billing account
 */
export const getTelephonyBillingAccountVoicemail = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/voicemail`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVoicemailQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/voicemail`] as const;
    }

    
export const getGetTelephonyBillingAccountVoicemailQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVoicemailQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>> = ({ signal }) => getTelephonyBillingAccountVoicemail(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVoicemailQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>>
export type GetTelephonyBillingAccountVoicemailQueryError = unknown


export function useGetTelephonyBillingAccountVoicemail<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemail<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemail<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Voicemails associated with this billing account
 */

export function useGetTelephonyBillingAccountVoicemail<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVoicemailQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountVoicemailServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyVoicemailOVH>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVoicemailServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/voicemail/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountVoicemailServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVoicemailServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>> = ({ signal }) => getTelephonyBillingAccountVoicemailServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVoicemailServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>>
export type GetTelephonyBillingAccountVoicemailServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountVoicemailServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountVoicemailServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVoicemailServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountVoicemailServiceName = (
    billingAccount: string,
    serviceName: string,
    telephonyVoicemailOVH: NonReadonly<TelephonyVoicemailOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyVoicemailOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountVoicemailServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountVoicemailServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyVoicemailOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountVoicemailServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyVoicemailOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountVoicemailServiceName>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyVoicemailOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountVoicemailServiceName(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountVoicemailServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountVoicemailServiceName>>>
    export type PutTelephonyBillingAccountVoicemailServiceNameMutationBody = NonReadonly<TelephonyVoicemailOVH>
    export type PutTelephonyBillingAccountVoicemailServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountVoicemailServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountVoicemailServiceName>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyVoicemailOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountVoicemailServiceName>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyVoicemailOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountVoicemailServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Voicemail directory messages
 */
export const getTelephonyBillingAccountVoicemailServiceNameDirectories = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountVoicemailServiceNameDirectoriesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/directories`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVoicemailServiceNameDirectoriesQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountVoicemailServiceNameDirectoriesParams,) => {
    return [`/telephony/${billingAccount}/voicemail/${serviceName}/directories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountVoicemailServiceNameDirectoriesQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountVoicemailServiceNameDirectoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVoicemailServiceNameDirectoriesQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>> = ({ signal }) => getTelephonyBillingAccountVoicemailServiceNameDirectories(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVoicemailServiceNameDirectoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>>
export type GetTelephonyBillingAccountVoicemailServiceNameDirectoriesQueryError = unknown


export function useGetTelephonyBillingAccountVoicemailServiceNameDirectories<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountVoicemailServiceNameDirectoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameDirectories<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountVoicemailServiceNameDirectoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameDirectories<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountVoicemailServiceNameDirectoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Voicemail directory messages
 */

export function useGetTelephonyBillingAccountVoicemailServiceNameDirectories<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountVoicemailServiceNameDirectoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVoicemailServiceNameDirectoriesQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the given voicemail message
 */
export const deleteTelephonyBillingAccountVoicemailServiceNameDirectoriesId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/directories/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountVoicemailServiceNameDirectoriesId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>>
    
    export type DeleteTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMutationError = unknown

    /**
 * @summary Delete the given voicemail message
 */
export const useDeleteTelephonyBillingAccountVoicemailServiceNameDirectoriesId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountVoicemailServiceNameDirectoriesId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyVoicemailMessagesOVH>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/directories/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/voicemail/${serviceName}/directories/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>> = ({ signal }) => getTelephonyBillingAccountVoicemailServiceNameDirectoriesId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>>
export type GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdQueryError = unknown


export function useGetTelephonyBillingAccountVoicemailServiceNameDirectoriesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameDirectoriesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameDirectoriesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountVoicemailServiceNameDirectoriesId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a url to download the sound file
 */
export const getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload = (
    billingAccount: string,
    serviceName: string,
    id: number,
    params?: GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPcsFileOVH>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/directories/${id}/download`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,
    params?: GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadParams,) => {
    return [`/telephony/${billingAccount}/voicemail/${serviceName}/directories/${id}/download`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number,
    params?: GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadQueryKey(billingAccount,serviceName,id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>> = ({ signal }) => getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload(billingAccount,serviceName,id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>>
export type GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadQueryError = unknown


export function useGetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number,
    params: undefined |  GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number,
    params?: GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number,
    params?: GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a url to download the sound file
 */

export function useGetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number,
    params?: GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadQueryOptions(billingAccount,serviceName,id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Move the message to another directory
 */
export const postTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMove = (
    billingAccount: string,
    serviceName: string,
    id: number,
    postTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveBody: PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/directories/${id}/move`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMove>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMove>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMove>>, {billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveBody}> = (props) => {
          const {billingAccount,serviceName,id,data} = props ?? {};

          return  postTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMove(billingAccount,serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMove>>>
    export type PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveMutationBody = PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveBody
    export type PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveMutationError = unknown

    /**
 * @summary Move the message to another directory
 */
export const usePostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMove>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMove>>,
        TError,
        {billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Voicemail greeting message properties
 */
export const getTelephonyBillingAccountVoicemailServiceNameGreetings = (
    billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountVoicemailServiceNameGreetingsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/greetings`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVoicemailServiceNameGreetingsQueryKey = (billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountVoicemailServiceNameGreetingsParams,) => {
    return [`/telephony/${billingAccount}/voicemail/${serviceName}/greetings`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountVoicemailServiceNameGreetingsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountVoicemailServiceNameGreetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVoicemailServiceNameGreetingsQueryKey(billingAccount,serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>> = ({ signal }) => getTelephonyBillingAccountVoicemailServiceNameGreetings(billingAccount,serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVoicemailServiceNameGreetingsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>>
export type GetTelephonyBillingAccountVoicemailServiceNameGreetingsQueryError = unknown


export function useGetTelephonyBillingAccountVoicemailServiceNameGreetings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params: undefined |  GetTelephonyBillingAccountVoicemailServiceNameGreetingsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameGreetings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountVoicemailServiceNameGreetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameGreetings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountVoicemailServiceNameGreetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Voicemail greeting message properties
 */

export function useGetTelephonyBillingAccountVoicemailServiceNameGreetings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    params?: GetTelephonyBillingAccountVoicemailServiceNameGreetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVoicemailServiceNameGreetingsQueryOptions(billingAccount,serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Upload a new sound for a specific greeting. Return a task id.
 */
export const postTelephonyBillingAccountVoicemailServiceNameGreetings = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountVoicemailServiceNameGreetingsBody: PostTelephonyBillingAccountVoicemailServiceNameGreetingsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/greetings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountVoicemailServiceNameGreetingsBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountVoicemailServiceNameGreetingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameGreetingsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameGreetingsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameGreetings>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameGreetingsBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountVoicemailServiceNameGreetings(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountVoicemailServiceNameGreetingsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameGreetings>>>
    export type PostTelephonyBillingAccountVoicemailServiceNameGreetingsMutationBody = PostTelephonyBillingAccountVoicemailServiceNameGreetingsBody
    export type PostTelephonyBillingAccountVoicemailServiceNameGreetingsMutationError = unknown

    /**
 * @summary Upload a new sound for a specific greeting. Return a task id.
 */
export const usePostTelephonyBillingAccountVoicemailServiceNameGreetings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameGreetings>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameGreetingsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameGreetings>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameGreetingsBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountVoicemailServiceNameGreetingsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the customized greeting
 */
export const deleteTelephonyBillingAccountVoicemailServiceNameGreetingsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/greetings/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTelephonyBillingAccountVoicemailServiceNameGreetingsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, {billingAccount: string;serviceName: string;id: number}> = (props) => {
          const {billingAccount,serviceName,id} = props ?? {};

          return  deleteTelephonyBillingAccountVoicemailServiceNameGreetingsId(billingAccount,serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTelephonyBillingAccountVoicemailServiceNameGreetingsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTelephonyBillingAccountVoicemailServiceNameGreetingsId>>>
    
    export type DeleteTelephonyBillingAccountVoicemailServiceNameGreetingsIdMutationError = unknown

    /**
 * @summary Delete the customized greeting
 */
export const useDeleteTelephonyBillingAccountVoicemailServiceNameGreetingsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError,{billingAccount: string;serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTelephonyBillingAccountVoicemailServiceNameGreetingsId>>,
        TError,
        {billingAccount: string;serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTelephonyBillingAccountVoicemailServiceNameGreetingsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountVoicemailServiceNameGreetingsId = (
    billingAccount: string,
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyVoicemailGreetingsOVH>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/greetings/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVoicemailServiceNameGreetingsIdQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,) => {
    return [`/telephony/${billingAccount}/voicemail/${serviceName}/greetings/${id}`] as const;
    }

    
export const getGetTelephonyBillingAccountVoicemailServiceNameGreetingsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVoicemailServiceNameGreetingsIdQueryKey(billingAccount,serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>> = ({ signal }) => getTelephonyBillingAccountVoicemailServiceNameGreetingsId(billingAccount,serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>>
export type GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdQueryError = unknown


export function useGetTelephonyBillingAccountVoicemailServiceNameGreetingsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameGreetingsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameGreetingsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountVoicemailServiceNameGreetingsId<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVoicemailServiceNameGreetingsIdQueryOptions(billingAccount,serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a url to download the sound file
 */
export const getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload = (
    billingAccount: string,
    serviceName: string,
    id: number,
    params?: GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPcsFileOVH>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/greetings/${id}/download`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadQueryKey = (billingAccount: string,
    serviceName: string,
    id: number,
    params?: GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadParams,) => {
    return [`/telephony/${billingAccount}/voicemail/${serviceName}/greetings/${id}/download`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>, TError = unknown>(billingAccount: string,
    serviceName: string,
    id: number,
    params?: GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadQueryKey(billingAccount,serviceName,id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>> = ({ signal }) => getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload(billingAccount,serviceName,id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>>
export type GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadQueryError = unknown


export function useGetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number,
    params: undefined |  GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number,
    params?: GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number,
    params?: GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a url to download the sound file
 */

export function useGetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>, TError = unknown>(
 billingAccount: string,
    serviceName: string,
    id: number,
    params?: GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadQueryOptions(billingAccount,serviceName,id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Move the message to another directory
 */
export const postTelephonyBillingAccountVoicemailServiceNameGreetingsIdMove = (
    billingAccount: string,
    serviceName: string,
    id: number,
    postTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveBody: PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/greetings/${id}/move`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameGreetingsIdMove>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameGreetingsIdMove>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameGreetingsIdMove>>, {billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveBody}> = (props) => {
          const {billingAccount,serviceName,id,data} = props ?? {};

          return  postTelephonyBillingAccountVoicemailServiceNameGreetingsIdMove(billingAccount,serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameGreetingsIdMove>>>
    export type PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveMutationBody = PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveBody
    export type PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveMutationError = unknown

    /**
 * @summary Move the message to another directory
 */
export const usePostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameGreetingsIdMove>>, TError,{billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameGreetingsIdMove>>,
        TError,
        {billingAccount: string;serviceName: string;id: number;data: PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the voicemail on a new version to manager greetings, directories and extra settings.
 */
export const postTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersion = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/migrateOnNewVersion`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersion>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersion>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersion>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersion(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersionMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersion>>>
    
    export type PostTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersionMutationError = unknown

    /**
 * @summary Change the voicemail on a new version to manager greetings, directories and extra settings.
 */
export const usePostTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersion = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersion>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersion>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountVoicemailServiceNameSettings = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyVoicemailPropertiesOVH>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/settings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVoicemailServiceNameSettingsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/voicemail/${serviceName}/settings`] as const;
    }

    
export const getGetTelephonyBillingAccountVoicemailServiceNameSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVoicemailServiceNameSettingsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>> = ({ signal }) => getTelephonyBillingAccountVoicemailServiceNameSettings(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVoicemailServiceNameSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>>
export type GetTelephonyBillingAccountVoicemailServiceNameSettingsQueryError = unknown


export function useGetTelephonyBillingAccountVoicemailServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountVoicemailServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVoicemailServiceNameSettingsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountVoicemailServiceNameSettings = (
    billingAccount: string,
    serviceName: string,
    telephonyVoicemailPropertiesOVH: NonReadonly<TelephonyVoicemailPropertiesOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/settings`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyVoicemailPropertiesOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountVoicemailServiceNameSettingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountVoicemailServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyVoicemailPropertiesOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountVoicemailServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyVoicemailPropertiesOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountVoicemailServiceNameSettings>>, {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyVoicemailPropertiesOVH>}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountVoicemailServiceNameSettings(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountVoicemailServiceNameSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountVoicemailServiceNameSettings>>>
    export type PutTelephonyBillingAccountVoicemailServiceNameSettingsMutationBody = NonReadonly<TelephonyVoicemailPropertiesOVH>
    export type PutTelephonyBillingAccountVoicemailServiceNameSettingsMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountVoicemailServiceNameSettings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountVoicemailServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: NonReadonly<TelephonyVoicemailPropertiesOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountVoicemailServiceNameSettings>>,
        TError,
        {billingAccount: string;serviceName: string;data: NonReadonly<TelephonyVoicemailPropertiesOVH>},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountVoicemailServiceNameSettingsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the voicemail password. It must be 4 digit
 */
export const postTelephonyBillingAccountVoicemailServiceNameSettingsChangePassword = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordBody: PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/settings/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameSettingsChangePassword>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameSettingsChangePassword>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameSettingsChangePassword>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountVoicemailServiceNameSettingsChangePassword(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameSettingsChangePassword>>>
    export type PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordMutationBody = PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordBody
    export type PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordMutationError = unknown

    /**
 * @summary Change the voicemail password. It must be 4 digit
 */
export const usePostTelephonyBillingAccountVoicemailServiceNameSettingsChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameSettingsChangePassword>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameSettingsChangePassword>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable/Enable voicemail. Available only if the line has fax capabilities
 */
export const postTelephonyBillingAccountVoicemailServiceNameSettingsChangeRouting = (
    billingAccount: string,
    serviceName: string,
    postTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingBody: PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/settings/changeRouting`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingBody, signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameSettingsChangeRouting>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameSettingsChangeRouting>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameSettingsChangeRouting>>, {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingBody}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  postTelephonyBillingAccountVoicemailServiceNameSettingsChangeRouting(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameSettingsChangeRouting>>>
    export type PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingMutationBody = PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingBody
    export type PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingMutationError = unknown

    /**
 * @summary Disable/Enable voicemail. Available only if the line has fax capabilities
 */
export const usePostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRouting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameSettingsChangeRouting>>, TError,{billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountVoicemailServiceNameSettingsChangeRouting>>,
        TError,
        {billingAccount: string;serviceName: string;data: PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingBody},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the status of the voicemail. Available only if the line has fax capabilities
 */
export const getTelephonyBillingAccountVoicemailServiceNameSettingsRouting = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyVoicefaxRoutingEnumOVH>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/settings/routing`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVoicemailServiceNameSettingsRoutingQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/voicemail/${serviceName}/settings/routing`] as const;
    }

    
export const getGetTelephonyBillingAccountVoicemailServiceNameSettingsRoutingQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVoicemailServiceNameSettingsRoutingQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>> = ({ signal }) => getTelephonyBillingAccountVoicemailServiceNameSettingsRouting(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVoicemailServiceNameSettingsRoutingQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>>
export type GetTelephonyBillingAccountVoicemailServiceNameSettingsRoutingQueryError = unknown


export function useGetTelephonyBillingAccountVoicemailServiceNameSettingsRouting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameSettingsRouting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameSettingsRouting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the status of the voicemail. Available only if the line has fax capabilities
 */

export function useGetTelephonyBillingAccountVoicemailServiceNameSettingsRouting<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsRouting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVoicemailServiceNameSettingsRoutingQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get number for internal and external voicemail
 */
export const getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyVoicemailNumbersOVH>(
      {url: `/telephony/${billingAccount}/voicemail/${serviceName}/settings/voicemailNumbers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbersQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/voicemail/${serviceName}/settings/voicemailNumbers`] as const;
    }

    
export const getGetTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbersQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbersQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>> = ({ signal }) => getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbersQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>>
export type GetTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbersQueryError = unknown


export function useGetTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get number for internal and external voicemail
 */

export function useGetTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbersQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Vxml numbers associated with this billing account
 */
export const getTelephonyBillingAccountVxml = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/telephony/${billingAccount}/vxml`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVxmlQueryKey = (billingAccount: string,) => {
    return [`/telephony/${billingAccount}/vxml`] as const;
    }

    
export const getGetTelephonyBillingAccountVxmlQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVxmlQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>> = ({ signal }) => getTelephonyBillingAccountVxml(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVxmlQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>>
export type GetTelephonyBillingAccountVxmlQueryError = unknown


export function useGetTelephonyBillingAccountVxml<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVxml<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVxml<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Vxml numbers associated with this billing account
 */

export function useGetTelephonyBillingAccountVxml<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxml>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVxmlQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountVxmlServiceName = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyVxmlOVH>(
      {url: `/telephony/${billingAccount}/vxml/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVxmlServiceNameQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/vxml/${serviceName}`] as const;
    }

    
export const getGetTelephonyBillingAccountVxmlServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVxmlServiceNameQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>> = ({ signal }) => getTelephonyBillingAccountVxmlServiceName(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVxmlServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>>
export type GetTelephonyBillingAccountVxmlServiceNameQueryError = unknown


export function useGetTelephonyBillingAccountVxmlServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVxmlServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVxmlServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountVxmlServiceName<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVxmlServiceNameQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getTelephonyBillingAccountVxmlServiceNameSettings = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyVxmlPropertiesOVH>(
      {url: `/telephony/${billingAccount}/vxml/${serviceName}/settings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTelephonyBillingAccountVxmlServiceNameSettingsQueryKey = (billingAccount: string,
    serviceName: string,) => {
    return [`/telephony/${billingAccount}/vxml/${serviceName}/settings`] as const;
    }

    
export const getGetTelephonyBillingAccountVxmlServiceNameSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>, TError = unknown>(billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTelephonyBillingAccountVxmlServiceNameSettingsQueryKey(billingAccount,serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>> = ({ signal }) => getTelephonyBillingAccountVxmlServiceNameSettings(billingAccount,serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount && serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTelephonyBillingAccountVxmlServiceNameSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>>
export type GetTelephonyBillingAccountVxmlServiceNameSettingsQueryError = unknown


export function useGetTelephonyBillingAccountVxmlServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVxmlServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTelephonyBillingAccountVxmlServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetTelephonyBillingAccountVxmlServiceNameSettings<TData = Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>, TError = unknown>(
 billingAccount: string,
    serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTelephonyBillingAccountVxmlServiceNameSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTelephonyBillingAccountVxmlServiceNameSettingsQueryOptions(billingAccount,serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putTelephonyBillingAccountVxmlServiceNameSettings = (
    billingAccount: string,
    serviceName: string,
    telephonyVxmlPropertiesOVH: TelephonyVxmlPropertiesOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/telephony/${billingAccount}/vxml/${serviceName}/settings`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyVxmlPropertiesOVH
    },
      options);
    }
  


export const getPutTelephonyBillingAccountVxmlServiceNameSettingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountVxmlServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: TelephonyVxmlPropertiesOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountVxmlServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: TelephonyVxmlPropertiesOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTelephonyBillingAccountVxmlServiceNameSettings>>, {billingAccount: string;serviceName: string;data: TelephonyVxmlPropertiesOVH}> = (props) => {
          const {billingAccount,serviceName,data} = props ?? {};

          return  putTelephonyBillingAccountVxmlServiceNameSettings(billingAccount,serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTelephonyBillingAccountVxmlServiceNameSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof putTelephonyBillingAccountVxmlServiceNameSettings>>>
    export type PutTelephonyBillingAccountVxmlServiceNameSettingsMutationBody = TelephonyVxmlPropertiesOVH
    export type PutTelephonyBillingAccountVxmlServiceNameSettingsMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutTelephonyBillingAccountVxmlServiceNameSettings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTelephonyBillingAccountVxmlServiceNameSettings>>, TError,{billingAccount: string;serviceName: string;data: TelephonyVxmlPropertiesOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTelephonyBillingAccountVxmlServiceNameSettings>>,
        TError,
        {billingAccount: string;serviceName: string;data: TelephonyVxmlPropertiesOVH},
        TContext
      > => {

      const mutationOptions = getPutTelephonyBillingAccountVxmlServiceNameSettingsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate a temporary url to retrieve device logs
 */
export const postTelephonyBillingAccountVxmlServiceNameSettingsLogs = (
    billingAccount: string,
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTemporaryLogsLinkOVH>(
      {url: `/telephony/${billingAccount}/vxml/${serviceName}/settings/logs`, method: 'POST', signal
    },
      options);
    }
  


export const getPostTelephonyBillingAccountVxmlServiceNameSettingsLogsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVxmlServiceNameSettingsLogs>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVxmlServiceNameSettingsLogs>>, TError,{billingAccount: string;serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTelephonyBillingAccountVxmlServiceNameSettingsLogs>>, {billingAccount: string;serviceName: string}> = (props) => {
          const {billingAccount,serviceName} = props ?? {};

          return  postTelephonyBillingAccountVxmlServiceNameSettingsLogs(billingAccount,serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTelephonyBillingAccountVxmlServiceNameSettingsLogsMutationResult = NonNullable<Awaited<ReturnType<typeof postTelephonyBillingAccountVxmlServiceNameSettingsLogs>>>
    
    export type PostTelephonyBillingAccountVxmlServiceNameSettingsLogsMutationError = unknown

    /**
 * @summary Generate a temporary url to retrieve device logs
 */
export const usePostTelephonyBillingAccountVxmlServiceNameSettingsLogs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTelephonyBillingAccountVxmlServiceNameSettingsLogs>>, TError,{billingAccount: string;serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTelephonyBillingAccountVxmlServiceNameSettingsLogs>>,
        TError,
        {billingAccount: string;serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostTelephonyBillingAccountVxmlServiceNameSettingsLogsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

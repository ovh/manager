/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingBody = {
  /** Activate or Desactivate voicemail on the line */
  routing: TelephonyVoicefaxRoutingEnumOVH;
};

export type PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordBody = {
  /** The password */
  password: string;
};

export type PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveBody = {
  /** Greeting voicemail directory */
  dir: TelephonyVoicemailMessageFolderGreetingEnumOVH;
};

export type GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadParams = {
/**
 * File format wanted
 */
format?: TelephonyServiceVoicemailAudioFormatEnumOVH;
};

export type PostTelephonyBillingAccountVoicemailServiceNameGreetingsBody = {
  /** Greeting voicemail directory */
  dir: TelephonyVoicemailMessageFolderGreetingEnumOVH;
  /** Get the /me/document uuid generated */
  documentId: string;
};

export type GetTelephonyBillingAccountVoicemailServiceNameGreetingsParams = {
/**
 * Filter the value of dir property (=)
 */
dir?: TelephonyVoicemailMessageFolderGreetingEnumOVH;
};

export type PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveBody = {
  /** Greeting voicemail directory */
  dir: TelephonyVoicemailMessageFolderDirectoryEnumOVH;
};

export type GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadParams = {
/**
 * File format wanted
 */
format?: TelephonyServiceVoicemailAudioFormatEnumOVH;
};

export type GetTelephonyBillingAccountVoicemailServiceNameDirectoriesParams = {
/**
 * Filter the value of dir property (=)
 */
dir?: TelephonyVoicemailMessageFolderDirectoryEnumOVH;
};

export type PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberBody = {
  /** External displayed number auto-validation. Only available for partner. Must be owner of the number. */
  autoValidation?: boolean;
  /** External displayed number to create, in international format */
  number: PhoneNumberOVH;
};

export type GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionParams = {
/**
 * Channels quantity to get the best repartition on
 */
quantity: number;
};

export type PostTelephonyBillingAccountTransferSecurityDepositBody = {
  /** The amount, in euros, you want to transfer */
  amount: number;
  /** The destination billing account */
  billingAccountDestination: string;
};

export type PostTelephonyBillingAccountTimeConditionServiceNameConditionBody = {
  /** The day of the time condition */
  day: TelephonyTimeConditionsDayEnumOVH;
  /** The hour where the time condition begins (format : hhmm) */
  hourBegin: string;
  /** The hour where the time condition ends (format : hhmm) */
  hourEnd: string;
  /** The policy */
  policy: TelephonyTimeConditionsPolicyEnumOVH;
};

export type GetTelephonyBillingAccountTaskParams = {
/**
 * Filter the value of action property (=)
 */
action?: string;
/**
 * Filter the value of serviceType property (=)
 */
serviceType?: string;
/**
 * Filter the value of status property (=)
 */
status?: TelephonyTaskStatusEnumOVH;
};

export type GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionParams = {
/**
 * Filter the value of creationDatetime property (>=)
 */
'creationDatetime.from'?: string;
/**
 * Filter the value of creationDatetime property (<=)
 */
'creationDatetime.to'?: string;
/**
 * Filter the value of destinationType property (=)
 */
destinationType?: TelephonyVoiceConsumptionDestinationTypeEnumOVH;
/**
 * Filter the value of planType property (=)
 */
planType?: TelephonyVoiceConsumptionPlanTypeEnumOVH;
/**
 * Filter the value of wayType property (=)
 */
wayType?: TelephonyVoiceConsumptionWayTypeEnumOVH;
};

export type GetTelephonyBillingAccountServiceServiceNameTaskParams = {
/**
 * Filter the value of action property (=)
 */
action?: string;
/**
 * Filter the value of serviceType property (=)
 */
serviceType?: string;
/**
 * Filter the value of status property (=)
 */
status?: TelephonyTaskStatusEnumOVH;
};

export type GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionParams = {
/**
 * Filter the value of creationDatetime property (>=)
 */
'creationDatetime.from'?: string;
/**
 * Filter the value of creationDatetime property (<=)
 */
'creationDatetime.to'?: string;
};

export type GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionParams = {
/**
 * Filter the value of creationDatetime property (>=)
 */
'creationDatetime.from'?: string;
/**
 * Filter the value of creationDatetime property (<=)
 */
'creationDatetime.to'?: string;
/**
 * Filter the value of destinationType property (=)
 */
destinationType?: TelephonyVoiceConsumptionDestinationTypeEnumOVH;
/**
 * Filter the value of planType property (=)
 */
planType?: TelephonyVoiceConsumptionPlanTypeEnumOVH;
/**
 * Filter the value of wayType property (=)
 */
wayType?: TelephonyVoiceConsumptionWayTypeEnumOVH;
};

export type GetTelephonyBillingAccountServiceServiceNameOfferTaskParams = {
/**
 * Filter the value of action property (=)
 */
action?: TelephonyOfferTaskActionEnumOVH;
/**
 * Filter the value of status property (=)
 */
status?: TelephonyTaskStatusEnumOVH;
/**
 * Filter the value of type property (=)
 */
type?: TelephonyOfferTaskTypeEnumOVH;
};

export type PostTelephonyBillingAccountServiceServiceNameOfferChangeBody = {
  /** The future offer */
  offer: string;
};

export type GetTelephonyBillingAccountServiceServiceNameFaxConsumptionParams = {
/**
 * Filter the value of creationDatetime property (>=)
 */
'creationDatetime.from'?: string;
/**
 * Filter the value of creationDatetime property (<=)
 */
'creationDatetime.to'?: string;
/**
 * Filter the value of wayType property (=)
 */
wayType?: TelephonyFaxConsumptionWayTypeEnumOVH;
};

export type PostTelephonyBillingAccountServiceServiceNameEventTokenBody = {
  /** Time to live in seconds for the token */
  expiration: TelephonyTokenExpirationEnumOVH;
};

export type GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeParams = {
apeCode: string;
};

export type PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsBody = {
  /** Entreprise number to fetch informations from */
  entrepriseNumber: string;
};

export type PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountBody = {
  /** Billing account destination target */
  billingAccountDestination: string;
};

export type DeleteTelephonyBillingAccountServiceServiceNameParams = {
/**
 * Termination reason details
 */
details?: string;
/**
 * Termination reason
 */
reason: TelephonyTerminationReasonEnumOVH;
};

export type PostTelephonyBillingAccountScreenServiceNameScreenListsBody = {
  /** The callNumber of the generic screen list */
  callNumber?: string;
  /** The nature of the generic screen list */
  nature: TelephonyScreenListNatureEnumOVH;
  /** The type of the generic screen list */
  type: TelephonyScreenListTypeEnumOVH;
};

export type PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarBody = {
  /** The URL of your ICS formated calendar */
  url: string;
};

export type PostTelephonyBillingAccountSchedulerServiceNameEventsBody = {
  /** The category of the event */
  category: TelephonySchedulerCategoryEnumOVH;
  /** The ending date of the event */
  dateEnd: string;
  /** The beginning date of the event */
  dateStart: string;
  /** The descritpion of the event */
  description?: string;
  /** The title of the event */
  title: string;
  /** The unique ICS event identifier */
  uid?: string;
};

export type GetTelephonyBillingAccountSchedulerServiceNameEventsParams = {
/**
 * Filter the value of categories property (=)
 */
categories?: TelephonySchedulerCategoryEnumOVH;
/**
 * Filter the value of dateEnd property (>=)
 */
'dateEnd.from'?: string;
/**
 * Filter the value of dateEnd property (<=)
 */
'dateEnd.to'?: string;
/**
 * Filter the value of dateStart property (>=)
 */
'dateStart.from'?: string;
/**
 * Filter the value of dateStart property (<=)
 */
'dateStart.to'?: string;
};

export type PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeBody = {
  /** The specified rate code */
  rateCode: string;
};

export type PostTelephonyBillingAccountRedirectServiceNameChangeDestinationBody = {
  /** The destination */
  destination: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountPortabilityIdRelaunchBody = {
  /** List of parameters to use to fix error */
  parameters: ComplexTypeSafeKeyValueStringOVH[];
};

export type PostTelephonyBillingAccountPortabilityIdDocumentBody = {
  /** Description of the document */
  description?: string;
  /** Document's name */
  name: string;
};

export type PostTelephonyBillingAccountPortabilityIdChangeDateBody = {
  /** The proposed portability due date */
  date: string;
};

export type PostTelephonyBillingAccountPortabilityIdCancelBody = {
  /** The cancellation reason */
  reason?: string;
};

export type PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactBody = {
  /** Group name of the phonebook */
  group: string;
  /** Home mobile phone number of the contact */
  homeMobile?: PhoneNumberOVH;
  /** Home landline phone number of the contact */
  homePhone?: PhoneNumberOVH;
  /** Name of the contact */
  name: string;
  /** Contact surname */
  surname: string;
  /** Mobile phone office number of the contact */
  workMobile?: PhoneNumberOVH;
  /** Landline phone office number of the contact */
  workPhone?: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountPhonebookBookKeyImportBody = {
  /** ID of the /me/document file you want to import */
  documentId: string;
};

export type GetTelephonyBillingAccountPhonebookBookKeyExportParams = {
/**
 * Format of the file
 */
format: TelephonyContactsExportFormatsEnumOVH;
};

export type PostTelephonyBillingAccountPhonebookBody = {
  /** Name of the wanted phonebook */
  name: string;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameTtsBody = {
  text: string;
  voice?: TelephonyOvhPabxTtsVoiceEnumOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadBody = {
  /** ID of the /me/document file you want to import */
  documentId?: string;
  /** The name you want to give to your file */
  name?: string;
  /** URL of the file you want to import (instead of /me/document ID) */
  url?: string;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryBody = {
  /** The action triggered by the DTMF */
  action: TelephonyOvhPabxIvrMenuEntryActionEnumOVH;
  /** The additionnal parameter of the action */
  actionParam?: string;
  /** The DTMF that triggers the action */
  dtmf: string;
  /** The position of the entry in the menu */
  position: number;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameMenuBody = {
  /** The id of the OvhPabxSound played to greet */
  greetSound?: number;
  /** The text to speech sound played to greet */
  greetSoundTts?: number;
  /** The timeout in milliseconds before considering the DTMF entry as done */
  interDigitTimeout?: number;
  /** The id of the OvhPabxSound played when the caller uses an invalid DTMF */
  invalidSound?: number;
  /** The text to speech sound played when the caller uses an invalid DTMF */
  invalidSoundTts?: number;
  /** The name of the menu */
  name: string;
  /** The timeout in milliseconds before ending the menu when no DTMF is received */
  timeout?: number;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody = {
  /** Phone number that will be called and bridged in the communication */
  number: PhoneNumberOVH;
  /** Whispering mode */
  whisperingMode: TelephonyOvhPabxWhisperingModeEnumOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody = {
  /** Phone number to whom the communication will be transfered */
  number: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody = {
  /** Phone number that will be called and that will intercept the communication */
  number: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody = {
  /** Phone number that will be called and bridged in the communication */
  number: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueBody = {
  /** Action executed when there is no member in queue */
  actionOnClosure?: TelephonyOvhPabxQueueActionEnumOVH;
  /** The additionnal parameter of the on closure action */
  actionOnClosureParam?: string;
  /** Action executed when caller enters a full queue */
  actionOnOverflow?: TelephonyOvhPabxQueueActionEnumOVH;
  /** The additionnal parameter of the overflow action */
  actionOnOverflowParam?: string;
  /** Allow the caller to disable call record by pressing a key */
  askForRecordDisabling?: boolean;
  /** The name of the queue */
  description?: string;
  /** The maximum of people waiting in the queue */
  maxMember?: number;
  /** The maximum waiting time (in seconds) in the queue */
  maxWaitTime?: number;
  /** Enable record on calls in queue */
  record?: boolean;
  /** Key to press to disable record */
  recordDisablingDigit?: TelephonyOvhPabxHuntingQueueRecordDisablingDigitEnumOVH;
  /** Language of the sound played to the caller to inform that he can disable record */
  recordDisablingLanguage?: TelephonyOvhPabxHuntingQueueRecordDisablingLanguageEnumOVH;
  /** The id of the OvhPabxSound played to caller when on hold */
  soundOnHold?: number;
  /** The calls dispatching strategy */
  strategy: TelephonyOvhPabxHuntingQueueStrategyEnumOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenBody = {
  /** Time to live in seconds for the token */
  expiration: TelephonyTokenExpirationEnumOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusBody = {
  /** The color (in hexadecimal) of the status that will be displayed on agent banner web application */
  color?: string;
  /** A short description of the status */
  description?: string;
  /** The name of the status (Pause, Mission, etc...) */
  name: string;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueBody = {
  /** The position of the agent in the queue */
  position: number;
  /** The queue where you want to add the agent */
  queueId: number;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenBody = {
  /** Time to live in seconds for the token */
  expiration: TelephonyTokenExpirationEnumOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperBody = {
  /** Phone number that will be called and bridged in the communication */
  number: PhoneNumberOVH;
  /** Whispering mode */
  whisperingMode: TelephonyOvhPabxWhisperingModeEnumOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferBody = {
  /** Phone number to whom the communication will be transfered */
  number: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptBody = {
  /** Phone number that will be called and that will intercept the communication */
  number: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropBody = {
  /** Phone number that will be called and bridged in the communication */
  number: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentBody = {
  /** The agent's description */
  description?: string;
  /** The number of the agent */
  number: PhoneNumberOVH;
  /** The maximum of simultaneous calls that the agent will receive from the hunting */
  simultaneousLines: number;
  /** The current status of the agent */
  status: TelephonyOvhPabxHuntingAgentStatusEnumOVH;
  /** The waiting timeout (in seconds) before hangup for an assigned called */
  timeout: number;
  /** The wrap up time (in seconds) after the calls */
  wrapUpTime: number;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleBody = {
  /** The action made by the rule */
  action: TelephonyOvhPabxDialplanExtensionRuleActionEnumOVH;
  /** The parameter of the chosen action */
  actionParam?: string;
  /** If true, the rule will be executed only when the result of the conditions is false */
  negativeAction: boolean;
  /** The position of the rule in the extension (the rules are executed following this order) */
  position: number;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeBody = {
  /** The time of the day when the extension will start to be executed */
  timeFrom: TimeOVH;
  /** The time of the day when the extension will stop to be executed */
  timeTo: TimeOVH;
  /** The day of the week when the extension will be executed */
  weekDay: TelephonyOvhPabxDialplanExtensionConditionTimeWeekDayEnumOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListBody = {
  /** Add a screenlist based on the presented caller number */
  callerIdNumber?: string;
  /** Add a screenlist based on the destination number */
  destinationNumber?: string;
  /** Type of screenlist */
  screenListType?: TelephonyOvhPabxDialplanExtensionConditionScreenListTypeEnumOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionBody = {
  /** True to enable the extension */
  enable: boolean;
  /** The position of the extension in the dialplan (the extensions are executed following this order) */
  position: number;
  /** Additionnal conditions will be used from this chosen scheduler category */
  schedulerCategory?: TelephonySchedulerCategoryEnumOVH;
  /** The type of the screenlist */
  screenListType?: TelephonyOvhPabxDialplanExtensionConditionScreenListTypeEnumOVH;
};

export type PostTelephonyBillingAccountOvhPabxServiceNameDialplanBody = {
  /** Reject (hangup) anonymous calls */
  anonymousRejection: boolean;
  /** The dialplan name */
  name: string;
  /** The presented number when bridging calls */
  showCallerNumber: TelephonyOvhPabxDialplanNumberPresentationEnumOVH;
  /** The timeout (in seconds) when bridging calls */
  transferTimeout: number;
};

export type PostTelephonyBillingAccountOutplanNotificationBody = {
  /** The blocking type of the associate lines */
  block: TelephonyOutplanNotificationBlockEnumOVH;
  /** Override the nichandle email for this notification */
  notifyEmail?: string;
  /** The notification percentage of maximum outplan */
  percentage: number;
};

export type GetTelephonyBillingAccountOfferTaskParams = {
/**
 * Filter the value of action property (=)
 */
action?: TelephonyOfferTaskActionEnumOVH;
/**
 * Filter the value of status property (=)
 */
status?: TelephonyTaskStatusEnumOVH;
/**
 * Filter the value of type property (=)
 */
type?: TelephonyOfferTaskTypeEnumOVH;
};

export type PostTelephonyBillingAccountNumberServiceNameConvertToLineBody = {
  /** The future offer of the converted number */
  offer: string;
};

export type PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeBody = {
  /** The new feature of the number */
  featureType: TelephonyTypeEnumOVH;
};

export type PostTelephonyBillingAccountLineServiceNameTrafficExtractsBody = {
  /** The end date of the traffic extract */
  dateEnd: string;
  /** The start date of the traffic extract */
  dateStart: string;
};

export type PostTelephonyBillingAccountLineServiceNameTonesToneUploadBody = {
  /** ID of the /me/document file you want to import */
  documentId?: string;
  type: TelephonyTonesTypeEnumOVH;
  /** URL of the file you want to import (instead of /me/document ID) */
  url?: string;
};

export type PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesBody = {
  /** The quantity of extra simultaneous lines to remove */
  quantityRemove: number;
};

export type PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeBody = {
  /** new RMA type */
  type: TelephonyRmaChangeTypeEnumOVH;
};

export type PostTelephonyBillingAccountLineServiceNamePhoneRmaBody = {
  /** Use /supply/mondialRelay entry point to specify a relay point and ignore shipping contact address information entry. */
  mondialRelayId?: string;
  /** New merchandise brand in case of exchange */
  newMerchandise?: string;
  /** Shipping contact information id from /me entry point */
  shippingContactId?: number;
  /** Typology process of merchandise return */
  type: TelephonyRmaPublicTypeEnumOVH;
};

export type PostTelephonyBillingAccountLineServiceNamePhoneResetConfigBody = {
  /** The public ip phone allowed for reset */
  ip: Ipv4OVH;
};

export type PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactBody = {
  /** Group name of the phonebook */
  group: string;
  /** Home mobile phone number of the contact */
  homeMobile?: PhoneNumberOVH;
  /** Home landline phone number of the contact */
  homePhone?: PhoneNumberOVH;
  /** Name of the contact */
  name: string;
  /** Contact surname */
  surname: string;
  /** Mobile phone office number of the contact */
  workMobile?: PhoneNumberOVH;
  /** Landline phone office number of the contact */
  workPhone?: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportBody = {
  /** ID of the /me/document file you want to import */
  documentId: string;
};

export type GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportParams = {
/**
 * Format of the file
 */
format: TelephonyContactsExportFormatsEnumOVH;
};

export type PostTelephonyBillingAccountLineServiceNamePhonePhonebookBody = {
  /** Name of the wanted phonebook */
  name: string;
};

export type PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationBody = {
  /** Automatically reboot phone when applying the configuration */
  autoReboot?: boolean;
  /** Name value pairs of provisioning options */
  newConfigurations?: ComplexTypeSafeKeyValueStringOVH[];
};

export type PostTelephonyBillingAccountLineServiceNameDissociateDeviceBody = {
  /** The public phone IP address allowed to get phone's configuration */
  ipAddress?: Ipv4OVH;
  /** The mac address of the device you want to dissociate from the line (format: AABBCCDDEEFF) */
  macAddress: string;
};

export type PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallBody = {
  calledNumber: string;
  callingNumber?: string;
};

export type PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordBody = {
  /** The password */
  password: string;
};

export type PostTelephonyBillingAccountLineServiceNameClick2CallUserBody = {
  /** Name of the contact */
  login: string;
  /** The user password */
  password: string;
};

export type PostTelephonyBillingAccountLineServiceNameClick2CallBody = {
  calledNumber: string;
  callingNumber?: string;
  /** Activate the calling number in intercom mode automatically (pick up and speaker automatic activation). */
  intercom?: boolean;
};

export type PostTelephonyBillingAccountLineServiceNameChangePasswordBody = {
  /** The password */
  password?: string;
};

export type PostTelephonyBillingAccountLineServiceNameBlockBody = {
  /** The block mode : outgoing, incoming, both (default: both) */
  mode?: TelephonyLineBlockingModeOVH;
};

export type PostTelephonyBillingAccountLineServiceNameAutomaticCallBody = {
  /** Number to call if transfer in dialplan selected */
  bridgeNumberDialplan?: PhoneNumberOVH;
  /** Number to call */
  calledNumber: PhoneNumberOVH;
  /** Optional, number where the call come from */
  callingNumber?: PhoneNumberOVH;
  /** Dialplan used for the call */
  dialplan: TelephonyCallsGeneratorDialplanEnumOVH;
  /** For anonymous call */
  isAnonymous: boolean;
  /** Name of the audioFile (if needed) with extention. This audio file must have been upload previously */
  playbackAudioFileDialplan?: string;
  /** Timeout (in seconds). Default is 20 seconds */
  timeout?: number;
  /** Text to read if TTS on dialplan selected */
  ttsTextDialplan?: string;
};

export type PostTelephonyBillingAccountLineServiceNameAssociateDeviceBody = {
  /** The public phone IP address allowed to get phone's configuration */
  ipAddress?: Ipv4OVH;
  /** The mac address of the device you want to associate to the line (format: AABBCCDDEEFF) */
  macAddress: string;
  /** The slot or line position on the device (from 1 to N. N is the maximum number of lines/slots available on the device) */
  slot?: number;
};

export type PostTelephonyBillingAccountLineServiceNameAntihackBody = {
  /** Type of action */
  action: TelephonyAntihackActionEnumOVH;
  /** Number or short number restricted */
  restricted?: string;
};

export type PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberBody = {
  /** The abbreviated number which must start with "2" and must have a length of 3 or 4 digits */
  abbreviatedNumber: number;
  /** The destination of the abbreviated number */
  destinationNumber: PhoneNumberOVH;
  name: string;
  surname: string;
};

export type PostTelephonyBillingAccountHistoryRepaymentConsumptionBody = {
  /** The number of the bill */
  billingNumber?: string;
};

export type GetTelephonyBillingAccountHistoryConsumptionDateFileParams = {
/**
 * Document suffix
 */
extension: TelephonyBillDocumentOVH;
};

export type PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxBody = {
  /** If you want to schedule your fax later, you can specify a date */
  dateSchedule?: string;
  /** Url of the pdf document you want to send */
  pdfUrl: string;
  /** List of recipients of your fax */
  recipients: PhoneNumberOVH[];
};

export type PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordBody = {
  /** The password, if not specified, a random password will be generated */
  password?: string;
};

export type PostTelephonyBillingAccountFaxServiceNameScreenListsResetBody = {
  /** List of black numbers */
  blacklistedNumbers?: boolean;
  /** List of black login (TSI or ID) */
  blacklistedTSI?: boolean;
  /** List of white numbers */
  whitelistedNumbers?: boolean;
  /** List of white login (TSI or ID) */
  whitelistedTSI?: boolean;
};

export type PostTelephonyBillingAccountFaxServiceNameScreenListsBody = {
  /** List of numbers not allowed to send a fax */
  blacklistedNumbers?: string[];
  /** List of logins (TSI or ID) not allowed to send a fax */
  blacklistedTSI?: string[];
  /** Which list is active (blackist, whitelist or none) */
  filteringList?: TelephonyFaxScreenListTypeEnumOVH;
  /** List of numbers allowed to send a fax */
  whitelistedNumbers?: string[];
  /** List of logins (TSI or ID) allowed to send a fax */
  whitelistedTSI?: string[];
};

export type PostTelephonyBillingAccountFaxServiceNameCampaignsBody = {
  /** The id of the /me/document pdf you want to send */
  documentId: string;
  /** The quality of the fax you want to send */
  faxQuality?: TelephonyFaxQualityEnumOVH;
  /** The name of the fax campaign */
  name: string;
  /** If recipientsType is set to document, the id of the document containing the recipients phone numbers */
  recipientsDocId?: string;
  /** If recipientsType is set to list, the list of recipients phone numbers */
  recipientsList?: PhoneNumberOVH[];
  /** Method to set the campaign recipient */
  recipientsType: TelephonyFaxCampaignRecipientsTypeEnumOVH;
  /** Sending date of the campaign (when sendType is scheduled) */
  sendDate?: string;
  /** Sending type of the campaign */
  sendType: TelephonyFaxCampaignSendTypeEnumOVH;
};

export type PostTelephonyBillingAccountEventTokenBody = {
  /** Time to live in seconds for the token */
  expiration: TelephonyTokenExpirationEnumOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsBody = {
  /** The time condition's policy */
  policy: TelephonyTimeConditionsPolicyEnumOVH;
  /** The time of the day when the extension will start to be executed */
  timeFrom: TimeOVH;
  /** The time of the day when the extension will stop to be executed */
  timeTo: TimeOVH;
  /** The day of the week when the extension will be executed */
  weekDay: TelephonyOvhPabxDialplanExtensionConditionTimeWeekDayEnumOVH;
};

export type GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsParams = {
/**
 * Filter the value of policy property (=)
 */
policy?: TelephonyTimeConditionsPolicyEnumOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadBody = {
  /** ID of the /me/document file you want to import */
  documentId?: string;
  name?: string;
  /** URL of the file you want to import (instead of /me/document ID) */
  url?: string;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsBody = {
  /** Add a screenlist based on the presented caller number */
  callerIdNumber?: string;
  /** Add a screenlist based on the destination number */
  destinationNumber?: string;
  /** Type of screenlist */
  screenListType: TelephonyOvhPabxDialplanExtensionConditionScreenListTypeEnumOVH;
};

export type GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsParams = {
/**
 * Filter the value of screenListType property (=)
 */
screenListType?: TelephonyOvhPabxDialplanExtensionConditionScreenListTypeEnumOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperBody = {
  /** Phone number that will be called and bridged in the communication */
  number: PhoneNumberOVH;
  /** Whispering mode */
  whisperingMode: TelephonyOvhPabxWhisperingModeEnumOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferBody = {
  /** Phone number to whom the communication will be transfered */
  number: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptBody = {
  /** Phone number that will be called and that will intercept the communication */
  number: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropBody = {
  /** Phone number that will be called and bridged in the communication */
  number: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueBody = {
  /** Action executed when there is no member in queue */
  actionOnClosure?: TelephonyOvhPabxQueueActionEnumOVH;
  /** The additionnal parameter of the on closure action */
  actionOnClosureParam?: string;
  /** Action executed when caller enters a full queue */
  actionOnOverflow?: TelephonyOvhPabxQueueActionEnumOVH;
  /** The additionnal parameter of the overflow action */
  actionOnOverflowParam?: string;
  /** Allow the caller to disable call record by pressing a key */
  askForRecordDisabling?: boolean;
  /** The name of the queue */
  description?: string;
  /** The maximum of people waiting in the queue */
  maxMember?: number;
  /** The maximum waiting time (in seconds) in the queue */
  maxWaitTime?: number;
  /** Enable record on calls in queue */
  record?: boolean;
  /** Key to press to disable record */
  recordDisablingDigit?: TelephonyOvhPabxHuntingQueueRecordDisablingDigitEnumOVH;
  /** Language of the sound played to the caller to inform that he can disable record */
  recordDisablingLanguage?: TelephonyOvhPabxHuntingQueueRecordDisablingLanguageEnumOVH;
  /** The id of the OvhPabxSound played to caller when on hold */
  soundOnHold?: number;
  /** The calls dispatching strategy */
  strategy: TelephonyOvhPabxHuntingQueueStrategyEnumOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenBody = {
  /** Time to live in seconds for the token */
  expiration: TelephonyTokenExpirationEnumOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusBody = {
  /** The color (in hexadecimal) of the status that will be displayed on agent banner web application */
  color?: string;
  /** A short description of the status */
  description?: string;
  /** The name of the status (Pause, Mission, etc...) */
  name: string;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueBody = {
  /** The position of the agent in the queue */
  position: number;
  /** The queue where you want to add the agent */
  queueId: number;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenBody = {
  /** Time to live in seconds for the token */
  expiration: TelephonyTokenExpirationEnumOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperBody = {
  /** Phone number that will be called and bridged in the communication */
  number: PhoneNumberOVH;
  /** Whispering mode */
  whisperingMode: TelephonyOvhPabxWhisperingModeEnumOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferBody = {
  /** Phone number to whom the communication will be transfered */
  number: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptBody = {
  /** Phone number that will be called and that will intercept the communication */
  number: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropBody = {
  /** Phone number that will be called and bridged in the communication */
  number: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentBody = {
  /** The agent's description */
  description?: string;
  /** The number of the agent */
  number: PhoneNumberOVH;
  /** The maximum of simultaneous calls that the agent will receive from the hunting */
  simultaneousLines: number;
  /** The current status of the agent */
  status: TelephonyOvhPabxHuntingAgentStatusEnumOVH;
  /** The waiting timeout (in seconds) before hangup for an assigned called */
  timeout: number;
  /** The wrap up time (in seconds) after the calls */
  wrapUpTime: number;
};

export type PostTelephonyBillingAccountDdiServiceNameChangeDestinationBody = {
  /** The destination */
  destination: PhoneNumberOVH;
};

export type PostTelephonyBillingAccountConferenceServiceNameWebAccessBody = {
  /** The type of the conference web access : read or write */
  type: TelephonyConferenceWebAccessTypeEnumOVH;
};

export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessBody = {
  /** The type of the conference web access : read or write */
  type: TelephonyConferenceWebAccessTypeEnumOVH;
};

export type PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyBody = {
  /** The value of energy level */
  value: number;
};

export type GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesParams = {
/**
 * Filter the value of dateBegin property (>=)
 */
'dateBegin.from'?: string;
/**
 * Filter the value of dateBegin property (<=)
 */
'dateBegin.to'?: string;
};

export type PostTelephonyBillingAccountConferenceServiceNameRoomsBody = {
  /** The room number (a random number will be generated if not specified) */
  roomNumber?: number;
};

export type PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyBody = {
  /** The value of energy level */
  value: number;
};

export type GetTelephonyBillingAccountConferenceServiceNameHistoriesParams = {
/**
 * Filter the value of dateBegin property (>=)
 */
'dateBegin.from'?: string;
/**
 * Filter the value of dateBegin property (<=)
 */
'dateBegin.to'?: string;
};

export type PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadBody = {
  /** ID of the /me/document file you want to import */
  documentId: string;
};

export type PostTelephonyBillingAccountChangeContactBody = {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
};

export type GetTelephonyBillingAccountCarrierSipServiceNameCdrsParams = {
/**
 * The month you want to extract (format: YYYY-MM). Current month if not specified.
 */
month?: string;
};

export type PostTelephonyBillingAccountCanTransferSecurityDepositBody = {
  /** The destination billing account */
  billingAccountDestination: string;
};

export type PostTelephonyBillingAccountBillingAccountSiteBody = {
  /** Billing account site (master billing account) */
  billingAccountSite: string;
};

export type PostTelephonyBillingAccountAbbreviatedNumberBody = {
  /** The abbreviated number which must start with "7" and must have a length of 3 or 4 digits */
  abbreviatedNumber: number;
  /** The destination of the abbreviated number */
  destinationNumber: PhoneNumberOVH;
  name: string;
  surname: string;
};

export type DeleteTelephonyBillingAccountParams = {
/**
 * Termination reason details
 */
details?: string;
/**
 * Termination reason
 */
reason: TelephonyTerminationReasonEnumOVH;
};

export type PostTelephonyTrunksServiceNameChangeContactBody = {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
};

export type GetTelephonyTrunksParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

export type PostTelephonySpareSpareReplaceBody = {
  /** The phone to replace by the spare */
  domain: string;
  /** Public ip of the phone */
  ip: Ipv4OVH;
};

export type GetTelephonySpareParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

export type PostTelephonySoundsBody = {
  /** Sound description */
  description?: string;
  /** Sound filename */
  filename: string;
};

export type PostTelephonySetDefaultSipDomainBody = {
  /** Country */
  country: TelephonyServiceNumberCountryEnumOVH;
  /** SIP domain to set */
  domain: string;
  /** Product type */
  type: TelephonySipDomainProductTypeEnumOVH;
};

export type GetTelephonySearchServicesParams = {
/**
 * Filter the value of  property (like)
 */
axiom: string;
};

export type PostTelephonyProcedureBody = {
  /** Account's BIC */
  bic?: string;
  /** Account's IBAN */
  iban?: string;
  /** Account owner's address */
  ownerAddress?: string;
  /** Account owner's name */
  ownerName?: string;
  /** The ID of your registered SEPA account payment mean. */
  paymentMeanID?: number;
};

export type GetTelephonyNumberZonesParams = {
/**
 * Enter a part of a city name or a zip for specific zne returns
 */
axiom?: string;
/**
 * The country
 */
country: TelephonyNumberCountryEnumOVH;
};

export type GetTelephonyNumberSpecificNumbersParams = {
/**
 * The country
 */
country: TelephonyNumberCountryEnumOVH;
/**
 * The range (special number)
 */
range?: string;
/**
 * The type of number
 */
type: TelephonyNumberTypeEnumOVH;
/**
 * The zone (geographic number)
 */
zone?: string;
};

export type GetTelephonyNumberRangesParams = {
/**
 * The country
 */
country: TelephonyNumberCountryEnumOVH;
};

export type GetTelephonyNumberDetailedZonesParams = {
/**
 * Enter a part of a city name or a zip for specific zne returns
 */
axiom?: string;
/**
 * The country
 */
country: TelephonyNumberCountryEnumOVH;
};

export type PostTelephonyLinesServiceNameChangeContactBody = {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
};

export type GetTelephonyLinesParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

export type GetTelephonyLineOffersParams = {
/**
 * The country
 */
country: TelephonyNumberCountryEnumOVH;
};

export type GetTelephonyLineOfferPhonesParams = {
/**
 * The country
 */
country: TelephonyServiceNumberCountryEnumOVH;
/**
 * The selected offer
 */
offer: string;
};

export type GetTelephonyFaxOffersParams = {
/**
 * The country
 */
country: TelephonyNumberCountryEnumOVH;
};

export type GetTelephonyDirectoriesCitiesParams = {
/**
 * The country of the city
 */
country: TelephonyServiceNumberCountryEnumOVH;
/**
 * The zip code of the city
 */
zipCode: string;
};

export type GetTelephonyDirectoriesAvailableZipCodesParams = {
/**
 * The country of the city
 */
country: TelephonyServiceNumberCountryEnumOVH;
/**
 * The number (can be a range terminated by XXXX)
 */
number: string;
};

export type GetTelephonyAvailableDefaultSipDomainsParams = {
/**
 * Product type
 */
type: TelephonySipDomainProductTypeEnumOVH;
};

export type PostTelephonyAliasesServiceNameChangeContactBody = {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
};

export type GetTelephonyAliasesParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

export type GetTelephonyAccessoriesParams = {
/**
 * Phone brand
 */
brand?: string;
/**
 * The country
 */
country: TelephonyServiceNumberCountryEnumOVH;
};

export type GetTelephonyParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Traffic extracts (SIP) of your line
 */
export interface TelephonyTrafficExtractOVH {
  /** The start date of the traffic extract */
  readonly dateEnd?: string;
  /** The start date of the traffic extract */
  readonly dateStart?: string;
  /** The PCAP file size of the traffic extract */
  readonly fileSize?: number;
  /** The PCAP URL of the traffic extract */
  readonly fileUrl?: string;
  /** The id of the traffic extract */
  readonly id?: number;
  /** The status of the extract */
  readonly status?: TelephonyTaskStatusEnumOVH;
}

/**
 * Time zones available for scheduled events time definitions
 */
export type TelephonyTimeZoneOVH = typeof TelephonyTimeZoneOVH[keyof typeof TelephonyTimeZoneOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTimeZoneOVH = {
  'Europe/Berlin': 'Europe/Berlin',
  'Europe/Brussels': 'Europe/Brussels',
  'Europe/London': 'Europe/London',
  'Europe/Madrid': 'Europe/Madrid',
  'Europe/Paris': 'Europe/Paris',
  'Europe/Zurich': 'Europe/Zurich',
} as const;

/**
 * Special number category
 */
export type TelephonyPortabilitySpecialNumberCategoryEnumOVH = typeof TelephonyPortabilitySpecialNumberCategoryEnumOVH[keyof typeof TelephonyPortabilitySpecialNumberCategoryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyPortabilitySpecialNumberCategoryEnumOVH = {
  access: 'access',
  announced: 'announced',
  conferencing: 'conferencing',
  contentsAuto: 'contentsAuto',
  contentsManual: 'contentsManual',
  directory: 'directory',
  games: 'games',
  linking: 'linking',
  m2m: 'm2m',
  relationship: 'relationship',
} as const;

/**
 * Vxml Properties
 */
export interface TelephonyVxmlPropertiesOVH {
  url?: string;
  urlRecord?: string;
}

/**
 * Voicemail Properties
 */
export interface TelephonyVoicemailPropertiesOVH {
  /** Name of the voicemail panel announce file */
  readonly annouceMessage?: string;
  /** Format of the voicemail audio file attached to emails */
  audioFormat?: TelephonyServiceVoicemailAudioFormatEnumOVH;
  /** Don't allow callers to leave voicemails */
  doNotRecord?: boolean;
  /** Force password request to access the voicemail panel */
  forcePassword?: boolean;
  /** Email address from which emails will be sent */
  fromEmail?: string;
  /** Name from which emails will be sent */
  fromName?: string;
  /**
   * Sound ID of the long greeeting
   * @nullable
   */
  fullGreetingSoundId?: number | null;
  /** Type of the greeting to play */
  greetingType?: TelephonyVoicemailGreetingEnumOVH;
  /** Current voicemail version */
  readonly isNewVersion?: boolean;
  /** Don't delete voicemails after they've been sent by email */
  keepMessage?: boolean;
  /** Email addresses to notify when a new voicemail is left */
  redirectionEmails?: TelephonyServiceVoicemailNotificationsOVH[];
  /**
   * Sound ID of the short greeting played before an automated message
   * @nullable
   */
  shortGreetingSoundId?: number | null;
  /** Play the temporary greeting instead of the regular one */
  temporaryGreetingActivated?: boolean;
  /**
   * Sound ID of the temporary greeeting
   * @nullable
   */
  temporaryGreetingSoundId?: number | null;
  /** Quantity of unread voicemails */
  readonly unreadMessages?: number;
}

/**
 * Internal and external numbers for voicemail service
 */
export interface TelephonyVoicemailNumbersOVH {
  /** The external voicemail number */
  external?: string;
  /** The internal voicemail number */
  internal?: string;
}

/**
 * Folder type
 */
export type TelephonyVoicemailMessageFolderGreetingEnumOVH = typeof TelephonyVoicemailMessageFolderGreetingEnumOVH[keyof typeof TelephonyVoicemailMessageFolderGreetingEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyVoicemailMessageFolderGreetingEnumOVH = {
  busy: 'busy',
  greet: 'greet',
  temp: 'temp',
  unavail: 'unavail',
} as const;

/**
 * Folder type
 */
export type TelephonyVoicemailMessageFolderDirectoryEnumOVH = typeof TelephonyVoicemailMessageFolderDirectoryEnumOVH[keyof typeof TelephonyVoicemailMessageFolderDirectoryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyVoicemailMessageFolderDirectoryEnumOVH = {
  family: 'family',
  friends: 'friends',
  inbox: 'inbox',
  old: 'old',
  urgent: 'urgent',
  work: 'work',
} as const;

/**
 * Voicemail message
 */
export interface TelephonyVoicemailMessagesOVH {
  /** Callee number in international format */
  readonly callee?: PhoneNumberOVH;
  /** Caller number in international format */
  readonly caller?: PhoneNumberOVH;
  /** Message datetime creation */
  readonly creationDatetime?: string;
  /** Voicemessage directory */
  readonly dir?: TelephonyVoicemailMessageFolderDirectoryEnumOVH;
  /** Message duration (in seconds) */
  readonly duration?: number;
  /** Uniq voicemail message identifier */
  readonly id?: number;
}

/**
 * Voicemail greeting
 */
export interface TelephonyVoicemailGreetingsOVH {
  /** Callee number in international format */
  readonly callee?: PhoneNumberOVH;
  /** Customized greeting voicemail directory */
  readonly dir?: TelephonyVoicemailMessageFolderGreetingEnumOVH;
  /** Uniq customized greeting identifier */
  readonly id?: number;
}

/**
 * Greeting type
 */
export type TelephonyVoicemailGreetingEnumOVH = typeof TelephonyVoicemailGreetingEnumOVH[keyof typeof TelephonyVoicemailGreetingEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyVoicemailGreetingEnumOVH = {
  default: 'default',
  full: 'full',
  short: 'short',
} as const;

/**
 * Voicemail service
 */
export interface TelephonyVoicemailOVH {
  description?: string;
  readonly offers?: readonly string[];
  readonly serviceName?: string;
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
}

/**
 * All existing type of routing for a voicemail
 */
export type TelephonyVoicefaxRoutingEnumOVH = typeof TelephonyVoicefaxRoutingEnumOVH[keyof typeof TelephonyVoicefaxRoutingEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyVoicefaxRoutingEnumOVH = {
  fax: 'fax',
  voicemail: 'voicemail',
} as const;

/**
 * Consumption way type
 */
export type TelephonyVoiceConsumptionWayTypeEnumOVH = typeof TelephonyVoiceConsumptionWayTypeEnumOVH[keyof typeof TelephonyVoiceConsumptionWayTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyVoiceConsumptionWayTypeEnumOVH = {
  incoming: 'incoming',
  outgoing: 'outgoing',
  transfer: 'transfer',
} as const;

/**
 * Consumption plan type
 */
export type TelephonyVoiceConsumptionPlanTypeEnumOVH = typeof TelephonyVoiceConsumptionPlanTypeEnumOVH[keyof typeof TelephonyVoiceConsumptionPlanTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyVoiceConsumptionPlanTypeEnumOVH = {
  outplan: 'outplan',
  priceplan: 'priceplan',
} as const;

/**
 * Consumption destination type
 */
export type TelephonyVoiceConsumptionDestinationTypeEnumOVH = typeof TelephonyVoiceConsumptionDestinationTypeEnumOVH[keyof typeof TelephonyVoiceConsumptionDestinationTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyVoiceConsumptionDestinationTypeEnumOVH = {
  landline: 'landline',
  mobile: 'mobile',
  special: 'special',
} as const;

/**
 * @nullable
 */
export type TelephonyVoiceConsumptionOVHDialed = PhoneNumberOVH | null;

/**
 * @nullable
 */
export type TelephonyVoiceConsumptionOVHCalling = PhoneNumberOVH | null;

/**
 * @nullable
 */
export type TelephonyVoiceConsumptionOVHCalled = PhoneNumberOVH | null;

/**
 * Call delivery record
 */
export interface TelephonyVoiceConsumptionOVH {
  /** @nullable */
  readonly called?: TelephonyVoiceConsumptionOVHCalled;
  /** @nullable */
  readonly calling?: TelephonyVoiceConsumptionOVHCalling;
  readonly consumptionId?: number;
  /** Country suffix destination */
  readonly countrySuffix?: string;
  readonly creationDatetime?: string;
  /** Description of the destination */
  readonly designation?: string;
  readonly destinationType?: TelephonyVoiceConsumptionDestinationTypeEnumOVH;
  /** @nullable */
  readonly dialed?: TelephonyVoiceConsumptionOVHDialed;
  readonly duration?: number;
  /**
   * Information about hangup cause
   * @nullable
   */
  readonly hangupNature?: string | null;
  readonly planType?: TelephonyVoiceConsumptionPlanTypeEnumOVH;
  readonly priceWithoutTax?: OrderPriceOVH;
  readonly wayType?: TelephonyVoiceConsumptionWayTypeEnumOVH;
}

/**
 * All existing types
 */
export type TelephonyTypeServiceEnumOVH = typeof TelephonyTypeServiceEnumOVH[keyof typeof TelephonyTypeServiceEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTypeServiceEnumOVH = {
  alias: 'alias',
  line: 'line',
} as const;

/**
 * Vxml services
 */
export interface TelephonyVxmlOVH {
  readonly description?: string;
  readonly offers?: readonly string[];
  readonly serviceName?: string;
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
}

/**
 * All existing types of line or alias
 */
export type TelephonyTypeEnumOVH = typeof TelephonyTypeEnumOVH[keyof typeof TelephonyTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTypeEnumOVH = {
  carrierSip: 'carrierSip',
  cloudHunting: 'cloudHunting',
  cloudIvr: 'cloudIvr',
  conference: 'conference',
  contactCenterSolution: 'contactCenterSolution',
  contactCenterSolutionExpert: 'contactCenterSolutionExpert',
  ddi: 'ddi',
  easyHunting: 'easyHunting',
  empty: 'empty',
  fax: 'fax',
  freefax: 'freefax',
  mgcp: 'mgcp',
  oldConference: 'oldConference',
  plugAndFax: 'plugAndFax',
  redirect: 'redirect',
  sip: 'sip',
  svi: 'svi',
  voicefax: 'voicefax',
  voicemail: 'voicemail',
  vxml: 'vxml',
} as const;

/**
 * Details for a channels pack
 */
export interface TelephonyTrunkSimultaneousPackOVH {
  /** The number of channels included in the pack */
  channels?: number;
  /** The quantity of packs present in the combination */
  quantity?: number;
  /** The unit price of the channels pack */
  unitPrice?: OrderPriceOVH;
}

/**
 * Repartition of simultaneous channels packs for a trunk
 */
export interface TelephonyTrunkSimultaneousPacksRepartitionOVH {
  /** The optimized quantity of channels to order */
  optimizedChannelsQuantity?: number;
  /** The repartition of the packs */
  packsRepartition?: TelephonyTrunkSimultaneousPackOVH[];
  /** The total price of the channels packs combination */
  totalPrice?: OrderPriceOVH;
}

/**
 * Trunk external displayed number validation
 */
export interface TelephonyTrunkExternalDisplayedNumberValidationOVH {
  /** telephony.Task id of the validation phone call */
  phoneCallTaskId?: number;
  /** Validation code to type during phone call */
  validationCode?: string;
}

/**
 * Status of the trunk's external displayed number
 */
export type TelephonyTrunkExternalDisplayedNumberStatusEnumOVH = typeof TelephonyTrunkExternalDisplayedNumberStatusEnumOVH[keyof typeof TelephonyTrunkExternalDisplayedNumberStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTrunkExternalDisplayedNumberStatusEnumOVH = {
  enabled: 'enabled',
  refused: 'refused',
  toDelete: 'toDelete',
  waitingValidation: 'waitingValidation',
} as const;

/**
 * External displayed number linked to a trunk
 */
export interface TelephonyTrunkExternalDisplayedNumberOVH {
  /** Creation date */
  readonly createdAt?: string;
  /** External displayed number linked to a trunk */
  readonly number?: PhoneNumberOVH;
  /** Validation status */
  readonly status?: TelephonyTrunkExternalDisplayedNumberStatusEnumOVH;
  /**
   * Validation date
   * @nullable
   */
  readonly validatedAt?: string | null;
}

/**
 * Trunk service
 */
export interface TelephonyTrunkOVH {
  /** Description of the service */
  readonly description?: string;
  /** Name of the service */
  readonly serviceName?: string;
  /** Type of the service */
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
}

/**
 * Tones type
 */
export type TelephonyTonesTypeEnumOVH = typeof TelephonyTonesTypeEnumOVH[keyof typeof TelephonyTonesTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTonesTypeEnumOVH = {
  callWaiting: 'callWaiting',
  endCall: 'endCall',
  onHold: 'onHold',
  ringback: 'ringback',
} as const;

/**
 * Tones type
 */
export type TelephonyTonesOnHoldEnumOVH = typeof TelephonyTonesOnHoldEnumOVH[keyof typeof TelephonyTonesOnHoldEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTonesOnHoldEnumOVH = {
  Custom_sound: 'Custom sound',
  None: 'None',
  Predefined_1: 'Predefined 1',
  Predefined_2: 'Predefined 2',
} as const;

/**
 * Tones type
 */
export type TelephonyTonesEnumOVH = typeof TelephonyTonesEnumOVH[keyof typeof TelephonyTonesEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTonesEnumOVH = {
  Custom_sound: 'Custom sound',
  None: 'None',
} as const;

/**
 * Line tones
 */
export interface TelephonyTonesOVH {
  /** Tone played when caller is waiting in queue */
  callWaiting?: TelephonyTonesEnumOVH;
  /** Tone played when callee is ending call */
  endCall?: TelephonyTonesEnumOVH;
  /** Tone played when caller is put on hold */
  onHold?: TelephonyTonesOnHoldEnumOVH;
  /** Ringback tone */
  ringback?: TelephonyTonesEnumOVH;
}

/**
 * expiration possibility
 */
export type TelephonyTokenExpirationEnumOVH = typeof TelephonyTokenExpirationEnumOVH[keyof typeof TelephonyTokenExpirationEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTokenExpirationEnumOVH = {
  '1_day': '1 day',
  '1_hour': '1 hour',
  '30_days': '30 days',
  '5_minutes': '5 minutes',
  unlimited: 'unlimited',
} as const;

/**
 * A value associated to a timestamp
 */
export interface TelephonyTimestampAndValueOVH {
  timestamp?: number;
  /** @nullable */
  value?: number | null;
}

/**
 * Timeout before unavailable action is triggered
 */
export type TelephonyTimeConditionsTimeoutEnumOVH = typeof TelephonyTimeConditionsTimeoutEnumOVH[keyof typeof TelephonyTimeConditionsTimeoutEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTimeConditionsTimeoutEnumOVH = {
  NUMBER_5: 5,
  NUMBER_10: 10,
  NUMBER_15: 15,
  NUMBER_20: 20,
  NUMBER_25: 25,
  NUMBER_30: 30,
  NUMBER_35: 35,
  NUMBER_40: 40,
  NUMBER_45: 45,
  NUMBER_50: 50,
  NUMBER_55: 55,
  NUMBER_60: 60,
  NUMBER_65: 65,
  NUMBER_70: 70,
  NUMBER_75: 75,
  NUMBER_80: 80,
  NUMBER_85: 85,
  NUMBER_90: 90,
} as const;

/**
 * Type of slot
 */
export type TelephonyTimeConditionsSlotTypeEnumOVH = typeof TelephonyTimeConditionsSlotTypeEnumOVH[keyof typeof TelephonyTimeConditionsSlotTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTimeConditionsSlotTypeEnumOVH = {
  number: 'number',
  voicemail: 'voicemail',
} as const;

/**
 * Forward type
 */
export type TelephonyTimeConditionsSettingsForwardTypeEnumOVH = typeof TelephonyTimeConditionsSettingsForwardTypeEnumOVH[keyof typeof TelephonyTimeConditionsSettingsForwardTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTimeConditionsSettingsForwardTypeEnumOVH = {
  number: 'number',
  voicemail: 'voicemail',
} as const;

/**
 * Policy of the time condition
 */
export type TelephonyTimeConditionsPolicyEnumOVH = typeof TelephonyTimeConditionsPolicyEnumOVH[keyof typeof TelephonyTimeConditionsPolicyEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTimeConditionsPolicyEnumOVH = {
  available: 'available',
  slot1: 'slot1',
  slot2: 'slot2',
  slot3: 'slot3',
} as const;

/**
 * Time conditions global status
 */
export type TelephonyTimeConditionsGlobalStatusEnumOVH = typeof TelephonyTimeConditionsGlobalStatusEnumOVH[keyof typeof TelephonyTimeConditionsGlobalStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTimeConditionsGlobalStatusEnumOVH = {
  deleted: 'deleted',
  disabled: 'disabled',
  enabled: 'enabled',
} as const;

/**
 * Day of the time condition
 */
export type TelephonyTimeConditionsDayEnumOVH = typeof TelephonyTimeConditionsDayEnumOVH[keyof typeof TelephonyTimeConditionsDayEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTimeConditionsDayEnumOVH = {
  friday: 'friday',
  holiday: 'holiday',
  monday: 'monday',
  saturday: 'saturday',
  sunday: 'sunday',
  thursday: 'thursday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
} as const;

/**
 * Timeout value of the time condition
 * @nullable
 */
export type TelephonyTimeConditionOptionsOVHTimeout = TelephonyTimeConditionsTimeoutEnumOVH | null;

/**
 * Time conditions options
 */
export interface TelephonyTimeConditionOptionsOVH {
  /** Number associated to the first slot action */
  slot1Number?: string;
  /** Action type executed when the first slot is used */
  slot1Type?: TelephonyTimeConditionsSlotTypeEnumOVH;
  /** Number associated to the second slot action */
  slot2Number?: string;
  /** Action type executed when the second slot is used */
  slot2Type?: TelephonyTimeConditionsSlotTypeEnumOVH;
  /** Number associated to the third slot action */
  slot3Number?: string;
  /** Action type executed when the third slot is used */
  slot3Type?: TelephonyTimeConditionsSlotTypeEnumOVH;
  /** Status of time conditions */
  status?: TelephonyTimeConditionsGlobalStatusEnumOVH;
  /**
   * Timeout value of the time condition
   * @nullable
   */
  timeout?: TelephonyTimeConditionOptionsOVHTimeout;
  /** Number associated to the unavailable slot action */
  unavailableNumber?: string;
  /** Action type executed when the unavailable slot is used */
  unavailableType?: TelephonyTimeConditionsSlotTypeEnumOVH;
}

/**
 * Time conditions
 */
export interface TelephonyTimeConditionOVH {
  day?: TelephonyTimeConditionsDayEnumOVH;
  hourBegin?: string;
  hourEnd?: string;
  readonly id?: number;
  policy?: TelephonyTimeConditionsPolicyEnumOVH;
  status?: string;
}

/**
 * Termination reason
 */
export type TelephonyTerminationReasonEnumOVH = typeof TelephonyTerminationReasonEnumOVH[keyof typeof TelephonyTerminationReasonEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTerminationReasonEnumOVH = {
  addresseMove: 'addresseMove',
  billingDifficulties: 'billingDifficulties',
  cessationOfActivity: 'cessationOfActivity',
  missingOptions: 'missingOptions',
  moveToCompetitor: 'moveToCompetitor',
  other: 'other',
  plugAndPhoneDifficulties: 'plugAndPhoneDifficulties',
  technicalDifficulties: 'technicalDifficulties',
} as const;

/**
 * Temporary url informations
 */
export interface TelephonyTemporaryLogsLinkOVH {
  /** Temporary url expiration date */
  expirationDate?: string;
  /** Temporary url */
  url?: string;
}

/**
 * MAC address of the associated device if there is one.
 * @nullable
 */
export type TelephonyTelephonyServiceOVHAssociatedDeviceMac = MacAddressOVH | null;

/**
 * Telephony service
 */
export interface TelephonyTelephonyServiceOVH {
  /**
   * MAC address of the associated device if there is one.
   * @nullable
   */
  readonly associatedDeviceMac?: TelephonyTelephonyServiceOVHAssociatedDeviceMac;
  /** The country of the number */
  readonly country?: TelephonyServiceNumberCountryEnumOVH;
  /** The country code of the number */
  readonly countryCode?: TelephonyNumberCountryCodeEnumOVH;
  /** Current outplan */
  readonly currentOutplan?: OrderPriceOVH;
  description?: string;
  readonly featureType?: TelephonyTypeEnumOVH;
  /** The service offers */
  readonly getPublicOffer?: TelephonyLineOfferOVH;
  /** Does this service have fax capabilities? */
  readonly hasFaxCapabilities?: boolean;
  readonly offers?: readonly string[];
  readonly properties?: readonly TelephonyPropertyEnumOVH[];
  /** The identifier to use to port the number */
  readonly rio?: string;
  readonly serviceName?: string;
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
  readonly simultaneousLines?: number;
}

/**
 * List of possible type of a telephony service
 */
export type TelephonyTelephonySearchServiceTypeEnumOVH = typeof TelephonyTelephonySearchServiceTypeEnumOVH[keyof typeof TelephonyTelephonySearchServiceTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTelephonySearchServiceTypeEnumOVH = {
  alias: 'alias',
  line: 'line',
  trunk: 'trunk',
} as const;

/**
 * Informations related to a telephony service
 */
export interface TelephonyTelephonySearchServiceOVH {
  /**
   * The billing account of the service
   * @nullable
   */
  billingAccount?: string | null;
  /** The service domain */
  domain?: string;
  /** The offer description */
  type?: TelephonyTelephonySearchServiceTypeEnumOVH;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type TelephonyTelephonyGenericServiceWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Telephony service
 */
export interface TelephonyTelephonyGenericServiceWithIAMOVH {
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: TelephonyTelephonyGenericServiceWithIAMOVHIam;
  readonly serviceName?: string;
}

/**
 * Telephony service
 */
export interface TelephonyTelephonyGenericServiceOVH {
  readonly serviceName?: string;
}

/**
 * Task status
 */
export type TelephonyTaskStatusEnumOVH = typeof TelephonyTaskStatusEnumOVH[keyof typeof TelephonyTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTaskStatusEnumOVH = {
  doing: 'doing',
  done: 'done',
  error: 'error',
  pause: 'pause',
  todo: 'todo',
} as const;

/**
 * Operation on a telephony service
 */
export interface TelephonyTaskOVH {
  /** Action associated with the task */
  readonly action?: string;
  /**
   * Potential failure reason of the task
   * @nullable
   */
  readonly message?: string | null;
  /**
   * Object potentially created at the end of the task
   * @nullable
   */
  readonly objectCreated?: string | null;
  readonly serviceType?: string;
  /** Status of the task */
  readonly status?: TelephonyTaskStatusEnumOVH;
  readonly taskId?: number;
}

/**
 * Available timeframes for statistics
 */
export type TelephonyStatisticsTimeframeEnumOVH = typeof TelephonyStatisticsTimeframeEnumOVH[keyof typeof TelephonyStatisticsTimeframeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyStatisticsTimeframeEnumOVH = {
  daily: 'daily',
  hourly: 'hourly',
  monthly: 'monthly',
  weekly: 'weekly',
  yearly: 'yearly',
} as const;

/**
 * Specific number available
 */
export interface TelephonySpecificNumberOVH {
  /** Set if number is premium */
  isPremium?: boolean;
  /** The number */
  number?: PhoneNumberOVH;
}

/**
 * Sounds attached to this telephony account
 */
export interface TelephonySoundOVH {
  /** Sound creation date */
  readonly creationDate?: string;
  /**
   * Sound description
   * @nullable
   */
  description?: string | null;
  /** Sound filename */
  filename?: string;
  /** URL to get sound file */
  readonly getUrl?: string;
  /** Sound ID */
  readonly id?: number;
  /**
   * URL to upload sound file
   * @nullable
   */
  readonly putUrl?: string | null;
  /** Sound file size (in bytes) */
  readonly size?: number;
}

/**
 * Softphone theme update inputs
 */
export interface TelephonySoftphoneThemeInputOVH {
  /** Theme ID */
  themeId: number;
}

/**
 * Softphone theme information
 */
export interface TelephonySoftphoneThemeOVH {
  /** Theme main color code */
  readonly color?: string;
  /** Theme ID */
  readonly themeId?: number;
}

/**
 * Softphone application stores links
 */
export interface TelephonySoftphoneStoreLinksOVH {
  /** Android application store link */
  readonly android?: string;
  /** iOS application store link */
  readonly ios?: string;
  /** MacOS application store link */
  readonly macos?: string;
  /** Windows application store link */
  readonly windows?: string;
}

/**
 * Softphone logo information
 */
export interface TelephonySoftphoneLogoOVH {
  /** Logo filename */
  filename: string;
  /** URL used to download logo */
  url: string;
}

/**
 * Beta status of softphone
 */
export interface TelephonySoftphoneBetaStatusOVH {
  /** Whether Softphone beta is enabled or disabled */
  enabled: boolean;
}

/**
 * Softphone beta eligibility
 */
export interface TelephonySoftphoneBetaEligibilityOVH {
  /** Whether the account is eligible to the Softphone beta offer */
  readonly eligibility?: boolean;
}

/**
 * Product type
 */
export type TelephonySipDomainProductTypeEnumOVH = typeof TelephonySipDomainProductTypeEnumOVH[keyof typeof TelephonySipDomainProductTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonySipDomainProductTypeEnumOVH = {
  sip: 'sip',
  trunk: 'trunk',
} as const;

/**
 * Details about simultaneous channels of this line
 */
export interface TelephonySimultaneousChannelsDetailsOVH {
  /** Basic quantity of simultaneous channels included in the line. */
  basic?: number;
  /** Current quantity of simultaneous channels. */
  current?: number;
  /** Extra quantity of simultaneous channels added to the line. */
  extra?: number;
  /** Maximum quantity of simultaneous channels the line can have. */
  maximum?: number;
  /** Quantity of simultaneous channels going to be deleted at the end of the billing cycle. */
  toBeDeleted?: number;
}

/**
 * Voicemail configuration
 */
export type TelephonyServiceVoicemailMailOptionEnumOVH = typeof TelephonyServiceVoicemailMailOptionEnumOVH[keyof typeof TelephonyServiceVoicemailMailOptionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyServiceVoicemailMailOptionEnumOVH = {
  attachment: 'attachment',
  simple: 'simple',
} as const;

/**
 * Voicemail configuration
 */
export interface TelephonyServiceVoicemailNotificationsOVH {
  email?: string;
  type?: TelephonyServiceVoicemailMailOptionEnumOVH;
}

/**
 * Voicemail audio format
 */
export type TelephonyServiceVoicemailAudioFormatEnumOVH = typeof TelephonyServiceVoicemailAudioFormatEnumOVH[keyof typeof TelephonyServiceVoicemailAudioFormatEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyServiceVoicemailAudioFormatEnumOVH = {
  aiff: 'aiff',
  au: 'au',
  flac: 'flac',
  mp3: 'mp3',
  ogg: 'ogg',
  wav: 'wav',
} as const;

/**
 * Number country
 */
export type TelephonyServiceNumberCountryEnumOVH = typeof TelephonyServiceNumberCountryEnumOVH[keyof typeof TelephonyServiceNumberCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyServiceNumberCountryEnumOVH = {
  be: 'be',
  ch: 'ch',
  de: 'de',
  es: 'es',
  fr: 'fr',
  gb: 'gb',
  uk: 'uk',
} as const;

/**
 * Type of screen list
 */
export type TelephonyScreenListTypeEnumOVH = typeof TelephonyScreenListTypeEnumOVH[keyof typeof TelephonyScreenListTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyScreenListTypeEnumOVH = {
  incomingBlackList: 'incomingBlackList',
  incomingWhiteList: 'incomingWhiteList',
  outgoingBlackList: 'outgoingBlackList',
  outgoingWhiteList: 'outgoingWhiteList',
} as const;

/**
 * Nature of screen list
 */
export type TelephonyScreenListNatureEnumOVH = typeof TelephonyScreenListNatureEnumOVH[keyof typeof TelephonyScreenListNatureEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyScreenListNatureEnumOVH = {
  fax: 'fax',
  international: 'international',
  services: 'services',
  special: 'special',
  voicemail: 'voicemail',
} as const;

/**
 * Type of screen list
 */
export type TelephonyScreenListChoosingEnumOVH = typeof TelephonyScreenListChoosingEnumOVH[keyof typeof TelephonyScreenListChoosingEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyScreenListChoosingEnumOVH = {
  blacklist: 'blacklist',
  disabled: 'disabled',
  whitelist: 'whitelist',
} as const;

/**
 * Screen list
 */
export interface TelephonyScreenListOVH {
  readonly callNumber?: string;
  readonly id?: number;
  readonly nature?: TelephonyScreenListNatureEnumOVH;
  readonly status?: string;
  readonly type?: TelephonyScreenListTypeEnumOVH;
}

/**
 * ScreenList capable services
 */
export interface TelephonyScreenOVH {
  incomingScreenList?: TelephonyScreenListChoosingEnumOVH;
  outgoingScreenList?: TelephonyScreenListChoosingEnumOVH;
  readonly serviceName?: string;
}

/**
 * Scheculer category
 */
export type TelephonySchedulerCategoryEnumOVH = typeof TelephonySchedulerCategoryEnumOVH[keyof typeof TelephonySchedulerCategoryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonySchedulerCategoryEnumOVH = {
  holidays: 'holidays',
  scheduler1: 'scheduler1',
  scheduler2: 'scheduler2',
  scheduler3: 'scheduler3',
} as const;

/**
 * Scheduled event
 */
export interface TelephonySchedulerEventOVH {
  /** The category of the event */
  categories?: TelephonySchedulerCategoryEnumOVH;
  /** The ending date of the event */
  dateEnd?: string;
  /** The beginning date of the event */
  dateStart?: string;
  /** @nullable */
  description?: string | null;
  title?: string;
  /** The unique ICS event identifier */
  readonly uid?: string;
}

/**
 * Scheduler capable services
 */
export interface TelephonySchedulerOVH {
  readonly serviceName?: string;
  timeZone?: TelephonyTimeZoneOVH;
}

/**
 * @nullable
 */
export type TelephonyRsvaOVHTypology = TelephonyPortabilitySpecialNumberCategoryEnumOVH | null;

/**
 * French value added services subject to the RSVA reform (Référentiel des numéros SVA)
 */
export interface TelephonyRsvaOVH {
  readonly serviceName?: string;
  /** @nullable */
  typology?: TelephonyRsvaOVHTypology;
}

/**
 * Return merchandise authorisation type
 */
export type TelephonyRmaTypeEnumOVH = typeof TelephonyRmaTypeEnumOVH[keyof typeof TelephonyRmaTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaTypeEnumOVH = {
  after_sale_equipment_service_exchange: 'after sale equipment service exchange',
  after_sale_phone_service_exchange: 'after sale phone service exchange',
  equipment_restitution: 'equipment restitution',
  fast_exchange: 'fast exchange',
  old_merchandise_reception_before_exchange: 'old merchandise reception before exchange',
  phone_restitution: 'phone restitution',
  resends_due_to_shipping_lost_by_the_carrier: 'resends due to shipping lost by the carrier',
  resends_due_to_shipping_not_withdraw: 'resends due to shipping not withdraw',
  specific_return_merchandise_authorisation: 'specific return merchandise authorisation',
  termination: 'termination',
  unknown: 'unknown',
} as const;

/**
 * Status of the RMA step
 */
export type TelephonyRmaStepStatusEnumOVH = typeof TelephonyRmaStepStatusEnumOVH[keyof typeof TelephonyRmaStepStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaStepStatusEnumOVH = {
  done: 'done',
  todo: 'todo',
} as const;

/**
 * RMA step names
 */
export type TelephonyRmaStepNameEnumOVH = typeof TelephonyRmaStepNameEnumOVH[keyof typeof TelephonyRmaStepNameEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaStepNameEnumOVH = {
  dispatchJustification: 'dispatchJustification',
  equipmentSending: 'equipmentSending',
  equipmentTesting: 'equipmentTesting',
  opening: 'opening',
  parcelReception: 'parcelReception',
  parcelValidation: 'parcelValidation',
  validation: 'validation',
} as const;

/**
 * Informations related to the current RMA step status
 */
export interface TelephonyRmaStepOVH {
  /** A brief description of the step */
  description?: string;
  /**
   * The date when this step was done
   * @nullable
   */
  doneDate?: string | null;
  /**
   * Additional informations about the step
   * @nullable
   */
  infos?: string | null;
  /** The name of the RMA step */
  name?: TelephonyRmaStepNameEnumOVH;
  /** Status of the step */
  status?: TelephonyRmaStepStatusEnumOVH;
}

/**
 * Return merchandise authorisation step
 */
export type TelephonyRmaStatusEnumOVH = typeof TelephonyRmaStatusEnumOVH[keyof typeof TelephonyRmaStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaStatusEnumOVH = {
  closed: 'closed',
  open: 'open',
  received: 'received',
} as const;

/**
 * Post-creation return information structure
 */
export interface TelephonyRmaReturnOVH {
  /** Voucher reference identifier of the return merchandise authorisation */
  id?: string;
}

/**
 * Return merchandise authorisation type
 */
export type TelephonyRmaReplaceTypeEnumOVH = typeof TelephonyRmaReplaceTypeEnumOVH[keyof typeof TelephonyRmaReplaceTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaReplaceTypeEnumOVH = {
  changePhone: 'changePhone',
  phoneRestitution: 'phoneRestitution',
  undefined: 'undefined',
} as const;

/**
 * Return merchandise authorisation type
 */
export type TelephonyRmaPublicTypeEnumOVH = typeof TelephonyRmaPublicTypeEnumOVH[keyof typeof TelephonyRmaPublicTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaPublicTypeEnumOVH = {
  'change_to_another_phone/equipment_(restitution_first_and_shipping_then)': 'change to another phone/equipment (restitution first and shipping then)',
  restitution_but_keep_the_service_enable: 'restitution but keep the service enable',
} as const;

/**
 * Return merchandise authorisation offer type
 */
export type TelephonyRmaOfferTypeEnumOVH = typeof TelephonyRmaOfferTypeEnumOVH[keyof typeof TelephonyRmaOfferTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaOfferTypeEnumOVH = {
  deposit: 'deposit',
  loan: 'loan',
  purchase: 'purchase',
} as const;

/**
 * Types of return merchandise authorisation you can change to
 */
export type TelephonyRmaChangeTypeEnumOVH = typeof TelephonyRmaChangeTypeEnumOVH[keyof typeof TelephonyRmaChangeTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaChangeTypeEnumOVH = {
  resiliate: 'resiliate',
  toSip: 'toSip',
} as const;

/**
 * Offer type of the new merchandise in case of exchange
 * @nullable
 */
export type TelephonyRmaOVHOfferTypeNew = TelephonyRmaOfferTypeEnumOVH | null;

/**
 * Current Return Merchandise Authorisation
 */
export interface TelephonyRmaOVH {
  /** Is the RMA cancellable? */
  readonly cancellable?: boolean;
  /** Creation datetime of the return merchandise authorisation ticket */
  readonly creationDatetime?: string;
  /** Merchandise reference */
  readonly equipmentReference?: string;
  /** Return merchandise authorisation identifier */
  readonly id?: string;
  /**
   * New merchandise brand in case of exchange
   * @nullable
   */
  readonly newMerchandise?: string | null;
  /**
   * Offer type of the new merchandise in case of exchange
   * @nullable
   */
  readonly offerTypeNew?: TelephonyRmaOVHOfferTypeNew;
  /** Offer type of the return merchandise */
  readonly offerTypeOld?: TelephonyRmaOfferTypeEnumOVH;
  /** Process determined for merchandise returned */
  process?: TelephonyRmaReplaceTypeEnumOVH;
  /**
   * Reception datetime of the return merchandise authorisation ticket
   * @nullable
   */
  readonly receptionDatetime?: string | null;
  /** Contact information related to the delivery shipping in case of exchange */
  shippingContact?: TelephonyContactOVH;
  /** Return merchandise authorisation step */
  readonly status?: TelephonyRmaStatusEnumOVH;
  /** Indicates the current status of the RMA with a list of steps */
  readonly steps?: readonly TelephonyRmaStepOVH[];
  /**
   * Termination datetime of the return merchandise authorisation ticket
   * @nullable
   */
  readonly terminationDatetime?: string | null;
  /** Typology process of merchandise return */
  readonly type?: TelephonyRmaTypeEnumOVH;
}

/**
 * How the phone had been reset
 */
export type TelephonyResetPhoneMethodEnumOVH = typeof TelephonyResetPhoneMethodEnumOVH[keyof typeof TelephonyResetPhoneMethodEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyResetPhoneMethodEnumOVH = {
  code: 'code',
  http: 'http',
} as const;

/**
 * Relevant informations about reset code
 */
export interface TelephonyResetPhoneCodeInfoOVH {
  /**
   * Activation code
   * @nullable
   */
  activationCode?: string | null;
  /**
   * Key book url
   * @nullable
   */
  keyBook?: string | null;
  /**
   * Server url
   * @nullable
   */
  serverURL?: string | null;
}

/**
 * Reset code informations
 * @nullable
 */
export type TelephonyResetPhoneInfoOVHResetCodeInfo = TelephonyResetPhoneCodeInfoOVH | null;

/**
 * Relevant informations of the phone reset
 */
export interface TelephonyResetPhoneInfoOVH {
  /**
   * Reset code informations
   * @nullable
   */
  resetCodeInfo?: TelephonyResetPhoneInfoOVHResetCodeInfo;
  /** Which way had been used to reset the phone */
  resetPhoneMethod?: TelephonyResetPhoneMethodEnumOVH;
}

/**
 * Status of password update
 */
export type TelephonyResellerPanelPasswordUpdateStatusEnumOVH = typeof TelephonyResellerPanelPasswordUpdateStatusEnumOVH[keyof typeof TelephonyResellerPanelPasswordUpdateStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyResellerPanelPasswordUpdateStatusEnumOVH = {
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * Password update task status
 * @nullable
 */
export type TelephonyResellerPanelStatusOVHPasswordUpdateStatus = TelephonyResellerPanelPasswordUpdateStatusEnumOVH | null;

/**
 * Describe the status of the reseller panel, if it is activated and if there is a password update ongoing
 */
export interface TelephonyResellerPanelStatusOVH {
  /** Whether the reseller panel is enabled or not */
  enabled?: boolean;
  /**
   * Password update task status
   * @nullable
   */
  passwordUpdateStatus?: TelephonyResellerPanelStatusOVHPasswordUpdateStatus;
}

/**
 * @nullable
 */
export type TelephonyRepaymentConsumptionOVHDialed = PhoneNumberOVH | null;

/**
 * Calling number of the call
 * @nullable
 */
export type TelephonyRepaymentConsumptionOVHCalling = PhoneNumberOVH | null;

/**
 * Called number of the call
 * @nullable
 */
export type TelephonyRepaymentConsumptionOVHCalled = PhoneNumberOVH | null;

/**
 * Call which are repayable
 */
export interface TelephonyRepaymentConsumptionOVH {
  /**
   * Called number of the call
   * @nullable
   */
  readonly called?: TelephonyRepaymentConsumptionOVHCalled;
  /**
   * Calling number of the call
   * @nullable
   */
  readonly calling?: TelephonyRepaymentConsumptionOVHCalling;
  readonly consumptionId?: number;
  /**
   * the Datetime of the start of the call
   * @nullable
   */
  readonly creationDatetime?: string | null;
  /** @nullable */
  readonly dialed?: TelephonyRepaymentConsumptionOVHDialed;
  /**
   * Duration of the call
   * @nullable
   */
  readonly duration?: number | null;
  /**
   * Calling number's operator
   * @nullable
   */
  readonly operator?: string | null;
  /**
   * Price repayed with the call
   * @nullable
   */
  readonly price?: number | null;
  /**
   * Is the call repayable right now
   * @nullable
   */
  readonly repayable?: boolean | null;
}

/**
 * SIP registration's local device IP
 * @nullable
 */
export type TelephonyRegistrationInformationsOVHLocalIp = IpOVH | null;

/**
 * Informations about a SIP registration (i.e. IP, port, User-Agent...)
 */
export interface TelephonyRegistrationInformationsOVH {
  /** SIP registration's date */
  datetime?: string;
  /**
   * SIP registration's domain
   * @nullable
   */
  domain?: string | null;
  /** SIP registration's IP */
  ip?: IpOVH;
  /**
   * SIP registration's local device IP
   * @nullable
   */
  localIp?: TelephonyRegistrationInformationsOVHLocalIp;
  /**
   * SIP registration's local device port
   * @nullable
   */
  localPort?: number | null;
  /**
   * SIP registration's port
   * @nullable
   */
  port?: number | null;
  /**
   * SIP registration's User-Agent
   * @nullable
   */
  userAgent?: string | null;
}

/**
 * @nullable
 */
export type TelephonyRedirectOVHDestination = PhoneNumberOVH | null;

/**
 * Redirect service
 */
export interface TelephonyRedirectOVH {
  description?: string;
  /** @nullable */
  readonly destination?: TelephonyRedirectOVHDestination;
  readonly featureType?: TelephonyTypeEnumOVH;
  readonly serviceName?: string;
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
}

/**
 * The event type
 */
export type TelephonyRealtimeEventTypeOVH = typeof TelephonyRealtimeEventTypeOVH[keyof typeof TelephonyRealtimeEventTypeOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRealtimeEventTypeOVH = {
  end_calling: 'end_calling',
  end_hold: 'end_hold',
  end_ringing: 'end_ringing',
  start_calling: 'start_calling',
  start_hold: 'start_hold',
  start_ringing: 'start_ringing',
} as const;

/**
 * The event protocol
 */
export type TelephonyRealtimeEventProtocolOVH = typeof TelephonyRealtimeEventProtocolOVH[keyof typeof TelephonyRealtimeEventProtocolOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRealtimeEventProtocolOVH = {
  mgcp: 'mgcp',
  sip: 'sip',
} as const;

/**
 * The call direction for a given event
 */
export type TelephonyRealtimeEventDirectionOVH = typeof TelephonyRealtimeEventDirectionOVH[keyof typeof TelephonyRealtimeEventDirectionOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRealtimeEventDirectionOVH = {
  incoming: 'incoming',
  outgoing: 'outgoing',
} as const;

/**
 * Informations related to the rate code
 */
export interface TelephonyRateCodeInformationOVH {
  /** The Rsva rate code */
  code?: string;
  /** Price per call */
  pricePerCallWithoutTax?: OrderPriceOVH;
  /** Price per minute */
  pricePerMinuteWithoutTax?: OrderPriceOVH;
}

/**
 * Phone protocol
 */
export type TelephonyProtocolEnumOVH = typeof TelephonyProtocolEnumOVH[keyof typeof TelephonyProtocolEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyProtocolEnumOVH = {
  mgcp: 'mgcp',
  sip: 'sip',
} as const;

/**
 * All existing properties of line or alias offer
 */
export type TelephonyPropertyEnumOVH = typeof TelephonyPropertyEnumOVH[keyof typeof TelephonyPropertyEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyPropertyEnumOVH = {
  xdsl: 'xdsl',
} as const;

/**
 * Telephony procedure status
 */
export type TelephonyProcedureStatusEnumOVH = typeof TelephonyProcedureStatusEnumOVH[keyof typeof TelephonyProcedureStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyProcedureStatusEnumOVH = {
  cancelled: 'cancelled',
  doing: 'doing',
  done: 'done',
  todo: 'todo',
  waiting_for_customer: 'waiting_for_customer',
} as const;

/**
 * Procedure linked to your account
 */
export interface TelephonyProcedureOVH {
  /**
   * The date at which the procedure was closed.
   * @nullable
   */
  readonly finishDate?: string | null;
  /** Procedure ID */
  readonly id?: number;
  /** The URL of the procedure document. */
  readonly pdfUrl?: string;
  /** The date at which the procedure was opened. */
  readonly requestDate?: string;
  /** The current status of the procedure. */
  readonly status?: TelephonyProcedureStatusEnumOVH;
}

/**
 * @nullable
 */
export type TelephonyPreviousVoiceConsumptionOVHCalling = PhoneNumberOVH | null;

/**
 * @nullable
 */
export type TelephonyPreviousVoiceConsumptionOVHCalled = PhoneNumberOVH | null;

/**
 * Call delivery record of the previous month
 */
export interface TelephonyPreviousVoiceConsumptionOVH {
  /** @nullable */
  readonly called?: TelephonyPreviousVoiceConsumptionOVHCalled;
  /** @nullable */
  readonly calling?: TelephonyPreviousVoiceConsumptionOVHCalling;
  readonly consumptionId?: number;
  /** Country suffix destination */
  readonly countrySuffix?: string;
  readonly creationDatetime?: string;
  /** Description of the destination */
  readonly designation?: string;
  readonly destinationType?: TelephonyVoiceConsumptionDestinationTypeEnumOVH;
  readonly duration?: number;
  /**
   * Information about hangup cause
   * @nullable
   */
  readonly hangupNature?: string | null;
  readonly planType?: TelephonyVoiceConsumptionPlanTypeEnumOVH;
  readonly priceWithoutTax?: OrderPriceOVH;
  readonly wayType?: TelephonyVoiceConsumptionWayTypeEnumOVH;
}

/**
 * List of possible status of a step
 */
export type TelephonyPortabilityStepStatusEnumOVH = typeof TelephonyPortabilityStepStatusEnumOVH[keyof typeof TelephonyPortabilityStepStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyPortabilityStepStatusEnumOVH = {
  cancelled: 'cancelled',
  doing: 'doing',
  done: 'done',
  error: 'error',
  hold: 'hold',
  todo: 'todo',
} as const;

/**
 * List of possible step name
 */
export type TelephonyPortabilityStepNameEnumOVH = typeof TelephonyPortabilityStepNameEnumOVH[keyof typeof TelephonyPortabilityStepNameEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyPortabilityStepNameEnumOVH = {
  acknowledgmentReceivedFromOperator: 'acknowledgmentReceivedFromOperator',
  belgiumPortabilityRequestCreated: 'belgiumPortabilityRequestCreated',
  belgiumPortabilityRequestExecutionAcked: 'belgiumPortabilityRequestExecutionAcked',
  belgiumPortabilityRequestExecutionAsked: 'belgiumPortabilityRequestExecutionAsked',
  belgiumPortabilityRequestExecutionCompleted: 'belgiumPortabilityRequestExecutionCompleted',
  belgiumPortabilityRequestValidated: 'belgiumPortabilityRequestValidated',
  belgiumPortabilityRequestWaitingUntilExec: 'belgiumPortabilityRequestWaitingUntilExec',
  customerFormReceived: 'customerFormReceived',
  customerFormSent: 'customerFormSent',
  customerFormValidated: 'customerFormValidated',
  finalReportReceivedFromOperator: 'finalReportReceivedFromOperator',
  intermediateReportReceivedFromOperator: 'intermediateReportReceivedFromOperator',
  numberActivation: 'numberActivation',
  requestSentToOperator: 'requestSentToOperator',
  sDASequenceReceivedFromOperator: 'sDASequenceReceivedFromOperator',
} as const;

/**
 * Additional informations about the portability step
 */
export interface TelephonyPortabilityStepInfosOVH {
  /**
   * The last portability due date that has been proposed
   * @nullable
   */
  lastProposedDate?: string | null;
  /**
   * If the step status is "error", it is the reason
   * @nullable
   */
  reason?: string | null;
  /**
   * A code representing the reason
   * @nullable
   */
  reasonType?: string | null;
}

/**
 * List of possible duration unit. "NA" means that there is no defined duration
 */
export type TelephonyPortabilityStepDurationUnitEnumOVH = typeof TelephonyPortabilityStepDurationUnitEnumOVH[keyof typeof TelephonyPortabilityStepDurationUnitEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyPortabilityStepDurationUnitEnumOVH = {
  NA: 'NA',
  day: 'day',
  hour: 'hour',
  openday: 'openday',
} as const;

/**
 * Represent the delay between two portability steps
 */
export interface TelephonyPortabilityStepDurationOVH {
  /** The quantity of delay */
  quantity?: number;
  /** The delay's unit */
  unit?: TelephonyPortabilityStepDurationUnitEnumOVH;
}

/**
 * Additional informations about the step
 * @nullable
 */
export type TelephonyPortabilityStepOVHInfos = TelephonyPortabilityStepInfosOVH | null;

/**
 * A step in the portability process
 */
export interface TelephonyPortabilityStepOVH {
  /**
   * A brief description of the step
   * @nullable
   */
  description?: string | null;
  /**
   * The date when this step was done
   * @nullable
   */
  doneDate?: string | null;
  /** The theoric delay between the previous step's done date and this step's done date */
  duration?: TelephonyPortabilityStepDurationOVH;
  /**
   * Additional informations about the step
   * @nullable
   */
  infos?: TelephonyPortabilityStepOVHInfos;
  /** The name of the portability step */
  name?: TelephonyPortabilityStepNameEnumOVH;
  /** Indicates if the step is to do, currently doing or done */
  status?: TelephonyPortabilityStepStatusEnumOVH;
}

/**
 * Possible parameters to provide to fix portability errors
 */
export interface TelephonyPortabilityFixErrorPossibleParametersOVH {
  /** Mandatory parameter list */
  mandatoryParameters?: string[];
  /** Optional parameter list */
  optionalParameters?: string[];
}

/**
 * Document linked to a portability
 */
export interface TelephonyPortabilityDocumentOVH {
  /**
   * Description of the document
   * @nullable
   */
  description?: string | null;
  /** Identifier of the document */
  readonly documentId?: number;
  /** URL to get document */
  readonly getUrl?: string;
  /** Name of the document */
  name?: string;
  /**
   * URL to upload document
   * @nullable
   */
  readonly putUrl?: string | null;
  /** Document size (in bytes) */
  readonly size?: number;
}

/**
 * Customer informations about a portability
 */
export interface TelephonyPortabilityCustomerInfosOVH {
  /**
   * Building of the customer's address
   * @nullable
   */
  building?: string | null;
  /** City of the customer's address */
  city?: string;
  /**
   * Door of the customer's address
   * @nullable
   */
  door?: string | null;
  /**
   * Floor of the customer's address
   * @nullable
   */
  floor?: string | null;
  /** Name of the customer */
  name?: string;
  /**
   * SIRET of the customer
   * @nullable
   */
  siret?: string | null;
  /**
   * Stair of the customer's address
   * @nullable
   */
  stair?: string | null;
  /** Street name of the customer's address */
  streetName?: string;
  /** Street number of the customer's address */
  streetNumber?: string;
  /** ZIP code of the customer's address */
  zip?: string;
}

/**
 * Country that defines the portability kind
 */
export type TelephonyPortabilityCountryEnumOVH = typeof TelephonyPortabilityCountryEnumOVH[keyof typeof TelephonyPortabilityCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyPortabilityCountryEnumOVH = {
  belgium: 'belgium',
  france: 'france',
  switzerland: 'switzerland',
} as const;

/**
 * Portability informations
 */
export interface TelephonyPortabilityOVH {
  /** The billing account where the numbers will be inserted */
  readonly billingAccount?: string;
  /** The portability's creation date */
  readonly creationDate?: string;
  /** Customer informations about this portability */
  readonly customerInfos?: TelephonyPortabilityCustomerInfosOVH;
  /**
   * The date when the portability will be done and when numbers will be ported
   * @nullable
   */
  readonly desiredExecutionDate?: string | null;
  /** Indicates that portability is in error */
  readonly error?: boolean;
  /** Codes representing the error in current portability */
  readonly errorCodes?: readonly string[];
  /** The ID of the portability */
  readonly id?: number;
  /**
   * Show the redirection that will be configured when the portability will be done
   * @nullable
   */
  readonly lineToRedirectTo?: string | null;
  /** The list of numbers that is going to be ported */
  readonly numbersList?: readonly string[];
  /** The operator that currently holds the numbers */
  readonly operator?: string;
  /** The ID of the portability order */
  readonly orderId?: number;
  /** Country that defines the portability kind */
  readonly portabilityCountry?: TelephonyPortabilityCountryEnumOVH;
  /**
   * RIO of the portability (France only)
   * @nullable
   */
  readonly rio?: string | null;
}

/**
 * Phone book on group
 */
export interface TelephonyPhonebookMasterOVH {
  /** Identifier of the phonebook */
  readonly bookKey?: string;
  /** Phone book name */
  name?: string;
}

/**
 * Landline phone office number of the contact
 * @nullable
 */
export type TelephonyPhonebookContactOVHWorkPhone = PhoneNumberOVH | null;

/**
 * Mobile phone office number of the contact
 * @nullable
 */
export type TelephonyPhonebookContactOVHWorkMobile = PhoneNumberOVH | null;

/**
 * Home landline phone number of the contact
 * @nullable
 */
export type TelephonyPhonebookContactOVHHomePhone = PhoneNumberOVH | null;

/**
 * Home mobile phone number of the contact
 * @nullable
 */
export type TelephonyPhonebookContactOVHHomeMobile = PhoneNumberOVH | null;

/**
 * Phone book contact
 */
export interface TelephonyPhonebookContactOVH {
  /** Group name of the phonebook */
  group?: string;
  /**
   * Home mobile phone number of the contact
   * @nullable
   */
  homeMobile?: TelephonyPhonebookContactOVHHomeMobile;
  /**
   * Home landline phone number of the contact
   * @nullable
   */
  homePhone?: TelephonyPhonebookContactOVHHomePhone;
  /** Contact identifier */
  readonly id?: number;
  /** Contact name */
  name?: string;
  /** Contact surname */
  surname?: string;
  /**
   * Mobile phone office number of the contact
   * @nullable
   */
  workMobile?: TelephonyPhonebookContactOVHWorkMobile;
  /**
   * Landline phone office number of the contact
   * @nullable
   */
  workPhone?: TelephonyPhonebookContactOVHWorkPhone;
}

/**
 * Phone book
 */
export interface TelephonyPhonebookOVH {
  /** Identifier of the phonebook */
  readonly bookKey?: string;
  /** Set if phonebook is readonly */
  isReadonly?: boolean;
  /** Phonebook name */
  name?: string;
  /** Phone key identifier between the phone and phonebooks */
  readonly phoneKey?: string;
}

/**
 * Credentials to access the web interface of the phone
 */
export interface TelephonyPhoneCredentialsOVH {
  /**
   * Username to access the web interface of the phone
   * @nullable
   */
  login?: string | null;
  /** Password to access the web interface of the phone */
  password?: string;
}

/**
 * Phone configuration type enum
 */
export type TelephonyPhoneConfigurationTypeEnumOVH = typeof TelephonyPhoneConfigurationTypeEnumOVH[keyof typeof TelephonyPhoneConfigurationTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyPhoneConfigurationTypeEnumOVH = {
  boolean: 'boolean',
  enum: 'enum',
  hidden: 'hidden',
  ipv4: 'ipv4',
  numeric: 'numeric',
  string: 'string',
} as const;

/**
 * Provisioning type
 * @nullable
 */
export type TelephonyPhoneConfigurationPropertyOVHType = TelephonyPhoneConfigurationTypeEnumOVH | null;

/**
 * Range property value
 * @nullable
 */
export type TelephonyPhoneConfigurationPropertyOVHRangeValue = ComplexTypeRangeLongOVH | null;

/**
 * Phone Configuration level enum
 */
export type TelephonyPhoneConfigurationLevelEnumOVH = typeof TelephonyPhoneConfigurationLevelEnumOVH[keyof typeof TelephonyPhoneConfigurationLevelEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyPhoneConfigurationLevelEnumOVH = {
  admin: 'admin',
  expert: 'expert',
} as const;

/**
 * Provisioning level
 * @nullable
 */
export type TelephonyPhoneConfigurationPropertyOVHLevel = TelephonyPhoneConfigurationLevelEnumOVH | null;

/**
 * Phone configuration property
 */
export interface TelephonyPhoneConfigurationPropertyOVH {
  /**
   * Default property value
   * @nullable
   */
  default?: string | null;
  /**
   * Property description
   * @nullable
   */
  description?: string | null;
  /**
   * Property value possibilities
   * @nullable
   */
  enum?: string[] | null;
  /**
   * The property group
   * @nullable
   */
  group?: string | null;
  /**
   * Provisioning level
   * @nullable
   */
  level?: TelephonyPhoneConfigurationPropertyOVHLevel;
  /**
   * Max string chars
   * @nullable
   */
  maxlength?: number | null;
  /**
   * The property name
   * @nullable
   */
  name?: string | null;
  /**
   * Range property value
   * @nullable
   */
  rangeValue?: TelephonyPhoneConfigurationPropertyOVHRangeValue;
  /**
   * Provisioning type
   * @nullable
   */
  type?: TelephonyPhoneConfigurationPropertyOVHType;
  /**
   * Current property value
   * @nullable
   */
  value?: string | null;
}

/**
 * The ip restriction of your MGCP phone
 * @nullable
 */
export type TelephonyPhoneOVHMgcpIpRestriction = IpOVH | null;

/**
 * Plug & Phone
 */
export interface TelephonyPhoneOVH {
  /** Brand name */
  readonly brand?: string;
  /** The phone description */
  readonly description?: string;
  /** Mac Address */
  readonly macAddress?: string;
  /** Maximum number of lines managed by a phone */
  readonly maxline?: number;
  /** Maximum simultaneous calls managed by the phone */
  readonly maxSimultaneousCalls?: number;
  /**
   * The ip restriction of your MGCP phone
   * @nullable
   */
  mgcpIpRestriction?: TelephonyPhoneOVHMgcpIpRestriction;
  /** Current phone properties */
  readonly phoneConfiguration?: readonly TelephonyPhoneConfigurationPropertyOVH[];
  /** Phone protocol */
  readonly protocol?: TelephonyProtocolEnumOVH;
  /**
   * The phone user password
   * @nullable
   */
  readonly userPassword?: string | null;
}

/**
 * File providing task status
 */
export type TelephonyPcsFileStatusEnumOVH = typeof TelephonyPcsFileStatusEnumOVH[keyof typeof TelephonyPcsFileStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyPcsFileStatusEnumOVH = {
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * Telephony API related file hosted
 */
export interface TelephonyPcsFileOVH {
  readonly filename?: string;
  readonly status?: TelephonyPcsFileStatusEnumOVH;
  readonly url?: string;
  readonly urlExpirationDatetime?: string;
}

/**
 * Whispering mode
 */
export type TelephonyOvhPabxWhisperingModeEnumOVH = typeof TelephonyOvhPabxWhisperingModeEnumOVH[keyof typeof TelephonyOvhPabxWhisperingModeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxWhisperingModeEnumOVH = {
  Whisper_to_agent_only: 'Whisper to agent only',
  Whisper_to_all_participants: 'Whisper to all participants',
} as const;

/**
 * Voice to use for your text to speech
 */
export type TelephonyOvhPabxTtsVoiceEnumOVH = typeof TelephonyOvhPabxTtsVoiceEnumOVH[keyof typeof TelephonyOvhPabxTtsVoiceEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxTtsVoiceEnumOVH = {
  Bruce: 'Bruce',
  Helene: 'Helene',
  Jenny: 'Jenny',
  Loic: 'Loic',
} as const;

/**
 * The PABX Text To Speech sounds
 */
export interface TelephonyOvhPabxTtsOVH {
  readonly id?: number;
  /** The text that will be played */
  text?: string;
  /** The voice used to say text */
  voice?: TelephonyOvhPabxTtsVoiceEnumOVH;
}

/**
 * The PABX sounds
 */
export interface TelephonyOvhPabxSoundOVH {
  /** The sound filename */
  readonly name?: string;
  readonly soundId?: number;
}

/**
 * The PABX records
 */
export interface TelephonyOvhPabxRecordOVH {
  /**
   * The agent number of the recorded call
   * @nullable
   */
  readonly agent?: string | null;
  /**
   * The end date of the recorded call
   * @nullable
   */
  readonly callEnd?: string | null;
  /** The caller name of the recorded call */
  readonly callerIdName?: string;
  /** The caller number of the recorded call */
  readonly callerIdNumber?: string;
  /** The begin date of the recorded call */
  readonly callStart?: string;
  /**
   * The destination number of the recorded call
   * @nullable
   */
  readonly destinationNumber?: string | null;
  /** The duration in seconds of the recorded call */
  readonly duration?: number;
  /** The record sound url */
  readonly fileUrl?: string;
  readonly id?: number;
}

/**
 * Available actions for overflow and on closure
 */
export type TelephonyOvhPabxQueueActionEnumOVH = typeof TelephonyOvhPabxQueueActionEnumOVH[keyof typeof TelephonyOvhPabxQueueActionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxQueueActionEnumOVH = {
  playback: 'playback',
  voicemail: 'voicemail',
} as const;

/**
 * IVR menu entry
 */
export interface TelephonyOvhPabxMenuEntryOVH {
  /** The action triggered by the DTMF */
  action?: TelephonyOvhPabxIvrMenuEntryActionEnumOVH;
  /** The additionnal parameter of the action */
  actionParam?: string;
  /** The DTMF that triggers the action */
  dtmf?: string;
  readonly entryId?: number;
  /** The position of the entry in the menu */
  readonly position?: number;
}

/**
 * IVR Menu
 */
export interface TelephonyOvhPabxMenuOVH {
  /**
   * The id of the OvhPabxSound played to greet
   * @nullable
   */
  greetSound?: number | null;
  /**
   * The text to speech sound played to greet
   * @nullable
   */
  greetSoundTts?: number | null;
  /** The timeout in milliseconds before considering the DTMF entry as done */
  interDigitTimeout?: number;
  /**
   * The id of the OvhPabxSound played when the caller uses an invalid DTMF
   * @nullable
   */
  invalidSound?: number | null;
  /**
   * The text to speech sound played when the caller uses an invalid DTMF
   * @nullable
   */
  invalidSoundTts?: number | null;
  readonly menuId?: number;
  /** The name of the menu */
  name?: string;
  /** The timeout in milliseconds before ending the menu when no DTMF is received */
  timeout?: number;
}

/**
 * IVR menu key
 */
export type TelephonyOvhPabxIvrMenuKeyEnumOVH = typeof TelephonyOvhPabxIvrMenuKeyEnumOVH[keyof typeof TelephonyOvhPabxIvrMenuKeyEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxIvrMenuKeyEnumOVH = {
  '#': '#',
  '*': '*',
  NUMBER_0: '0',
  NUMBER_1: '1',
  NUMBER_2: '2',
  NUMBER_3: '3',
  NUMBER_4: '4',
  NUMBER_5: '5',
  NUMBER_6: '6',
  NUMBER_7: '7',
  NUMBER_8: '8',
  NUMBER_9: '9',
} as const;

/**
 * IVR menu action
 */
export type TelephonyOvhPabxIvrMenuEntryActionEnumOVH = typeof TelephonyOvhPabxIvrMenuEntryActionEnumOVH[keyof typeof TelephonyOvhPabxIvrMenuEntryActionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxIvrMenuEntryActionEnumOVH = {
  bridge: 'bridge',
  callcenter: 'callcenter',
  menuBack: 'menuBack',
  menuExit: 'menuExit',
  menuSub: 'menuSub',
  menuTop: 'menuTop',
  playback: 'playback',
  readDtmf: 'readDtmf',
  setCallerName: 'setCallerName',
} as const;

/**
 * Calls dispatching startegy
 */
export type TelephonyOvhPabxHuntingQueueStrategyEnumOVH = typeof TelephonyOvhPabxHuntingQueueStrategyEnumOVH[keyof typeof TelephonyOvhPabxHuntingQueueStrategyEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxHuntingQueueStrategyEnumOVH = {
  cumulationByAgentOrder: 'cumulationByAgentOrder',
  longestHangupAgent: 'longestHangupAgent',
  longestIdleAgent: 'longestIdleAgent',
  random: 'random',
  ringAll: 'ringAll',
  roundRobin: 'roundRobin',
  sequentiallyByAgentOrder: 'sequentiallyByAgentOrder',
} as const;

/**
 * Possible languages of the sound played to inform caller that he can disable call record
 */
export type TelephonyOvhPabxHuntingQueueRecordDisablingLanguageEnumOVH = typeof TelephonyOvhPabxHuntingQueueRecordDisablingLanguageEnumOVH[keyof typeof TelephonyOvhPabxHuntingQueueRecordDisablingLanguageEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxHuntingQueueRecordDisablingLanguageEnumOVH = {
  english: 'english',
  french: 'french',
} as const;

/**
 * Digit keys allowed to be pressed to disable call record
 */
export type TelephonyOvhPabxHuntingQueueRecordDisablingDigitEnumOVH = typeof TelephonyOvhPabxHuntingQueueRecordDisablingDigitEnumOVH[keyof typeof TelephonyOvhPabxHuntingQueueRecordDisablingDigitEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxHuntingQueueRecordDisablingDigitEnumOVH = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
} as const;

/**
 * Live statistics of the queue
 */
export interface TelephonyOvhPabxHuntingQueueLiveStatisticsOVH {
  /** Total of calls answered */
  readonly callsAnswered?: number;
  /** Total of calls lost */
  readonly callsLost?: number;
  /** Total of calls */
  readonly callsTotal?: number;
  /** Last reset datetime of queue's statistics */
  readonly lastReset?: string;
  /** Total call duration in seconds */
  readonly totalCallDuration?: number;
  /** Total waiting duration in seconds */
  readonly totalWaitingDuration?: number;
}

/**
 * State of the call
 */
export type TelephonyOvhPabxHuntingLiveCallsStateEnumOVH = typeof TelephonyOvhPabxHuntingLiveCallsStateEnumOVH[keyof typeof TelephonyOvhPabxHuntingLiveCallsStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxHuntingLiveCallsStateEnumOVH = {
  Answered: 'Answered',
  Waiting: 'Waiting',
} as const;

/**
 * Live statistics of the queue
 */
export interface TelephonyOvhPabxHuntingQueueLiveCallsOVH {
  /** Name or number of the agent who answered the call */
  readonly agent?: string;
  /**
   * Answer date of the call
   * @nullable
   */
  readonly answered?: string | null;
  /** Begin date of the call */
  readonly begin?: string;
  /** Name of the caller (or anonymous if unknown) */
  readonly callerIdName?: string;
  /** Phone number of the caller (or anonymous if unknown) */
  readonly callerIdNumber?: string;
  /** Phone number called (in case of an outgoing call) */
  readonly destinationNumber?: string;
  /**
   * End date of the call
   * @nullable
   */
  readonly end?: string | null;
  readonly id?: number;
  /**
   * Whether or not the call is on hold
   * @nullable
   */
  readonly onHold?: boolean | null;
  /** Name of the queue of the call */
  readonly queue?: string;
  /** Current state of the call */
  readonly state?: TelephonyOvhPabxHuntingLiveCallsStateEnumOVH;
}

/**
 * Language of the sound played to the caller to inform that he can disable record
 * @nullable
 */
export type TelephonyOvhPabxHuntingQueueOVHRecordDisablingLanguage = TelephonyOvhPabxHuntingQueueRecordDisablingLanguageEnumOVH | null;

/**
 * Key to press to disable record
 * @nullable
 */
export type TelephonyOvhPabxHuntingQueueOVHRecordDisablingDigit = TelephonyOvhPabxHuntingQueueRecordDisablingDigitEnumOVH | null;

/**
 * The key that tells the IVR that digit-entry is finished. Also used as a "repeat" key in the menus when no input is expected.
 * @nullable
 */
export type TelephonyOvhPabxHuntingQueueOVHConfirmKey = TelephonyOvhPabxIvrMenuKeyEnumOVH | null;

/**
 * Action executed when caller enters a full queue
 * @nullable
 */
export type TelephonyOvhPabxHuntingQueueOVHActionOnOverflow = TelephonyOvhPabxQueueActionEnumOVH | null;

/**
 * Action executed when there is no member in queue
 * @nullable
 */
export type TelephonyOvhPabxHuntingQueueOVHActionOnClosure = TelephonyOvhPabxQueueActionEnumOVH | null;

/**
 * Calls queue
 */
export interface TelephonyOvhPabxHuntingQueueOVH {
  /**
   * Action executed when there is no member in queue
   * @nullable
   */
  actionOnClosure?: TelephonyOvhPabxHuntingQueueOVHActionOnClosure;
  /**
   * The additionnal parameter of the on closure action
   * @nullable
   */
  actionOnClosureParam?: string | null;
  /**
   * Action executed when caller enters a full queue
   * @nullable
   */
  actionOnOverflow?: TelephonyOvhPabxHuntingQueueOVHActionOnOverflow;
  /**
   * The additionnal parameter of the overflow action
   * @nullable
   */
  actionOnOverflowParam?: string | null;
  /**
   * Allow the caller to disable call record by pressing a key
   * @nullable
   */
  askForRecordDisabling?: boolean | null;
  /**
   * The key that tells the IVR that digit-entry is finished. Also used as a "repeat" key in the menus when no input is expected.
   * @nullable
   */
  confirmKey?: TelephonyOvhPabxHuntingQueueOVHConfirmKey;
  /**
   * The name of the queue
   * @nullable
   */
  description?: string | null;
  /**
   * Follow the calls forwarding
   * @nullable
   */
  followCallForwards?: boolean | null;
  /** The maximum of people waiting in the queue */
  maxMember?: number;
  /** The maximum waiting time (in seconds) in the queue */
  maxWaitTime?: number;
  readonly queueId?: number;
  /**
   * Enable record on calls in queue
   * @nullable
   */
  record?: boolean | null;
  /**
   * Key to press to disable record
   * @nullable
   */
  recordDisablingDigit?: TelephonyOvhPabxHuntingQueueOVHRecordDisablingDigit;
  /**
   * Language of the sound played to the caller to inform that he can disable record
   * @nullable
   */
  recordDisablingLanguage?: TelephonyOvhPabxHuntingQueueOVHRecordDisablingLanguage;
  /**
   * The id of the OvhPabxSound played to caller when on hold
   * @nullable
   */
  soundOnHold?: number | null;
  /** The calls dispatching strategy */
  strategy?: TelephonyOvhPabxHuntingQueueStrategyEnumOVH;
}

/**
 * Status of the agent
 */
export type TelephonyOvhPabxHuntingLiveAgentStatusEnumOVH = typeof TelephonyOvhPabxHuntingLiveAgentStatusEnumOVH[keyof typeof TelephonyOvhPabxHuntingLiveAgentStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxHuntingLiveAgentStatusEnumOVH = {
  inAQueueCall: 'inAQueueCall',
  loggedOut: 'loggedOut',
  onBreak: 'onBreak',
  receiving: 'receiving',
  waiting: 'waiting',
} as const;

/**
 * Type of the agent
 */
export type TelephonyOvhPabxHuntingAgentTypeEnumOVH = typeof TelephonyOvhPabxHuntingAgentTypeEnumOVH[keyof typeof TelephonyOvhPabxHuntingAgentTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxHuntingAgentTypeEnumOVH = {
  external: 'external',
  internal: 'internal',
} as const;

/**
 * Status of the agent
 */
export type TelephonyOvhPabxHuntingAgentStatusEnumOVH = typeof TelephonyOvhPabxHuntingAgentStatusEnumOVH[keyof typeof TelephonyOvhPabxHuntingAgentStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxHuntingAgentStatusEnumOVH = {
  available: 'available',
  loggedOut: 'loggedOut',
  onBreak: 'onBreak',
} as const;

/**
 * Agent assigned to a queue
 */
export interface TelephonyOvhPabxHuntingAgentQueueOVH {
  readonly agentId?: number;
  /** The position in the queue */
  position?: number;
  readonly queueId?: number;
}

/**
 * Live statistics of the queue
 */
export interface TelephonyOvhPabxHuntingAgentLiveStatusOVH {
  /** The number of calls this agent took on the current day */
  readonly answeredCalls?: number;
  /** Last status change date */
  readonly lastStatusChange?: string;
  /** Current status of the agent */
  readonly status?: TelephonyOvhPabxHuntingLiveAgentStatusEnumOVH;
  /** The total duration in seconds of the calls this agent took on the current day */
  readonly totalCallDuration?: number;
}

/**
 * Calls agent
 */
export interface TelephonyOvhPabxHuntingAgentOVH {
  readonly agentId?: number;
  /**
   * The id of the current break status of the agent
   * @nullable
   */
  breakStatus?: number | null;
  /**
   * The agent's description
   * @nullable
   */
  description?: string | null;
  /** The number of the agent */
  number?: PhoneNumberOVH;
  /** The maximum of simultaneous calls that the agent will receive from the hunting */
  simultaneousLines?: number;
  /** The current status of the agent */
  status?: TelephonyOvhPabxHuntingAgentStatusEnumOVH;
  /** The waiting timeout (in seconds) before hangup an assigned called */
  timeout?: number;
  /** The agent's type */
  readonly type?: TelephonyOvhPabxHuntingAgentTypeEnumOVH;
  /** The wrap up time (in seconds) after the calls */
  wrapUpTime?: number;
}

/**
 * PABX Hunting
 */
export interface TelephonyOvhPabxHuntingOVH {
  /**
   * The templated url of your CRM, opened by the banner application of your cloudpabx
   * @nullable
   */
  crmUrlTemplate?: string | null;
  /**
   * Enable G729 codec on your callcenter
   * @nullable
   */
  g729?: boolean | null;
  /** The name of your callcenter offer */
  readonly name?: string;
  /** Enable/Disable the status change IVR on your callcenter. The IVR is enabled by default. */
  statusIvrEnabled?: boolean;
}

/**
 * Displayed number
 */
export type TelephonyOvhPabxDialplanNumberPresentationEnumOVH = typeof TelephonyOvhPabxDialplanNumberPresentationEnumOVH[keyof typeof TelephonyOvhPabxDialplanNumberPresentationEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxDialplanNumberPresentationEnumOVH = {
  alias: 'alias',
  both: 'both',
  caller: 'caller',
} as const;

/**
 * Dialplan rule action
 */
export type TelephonyOvhPabxDialplanExtensionRuleActionEnumOVH = typeof TelephonyOvhPabxDialplanExtensionRuleActionEnumOVH[keyof typeof TelephonyOvhPabxDialplanExtensionRuleActionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxDialplanExtensionRuleActionEnumOVH = {
  bridge: 'bridge',
  endless_playback: 'endless_playback',
  hangup: 'hangup',
  hunting: 'hunting',
  ivr: 'ivr',
  playback: 'playback',
  readDtmf: 'readDtmf',
  setCallerName: 'setCallerName',
  sleep: 'sleep',
  tts: 'tts',
  voicemail: 'voicemail',
} as const;

/**
 * Dialplan rule
 */
export interface TelephonyOvhPabxDialplanExtensionRuleOVH {
  /** The action made by the rule */
  action?: TelephonyOvhPabxDialplanExtensionRuleActionEnumOVH;
  /**
   * The parameter of the chosen action
   * @nullable
   */
  actionParam?: string | null;
  /** If true, the rule will be executed only when the result of the conditions is false */
  negativeAction?: boolean;
  /** The position of the rule in the extension (the rules are executed following this order) */
  position?: number;
  readonly ruleId?: number;
}

/**
 * Day of the week
 */
export type TelephonyOvhPabxDialplanExtensionConditionTimeWeekDayEnumOVH = typeof TelephonyOvhPabxDialplanExtensionConditionTimeWeekDayEnumOVH[keyof typeof TelephonyOvhPabxDialplanExtensionConditionTimeWeekDayEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxDialplanExtensionConditionTimeWeekDayEnumOVH = {
  friday: 'friday',
  monday: 'monday',
  saturday: 'saturday',
  sunday: 'sunday',
  thursday: 'thursday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
} as const;

/**
 * Time condition
 */
export interface TelephonyOvhPabxDialplanExtensionConditionTimeOVH {
  readonly conditionId?: number;
  /** The time of the day when the extension will start to be executed */
  timeFrom?: TimeOVH;
  /** The time of the day when the extension will stop to be executed */
  timeTo?: TimeOVH;
  /** The day of the week when the extension will be executed */
  weekDay?: TelephonyOvhPabxDialplanExtensionConditionTimeWeekDayEnumOVH;
}

/**
 * Screenlist condition type
 */
export type TelephonyOvhPabxDialplanExtensionConditionScreenListTypeEnumOVH = typeof TelephonyOvhPabxDialplanExtensionConditionScreenListTypeEnumOVH[keyof typeof TelephonyOvhPabxDialplanExtensionConditionScreenListTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOvhPabxDialplanExtensionConditionScreenListTypeEnumOVH = {
  destinationBlackList: 'destinationBlackList',
  destinationWhiteList: 'destinationWhiteList',
  incomingBlackList: 'incomingBlackList',
  incomingWhiteList: 'incomingWhiteList',
} as const;

/**
 * Type of screenlist
 * @nullable
 */
export type TelephonyOvhPabxDialplanExtensionConditionScreenListOVHScreenListType = TelephonyOvhPabxDialplanExtensionConditionScreenListTypeEnumOVH | null;

/**
 * Screenlist condition
 */
export interface TelephonyOvhPabxDialplanExtensionConditionScreenListOVH {
  /**
   * Screenlist based on the presented caller number
   * @nullable
   */
  readonly callerIdNumber?: string | null;
  readonly conditionId?: number;
  /**
   * Screenlist based on the destination number
   * @nullable
   */
  readonly destinationNumber?: string | null;
  /**
   * Type of screenlist
   * @nullable
   */
  readonly screenListType?: TelephonyOvhPabxDialplanExtensionConditionScreenListOVHScreenListType;
}

/**
 * The type of the screenlist
 * @nullable
 */
export type TelephonyOvhPabxDialplanExtensionOVHScreenListType = TelephonyOvhPabxDialplanExtensionConditionScreenListTypeEnumOVH | null;

/**
 * Additionnal conditions are used from this chosen scheduler category
 * @nullable
 */
export type TelephonyOvhPabxDialplanExtensionOVHSchedulerCategory = TelephonySchedulerCategoryEnumOVH | null;

/**
 * Dialplan extension
 */
export interface TelephonyOvhPabxDialplanExtensionOVH {
  /** True if the extension is enabled */
  enabled?: boolean;
  readonly extensionId?: number;
  /** The position of the extension in the dialplan (the extensions are executed following this order) */
  position?: number;
  /**
   * Additionnal conditions are used from this chosen scheduler category
   * @nullable
   */
  schedulerCategory?: TelephonyOvhPabxDialplanExtensionOVHSchedulerCategory;
  /**
   * The type of the screenlist
   * @nullable
   */
  screenListType?: TelephonyOvhPabxDialplanExtensionOVHScreenListType;
}

/**
 * Dialplan
 */
export interface TelephonyOvhPabxDialplanOVH {
  /** Reject (hangup) anonymous calls */
  anonymousRejection?: boolean;
  readonly dialplanId?: number;
  readonly lastUpdate?: string;
  /** The dialplan name */
  name?: string;
  /** The presented number when bridging calls */
  showCallerNumber?: TelephonyOvhPabxDialplanNumberPresentationEnumOVH;
  /** The timeout (in seconds) when bridging calls */
  transferTimeout?: number;
}

/**
 * Custom statuses of your callcenter agents
 */
export interface TelephonyOvhPabxCustomStatusOVH {
  /**
   * The color (in hexadecimal) of the status that will be displayed on agent banner web application
   * @nullable
   */
  readonly color?: string | null;
  /**
   * A short description of the status
   * @nullable
   */
  readonly description?: string | null;
  readonly id?: number;
  /** The name of the status (Pause, Mission, etc...) */
  readonly name?: string;
}

/**
 * OVH calls queues and OVH IVRs (Interactive Voice Response)
 */
export interface TelephonyOvhPabxOVH {
  /** Description of the service */
  description?: string;
  /** Feature of the service */
  readonly featureType?: TelephonyTypeEnumOVH;
  /** Does the service have extended CCS options enabled? */
  readonly isCCS?: boolean;
  readonly serviceName?: string;
  /** General type of the service */
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
}

/**
 * Type of line blocking on outplan notification
 */
export type TelephonyOutplanNotificationBlockEnumOVH = typeof TelephonyOutplanNotificationBlockEnumOVH[keyof typeof TelephonyOutplanNotificationBlockEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOutplanNotificationBlockEnumOVH = {
  blockAllCalls: 'blockAllCalls',
  blockIncomingCalls: 'blockIncomingCalls',
  blockOutgoingCalls: 'blockOutgoingCalls',
  none: 'none',
} as const;

/**
 * Informations related to phone
 */
export interface TelephonyOldPhoneOVH {
  /** Mac address of the phone */
  mac?: string;
  /** Model of the phone */
  model?: string;
}

/**
 * Offer task types
 */
export type TelephonyOfferTaskTypeEnumOVH = typeof TelephonyOfferTaskTypeEnumOVH[keyof typeof TelephonyOfferTaskTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOfferTaskTypeEnumOVH = {
  line: 'line',
  offer: 'offer',
  option: 'option',
  phone: 'phone',
} as const;

/**
 * Offer task actions
 */
export type TelephonyOfferTaskActionEnumOVH = typeof TelephonyOfferTaskActionEnumOVH[keyof typeof TelephonyOfferTaskActionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyOfferTaskActionEnumOVH = {
  convertToAlias: 'convertToAlias',
  convertToSip: 'convertToSip',
  migrateToNewVoicemail: 'migrateToNewVoicemail',
  removeSimltaneousLines: 'removeSimltaneousLines',
  switchServer: 'switchServer',
  termination: 'termination',
  updateFirmware: 'updateFirmware',
  upgrade: 'upgrade',
} as const;

/**
 * Operation on a telephony offer
 */
export interface TelephonyOfferTaskOVH {
  /** Actual action that will be executed */
  readonly action?: TelephonyOfferTaskActionEnumOVH;
  /** Planned execution date */
  executionDate?: string;
  /** Current status of the task */
  readonly status?: TelephonyTaskStatusEnumOVH;
  readonly taskId?: number;
  /** Type of operation that will be executed */
  readonly type?: TelephonyOfferTaskTypeEnumOVH;
}

/**
 * Offer change
 */
export interface TelephonyOfferChangeOVH {
  /** The current offer will be replace by this one on the next renew. */
  readonly offer?: string;
}

/**
 * Typology of number
 */
export type TelephonyNumberTypeEnumOVH = typeof TelephonyNumberTypeEnumOVH[keyof typeof TelephonyNumberTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyNumberTypeEnumOVH = {
  geographic: 'geographic',
  nogeographic: 'nogeographic',
  special: 'special',
} as const;

/**
 * A zone type
 */
export type TelephonyNumberDetailedZoneTypeEnumOVH = typeof TelephonyNumberDetailedZoneTypeEnumOVH[keyof typeof TelephonyNumberDetailedZoneTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyNumberDetailedZoneTypeEnumOVH = {
  geographic: 'geographic',
  'non-geographic': 'non-geographic',
  special: 'special',
} as const;

/**
 * The possible criteria matching a searched value for a zone
 */
export type TelephonyNumberDetailedZoneMatchingCriteriaEnumOVH = typeof TelephonyNumberDetailedZoneMatchingCriteriaEnumOVH[keyof typeof TelephonyNumberDetailedZoneMatchingCriteriaEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyNumberDetailedZoneMatchingCriteriaEnumOVH = {
  city: 'city',
  internationalNumber: 'internationalNumber',
  number: 'number',
  zne: 'zne',
} as const;

/**
 * The criteria that matched the searched value
 * @nullable
 */
export type TelephonyNumberDetailedZoneOVHMatchingCriteria = TelephonyNumberDetailedZoneMatchingCriteriaEnumOVH | null;

/**
 * Number country
 */
export type TelephonyNumberCountryEnumOVH = typeof TelephonyNumberCountryEnumOVH[keyof typeof TelephonyNumberCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyNumberCountryEnumOVH = {
  be: 'be',
  ch: 'ch',
  fr: 'fr',
  gb: 'gb',
  uk: 'uk',
} as const;

/**
 * Number country code
 */
export type TelephonyNumberCountryCodeEnumOVH = typeof TelephonyNumberCountryCodeEnumOVH[keyof typeof TelephonyNumberCountryCodeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyNumberCountryCodeEnumOVH = {
  NUMBER_32: 32,
  NUMBER_33: 33,
  NUMBER_34: 34,
  NUMBER_41: 41,
  NUMBER_44: 44,
  NUMBER_49: 49,
} as const;

/**
 * A geographic zone from a country
 */
export interface TelephonyNumberDetailedZoneOVH {
  /**
   * The searched value
   * @nullable
   */
  askedCity?: string | null;
  /** The city of the zone */
  city?: string;
  /** The country of the zone */
  country?: TelephonyNumberCountryEnumOVH;
  /** The number's range of this zone, in international format */
  internationalNumber?: string;
  /**
   * The criteria that matched the searched value
   * @nullable
   */
  matchingCriteria?: TelephonyNumberDetailedZoneOVHMatchingCriteria;
  /** The number's range of this zone */
  number?: string;
  /** The country code of the number's range */
  prefix?: TelephonyNumberCountryCodeEnumOVH;
  /** The type of number's range of this zone */
  type?: TelephonyNumberDetailedZoneTypeEnumOVH;
  /**
   * The zip code of the zone
   * @nullable
   */
  zipCode?: string | null;
  /** The list of ZNE of this zone */
  zneList?: string[];
}

/**
 * Additional number
 */
export interface TelephonyNumberOVH {
  /** Description of the service */
  description?: string;
  /** Feature enabled on the number */
  readonly featureType?: TelephonyTypeEnumOVH;
  /**
   * Parent of the service (if it is part of a pool)
   * @nullable
   */
  readonly partOfPool?: string | null;
  /** Name of the service */
  readonly serviceName?: string;
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
}

/**
 * Types of statistics available for a line.
 */
export type TelephonyLineStatisticsTypeEnumOVH = typeof TelephonyLineStatisticsTypeEnumOVH[keyof typeof TelephonyLineStatisticsTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyLineStatisticsTypeEnumOVH = {
  maxDelay: 'maxDelay',
  maxJitter: 'maxJitter',
  rtpMos: 'rtpMos',
  sumRtpLost: 'sumRtpLost',
} as const;

/**
 * Current lines configured on the phone
 */
export interface TelephonyLinePhoneAssociableConfiguredLinesOVH {
  /** The line description */
  description?: string;
  /** Service name of the line */
  serviceName?: string;
}

/**
 * Informations related to associable phone capabilities
 */
export interface TelephonyLinePhoneAssociableOVH {
  /** Current lines configured on the phone */
  associatedLines?: TelephonyLinePhoneAssociableConfiguredLinesOVH[];
  /** Brand name of the phone */
  brand?: string;
  /** Maximum quantity of lines managed by the phone */
  maxLines?: number;
  /** Phone protocol */
  protocol?: TelephonyProtocolEnumOVH;
}

/**
 * Setup fees
 * @nullable
 */
export type TelephonyLinePhoneOVHFees = OrderPriceOVH | null;

/**
 * Informations related to phone capabilities
 */
export interface TelephonyLinePhoneOVH {
  /** Brand name of the phone */
  brand?: string;
  /** The phone description */
  description?: string;
  /**
   * Setup fees
   * @nullable
   */
  fees?: TelephonyLinePhoneOVHFees;
  /** Maximum number of lines managed by a phone */
  maxline?: number;
  /** Type of purchase */
  offerType?: TelephonyRmaOfferTypeEnumOVH;
  /** Telephony price */
  price?: OrderPriceOVH;
  /** Phone protocol */
  protocol?: TelephonyProtocolEnumOVH;
}

/**
 * The language of the line
 */
export type TelephonyLineOptionLanguageEnumOVH = typeof TelephonyLineOptionLanguageEnumOVH[keyof typeof TelephonyLineOptionLanguageEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyLineOptionLanguageEnumOVH = {
  Dutch: 'Dutch',
  'English_(UK)': 'English (UK)',
  French: 'French',
  'French_(BE)': 'French (BE)',
  German: 'German',
  Italian: 'Italian',
  Spanish: 'Spanish',
} as const;

/**
 * Intercom configuration
 */
export type TelephonyLineOptionIntercomEnumOVH = typeof TelephonyLineOptionIntercomEnumOVH[keyof typeof TelephonyLineOptionIntercomEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyLineOptionIntercomEnumOVH = {
  no: 'no',
  prefixed: 'prefixed',
  yes: 'yes',
} as const;

/**
 * The nature of the call forward
 */
export type TelephonyLineOptionForwardNatureTypeEnumOVH = typeof TelephonyLineOptionForwardNatureTypeEnumOVH[keyof typeof TelephonyLineOptionForwardNatureTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyLineOptionForwardNatureTypeEnumOVH = {
  fax: 'fax',
  number: 'number',
  voicemail: 'voicemail',
} as const;

/**
 * Line options
 */
export interface TelephonyLineOptionsOVH {
  absentSubscriber?: boolean;
  /** Reject anonymous calls */
  anonymousCallRejection?: boolean;
  /** Whether or not the line has restriction on incoming calls */
  callRestrictionIncoming?: boolean;
  /** Whether or not the line has restriction on outgoing calls */
  callRestrictionOutgoing?: boolean;
  /** If the line receives a new call and the line is already in communication, this new call is dispatched once the current call is completed */
  callWaiting?: boolean;
  /** Codecs preferences */
  codecs?: string;
  /** The default voicemail of the line. It can be the voicemail of any line of your account. */
  defaultVoicemail?: PhoneNumberOVH;
  displayNumber?: PhoneNumberOVH;
  /** The domain to configure in your SIP client. */
  domain?: string;
  doNotDisturb?: boolean;
  /** Enable calls forward when the line is unavailable */
  forwardBackup?: boolean;
  /** Nature of the forward when the line is unavailable */
  forwardBackupNature?: TelephonyLineOptionForwardNatureTypeEnumOVH;
  /** Destination of the forward when the line is unavailable */
  forwardBackupNumber?: PhoneNumberOVH;
  /** Enable calls forward when the line is busy */
  forwardBusy?: boolean;
  /** Nature of the forward when the line is busy */
  forwardBusyNature?: TelephonyLineOptionForwardNatureTypeEnumOVH;
  /** Destination of the forward when the line is busy */
  forwardBusyNumber?: PhoneNumberOVH;
  /** Enable calls forward on no-reply */
  forwardNoReply?: boolean;
  /** Delay before forward on no-reply */
  forwardNoReplyDelay?: number;
  /** Nature of the forward on no-reply */
  forwardNoReplyNature?: TelephonyLineOptionForwardNatureTypeEnumOVH;
  /** Destination of the forward on no-reply */
  forwardNoReplyNumber?: PhoneNumberOVH;
  /** Enable unconditional calls forward */
  forwardUnconditional?: boolean;
  /** Nature of the unconditional forward */
  forwardUnconditionalNature?: TelephonyLineOptionForwardNatureTypeEnumOVH;
  /** Destination of the unconditional forward */
  forwardUnconditionalNumber?: PhoneNumberOVH;
  /** Do not display your number */
  identificationRestriction?: boolean;
  /** Intercom mode: takes automatically the call with the loudspeaker */
  intercom?: TelephonyLineOptionIntercomEnumOVH;
  /** The ip restrictions of your line */
  ipRestrictions?: IpBlockOVH[];
  /** Language of the line */
  language?: TelephonyLineOptionLanguageEnumOVH;
  /** Disallow outgoing calls */
  lockOutCall?: boolean;
  /**
   * Disallow outgoing calls password
   * @nullable
   */
  lockOutCallPassword?: string | null;
  /** The outbound proxy to configure in your SIP client. */
  readonly proxy?: string;
  /** Enable or disable record of outgoing calls */
  recordOutgoingCallsBeta?: boolean;
  /**
   * Sound ID of on-call-waiting tone
   * @nullable
   */
  toneOnCallWaitingSoundId?: number | null;
  /**
   * Sound ID of on-hold tone
   * @nullable
   */
  toneOnHoldSoundId?: number | null;
  /**
   * Sound ID of ringback tone
   * @nullable
   */
  toneRingbackSoundId?: number | null;
  /** Voicemail number to dial from any other line */
  readonly voicemailExternalNumber?: PhoneNumberOVH;
  /** Voicemail short number to dial from the line */
  readonly voicemailInternalNumber?: string;
}

/**
 * Offer price per month
 * @nullable
 */
export type TelephonyLineOfferOVHPrice = OrderPriceOVH | null;

/**
 * Informations related to a line offer
 */
export interface TelephonyLineOfferOVH {
  /** The offer description */
  description?: string;
  /** The offer name */
  name?: string;
  /**
   * Offer price per month
   * @nullable
   */
  price?: TelephonyLineOfferOVHPrice;
}

/**
 * Informations related to a line offer
 */
export interface TelephonyLineOffersAndContractsOVH {
  /** Informations related to a line contracts */
  contracts?: OrderContractOVH[];
  /** Informations related to a line offer */
  offers?: TelephonyLineOfferOVH[];
}

export interface TelephonyLineNotificationsOptionsOVH {
  /**
   * Error logging notifications options
   * @nullable
   */
  logs?: TelephonyLineNotificationsOptionsOVHLogs;
}

/**
 * Types of statistics available for a line.
 */
export type TelephonyLineNotificationsLogsFrequencyEnumOVH = typeof TelephonyLineNotificationsLogsFrequencyEnumOVH[keyof typeof TelephonyLineNotificationsLogsFrequencyEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyLineNotificationsLogsFrequencyEnumOVH = {
  Never: 'Never',
  Once_a_day: 'Once a day',
  Twice_a_day: 'Twice a day',
} as const;

/**
 * Frequency at which the notifications will be send
 * @nullable
 */
export type TelephonyLineNotificationsLogsOptionsOVHFrequency = TelephonyLineNotificationsLogsFrequencyEnumOVH | null;

/**
 * Error logging notifications options
 */
export interface TelephonyLineNotificationsLogsOptionsOVH {
  /**
   * Email address where to send notifications
   * @nullable
   */
  email?: string | null;
  /**
   * Frequency at which the notifications will be send
   * @nullable
   */
  frequency?: TelephonyLineNotificationsLogsOptionsOVHFrequency;
  /**
   * Send a blank notification if there is no diagnosticReports entries for the period
   * @nullable
   */
  sendIfNull?: boolean | null;
}

/**
 * Error logging notifications options
 * @nullable
 */
export type TelephonyLineNotificationsOptionsOVHLogs = TelephonyLineNotificationsLogsOptionsOVH | null;

/**
 * The blocking mode of line calls
 */
export type TelephonyLineBlockingModeOVH = typeof TelephonyLineBlockingModeOVH[keyof typeof TelephonyLineBlockingModeOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyLineBlockingModeOVH = {
  both: 'both',
  incoming: 'incoming',
  outgoing: 'outgoing',
} as const;

/**
 * Send notifications about Line's diagnosticReports
 * @nullable
 */
export type TelephonyLineOVHNotifications = TelephonyLineNotificationsOptionsOVH | null;

/**
 * Line service
 */
export interface TelephonyLineOVH {
  /** Ability to manage SIP password on this service */
  readonly canChangePassword?: boolean;
  description?: string;
  /** The position of the line when attached to a device (0 if the line is not attached to a device) */
  readonly deviceSlot?: number;
  /** The line offers */
  readonly getPublicOffer?: TelephonyLineOfferOVH;
  /** The infrastructure where is configured the line */
  readonly infrastructure?: string;
  /** Is this line attached to a phone that belongs to another line? */
  readonly isAttachedToOtherLinesPhone?: boolean;
  /**
   * Send notifications about Line's diagnosticReports
   * @nullable
   */
  notifications?: TelephonyLineOVHNotifications;
  /** The line offers (Deprecated, prefer "name" in getPublicOffer) */
  readonly offers?: readonly string[];
  readonly serviceName?: string;
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
  readonly simultaneousLines?: number;
}

/**
 * Previous tollfree bill
 */
export interface TelephonyHistoryTollfreeConsumptionOVH {
  /** date of the bill */
  readonly date?: string;
  /** the amount which is paid by the called number */
  readonly price?: OrderPriceOVH;
  /** status of the bill */
  readonly status?: TelephonyBillStatusEnumOVH;
}

/**
 * Previous repayment bill
 */
export interface TelephonyHistoryRepaymentConsumptionOVH {
  /** the number of the bill */
  readonly billingNumber?: string;
  /** date of the bill */
  readonly date?: string;
  /** the amout which is repayed */
  readonly price?: OrderPriceOVH;
  /** status of the bill */
  readonly status?: TelephonyBillStatusEnumOVH;
}

/**
 * Previous billed consumptions
 */
export interface TelephonyHistoryConsumptionOVH {
  readonly date?: string;
  readonly price?: OrderPriceOVH;
  readonly priceOutplan?: OrderPriceOVH;
  readonly status?: TelephonyBillStatusEnumOVH;
}

/**
 * Informations related to a telephone offer
 */
export interface TelephonyHardwareOfferOVH {
  /**
   * The telephony description
   * @nullable
   */
  description?: string | null;
  /** The telephony name */
  name?: string;
  /** Telephony price */
  price?: OrderPriceOVH;
  /**
   * An URL to telephony details
   * @nullable
   */
  url?: string | null;
}

/**
 * Time conditions capable services
 */
export interface TelephonyGenericScreenOVH {
  readonly serviceName?: string;
}

/**
 * Plug & Phone function key
 */
export interface TelephonyFunctionKeyOVH {
  /**
   * The default function used by the key
   * @nullable
   */
  readonly default?: string | null;
  /**
   * The function active on the key
   * @nullable
   */
  function?: string | null;
  /** The number of the function key */
  readonly keyNum?: number;
  /** The key label */
  readonly label?: string;
  /**
   * The function parameter
   * @nullable
   */
  parameter?: string | null;
  /** The key type */
  readonly type?: string;
}

/**
 * Number of tries when sending a fax
 */
export type TelephonyFaxSendingTriesOVH = typeof TelephonyFaxSendingTriesOVH[keyof typeof TelephonyFaxSendingTriesOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyFaxSendingTriesOVH = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
} as const;

/**
 * Type of screen list
 */
export type TelephonyFaxScreenListTypeEnumOVH = typeof TelephonyFaxScreenListTypeEnumOVH[keyof typeof TelephonyFaxScreenListTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyFaxScreenListTypeEnumOVH = {
  '': '',
  blacklist: 'blacklist',
  no: 'no',
  whitelist: 'whitelist',
} as const;

/**
 * Which list is active (blackist, whitelist or none)
 * @nullable
 */
export type TelephonyFaxScreenOVHFilteringList = TelephonyFaxScreenListTypeEnumOVH | null;

/**
 * Fax ScreenLists
 */
export interface TelephonyFaxScreenOVH {
  /**
   * List of numbers not allowed to send a fax
   * @nullable
   */
  blacklistedNumbers?: string[] | null;
  /**
   * List of logins (TSI or ID) not allowed to send a fax
   * @nullable
   */
  blacklistedTSI?: string[] | null;
  /** Number of the fax service */
  readonly callNumber?: string;
  /** Country code of the fax service */
  readonly countryCode?: string;
  /**
   * Which list is active (blackist, whitelist or none)
   * @nullable
   */
  readonly filteringList?: TelephonyFaxScreenOVHFilteringList;
  readonly serviceName?: string;
  /**
   * List of numbers allowed to send a fax
   * @nullable
   */
  whitelistedNumbers?: string[] | null;
  /**
   * List of logins (TSI or ID) allowed to send a fax
   * @nullable
   */
  whitelistedTSI?: string[] | null;
}

/**
 * Available quality for fax documents
 */
export type TelephonyFaxQualityEnumOVH = typeof TelephonyFaxQualityEnumOVH[keyof typeof TelephonyFaxQualityEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyFaxQualityEnumOVH = {
  best: 'best',
  high: 'high',
  normal: 'normal',
} as const;

/**
 * Format of the notification mail. "html" will include a preview image of the fax
 */
export type TelephonyFaxMailFormatEnumOVH = typeof TelephonyFaxMailFormatEnumOVH[keyof typeof TelephonyFaxMailFormatEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyFaxMailFormatEnumOVH = {
  html: 'html',
  text: 'text',
} as const;

/**
 * Fax properties
 */
export interface TelephonyFaxPropertiesOVH {
  readonly callNumber?: string;
  readonly countryCode?: string;
  faxMaxCall?: TelephonyFaxSendingTriesOVH;
  faxQuality?: TelephonyFaxQualityEnumOVH;
  faxTagLine?: string;
  fromEmail?: string;
  fromName?: string;
  mailFormat?: TelephonyFaxMailFormatEnumOVH;
  receiver?: string;
  redirectionEmail?: string[];
  rejectAnonymous?: boolean;
  sender?: string;
}

/**
 * Consumption way type
 */
export type TelephonyFaxConsumptionWayTypeEnumOVH = typeof TelephonyFaxConsumptionWayTypeEnumOVH[keyof typeof TelephonyFaxConsumptionWayTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyFaxConsumptionWayTypeEnumOVH = {
  received: 'received',
  sent: 'sent',
} as const;

/**
 * @nullable
 */
export type TelephonyFaxConsumptionOVHCalling = PhoneNumberOVH | null;

/**
 * @nullable
 */
export type TelephonyFaxConsumptionOVHCalled = PhoneNumberOVH | null;

/**
 * Fax delivery record
 */
export interface TelephonyFaxConsumptionOVH {
  /** @nullable */
  readonly called?: TelephonyFaxConsumptionOVHCalled;
  /** @nullable */
  readonly calling?: TelephonyFaxConsumptionOVHCalling;
  readonly consumptionId?: number;
  readonly creationDatetime?: string;
  readonly pages?: number;
  readonly priceWithoutTax?: OrderPriceOVH;
  readonly wayType?: TelephonyFaxConsumptionWayTypeEnumOVH;
}

/**
 * Available sending method for fax campaign
 */
export type TelephonyFaxCampaignSendTypeEnumOVH = typeof TelephonyFaxCampaignSendTypeEnumOVH[keyof typeof TelephonyFaxCampaignSendTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyFaxCampaignSendTypeEnumOVH = {
  automatic: 'automatic',
  manual: 'manual',
  scheduled: 'scheduled',
} as const;

/**
 * Available recipients method for fax campaign
 */
export type TelephonyFaxCampaignRecipientsTypeEnumOVH = typeof TelephonyFaxCampaignRecipientsTypeEnumOVH[keyof typeof TelephonyFaxCampaignRecipientsTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyFaxCampaignRecipientsTypeEnumOVH = {
  document: 'document',
  list: 'list',
} as const;

/**
 * Detail of a fax campaign
 */
export interface TelephonyFaxCampaignDetailOVH {
  failed?: PhoneNumberOVH[];
  success?: PhoneNumberOVH[];
  todo?: PhoneNumberOVH[];
}

/**
 * Fax campaigns
 */
export interface TelephonyFaxCampaignOVH {
  /** The count of failed faxes in the campaign */
  readonly countFailed?: number;
  /** The count of success faxes in the campaign */
  readonly countSuccess?: number;
  /** The total count of faxes in the campaign */
  readonly countTotal?: number;
  /**
   * The end date of the fax campaign
   * @nullable
   */
  readonly dateEnd?: string | null;
  /**
   * The start date of the fax campaign
   * @nullable
   */
  readonly dateStart?: string | null;
  /** The id of the fax campaign */
  readonly id?: number;
  /** The name of the fax campaign */
  readonly name?: string;
  /** The reference of the fax campaign */
  readonly reference?: string;
  /** The status of the fax campaign */
  readonly status?: string;
}

/**
 * Send notifications about Line's diagnosticReports
 * @nullable
 */
export type TelephonyFaxOVHNotifications = TelephonyLineNotificationsOptionsOVH | null;

/**
 * Fax service
 */
export interface TelephonyFaxOVH {
  description?: string;
  /**
   * Send notifications about Line's diagnosticReports
   * @nullable
   */
  notifications?: TelephonyFaxOVHNotifications;
  readonly offers?: readonly string[];
  readonly serviceName?: string;
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
}

/**
 * Token associated to the service for live event
 */
export interface TelephonyEventTokenOVH {
  readonly token?: string;
}

/**
 * Callback url for each event
 */
export interface TelephonyEventCallbackOVH {
  /**
   * Email notification address in case of url calling failure
   * @nullable
   */
  emailError?: string | null;
  /**
   * Url called for each event
   * @nullable
   */
  url?: string | null;
}

/**
 * Events triggered by the line
 */
export interface TelephonyEventOVH {
  /** Called referer, could be the msisdn or the label name */
  readonly calledIdentifier?: string;
  /** Calling referer, could be the msisdn or the label name */
  readonly callingIdentifier?: string;
  /** Datetime call establishment */
  readonly dateTime?: string;
  /** Incoming or outgoing call */
  readonly direction?: TelephonyRealtimeEventDirectionOVH;
  /** Duration of the call */
  readonly duration?: number;
  /** Type of event */
  readonly eventType?: TelephonyRealtimeEventTypeOVH;
  /** Uniq identifier of the call */
  readonly id?: string;
  /** Protocol (mgcp or sip) */
  readonly protocol?: TelephonyRealtimeEventProtocolOVH;
}

/**
 * Task informations about an entreprise
 */
export interface TelephonyEntrepriseNumberInformationsOVH {
  /**
   * Address of the entreprise
   * @nullable
   */
  address?: string | null;
  /**
   * Entreprise's category code for directory services
   * @nullable
   */
  ape?: string | null;
  /**
   * Brand of the entreprise
   * @nullable
   */
  brand?: string | null;
  /** Entreprise number */
  entrepriseNumber?: string;
  /** Is this a valid entreprise number? */
  isValid?: boolean;
  /** Name of the entreprise */
  name?: string;
  /**
   * Short version of the entreprise number (FR only)
   * @nullable
   */
  siren?: string | null;
}

/**
 * Task about getting entreprise informations
 */
export interface TelephonyEntrepriseNumberInformationsTaskOVH {
  /** Informations about the enterprise */
  informations?: TelephonyEntrepriseNumberInformationsOVH;
  /** Task status */
  status?: TelephonyTaskStatusEnumOVH;
}

/**
 * Action type executed when the unavailable slot is used
 * @nullable
 */
export type TelephonyEasyHuntingTimeConditionsSettingsOVHUnavailableType = TelephonyTimeConditionsSettingsForwardTypeEnumOVH | null;

/**
 * Number associated to the unavailable slot action
 * @nullable
 */
export type TelephonyEasyHuntingTimeConditionsSettingsOVHUnavailableNumber = PhoneNumberOVH | null;

/**
 * Action type executed when the third slot is used
 * @nullable
 */
export type TelephonyEasyHuntingTimeConditionsSettingsOVHSlot3Type = TelephonyTimeConditionsSettingsForwardTypeEnumOVH | null;

/**
 * Number associated to the third slot action
 * @nullable
 */
export type TelephonyEasyHuntingTimeConditionsSettingsOVHSlot3Number = PhoneNumberOVH | null;

/**
 * Action type executed when the second slot is used
 * @nullable
 */
export type TelephonyEasyHuntingTimeConditionsSettingsOVHSlot2Type = TelephonyTimeConditionsSettingsForwardTypeEnumOVH | null;

/**
 * Number associated to the second slot action
 * @nullable
 */
export type TelephonyEasyHuntingTimeConditionsSettingsOVHSlot2Number = PhoneNumberOVH | null;

/**
 * Action type executed when the first slot is used
 * @nullable
 */
export type TelephonyEasyHuntingTimeConditionsSettingsOVHSlot1Type = TelephonyTimeConditionsSettingsForwardTypeEnumOVH | null;

/**
 * Number associated to the first slot action
 * @nullable
 */
export type TelephonyEasyHuntingTimeConditionsSettingsOVHSlot1Number = PhoneNumberOVH | null;

/**
 * Easy hunting time conditions options
 */
export interface TelephonyEasyHuntingTimeConditionsSettingsOVH {
  /** Status of time conditions */
  enable?: boolean;
  /**
   * Number associated to the first slot action
   * @nullable
   */
  slot1Number?: TelephonyEasyHuntingTimeConditionsSettingsOVHSlot1Number;
  /**
   * Action type executed when the first slot is used
   * @nullable
   */
  slot1Type?: TelephonyEasyHuntingTimeConditionsSettingsOVHSlot1Type;
  /**
   * Number associated to the second slot action
   * @nullable
   */
  slot2Number?: TelephonyEasyHuntingTimeConditionsSettingsOVHSlot2Number;
  /**
   * Action type executed when the second slot is used
   * @nullable
   */
  slot2Type?: TelephonyEasyHuntingTimeConditionsSettingsOVHSlot2Type;
  /**
   * Number associated to the third slot action
   * @nullable
   */
  slot3Number?: TelephonyEasyHuntingTimeConditionsSettingsOVHSlot3Number;
  /**
   * Action type executed when the third slot is used
   * @nullable
   */
  slot3Type?: TelephonyEasyHuntingTimeConditionsSettingsOVHSlot3Type;
  /**
   * Number associated to the unavailable slot action
   * @nullable
   */
  unavailableNumber?: TelephonyEasyHuntingTimeConditionsSettingsOVHUnavailableNumber;
  /**
   * Action type executed when the unavailable slot is used
   * @nullable
   */
  unavailableType?: TelephonyEasyHuntingTimeConditionsSettingsOVHUnavailableType;
}

/**
 * Easy hunting time conditions
 */
export interface TelephonyEasyHuntingTimeConditionsOVH {
  readonly conditionId?: number;
  /** The policy of time condition */
  policy?: TelephonyTimeConditionsPolicyEnumOVH;
  /** The time of the day when the extension will start to be executed */
  timeFrom?: TimeOVH;
  /** The time of the day when the extension will stop to be executed */
  timeTo?: TimeOVH;
  /** The day of the week when the extension will be executed */
  weekDay?: TelephonyOvhPabxDialplanExtensionConditionTimeWeekDayEnumOVH;
}

/**
 * Screenlist condition type
 */
export type TelephonyEasyHuntingScreenListsConditionsStatusEnumOVH = typeof TelephonyEasyHuntingScreenListsConditionsStatusEnumOVH[keyof typeof TelephonyEasyHuntingScreenListsConditionsStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyEasyHuntingScreenListsConditionsStatusEnumOVH = {
  disabled: 'disabled',
  incomingBlackList: 'incomingBlackList',
  incomingWhiteList: 'incomingWhiteList',
} as const;

/**
 * Easy hunting screen lists conditions options
 */
export interface TelephonyEasyHuntingScreenListsConditionsSettingsOVH {
  status?: TelephonyEasyHuntingScreenListsConditionsStatusEnumOVH;
}

/**
 * Screenlist condition
 */
export interface TelephonyEasyHuntingScreenListsConditionsOVH {
  /**
   * Screenlist based on the presented caller number
   * @nullable
   */
  callerIdNumber?: string | null;
  readonly conditionId?: number;
  /**
   * Screenlist based on the destination number
   * @nullable
   */
  destinationNumber?: string | null;
  /** Type of screenlist */
  readonly screenListType?: TelephonyOvhPabxDialplanExtensionConditionScreenListTypeEnumOVH;
}

/**
 * The voicemail used by the EasyPABX
 * @nullable
 */
export type TelephonyEasyHuntingOVHVoicemail = PhoneNumberOVH | null;

/**
 * OVH easy calls queues
 */
export interface TelephonyEasyHuntingOVH {
  /** Reject (hangup) anonymous calls */
  anonymousRejection?: boolean;
  /** Description of the service */
  description?: string;
  /** Feature of the service */
  readonly featureType?: TelephonyTypeEnumOVH;
  /** Does the service have extended CCS options enabled? */
  readonly isCCS?: boolean;
  /** Max wait time when caller is in queue (in seconds) */
  maxWaitTime?: number;
  /** Max number of callers in queue */
  queueSize?: number;
  readonly serviceName?: string;
  /** General type of the service */
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
  /** The presented number when bridging calls */
  showCallerNumber?: TelephonyOvhPabxDialplanNumberPresentationEnumOVH;
  /** Enable/Disable the status change IVR on your callcenter. The IVR is enabled by default. */
  statusIvrEnabled?: boolean;
  /** The calls dispatching strategy */
  strategy?: TelephonyOvhPabxHuntingQueueStrategyEnumOVH;
  /**
   * Tone played just before call is hang up
   * @nullable
   */
  toneOnClosing?: number | null;
  /**
   * Tone played when caller is put on hold
   * @nullable
   */
  toneOnHold?: number | null;
  /**
   * Tone played when call is picked up
   * @nullable
   */
  toneOnOpening?: number | null;
  /**
   * The voicemail used by the EasyPABX
   * @nullable
   */
  voicemail?: TelephonyEasyHuntingOVHVoicemail;
}

/**
 * Document linked to a telephony service
 */
export interface TelephonyDocumentOVH {
  /**
   * Description of the document
   * @nullable
   */
  description?: string | null;
  /** Identifier of the document */
  readonly id?: string;
  /** Name of the document */
  name?: string;
  /** Document size (in bytes) */
  readonly size?: number;
  /** URL to get document */
  readonly url?: string;
  /**
   * Document validation date
   * @nullable
   */
  readonly validationDate?: string | null;
}

/**
 * Directory way type
 */
export interface TelephonyDirectoryWayTypeOVH {
  readonly abbreviatedName?: string;
  readonly wayName?: string;
}

/**
 * @nullable
 */
export type TelephonyDirectoryInfoOVHGender = NichandleGenderEnumOVH | null;

/**
 * Directory Informations
 */
export interface TelephonyDirectoryInfoOVH {
  address?: string;
  addressExtra?: string;
  ape?: string;
  readonly areaCode?: number;
  /** @nullable */
  birthDate?: string | null;
  cedex?: string;
  city?: string;
  country?: string;
  directoryServiceCode?: string;
  displayFirstName?: boolean;
  displayMarketingDirectory?: boolean;
  displayOnlyCity?: boolean;
  displaySearchReverse?: boolean;
  displayUniversalDirectory?: boolean;
  email?: string;
  firstName?: string;
  /** @nullable */
  gender?: TelephonyDirectoryInfoOVHGender;
  readonly inseeCode?: number;
  legalForm?: string;
  lineDescription?: string;
  readonly modificationDate?: string;
  readonly modificationType?: string;
  name?: string;
  readonly number?: string;
  occupation?: string;
  PJSocialNomination?: string;
  postBox?: string;
  postCode?: string;
  receivePJDirectory?: boolean;
  siret?: string;
  socialNomination?: string;
  socialNominationExtra?: string;
  readonly status?: string;
  urbanDistrict?: string;
  wayName?: string;
  wayNumber?: string;
  wayNumberExtra?: string;
  wayType?: string;
}

/**
 * Directory Informations
 */
export interface TelephonyDirectoryHeadingPJOVH {
  readonly apeCode?: string;
  readonly apeDescription?: string;
  readonly directoryServiceCode?: number;
  readonly directoryServiceDescription?: string;
  readonly notification?: string;
}

/**
 * Level of the diagnostic report
 */
export type TelephonyDiagnosticReportLevelEnumOVH = typeof TelephonyDiagnosticReportLevelEnumOVH[keyof typeof TelephonyDiagnosticReportLevelEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyDiagnosticReportLevelEnumOVH = {
  debug: 'debug',
  error: 'error',
  info: 'info',
  warn: 'warn',
} as const;

/**
 * The index interval
 */
export type TelephonyDiagnosticReportIndexEnumOVH = typeof TelephonyDiagnosticReportIndexEnumOVH[keyof typeof TelephonyDiagnosticReportIndexEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyDiagnosticReportIndexEnumOVH = {
  '2_days_ago': '2 days ago',
  '3_days_ago': '3 days ago',
  today: 'today',
  yesterday: 'yesterday',
} as const;

/**
 * Source of the diagnostic report
 */
export type TelephonyDiagnosticReportCategoryEnumOVH = typeof TelephonyDiagnosticReportCategoryEnumOVH[keyof typeof TelephonyDiagnosticReportCategoryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyDiagnosticReportCategoryEnumOVH = {
  dpi: 'dpi',
  signal: 'signal',
} as const;

/**
 * Relevant informations of the service detected from the MOS or the signal leg in SIP/MGCP protocol.
 */
export interface TelephonyDiagnosticReportOVH {
  /** Identifier of the concerned leg */
  callId?: string;
  /** Typology where the diagnostic arriving from */
  category?: TelephonyDiagnosticReportCategoryEnumOVH;
  /** Datetime of the diagnostic */
  datetime?: string;
  /** Explanation of the diagnostic */
  description?: string;
  /** The level of the diagnostic */
  level?: TelephonyDiagnosticReportLevelEnumOVH;
  /** Name of the rule detected */
  name?: string;
  /** Report of the diagnostic */
  report?: string;
}

/**
 * Telephony device types
 */
export type TelephonyDeviceTypeEnumOVH = typeof TelephonyDeviceTypeEnumOVH[keyof typeof TelephonyDeviceTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyDeviceTypeEnumOVH = {
  softphone: 'softphone',
} as const;

/**
 * Telephony device statuses
 */
export type TelephonyDeviceStatusEnumOVH = typeof TelephonyDeviceStatusEnumOVH[keyof typeof TelephonyDeviceStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyDeviceStatusEnumOVH = {
  registered: 'registered',
  unregistered: 'unregistered',
} as const;

/**
 * Telephony device provisioning token sending
 */
export interface TelephonyDeviceSendProvisioningTokenOVH {
  /** Email address used for sending provisioning token */
  email: string;
}

/**
 * Telephony device enrollment provisioning token
 */
export interface TelephonyDeviceEnrollOVH {
  /** Provisioning token used to enroll device */
  readonly token?: string;
}

/**
 * Telephony device creation input parameters
 */
export interface TelephonyDeviceCreateInputOVH {
  /** Device name */
  name: string;
  /** Device type */
  type: TelephonyDeviceTypeEnumOVH;
}

/**
 * Telephony device (i.e. softphone, plug'n phone...)
 */
export interface TelephonyDeviceOVH {
  /** Device creation date */
  readonly createdAt?: string;
  /** Device ID */
  readonly id?: string;
  /**
   * Device last registration date
   * @nullable
   */
  readonly lastRegistrationDate?: string | null;
  /** Device name */
  name?: string;
  /** Device status */
  readonly status?: TelephonyDeviceStatusEnumOVH;
  /** Device type */
  readonly type?: TelephonyDeviceTypeEnumOVH;
  /** Device updated date */
  readonly updatedAt?: string;
  /**
   * Device user Agent
   * @nullable
   */
  readonly userAgent?: string | null;
}

/**
 * Fees concerning rateCode update
 * @nullable
 */
export type TelephonyDetailedRateCodeInformationOVHUpdateRateCodePriceWithoutTax = OrderPriceOVH | null;

/**
 * Detailed informations related to this number
 */
export interface TelephonyDetailedRateCodeInformationOVH {
  /**
   * Cancelable datetime deadline for the new scheduled rateCode
   * @nullable
   */
  cancelLimitDatetime?: string | null;
  /**
   * Effective datetime
   * @nullable
   */
  effectiveDatetime?: string | null;
  /** Price per call */
  pricePerCallWithoutTax?: OrderPriceOVH;
  /** Price in minute */
  pricePerMinuteWithoutTax?: OrderPriceOVH;
  /** Scheduled rate code */
  rateCode?: string;
  /** Repayment per call */
  repaymentPricePerCallWithoutTax?: OrderPriceOVH;
  /** Repayment per minute */
  repaymentPricePerMinuteWithoutTax?: OrderPriceOVH;
  /**
   * Fees concerning rateCode update
   * @nullable
   */
  updateRateCodePriceWithoutTax?: TelephonyDetailedRateCodeInformationOVHUpdateRateCodePriceWithoutTax;
}

export interface TelephonyDefaultSipDomainsOVH {
  /** Country */
  country?: TelephonyServiceNumberCountryEnumOVH;
  /** Current SIP domain */
  currentDomain?: string;
  /** List of available SIP domains */
  list?: string[];
  /** Type of the VoIP product concerned */
  productType?: TelephonySipDomainProductTypeEnumOVH;
}

/**
 * @nullable
 */
export type TelephonyDdiOVHDestination = PhoneNumberOVH | null;

/**
 * DDI (direct dial-in) service
 */
export interface TelephonyDdiOVH {
  description?: string;
  /** @nullable */
  readonly destination?: TelephonyDdiOVHDestination;
  readonly featureType?: TelephonyTypeEnumOVH;
  readonly serviceName?: string;
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
}

/**
 * @nullable
 */
export type TelephonyDatetimeAndIpvalueOVHIp = IpOVH | null;

/**
 * A ip value associated to a datetime
 */
export interface TelephonyDatetimeAndIpvalueOVH {
  datetime?: string;
  /** @nullable */
  ip?: TelephonyDatetimeAndIpvalueOVHIp;
}

/**
 * Export file format
 */
export type TelephonyContactsExportFormatsEnumOVH = typeof TelephonyContactsExportFormatsEnumOVH[keyof typeof TelephonyContactsExportFormatsEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyContactsExportFormatsEnumOVH = {
  csv: 'csv',
} as const;

/**
 * Contact country
 * @nullable
 */
export type TelephonyContactOVHCountry = CoreTypesCountryEnumOVH | null;

/**
 * Contact informations structure
 */
export interface TelephonyContactOVH {
  /**
   * Contact address
   * @nullable
   */
  address?: string | null;
  /**
   * Contact city
   * @nullable
   */
  city?: string | null;
  /**
   * Contact country
   * @nullable
   */
  country?: TelephonyContactOVHCountry;
  /** @nullable */
  email?: string | null;
  /**
   * Contact firstname
   * @nullable
   */
  firstname?: string | null;
  /**
   * Contact name
   * @nullable
   */
  name?: string | null;
  /**
   * Contact organisation
   * @nullable
   */
  organisation?: string | null;
  /**
   * Contact phone
   * @nullable
   */
  phone?: string | null;
  /**
   * Contact zip
   * @nullable
   */
  zip?: string | null;
}

/**
 * The outplan notifications configured for your billing account
 */
export interface TelephonyConsumptionThresholdOVH {
  /** The blocking type of the associate lines */
  readonly block?: TelephonyOutplanNotificationBlockEnumOVH;
  /** The id of the notification */
  readonly id?: number;
  /** Override the nichandle email for this notification */
  readonly notifyEmail?: string;
  /** The notification percentage of maximum outplan */
  readonly percentage?: number;
}

/**
 * Webaccess type for your conference
 */
export type TelephonyConferenceWebAccessTypeEnumOVH = typeof TelephonyConferenceWebAccessTypeEnumOVH[keyof typeof TelephonyConferenceWebAccessTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyConferenceWebAccessTypeEnumOVH = {
  read: 'read',
  write: 'write',
} as const;

/**
 * List public web access of your conference
 */
export interface TelephonyConferenceWebAccessOVH {
  /** The id of the conference web access */
  readonly id?: number;
  /** The type of the conference web access : read or write */
  readonly type?: TelephonyConferenceWebAccessTypeEnumOVH;
  /** The URL of the conference web access */
  readonly url?: string;
}

/**
 * Get realtime statistics about all rooms of your conference number
 */
export interface TelephonyConferenceRoomsStatisticsOVH {
  /** The total numbers of rooms currently active in the conference number */
  activeRoomsCount?: number;
  /** The total number of unique participants in the conference number (aggregated from all rooms) */
  participantsCount?: number;
  /** The number of rooms available in the conference number */
  roomsCount?: number;
}

/**
 * Conference report receiver
 */
export type TelephonyConferenceReportStatusEnumOVH = typeof TelephonyConferenceReportStatusEnumOVH[keyof typeof TelephonyConferenceReportStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyConferenceReportStatusEnumOVH = {
  customer: 'customer',
  none: 'none',
  other: 'other',
} as const;

/**
 * Available language for your conference
 */
export type TelephonyConferenceLanguageEnumOVH = typeof TelephonyConferenceLanguageEnumOVH[keyof typeof TelephonyConferenceLanguageEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyConferenceLanguageEnumOVH = {
  de: 'de',
  en: 'en',
  es: 'es',
  fr: 'fr',
  it: 'it',
} as const;

/**
 * Conference room
 */
export interface TelephonyConferenceRoomOVH {
  /** Whether announce file is played before entrance */
  announceFile?: boolean;
  /**
   * The announce file name
   * @nullable
   */
  readonly announceFilename?: string | null;
  /**
   * The announce sound id
   * @nullable
   */
  announceSoundId?: number | null;
  /** Whether anonymous participants are allowed */
  anonymousRejection?: boolean;
  /** Whether participants enter conference room muted */
  enterMuted?: boolean;
  /** The events channel hash */
  readonly eventsChannel?: string;
  /**
   * The expiration date of the conference room.
   * @nullable
   */
  expirationDate?: string | null;
  /** The conference sounds language */
  language?: TelephonyConferenceLanguageEnumOVH;
  /** The conference pin number */
  pin?: string;
  /** Whether conference is recorded */
  recordStatus?: boolean;
  /**
   * The email address to send conference report to
   * @nullable
   */
  reportEmail?: string | null;
  /** The status of the reporting */
  reportStatus?: TelephonyConferenceReportStatusEnumOVH;
  /** The conference room number */
  readonly roomNumber?: number;
  /** True if you want to receive a white-labelled mail report of your conference */
  whiteLabelReport?: boolean;
}

/**
 * Conference properties
 */
export interface TelephonyConferencePropertiesOVH {
  /** Whether announce file is played before entrance */
  announceFile?: boolean;
  /**
   * The announce file name
   * @nullable
   */
  readonly announceFilename?: string | null;
  /**
   * The announce sound id
   * @nullable
   */
  announceSoundId?: number | null;
  /** Whether anonymous participants are allowed */
  anonymousRejection?: boolean;
  /** Whether participants enter conference room muted */
  enterMuted?: boolean;
  /** The events channel hash */
  readonly eventsChannel?: string;
  /** The conference sounds language */
  language?: TelephonyConferenceLanguageEnumOVH;
  /** The conference pin number */
  pin?: string;
  /** Whether conference is recorded */
  recordStatus?: boolean;
  /**
   * The email address to send conference report to
   * @nullable
   */
  reportEmail?: string | null;
  /** The status of the reporting */
  reportStatus?: TelephonyConferenceReportStatusEnumOVH;
  /** The conference room number */
  readonly roomNumber?: number;
  /** True if you want to receive a white-labelled mail report of your conference */
  whiteLabelReport?: boolean;
}

/**
 * Conference service
 */
export interface TelephonyConferenceParticipantsOVH {
  /** The arrival datetime of the participant in the conference. */
  readonly arrivalDateTime?: string;
  /** The caller name of the participant */
  readonly callerName?: string;
  /** The caller number of the participant */
  readonly callerNumber?: string;
  /** The current level of the participant audio transmission */
  readonly energy?: number;
  /** Whether the participant is active in the room */
  readonly floor?: boolean;
  /** Whether the participant can hear the conference */
  readonly hear?: boolean;
  /** The id of the participant */
  readonly id?: number;
  /** Whether the participant can talk in the conference */
  readonly speak?: boolean;
  /** Whether the participant is talking */
  readonly talking?: boolean;
}

/**
 * Conference realtime informations structure
 */
export interface TelephonyConferenceInformationsOVH {
  /** The date when the conference began */
  dateStart?: string;
  /** Whether or not the conference room is locked */
  locked?: boolean;
  /** The current participants count in your conference room */
  membersCount?: number;
}

/**
 * Event of a conference (participant left/join)
 */
export interface TelephonyConferenceHistoryEventOVH {
  /** The caller id of the participant */
  callerid?: string;
  /** The date of the conference event */
  date?: string;
  /** The nature of the event : left/join */
  type?: string;
}

/**
 * List past conferences on your number
 */
export interface TelephonyConferenceHistoryOVH {
  /** The count of connections to the conference */
  readonly countConnections?: number;
  /** The count of unique participants of the conference */
  readonly countParticipants?: number;
  /** The date the conference began */
  readonly dateBegin?: string;
  /** The date the conference end */
  readonly dateEnd?: string;
  /** The duration of the conference in seconds */
  readonly duration?: number;
  /** The events of the conference (participants joining/left) */
  readonly events?: readonly TelephonyConferenceHistoryEventOVH[];
  /** The id of the conference history */
  readonly id?: number;
  /**
   * The audio record url if you set recording
   * @nullable
   */
  readonly recordUrl?: string | null;
}

/**
 * Conference
 */
export interface TelephonyConferenceOVH {
  readonly description?: string;
  readonly offers?: readonly string[];
  readonly serviceName?: string;
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
}

/**
 * User of the click 2 call
 */
export interface TelephonyClick2CallUserOVH {
  /** Date when user was created */
  readonly creationDateTime?: string;
  /** Contact identifier */
  readonly id?: number;
  /** login of the click 2 call user */
  readonly login?: string;
}

/**
 * Represents a city
 */
export interface TelephonyCityOVH {
  /**
   * The identifier of the city
   * @nullable
   */
  administrationCode?: string | null;
  /** The name of the city */
  name?: string;
  /** The zip code of the city */
  zipCode?: string;
}

/**
 * Carrier SIP VNO range
 */
export interface TelephonyCarrierSipVnoRangeOVH {
  /** The carrier SIP trunk description. */
  description?: string;
  /** The phone range prefix. */
  readonly prefix?: string;
}

/**
 * Carrier SIP VNO mandate
 */
export interface TelephonyCarrierSipVnoMandateOVH {
  /** Date at which the associated ranges will be routed. */
  readonly applicationDate?: string;
  /** The reference written on your VNO contract. */
  readonly contractReference?: string;
}

/**
 * Protocol of a carrier sip trunk customer endpoint
 */
export type TelephonyCarrierSipEndpointProtocolEnumOVH = typeof TelephonyCarrierSipEndpointProtocolEnumOVH[keyof typeof TelephonyCarrierSipEndpointProtocolEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyCarrierSipEndpointProtocolEnumOVH = {
  tcp: 'tcp',
  tls: 'tls',
  udp: 'udp',
} as const;

/**
 * Carrier SIP Properties
 */
export interface TelephonyCarrierSipDetailsOVH {
  /** The carrier SIP trunk description */
  description?: string;
  /** The maximum call establishments per second on your carrier sip service */
  readonly maxCallsPerSecond?: number;
  /** The maximum concurrent calls on your carrier sip service */
  readonly maxConcurrentCalls?: number;
}

/**
 * Carrier SIP Endpoints
 */
export interface TelephonyCarrierSipCustomerEndpointOVH {
  /** Should we send incoming calls to this endpoint */
  readonly enableIncomingCalls?: boolean;
  /** SIP Endpoint id */
  readonly id?: number;
  /** SIP Endpoint IP */
  readonly ip?: Ipv4OVH;
  /** SIP Endpoint port */
  readonly port?: number;
  /** SIP Endpoint priority (DNS SRV) */
  readonly priority?: number;
  /** The protocol of the endpoint (udp/tcp/tls) */
  readonly protocol?: TelephonyCarrierSipEndpointProtocolEnumOVH;
  /** SIP Endpoint weight (DNS SRV) */
  readonly weight?: number;
}

/**
 * Carrier SIP Zone Regions
 */
export type TelephonyCarrierSipClusterZoneRegionEnumOVH = typeof TelephonyCarrierSipClusterZoneRegionEnumOVH[keyof typeof TelephonyCarrierSipClusterZoneRegionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyCarrierSipClusterZoneRegionEnumOVH = {
  rbx: 'rbx',
  sbg: 'sbg',
} as const;

/**
 * The information about a carrier sip cluster zone
 */
export interface TelephonyCarrierSipClusterZoneOVH {
  /** The list of media (RTP) ips of this zone */
  mediaIps?: Ipv4OVH[];
  /** The region of the cluster (rbx, sbg,...) */
  region?: TelephonyCarrierSipClusterZoneRegionEnumOVH;
}

/**
 * The information about the Carrier SIP cluster attached to your service
 */
export interface TelephonyCarrierSipClusterInfoOVH {
  /** The name of the cluster */
  name?: string;
  /** The availability zones of the cluster */
  zones?: TelephonyCarrierSipClusterZoneOVH[];
}

/**
 * CarrierSip
 */
export interface TelephonyCarrierSipOVH {
  readonly description?: string;
  readonly serviceName?: string;
  readonly serviceType?: TelephonyTypeServiceEnumOVH;
}

/**
 * Types of hangupCause for generated calls.
 */
export type TelephonyCallsGeneratorHangupCauseEnumOVH = typeof TelephonyCallsGeneratorHangupCauseEnumOVH[keyof typeof TelephonyCallsGeneratorHangupCauseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyCallsGeneratorHangupCauseEnumOVH = {
  AccessInformationDiscarded: 'AccessInformationDiscarded',
  AllottedTimeout: 'AllottedTimeout',
  AttendedTransfer: 'AttendedTransfer',
  BlindTransfer: 'BlindTransfer',
  CallAwardedbeing: 'CallAwardedbeing',
  ChannelTypeNotImplemented: 'ChannelTypeNotImplemented',
  ChannelUnacceptable: 'ChannelUnacceptable',
  CodeSip403BearerCapabilityNotAuthorized: 'CodeSip403BearerCapabilityNotAuthorized',
  CodeSip403IncomingCallsBarred: 'CodeSip403IncomingCallsBarred',
  CodeSip403OutgoingCallsBarred: 'CodeSip403OutgoingCallsBarred',
  CodeSip404NoRouteToDestination: 'CodeSip404NoRouteToDestination',
  CodeSip404NoRouteToSpecifiedTransitNetwork: 'CodeSip404NoRouteToSpecifiedTransitNetwork',
  CodeSip404UnallocatedNumber: 'CodeSip404UnallocatedNumber',
  CodeSip408NoUserResponding: 'CodeSip408NoUserResponding',
  CodeSip410NumberChanged: 'CodeSip410NumberChanged',
  CodeSip410RedirectionToNewDestination: 'CodeSip410RedirectionToNewDestination',
  CodeSip480NoAnswerFromUser: 'CodeSip480NoAnswerFromUser',
  CodeSip480NormalUnspecified: 'CodeSip480NormalUnspecified',
  CodeSip480SubscriberAbsent: 'CodeSip480SubscriberAbsent',
  CodeSip483ExchangeRoutingError: 'CodeSip483ExchangeRoutingError',
  CodeSip484InvalidNumberFormatAddressIncomplete: 'CodeSip484InvalidNumberFormatAddressIncomplete',
  CodeSip486UserBusy: 'CodeSip486UserBusy',
  CodeSip487OriginatorCancel: 'CodeSip487OriginatorCancel',
  CodeSip488IncompatibleDestination: 'CodeSip488IncompatibleDestination',
  CodeSip488bearerCapabilityNotImplemented: 'CodeSip488bearerCapabilityNotImplemented',
  CodeSip501FacilitiesRejected: 'CodeSip501FacilitiesRejected',
  CodeSip501RequestedFacilityNotImplemented: 'CodeSip501RequestedFacilityNotImplemented',
  CodeSip501ServiceOrOptionNotImplementedUnspecified: 'CodeSip501ServiceOrOptionNotImplementedUnspecified',
  CodeSip502DestinationOutOfOrder: 'CodeSip502DestinationOutOfOrder',
  CodeSip503BearerCapabilityNotPresentlyAvailable: 'CodeSip503BearerCapabilityNotPresentlyAvailable',
  CodeSip503NetworkOutOfOrder: 'CodeSip503NetworkOutOfOrder',
  CodeSip503NoCircuitChannelAvailable: 'CodeSip503NoCircuitChannelAvailable',
  CodeSip503RequestedCircuitOrChannelNotAvailable: 'CodeSip503RequestedCircuitOrChannelNotAvailable',
  CodeSip503SwitchingEquipmentCongestion: 'CodeSip503SwitchingEquipmentCongestion',
  CodeSip503TemporaryFailure: 'CodeSip503TemporaryFailure',
  CodeSip504RecoveryOnTimerExpiry: 'CodeSip504RecoveryOnTimerExpiry',
  CodeSip603CallRejected: 'CodeSip603CallRejected',
  Crash: 'Crash',
  GatewayDown: 'GatewayDown',
  InformationElementOrParameterNonExistentOrNotImplemented: 'InformationElementOrParameterNonExistentOrNotImplemented',
  InterworkingUnspecified: 'InterworkingUnspecified',
  InvalidCallReferenceValue: 'InvalidCallReferenceValue',
  InvalidInformationElementContents: 'InvalidInformationElementContents',
  InvalidMessageUnspecified: 'InvalidMessageUnspecified',
  LoseRace: 'LoseRace',
  ManagerRequest: 'ManagerRequest',
  MandatoryInformationElementIsMissing: 'MandatoryInformationElementIsMissing',
  MediaTimeout: 'MediaTimeout',
  MessageNotCompatibleWithCallState: 'MessageNotCompatibleWithCallState',
  MessageNotCompatibleWithCallStateOrMessageTypeNonExistentOrNotImplemented: 'MessageNotCompatibleWithCallStateOrMessageTypeNonExistentOrNotImplemented',
  MessageTypeNonExistentOrNotImplemented: 'MessageTypeNonExistentOrNotImplemented',
  NormalCallClearing: 'NormalCallClearing',
  ParameterNonExistentOrNotImplementedPassedOnNationalUse: 'ParameterNonExistentOrNotImplementedPassedOnNationalUse',
  PickedOff: 'PickedOff',
  PreEmpted: 'PreEmpted',
  ProgressTimeout: 'ProgressTimeout',
  ProtocolErrorUnspecified: 'ProtocolErrorUnspecified',
  RequestedFacilityNotSubscribed: 'RequestedFacilityNotSubscribed',
  ResponseToStatusInquiry: 'ResponseToStatusInquiry',
  ServiceOrOptionNotAvailableUnspecified: 'ServiceOrOptionNotAvailableUnspecified',
  SystemShutdown: 'SystemShutdown',
  UnknownOrCallUnfinished: 'UnknownOrCallUnfinished',
  UnspecifiedNoOtherCauseCodesApplicable: 'UnspecifiedNoOtherCauseCodesApplicable',
  UserChallenge: 'UserChallenge',
  UserNotRegistered: 'UserNotRegistered',
} as const;

/**
 * Types of dialplan available for callsGenerator.
 */
export type TelephonyCallsGeneratorDialplanEnumOVH = typeof TelephonyCallsGeneratorDialplanEnumOVH[keyof typeof TelephonyCallsGeneratorDialplanEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyCallsGeneratorDialplanEnumOVH = {
  ReadText: 'ReadText',
  RequestAppointmentConfirmation: 'RequestAppointmentConfirmation',
  RequestAppointmentConfirmationWithTransfer: 'RequestAppointmentConfirmationWithTransfer',
} as const;

/**
 * hangup cause
 * @nullable
 */
export type TelephonyCallsGeneratedOVHHangupCause = TelephonyCallsGeneratorHangupCauseEnumOVH | null;

/**
 * number where the call come from
 * @nullable
 */
export type TelephonyCallsGeneratedOVHCaller = PhoneNumberOVH | null;

/**
 * number called
 * @nullable
 */
export type TelephonyCallsGeneratedOVHCallee = PhoneNumberOVH | null;

/**
 * Automatic Call made by Call Generator on this line
 */
export interface TelephonyCallsGeneratedOVH {
  /**
   * answer date
   * @nullable
   */
  readonly answerDatetime?: string | null;
  /**
   * Application and dialplan running for call
   * @nullable
   */
  readonly application?: string | null;
  /**
   * end status of application
   * @nullable
   */
  readonly applicationResult?: string | null;
  /** billingNumber (service used) */
  readonly billingNumber?: PhoneNumberOVH;
  /**
   * creation date of the call
   * @nullable
   */
  readonly callCreatedDatetime?: string | null;
  /**
   * call duration on seconds
   * @nullable
   */
  readonly callDuration?: number | null;
  /**
   * number called
   * @nullable
   */
  readonly callee?: TelephonyCallsGeneratedOVHCallee;
  /**
   * number where the call come from
   * @nullable
   */
  readonly caller?: TelephonyCallsGeneratedOVHCaller;
  /**
   * DTMF received during the call separate by commas
   * @nullable
   */
  readonly dtmf?: string | null;
  /**
   * hangup cause
   * @nullable
   */
  readonly hangupCause?: TelephonyCallsGeneratedOVHHangupCause;
  /**
   * hangup date
   * @nullable
   */
  readonly hangupDatetime?: string | null;
  /** Generated call identifier */
  readonly identifier?: string;
  /**
   * original call uuid if it's a transfer
   * @nullable
   */
  readonly transferFrom?: string | null;
  /** unique call id */
  readonly uuid?: string;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type TelephonyBillingAccountWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Status of billing account
 */
export type TelephonyBillingAccountStatusEnumOVH = typeof TelephonyBillingAccountStatusEnumOVH[keyof typeof TelephonyBillingAccountStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyBillingAccountStatusEnumOVH = {
  closed: 'closed',
  deleted: 'deleted',
  enabled: 'enabled',
  expired: 'expired',
} as const;

/**
 * Billing Account
 */
export interface TelephonyBillingAccountWithIAMOVH {
  /** Allowed outplan */
  readonly allowedOutplan?: OrderPriceOVH;
  /** Name of the billing account */
  readonly billingAccount?: string;
  /** Allowed threshold credit */
  creditThreshold?: OrderPriceOVH;
  /** Current outplan */
  readonly currentOutplan?: OrderPriceOVH;
  /** Description of the billing account */
  description?: string;
  /** Check if the billing account contains at least one special number */
  readonly hasSpecialNumbers?: boolean;
  /** Hide called numbers in end-of-month call details CSV */
  hiddenExternalNumber?: boolean;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: TelephonyBillingAccountWithIAMOVHIam;
  /** Override number display for calls between services of your billing account */
  overrideDisplayedNumber?: boolean;
  /** Security deposit amount */
  readonly securityDeposit?: OrderPriceOVH;
  /** Current status of billing account */
  readonly status?: TelephonyBillingAccountStatusEnumOVH;
  /** Is the billing account trusted */
  readonly trusted?: boolean;
}

/**
 * Billing Account
 */
export interface TelephonyBillingAccountOVH {
  /** Allowed outplan */
  readonly allowedOutplan?: OrderPriceOVH;
  /** Name of the billing account */
  readonly billingAccount?: string;
  /** Allowed threshold credit */
  creditThreshold?: OrderPriceOVH;
  /** Current outplan */
  readonly currentOutplan?: OrderPriceOVH;
  /** Description of the billing account */
  description?: string;
  /** Check if the billing account contains at least one special number */
  readonly hasSpecialNumbers?: boolean;
  /** Hide called numbers in end-of-month call details CSV */
  hiddenExternalNumber?: boolean;
  /** Override number display for calls between services of your billing account */
  overrideDisplayedNumber?: boolean;
  /** Security deposit amount */
  readonly securityDeposit?: OrderPriceOVH;
  /** Current status of billing account */
  readonly status?: TelephonyBillingAccountStatusEnumOVH;
  /** Is the billing account trusted */
  readonly trusted?: boolean;
}

/**
 * Billing progress status
 */
export type TelephonyBillStatusEnumOVH = typeof TelephonyBillStatusEnumOVH[keyof typeof TelephonyBillStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyBillStatusEnumOVH = {
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * Document suffix
 */
export type TelephonyBillDocumentOVH = typeof TelephonyBillDocumentOVH[keyof typeof TelephonyBillDocumentOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyBillDocumentOVH = {
  csv: 'csv',
  pdf: 'pdf',
  receivedcsv: 'received.csv',
  xml: 'xml',
} as const;

/**
 * The web access for your cloudpabx
 */
export interface TelephonyBannerAccessOVH {
  /** The creation date of this access */
  readonly creationDate?: string;
  readonly id?: number;
  /** The url of the web access */
  readonly url?: string;
}

/**
 * Action for list antihack
 */
export type TelephonyAntihackActionEnumOVH = typeof TelephonyAntihackActionEnumOVH[keyof typeof TelephonyAntihackActionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyAntihackActionEnumOVH = {
  AUTHORIZE_ALL: 'AUTHORIZE_ALL',
  AUTHORIZE_ONE_NUMBER: 'AUTHORIZE_ONE_NUMBER',
  BLOCK_ALL: 'BLOCK_ALL',
  BLOCK_ONE_NUMBER: 'BLOCK_ONE_NUMBER',
} as const;

/**
 * Informations related to a line offer
 */
export interface TelephonyAccessoryOfferOVH {
  /**
   * The accessory description
   * @nullable
   */
  description?: string | null;
  /** The accessory name */
  name?: string;
  /** Accessory price */
  price?: OrderPriceOVH;
  /**
   * An URL to accessory details
   * @nullable
   */
  url?: string | null;
}

/**
 * Abbreviated number
 */
export interface TelephonyAbbreviatedNumberGroupOVH {
  /** The abbreviated number which must start with "7" and must have a length of 3 or 4 digits */
  readonly abbreviatedNumber?: number;
  /** The destination of the abbreviated number */
  destinationNumber?: PhoneNumberOVH;
  name?: string;
  surname?: string;
}

/**
 * Abbreviated number
 */
export interface TelephonyAbbreviatedNumberOVH {
  /** The abbreviated number which must start with "2" and must have a length of 3 or 4 digits */
  readonly abbreviatedNumber?: number;
  /** The destination of the abbreviated number */
  destinationNumber?: PhoneNumberOVH;
  name?: string;
  surname?: string;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type SpareTelephonyTelephonySpareWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Spare properties
 */
export interface SpareTelephonyTelephonySpareWithIAMOVH {
  /** Phone brand model */
  readonly brand?: string;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: SpareTelephonyTelephonySpareWithIAMOVHIam;
  /** Mac address */
  readonly macAddress?: string;
  /** Phone protocol */
  readonly protocol?: TelephonyProtocolEnumOVH;
}

/**
 * Spare properties
 */
export interface SpareTelephonyTelephonySpareOVH {
  /** Phone brand model */
  readonly brand?: string;
  /** Mac address */
  readonly macAddress?: string;
  /** Phone protocol */
  readonly protocol?: TelephonyProtocolEnumOVH;
}

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  automaticV2024: 'automaticV2024',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

export type OrderCurrencyCodeEnumOVH = typeof OrderCurrencyCodeEnumOVH[keyof typeof OrderCurrencyCodeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderCurrencyCodeEnumOVH = {
  AUD: 'AUD',
  CAD: 'CAD',
  CZK: 'CZK',
  EUR: 'EUR',
  GBP: 'GBP',
  INR: 'INR',
  LTL: 'LTL',
  MAD: 'MAD',
  'N/A': 'N/A',
  PLN: 'PLN',
  SGD: 'SGD',
  TND: 'TND',
  USD: 'USD',
  XOF: 'XOF',
  points: 'points',
} as const;

/**
 * Price with it's currency and textual representation
 */
export interface OrderPriceOVH {
  currencyCode?: OrderCurrencyCodeEnumOVH;
  text?: string;
  value?: number;
}

/**
 * A contract
 */
export interface OrderContractOVH {
  content?: string;
  name?: string;
  url?: string;
}

/**
 * All genders a person can choose
 */
export type NichandleGenderEnumOVH = typeof NichandleGenderEnumOVH[keyof typeof NichandleGenderEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandleGenderEnumOVH = {
  female: 'female',
  male: 'male',
} as const;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;

/**
 * ISO country codes
 */
export type CoreTypesCountryEnumOVH = typeof CoreTypesCountryEnumOVH[keyof typeof CoreTypesCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoreTypesCountryEnumOVH = {
  ac: 'ac',
  ad: 'ad',
  ae: 'ae',
  af: 'af',
  ag: 'ag',
  ai: 'ai',
  al: 'al',
  am: 'am',
  an: 'an',
  ao: 'ao',
  aq: 'aq',
  ar: 'ar',
  as: 'as',
  at: 'at',
  au: 'au',
  aw: 'aw',
  ax: 'ax',
  az: 'az',
  ba: 'ba',
  bb: 'bb',
  bd: 'bd',
  be: 'be',
  bf: 'bf',
  bg: 'bg',
  bh: 'bh',
  bi: 'bi',
  bj: 'bj',
  bl: 'bl',
  bm: 'bm',
  bn: 'bn',
  bo: 'bo',
  bq: 'bq',
  br: 'br',
  bs: 'bs',
  bt: 'bt',
  bv: 'bv',
  bw: 'bw',
  by: 'by',
  bz: 'bz',
  ca: 'ca',
  cc: 'cc',
  cd: 'cd',
  cf: 'cf',
  cg: 'cg',
  ch: 'ch',
  ci: 'ci',
  ck: 'ck',
  cl: 'cl',
  cm: 'cm',
  cn: 'cn',
  co: 'co',
  cr: 'cr',
  cs: 'cs',
  cu: 'cu',
  cv: 'cv',
  cw: 'cw',
  cx: 'cx',
  cy: 'cy',
  cz: 'cz',
  de: 'de',
  dj: 'dj',
  dk: 'dk',
  dm: 'dm',
  do: 'do',
  dz: 'dz',
  ec: 'ec',
  ee: 'ee',
  eg: 'eg',
  eh: 'eh',
  er: 'er',
  es: 'es',
  et: 'et',
  fc: 'fc',
  fd: 'fd',
  fi: 'fi',
  fj: 'fj',
  fk: 'fk',
  fm: 'fm',
  fo: 'fo',
  fr: 'fr',
  fx: 'fx',
  ga: 'ga',
  gb: 'gb',
  gd: 'gd',
  ge: 'ge',
  gf: 'gf',
  gg: 'gg',
  gh: 'gh',
  gi: 'gi',
  gl: 'gl',
  gm: 'gm',
  gn: 'gn',
  gp: 'gp',
  gq: 'gq',
  gr: 'gr',
  gs: 'gs',
  gt: 'gt',
  gu: 'gu',
  gw: 'gw',
  gy: 'gy',
  hk: 'hk',
  hm: 'hm',
  hn: 'hn',
  hr: 'hr',
  ht: 'ht',
  hu: 'hu',
  id: 'id',
  ie: 'ie',
  il: 'il',
  im: 'im',
  in: 'in',
  io: 'io',
  iq: 'iq',
  ir: 'ir',
  is: 'is',
  it: 'it',
  je: 'je',
  jm: 'jm',
  jo: 'jo',
  jp: 'jp',
  ke: 'ke',
  kg: 'kg',
  kh: 'kh',
  ki: 'ki',
  km: 'km',
  kn: 'kn',
  kp: 'kp',
  kr: 'kr',
  kw: 'kw',
  ky: 'ky',
  kz: 'kz',
  la: 'la',
  lb: 'lb',
  lc: 'lc',
  li: 'li',
  lk: 'lk',
  lr: 'lr',
  ls: 'ls',
  lt: 'lt',
  lu: 'lu',
  lv: 'lv',
  ly: 'ly',
  ma: 'ma',
  mc: 'mc',
  md: 'md',
  me: 'me',
  mf: 'mf',
  mg: 'mg',
  mh: 'mh',
  mk: 'mk',
  ml: 'ml',
  mm: 'mm',
  mn: 'mn',
  mo: 'mo',
  mp: 'mp',
  mq: 'mq',
  mr: 'mr',
  ms: 'ms',
  mt: 'mt',
  mu: 'mu',
  mv: 'mv',
  mw: 'mw',
  mx: 'mx',
  my: 'my',
  mz: 'mz',
  na: 'na',
  nc: 'nc',
  ne: 'ne',
  nf: 'nf',
  ng: 'ng',
  ni: 'ni',
  nl: 'nl',
  no: 'no',
  np: 'np',
  nr: 'nr',
  nu: 'nu',
  nz: 'nz',
  om: 'om',
  pa: 'pa',
  pe: 'pe',
  pf: 'pf',
  pg: 'pg',
  ph: 'ph',
  pk: 'pk',
  pl: 'pl',
  pm: 'pm',
  pn: 'pn',
  pr: 'pr',
  ps: 'ps',
  pt: 'pt',
  pw: 'pw',
  py: 'py',
  qa: 'qa',
  qc: 'qc',
  re: 're',
  ro: 'ro',
  rs: 'rs',
  ru: 'ru',
  rw: 'rw',
  sa: 'sa',
  sb: 'sb',
  sc: 'sc',
  sd: 'sd',
  se: 'se',
  sg: 'sg',
  sh: 'sh',
  si: 'si',
  sj: 'sj',
  sk: 'sk',
  sl: 'sl',
  sm: 'sm',
  sn: 'sn',
  so: 'so',
  sr: 'sr',
  ss: 'ss',
  st: 'st',
  sv: 'sv',
  sx: 'sx',
  sy: 'sy',
  sz: 'sz',
  tc: 'tc',
  td: 'td',
  tf: 'tf',
  tg: 'tg',
  th: 'th',
  tj: 'tj',
  tk: 'tk',
  tl: 'tl',
  tm: 'tm',
  tn: 'tn',
  to: 'to',
  tp: 'tp',
  tr: 'tr',
  tt: 'tt',
  tv: 'tv',
  tw: 'tw',
  tz: 'tz',
  ua: 'ua',
  ug: 'ug',
  uk: 'uk',
  um: 'um',
  us: 'us',
  uy: 'uy',
  uz: 'uz',
  va: 'va',
  vc: 'vc',
  ve: 've',
  vg: 'vg',
  vi: 'vi',
  vn: 'vn',
  vu: 'vu',
  we: 'we',
  wf: 'wf',
  ws: 'ws',
  ye: 'ye',
  yt: 'yt',
  yu: 'yu',
  za: 'za',
  zm: 'zm',
  zw: 'zw',
} as const;

/**
 * A value set tagged with its unit
 */
export interface ComplexTypeUnitAndValuesTelephonyTimestampAndValueOVH {
  unit?: string;
  values?: TelephonyTimestampAndValueOVH[];
}

/**
 * Key and value, with proper key strings
 */
export interface ComplexTypeSafeKeyValueStringOVH {
  key?: string;
  value?: string;
}

/**
 * Start and end points (inclusive) of a range
 */
export interface ComplexTypeRangeLongOVH {
  from?: number;
  to?: number;
}


/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type GetSmsServiceNameVirtualNumbersNumberOutgoingParams = {
/**
 * Filter the value of creationDatetime property (>=)
 */
'creationDatetime.from'?: string;
/**
 * Filter the value of creationDatetime property (<=)
 */
'creationDatetime.to'?: string;
/**
 * Filter the value of deliveryReceipt property (=)
 */
deliveryReceipt?: number;
/**
 * Filter the value of differedDelivery property (=)
 */
differedDelivery?: number;
/**
 * Filter the value of ptt property (=)
 */
ptt?: number;
/**
 * Filter the value of receiver property (=)
 */
receiver?: string;
/**
 * Filter the value of sender property (=)
 */
sender?: string;
/**
 * Filter the value of tag property (=)
 */
tag?: string;
};

export type PostSmsServiceNameVirtualNumbersNumberJobsBody = {
  /** The sms coding */
  charset?: SmsCharsetEnumOVH;
  /** Deprecated: The sms class */
  class?: SmsClassEnumOVH;
  /** Deprecated: the coding is deduced from the message and its charset */
  coding?: SmsCodingEnumOVH;
  /** The time -in minute(s)- to wait before sending the message */
  differedPeriod?: number;
  /** The sms message */
  message: string;
  /** The priority of the message */
  priority?: SmsPriorityEnumOVH;
  /** The receivers list */
  receivers?: string[];
  /** The receivers document url link in csv format */
  receiversDocumentUrl?: string;
  /** The receivers document slot id */
  receiversSlotId?: string;
  /** The identifier group tag */
  tag?: string;
  /** The maximum time -in minute(s)- before the message is dropped */
  validityPeriod?: number;
};

export type GetSmsServiceNameVirtualNumbersNumberIncomingParams = {
/**
 * Filter the value of creationDatetime property (>=)
 */
'creationDatetime.from'?: string;
/**
 * Filter the value of creationDatetime property (<=)
 */
'creationDatetime.to'?: string;
/**
 * Filter the value of sender property (=)
 */
sender?: string;
/**
 * Filter the value of tag property (=)
 */
tag?: string;
};

export type PostSmsServiceNameUsersLoginReceiversSlotIdCleanBody = {
  /** Limit checks to syntaxical validation */
  freemium: boolean;
  /** Only get action's price in credits without executing it */
  priceOnly: boolean;
};

export type PostSmsServiceNameUsersLoginReceiversBody = {
  /** Download file from URL before sending to contacts (works only with csvUrl and not document ID) */
  autoUpdate: boolean;
  /** URL of the file you want to import */
  csvUrl?: string;
  /** Description name of the document */
  description: string;
  /** ID of the /me/document file you want to import */
  documentId?: string;
  /** Slot number id used to handle the document */
  slotId: number;
};

export type GetSmsServiceNameUsersLoginOutgoingParams = {
/**
 * Filter the value of deliveryReceipt property (=)
 */
deliveryReceipt?: number;
/**
 * Filter the value of differedDelivery property (=)
 */
differedDelivery?: number;
/**
 * Filter the value of ptt property (=)
 */
ptt?: number;
/**
 * Filter the value of receiver property (=)
 */
receiver?: string;
/**
 * Filter the value of sender property (=)
 */
sender?: string;
/**
 * Filter the value of tag property (=)
 */
tag?: string;
};

export type PostSmsServiceNameUsersLoginJobsBody = {
  /** The sms coding */
  charset?: SmsCharsetEnumOVH;
  /** Deprecated: The sms class */
  class?: SmsClassEnumOVH;
  /** Deprecated: the coding is deduced from the message and its charset */
  coding?: SmsCodingEnumOVH;
  /** The time -in minute(s)- to wait before sending the message */
  differedPeriod?: number;
  /** The sms message */
  message: string;
  /** Do not display STOP clause in the message, this requires that this is not an advertising message */
  noStopClause?: boolean;
  /** The priority of the message */
  priority?: SmsPriorityEnumOVH;
  /** The receivers list */
  receivers?: string[];
  /** The receivers document url link in csv format */
  receiversDocumentUrl?: string;
  /** The receivers document slot id */
  receiversSlotId?: string;
  /** The sender */
  sender?: string;
  /** Set the flag to send a special sms which can be reply by the receiver (smsResponse). */
  senderForResponse?: boolean;
  /** The identifier group tag */
  tag?: string;
  /** The maximum time -in minute(s)- before the message is dropped */
  validityPeriod?: number;
};

export type GetSmsServiceNameUsersLoginIncomingParams = {
/**
 * Filter the value of sender property (=)
 */
sender?: string;
/**
 * Filter the value of tag property (=)
 */
tag?: string;
};

export type GetSmsServiceNameUsersLoginDocumentParams = {
/**
 * Filter the value of creationDatetime property (>=)
 */
'creationDatetime.from'?: string;
/**
 * Filter the value of creationDatetime property (<=)
 */
'creationDatetime.to'?: string;
/**
 * Select sms with a specific identifier group tag
 */
tag?: string;
/**
 * specify outgoing or incoming sms
 */
wayType: SmsDocumentWayTypeEnumOVH;
};

export type PostSmsServiceNameUsersBody = {
  /** The sms login */
  login: string;
  /** The sms password */
  password: string;
};

export type PostSmsServiceNameTransferCreditsBody = {
  /** Amount of credits to transfer. */
  credits: number;
  /** Sms account destination. */
  smsAccountTarget: string;
};

export type PostSmsServiceNameTemplatesControlNameRelaunchValidationBody = {
  /** Template description */
  description: string;
  /** Message pattern to be moderated. Use "#VALUE#" format for dynamic text area */
  message: string;
};

export type PostSmsServiceNameTemplatesControlBody = {
  /** Specify the kind of template */
  activity: SmsTypeTemplateEnumOVH;
  /** Template description */
  description?: string;
  /** Message pattern to be moderated. Use "#VALUE#" format for dynamic text area. */
  message: string;
  /** Name of the template */
  name: string;
  /** Message seen by the moderator */
  reason?: string;
};

export type GetSmsServiceNameTaskParams = {
/**
 * Filter the value of status property (=)
 */
status?: TelephonyTaskStatusEnumOVH;
};

export type GetSmsServiceNameSendersAvailableForValidationParams = {
/**
 * Information type
 */
referer?: SmsSenderRefererEnumOVH;
};

export type PostSmsServiceNameSendersSenderValidateBody = {
  /** The validation code */
  code: string;
};

export type PostSmsServiceNameSendersSenderDocumentsBody = {
  /** Document description */
  description?: string;
  /** Document name */
  name: string;
};

export type PostSmsServiceNameSendersBody = {
  /** Sender description */
  description?: string;
  /** Message seen by the moderator */
  reason?: string;
  /** The sender (alpha or phone number) */
  sender: string;
};

export type GetSmsServiceNameSeeOffersParams = {
/**
 * Filter to have the currency country prices
 */
countryCurrencyPrice: ReferenceCountryEnumOVH;
/**
 * Filter to have the country destination
 */
countryDestination: SmsCountryEnumOVH;
/**
 * Sms pack offer quantity
 */
quantity: SmsPackQuantityEnumOVH;
};

export type PostSmsServiceNameReceiversSlotIdCleanBody = {
  /** Limit checks to syntaxical validation */
  freemium: boolean;
  /** Only get action's price in credits without executing it */
  priceOnly: boolean;
};

export type PostSmsServiceNameReceiversBody = {
  /** Download file from URL before sending to contacts (works only with csvUrl and not document ID) */
  autoUpdate: boolean;
  /** URL of the file you want to import */
  csvUrl?: string;
  /** Description name of the document */
  description: string;
  /** ID of the /me/document file you want to import */
  documentId?: string;
  /** Slot number id used to handle the document */
  slotId: number;
};

export type PostSmsServiceNamePhonebooksBookKeyPhonebookContactBody = {
  /** Group name of the phonebook */
  group: string;
  /** Home mobile phone number of the contact */
  homeMobile?: InternationalPhoneNumberOVH;
  /** Home landline phone number of the contact */
  homePhone?: InternationalPhoneNumberOVH;
  /** Name of the contact */
  name: string;
  /** Contact surname */
  surname: string;
  /** Mobile phone office number of the contact */
  workMobile?: InternationalPhoneNumberOVH;
  /** Landline phone office number of the contact */
  workPhone?: InternationalPhoneNumberOVH;
};

export type PostSmsServiceNamePhonebooksBookKeyImportBody = {
  /** ID of the /me/document file you want to import */
  documentId: string;
};

export type GetSmsServiceNamePhonebooksBookKeyExportParams = {
/**
 * Format of the file
 */
format: TelephonyContactsExportFormatsEnumOVH;
};

export type PostSmsServiceNamePhonebooksBody = {
  /** Name of the wanted phonebook */
  name: string;
};

export type GetSmsServiceNameOutgoingParams = {
/**
 * Filter on batch id property (=)
 */
batchID?: string;
/**
 * Filter on creationDatetime property (>=)
 */
'creationDatetime.from'?: string;
/**
 * Filter on creationDatetime property (<=)
 */
'creationDatetime.to'?: string;
/**
 * Filter on deliveryReceipt property (=)
 */
deliveryReceipt?: number;
/**
 * Filter on differedDelivery property (=)
 */
differedDelivery?: number;
/**
 * Filter on message id property (=)
 */
messageID?: string;
/**
 * Filter on ptt property (=)
 */
ptt?: number;
/**
 * Filter on receiver property (=)
 */
receiver?: string;
/**
 * Filter on sender property (=)
 */
sender?: string;
/**
 * Filter on tag property (=)
 */
tag?: string;
};

export type PostSmsServiceNameJobsBody = {
  /** The sms coding */
  charset?: SmsCharsetEnumOVH;
  /** Deprecated: The sms class */
  class?: SmsClassEnumOVH;
  /** Deprecated: the coding is deduced from the message and its charset */
  coding?: SmsCodingEnumOVH;
  /** The time -in minute(s)- to wait before sending the message */
  differedPeriod?: number;
  /** The sms message */
  message: string;
  /** Do not display STOP clause in the message, this requires that this is not an advertising message */
  noStopClause?: boolean;
  /** The priority of the message */
  priority?: SmsPriorityEnumOVH;
  /** The receivers list */
  receivers?: string[];
  /** The receivers document url link in csv format */
  receiversDocumentUrl?: string;
  /** The receivers document slot id */
  receiversSlotId?: string;
  /** The sender */
  sender?: string;
  /** Set the flag to send a special sms which can be reply by the receiver (smsResponse). */
  senderForResponse?: boolean;
  /** The identifier group tag */
  tag?: string;
  /** The maximum time -in minute(s)- before the message is dropped */
  validityPeriod?: number;
};

export type GetSmsServiceNameIncomingParams = {
/**
 * Filter the value of creationDatetime property (>=)
 */
'creationDatetime.from'?: string;
/**
 * Filter the value of creationDatetime property (<=)
 */
'creationDatetime.to'?: string;
/**
 * Filter the value of sender property (=)
 */
sender?: string;
/**
 * Filter the value of tag property (=)
 */
tag?: string;
};

export type PostSmsServiceNameHlrBody = {
  /** The receivers */
  receivers?: string[];
  /** The receivers document url link in csv format */
  receiversDocumentUrl?: string;
};

export type GetSmsServiceNameExceptionsParams = {
/**
 * The receiver number to check
 */
receiver: string;
};

export type GetSmsServiceNameDocumentParams = {
/**
 * Filter SMSs with their batch ID (outgoing SMSs only)
 */
batchID?: string;
/**
 * Filter the value of creationDatetime property (>=)
 */
'creationDatetime.from'?: string;
/**
 * Filter the value of creationDatetime property (<=)
 */
'creationDatetime.to'?: string;
/**
 * Select sms with a specific identifier group tag
 */
tag?: string;
/**
 * specify outgoing or incoming sms
 */
wayType: SmsDocumentWayTypeEnumOVH;
};

export type GetSmsServiceNameBlacklistsParams = {
/**
 * Filter the value of batchID property (=)
 */
batchID?: string;
/**
 * Filter the value of smsOutgoingID property (=)
 */
smsOutgoingID?: number;
};

export type GetSmsVirtualNumbersParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

export type GetSmsRatesPacksParams = {
/**
 * Country where you buy credits
 */
billingCountry?: SmsBillingCountryEnumOVH;
/**
 * Country where you send SMS
 */
country: SmsCountryEnumOVH;
};

export type GetSmsRatesDestinationsParams = {
/**
 * Country where you buy credits
 */
billingCountry?: SmsBillingCountryEnumOVH;
/**
 * Country where you send SMS
 */
country: SmsCountryEnumOVH;
};

export type GetSmsPttsParams = {
/**
 * The premium transaction tracking code
 */
ptt: number;
};

export type GetSmsParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Task status
 */
export type TelephonyTaskStatusEnumOVH = typeof TelephonyTaskStatusEnumOVH[keyof typeof TelephonyTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyTaskStatusEnumOVH = {
  doing: 'doing',
  done: 'done',
  error: 'error',
  pause: 'pause',
  todo: 'todo',
} as const;

/**
 * Operation on a telephony service
 */
export interface TelephonyTaskOVH {
  /** Action associated with the task */
  readonly action?: string;
  /**
   * Potential failure reason of the task
   * @nullable
   */
  readonly message?: string | null;
  /**
   * Object potentially created at the end of the task
   * @nullable
   */
  readonly objectCreated?: string | null;
  readonly serviceType?: string;
  /** Status of the task */
  readonly status?: TelephonyTaskStatusEnumOVH;
  readonly taskId?: number;
}

/**
 * File providing task status
 */
export type TelephonyPcsFileStatusEnumOVH = typeof TelephonyPcsFileStatusEnumOVH[keyof typeof TelephonyPcsFileStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyPcsFileStatusEnumOVH = {
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * Telephony API related file hosted
 */
export interface TelephonyPcsFileOVH {
  readonly filename?: string;
  readonly status?: TelephonyPcsFileStatusEnumOVH;
  readonly url?: string;
  readonly urlExpirationDatetime?: string;
}

/**
 * Export file format
 */
export type TelephonyContactsExportFormatsEnumOVH = typeof TelephonyContactsExportFormatsEnumOVH[keyof typeof TelephonyContactsExportFormatsEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyContactsExportFormatsEnumOVH = {
  csv: 'csv',
} as const;

/**
 * Sms job
 */
export interface SmsVirtualNumberJobOVH {
  readonly creationDatetime?: string;
  readonly credits?: number;
  readonly deliveryReceipt?: number;
  readonly differedDelivery?: number;
  readonly id?: number;
  readonly message?: string;
  readonly messageLength?: number;
  readonly numberOfSms?: number;
  readonly ptt?: number;
  readonly receiver?: string;
}

/**
 * The ISO formated country code of the number
 */
export type SmsVirtualNumberIsoCountryCodeEnumOVH = typeof SmsVirtualNumberIsoCountryCodeEnumOVH[keyof typeof SmsVirtualNumberIsoCountryCodeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsVirtualNumberIsoCountryCodeEnumOVH = {
  be: 'be',
  ch: 'ch',
  de: 'de',
  es: 'es',
  fr: 'fr',
  uk: 'uk',
} as const;

/**
 * IAM resource metadata
 * @nullable
 */
export type SmsVirtualNumberGenericServiceWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Virtual numbers
 */
export interface SmsVirtualNumberGenericServiceWithIAMOVH {
  /** The ISO formated country code of the number */
  readonly countryCode?: SmsVirtualNumberIsoCountryCodeEnumOVH;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: SmsVirtualNumberGenericServiceWithIAMOVHIam;
  /** The virtual number */
  readonly number?: string;
}

/**
 * Virtual numbers
 */
export interface SmsVirtualNumberGenericServiceOVH {
  /** The ISO formated country code of the number */
  readonly countryCode?: SmsVirtualNumberIsoCountryCodeEnumOVH;
  /** The virtual number */
  readonly number?: string;
}

/**
 * Virtual numbers
 */
export interface SmsVirtualNumberOVH {
  /** The ISO formated country code of the number */
  readonly countryCode?: SmsVirtualNumberIsoCountryCodeEnumOVH;
  /** The virtual number */
  readonly number?: string;
}

/**
 * SMS users
 */
export interface SmsUserOVH {
  alertThresholdInformations?: SmsAlertThresholdOVH;
  /**
   * URL called when state of a sent SMS changes
   * @nullable
   */
  callBack?: string | null;
  ipRestrictions?: string[];
  /** The sms user login */
  readonly login?: string;
  password?: string;
  quotaInformations?: SmsQuotaOVH;
  /**
   * URL called when a STOP is received after a receiver replied stop to a SMS
   * @nullable
   */
  stopCallBack?: string | null;
}

/**
 * All existing types for a given template
 */
export type SmsTypeTemplateEnumOVH = typeof SmsTypeTemplateEnumOVH[keyof typeof SmsTypeTemplateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsTypeTemplateEnumOVH = {
  alerting: 'alerting',
  authentification: 'authentification',
  transactional: 'transactional',
} as const;

/**
 * All existing types for a given sender
 */
export type SmsTypeSenderEnumOVH = typeof SmsTypeSenderEnumOVH[keyof typeof SmsTypeSenderEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsTypeSenderEnumOVH = {
  alpha: 'alpha',
  numeric: 'numeric',
  shortcode: 'shortcode',
  virtual: 'virtual',
} as const;

export type PostSmsEstimateBody = {
  /** The message to send */
  message: string;
  /** Do not display STOP clause in the message, this requires that this is not an advertising message */
  noStopClause: boolean;
  /** Sender type that will be used to send the message */
  senderType: SmsTypeSenderEnumOVH;
};

/**
 * The task step
 */
export type SmsTodoGeneralPublicStepsEnumOVH = typeof SmsTodoGeneralPublicStepsEnumOVH[keyof typeof SmsTodoGeneralPublicStepsEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsTodoGeneralPublicStepsEnumOVH = {
  checkOrder: 'checkOrder',
  createHlrs: 'createHlrs',
  finishing: 'finishing',
  sendMailReport: 'sendMailReport',
  starting: 'starting',
  waitForHlrs: 'waitForHlrs',
} as const;

/**
 * The task function
 */
export type SmsTodoGeneralPublicFunctionsEnumOVH = typeof SmsTodoGeneralPublicFunctionsEnumOVH[keyof typeof SmsTodoGeneralPublicFunctionsEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsTodoGeneralPublicFunctionsEnumOVH = {
  cleanSmsReceivers: 'cleanSmsReceivers',
} as const;

/**
 * A structure describing all information about templates informations
 */
export interface SmsTemplatesOVH {
  customizedEmailMode?: boolean;
  customizedSmsMode?: boolean;
  /** @nullable */
  emailBody?: string | null;
  /** @nullable */
  emailFrom?: string | null;
  /** @nullable */
  emailSubject?: string | null;
  /** @nullable */
  smsBody?: string | null;
}

/**
 * Operation on a SMS service
 */
export interface SmsTaskOVH {
  readonly function?: SmsTodoGeneralPublicFunctionsEnumOVH;
  readonly status?: TelephonyTaskStatusEnumOVH;
  readonly step?: SmsTodoGeneralPublicStepsEnumOVH;
  readonly taskId?: number;
}

/**
 * The media support used to be contacted in case of alert
 */
export type SmsSupportEnumOVH = typeof SmsSupportEnumOVH[keyof typeof SmsSupportEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsSupportEnumOVH = {
  both: 'both',
  mail: 'mail',
  sms: 'sms',
} as const;

/**
 * All existing status for a given referer
 */
export type SmsStatusSenderEnumOVH = typeof SmsStatusSenderEnumOVH[keyof typeof SmsStatusSenderEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsStatusSenderEnumOVH = {
  disable: 'disable',
  enable: 'enable',
  refused: 'refused',
  waitingValidation: 'waitingValidation',
} as const;

/**
 * Sms template for moderation (Needed to send in US country)
 */
export interface SmsTemplateControlOVH {
  /** Specify the kind of template */
  activity?: SmsTypeTemplateEnumOVH;
  /** Message sent by the moderator */
  readonly comment?: string;
  /** Template creation datetime */
  readonly datetime?: string;
  /** Template description */
  description?: string;
  /** Message pattern to be moderated. Use "#VALUE#" format for dynamic text area. */
  message?: string;
  /** Name of the template */
  name?: string;
  /** Template status */
  status?: SmsStatusSenderEnumOVH;
}

/**
 * Account status
 */
export type SmsStatusAccountEnumOVH = typeof SmsStatusAccountEnumOVH[keyof typeof SmsStatusAccountEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsStatusAccountEnumOVH = {
  disable: 'disable',
  enable: 'enable',
} as const;

/**
 * A structure describing all information about quota informations
 */
export interface SmsSmsSendingReportOVH {
  ids?: number[];
  invalidReceivers?: string[];
  tag?: string;
  totalCreditsRemoved?: number;
  validReceivers?: string[];
}

/**
 * Smpp Settings Statuses
 */
export type SmsSettingsStatusEnumOVH = typeof SmsSettingsStatusEnumOVH[keyof typeof SmsSettingsStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsSettingsStatusEnumOVH = {
  DELETED: 'DELETED',
  ERROR: 'ERROR',
  SUCCESS: 'SUCCESS',
  UNKNOWN: 'UNKNOWN',
  UPDATING_IP: 'UPDATING_IP',
  WAITING_IP: 'WAITING_IP',
} as const;

/**
 * SMPP Settings Endpoints
 */
export interface SmsSettingsEndpointsOVH {
  /** address of the TLS endpoint: domain:port */
  readonly secured?: string;
  /** address of the non-TLS endpoint: domain:port */
  readonly unsecured?: string;
}

/**
 * SMPP settings
 */
export interface SmsSettingsOVH {
  /** Addresses of the TLS and non-TLS endpoints */
  readonly endpoints?: readonly SmsSettingsEndpointsOVH[];
  /** Status of the SMPP account */
  readonly status?: SmsSettingsStatusEnumOVH;
  /** Username used to connect to OVHcloud SMSC */
  readonly systemID?: string;
  /** Number of messages allowed per seconds */
  readonly throughput?: number;
  /** Number of messages treated simultaneously */
  readonly windowing?: number;
}

/**
 * The referer of the available sender
 */
export type SmsSenderRefererEnumOVH = typeof SmsSenderRefererEnumOVH[keyof typeof SmsSenderRefererEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsSenderRefererEnumOVH = {
  domain: 'domain',
  nichandle: 'nichandle',
} as const;

/**
 * SMS senders' document
 */
export interface SmsSenderDocumentOVH {
  /** Creation datetime */
  readonly createdAt?: string;
  /**
   * Document description
   * @nullable
   */
  description?: string | null;
  /** Document ID */
  readonly documentID?: string;
  /** URL to get document */
  readonly getUrl?: string;
  /** Document name */
  name?: string;
  /**
   * URL to upload document
   * @nullable
   */
  readonly putUrl?: string | null;
  /** Document size (in bytes) */
  readonly size?: number;
}

/**
 * A structure describing all information about senders available
 */
export interface SmsSenderAvailableOVH {
  referer?: SmsSenderRefererEnumOVH;
  sender?: string;
}

/**
 * Specify the kind of sender
 * @nullable
 */
export type SmsSenderOVHType = SmsTypeSenderEnumOVH | null;

/**
 * SMS senders
 */
export interface SmsSenderOVH {
  /**
   * Message sent by the moderator
   * @nullable
   */
  readonly comment?: string | null;
  /** Sender description */
  description?: string;
  /** Specify if the sender is custom or not */
  readonly referer?: SmsRefererSenderEnumOVH;
  /** The sms sender */
  readonly sender?: string;
  /** Sender status */
  status?: SmsStatusSenderEnumOVH;
  /**
   * Specify the kind of sender
   * @nullable
   */
  readonly type?: SmsSenderOVHType;
  /**
   * Validation media identifier
   * @nullable
   */
  readonly validationMedia?: string | null;
}

/**
 * Restriction type used by the operator to filter sms.
 */
export type SmsRestrictionCodeEnumOVH = typeof SmsRestrictionCodeEnumOVH[keyof typeof SmsRestrictionCodeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsRestrictionCodeEnumOVH = {
  ALPHA: 'ALPHA',
  BAD_DLR: 'BAD_DLR',
  BLOCKED: 'BLOCKED',
  CODING: 'CODING',
  DLR: 'DLR',
  FLASHONLY: 'FLASHONLY',
  MSISDN: 'MSISDN',
} as const;

/**
 * Response type
 */
export type SmsResponseTypeEnumOVH = typeof SmsResponseTypeEnumOVH[keyof typeof SmsResponseTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsResponseTypeEnumOVH = {
  cgi: 'cgi',
  none: 'none',
  text: 'text',
} as const;

/**
 * The tracking media response
 */
export type SmsResponseTrackingMediaEnumOVH = typeof SmsResponseTrackingMediaEnumOVH[keyof typeof SmsResponseTrackingMediaEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsResponseTrackingMediaEnumOVH = {
  email: 'email',
  sms: 'sms',
  voice: 'voice',
} as const;

/**
 * The tracking media response
 */
export interface SmsResponseTrackingOptionsOVH {
  media?: SmsResponseTrackingMediaEnumOVH;
  sender?: string;
  target?: string;
}

/**
 * A structure describing how to manage an sms Response
 */
export interface SmsResponseOVH {
  /**
   * Default url callback used for a given response.
   * @nullable
   */
  cgiUrl?: string | null;
  responseType?: SmsResponseTypeEnumOVH;
  /**
   * Automatic notification sent by text in case of customer reply.
   * @nullable
   */
  text?: string | null;
  /** @nullable */
  trackingDefaultSmsSender?: string | null;
  /** @nullable */
  trackingOptions?: SmsResponseTrackingOptionsOVH[] | null;
}

/**
 * All tyoplogy of senders
 */
export type SmsRefererSenderEnumOVH = typeof SmsRefererSenderEnumOVH[keyof typeof SmsRefererSenderEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsRefererSenderEnumOVH = {
  custom: 'custom',
  domain: 'domain',
  line: 'line',
  nic: 'nic',
  owner: 'owner',
  virtual: 'virtual',
} as const;

/**
 * A structure giving operation price and asynchronous task ID
 */
export interface SmsReceiversAsynchronousCleanReportOVH {
  taskId?: number;
  totalCreditsRemoved?: number;
}

/**
 * Sms receivers preloaded
 */
export interface SmsReceiverOVH {
  /** Download file from URL before sending to contacts (works only with csvUrl and not document ID) */
  autoUpdate?: boolean;
  /** Is the object compatible with autoUpdate */
  readonly canAutoUpdate?: boolean;
  /** Creation date of the document */
  readonly datetime?: string;
  /** Description name of the document */
  description?: string;
  /** Number of receiver records in the document */
  readonly records?: number;
  /** Slot number id */
  readonly slotId?: number;
}

/**
 * Current quota status
 */
export type SmsQuotaStatusUserEnumOVH = typeof SmsQuotaStatusUserEnumOVH[keyof typeof SmsQuotaStatusUserEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsQuotaStatusUserEnumOVH = {
  active: 'active',
  inactive: 'inactive',
} as const;

/**
 * A structure describing all information about quota informations
 */
export interface SmsQuotaOVH {
  quotaLeft?: number;
  quotaStatus?: SmsQuotaStatusUserEnumOVH;
}

/**
 * All typology of ptt duration
 */
export type SmsPttDurationTypeEnumOVH = typeof SmsPttDurationTypeEnumOVH[keyof typeof SmsPttDurationTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsPttDurationTypeEnumOVH = {
  indeterminated: 'indeterminated',
  permanent: 'permanent',
  temporary: 'temporary',
} as const;

/**
 * A structure describing ptt details
 */
export interface SmsPttDetailsOVH {
  /** Ptt informations */
  comment?: string;
  /** Ptt short description */
  description?: string;
  /** Ptt volatility type */
  duration?: SmsPttDurationTypeEnumOVH;
}

/**
 * The priority of an sms sending
 */
export type SmsPriorityEnumOVH = typeof SmsPriorityEnumOVH[keyof typeof SmsPriorityEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsPriorityEnumOVH = {
  high: 'high',
  low: 'low',
  medium: 'medium',
  veryLow: 'veryLow',
} as const;

/**
 * Landline phone office number of the contact
 * @nullable
 */
export type SmsPhonebookContactOVHWorkPhone = InternationalPhoneNumberOVH | null;

/**
 * Mobile phone office number of the contact
 * @nullable
 */
export type SmsPhonebookContactOVHWorkMobile = InternationalPhoneNumberOVH | null;

/**
 * Home landline phone number of the contact
 * @nullable
 */
export type SmsPhonebookContactOVHHomePhone = InternationalPhoneNumberOVH | null;

/**
 * Home mobile phone number of the contact
 * @nullable
 */
export type SmsPhonebookContactOVHHomeMobile = InternationalPhoneNumberOVH | null;

/**
 * Phone book contact
 */
export interface SmsPhonebookContactOVH {
  /** Group name of the phonebook */
  group?: string;
  /**
   * Home mobile phone number of the contact
   * @nullable
   */
  homeMobile?: SmsPhonebookContactOVHHomeMobile;
  /**
   * Home landline phone number of the contact
   * @nullable
   */
  homePhone?: SmsPhonebookContactOVHHomePhone;
  /** Contact identifier */
  readonly id?: number;
  /** Contact name */
  name?: string;
  /** Contact surname */
  surname?: string;
  /**
   * Mobile phone office number of the contact
   * @nullable
   */
  workMobile?: SmsPhonebookContactOVHWorkMobile;
  /**
   * Landline phone office number of the contact
   * @nullable
   */
  workPhone?: SmsPhonebookContactOVHWorkPhone;
}

/**
 * Phone book
 */
export interface SmsPhonebookOVH {
  /** Identifier of the phonebook */
  readonly bookKey?: string;
  /** Phonebook name */
  name?: string;
  /** Phone key identifier between the phone and phonebooks */
  readonly phoneKey?: string;
}

/**
 * Pack quantity levels
 */
export type SmsPackQuantityEnumOVH = typeof SmsPackQuantityEnumOVH[keyof typeof SmsPackQuantityEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsPackQuantityEnumOVH = {
  NUMBER_100: 100,
  NUMBER_200: 200,
  NUMBER_250: 250,
  NUMBER_500: 500,
  NUMBER_1000: 1000,
  NUMBER_2500: 2500,
  NUMBER_5000: 5000,
  NUMBER_10000: 10000,
  NUMBER_25000: 25000,
  NUMBER_50000: 50000,
  NUMBER_100000: 100000,
  NUMBER_1000000: 1000000,
} as const;

/**
 * Pack quantity automatic recredit possibilities
 */
export type SmsPackQuantityAutomaticRecreditEnumOVH = typeof SmsPackQuantityAutomaticRecreditEnumOVH[keyof typeof SmsPackQuantityAutomaticRecreditEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsPackQuantityAutomaticRecreditEnumOVH = {
  NUMBER_100: 100,
  NUMBER_200: 200,
  NUMBER_250: 250,
  NUMBER_500: 500,
  NUMBER_1000: 1000,
  NUMBER_5000: 5000,
  NUMBER_10000: 10000,
} as const;

/**
 * A structure describing all information about an sms pack offer
 */
export interface SmsPackOfferOVH {
  countryDestination?: string;
  /** @nullable */
  giftPrice?: number | null;
  /** @nullable */
  giftQuantity?: number | null;
  language?: string;
  price?: number;
  quantity?: number;
  smsQuantity?: number;
  /** @nullable */
  totalPrice?: number | null;
}

/**
 * Price of one SMS, during a promotional event
 * @nullable
 */
export type SmsPackDetailsOVHDiscountSmsPrice = OrderPriceOVH | null;

/**
 * Price of one credit, during a promotional event
 * @nullable
 */
export type SmsPackDetailsOVHDiscountCreditPrice = OrderPriceOVH | null;

/**
 * Details about a SMS pack
 */
export interface SmsPackDetailsOVH {
  /** Destination country code */
  countryCode?: SmsCountryEnumOVH;
  /** Credits consumed by sending one SMS towards the given destination */
  credit?: number;
  /** Price of one credit, including pack's promotion */
  creditPrice?: OrderPriceOVH;
  /**
   * Maximum quantity (excluded) of credit to order to have this price
   * @nullable
   */
  creditQuantityMax?: number | null;
  /** Minimum quantity (included) of credit to order to have this price */
  creditQuantityMin?: number;
  /**
   * Price of one credit, during a promotional event
   * @nullable
   */
  discountCreditPrice?: SmsPackDetailsOVHDiscountCreditPrice;
  /**
   * Percentage applied as part of a promotional event
   * @nullable
   */
  discountPercentage?: number | null;
  /**
   * Price of one SMS, during a promotional event
   * @nullable
   */
  discountSmsPrice?: SmsPackDetailsOVHDiscountSmsPrice;
  /** Price of one SMS sent towards the given destination, including pack's promotion */
  smsPrice?: OrderPriceOVH;
  /**
   * Maximum quantity (excluded) of SMS you can obtain with this pack
   * @nullable
   */
  smsQuantityMax?: number | null;
  /** Minimum quantity (included) of SMS you can obtain with this pack */
  smsQuantityMin?: number;
}

/**
 * Sent SMS
 */
export interface SmsOutgoingOVH {
  /**
   * ID of batch linked to the SMS
   * @nullable
   */
  readonly batchID?: string | null;
  /** Creation datetime */
  readonly creationDatetime?: string;
  /** Spent credits */
  readonly credits?: number;
  /**
   * Delivering datetime
   * @nullable
   */
  readonly deliveredAt?: string | null;
  /** Delivery receipt from operator */
  readonly deliveryReceipt?: number;
  /** Delay before SMS sending */
  readonly differedDelivery?: number;
  /** Identifier */
  readonly id?: number;
  /** SMS message */
  readonly message?: string;
  /**
   * SMPP messageID
   * @nullable
   */
  readonly messageID?: string | null;
  /** SMS message length */
  readonly messageLength?: number;
  /** SMS message's number of parts */
  readonly numberOfSms?: number;
  /** Code representing SMS state */
  readonly ptt?: number;
  /** SMS receiver */
  readonly receiver?: string;
  /** SMS sender */
  readonly sender?: string;
  /**
   * Sending datetime
   * @nullable
   */
  readonly sentAt?: string | null;
  /** Customer label to categorize SMSs */
  readonly tag?: string;
  /** Tariff code applied on the sms */
  readonly tariffCode?: string;
}

/**
 * A structure describing the encoding, length and number of SMS parts of a text message
 */
export interface SmsJobEstimateOVH {
  /** The number of characters the message contains, including invisible escaped characters */
  characters?: number;
  /** The characters class that will be used to send the SMS, depending on characters in message */
  charactersClass?: SmsEncodingEnumOVH;
  /** The number of characters every SMS part can contain, depending on characters class and quantity of parts */
  maxCharactersPerPart?: number;
  /** The quantity of SMS parts the message will be split in */
  parts?: number;
}

/**
 * Sms job
 */
export interface SmsJobOVH {
  readonly creationDatetime?: string;
  readonly credits?: number;
  /** @nullable */
  readonly deliveredAt?: string | null;
  readonly deliveryReceipt?: number;
  readonly differedDelivery?: number;
  readonly id?: number;
  readonly message?: string;
  readonly messageLength?: number;
  readonly numberOfSms?: number;
  readonly ptt?: number;
  readonly receiver?: string;
  readonly sender?: string;
  /** @nullable */
  readonly sentAt?: string | null;
}

/**
 * Sms history of sms incoming received
 */
export interface SmsIncomingOVH {
  readonly creationDatetime?: string;
  readonly credits?: number;
  readonly id?: number;
  readonly message?: string;
  readonly sender?: string;
  readonly tag?: string;
}

/**
 * The sms coding
 */
export type SmsHlrStatusesOVH = typeof SmsHlrStatusesOVH[keyof typeof SmsHlrStatusesOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsHlrStatusesOVH = {
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * Home Location Register informations. Give informations about a given cellular phone.
 */
export interface SmsHlrLookupNumberOVH {
  /** HLR creation datetime */
  readonly datetime?: string;
  /** HLR id */
  readonly id?: number;
  /** MSISDN */
  readonly msisdn?: string;
  /** The {Mobile Country Code, Mobile Network Code} unique identifier */
  readonly operatorCode?: string;
  /** Has the MSISDN been ported from its original network */
  readonly ported?: boolean;
  /** Is the MSISDN currently reachable */
  readonly reachable?: boolean;
  /** Is the MSISDN currently roaming outside its natinal network */
  readonly roaming?: boolean;
  /** Status of the HLR request */
  readonly status?: SmsHlrStatusesOVH;
  /** Is the MSISDN valid */
  readonly valid?: boolean;
}

/**
 * Sms operator informations
 */
export interface SmsHlrOVH {
  /** The country */
  readonly country?: string;
  /** The countryCode prefix number */
  readonly countryCode?: string;
  /** The network name */
  readonly network?: string;
  /** The operator name */
  readonly operator?: string;
  /** The region */
  readonly region?: string;
}

/**
 * Sms reach list
 */
export interface SmsExceptionOVH {
  /** The abreviated country code. */
  readonly countrySuffixe?: string;
  /** The exception message */
  readonly messages?: readonly string[];
  /** The list of operators impacted. */
  readonly operators?: string;
  /** The type of routing restriction imposed by the operator */
  readonly restrictionCode?: SmsRestrictionCodeEnumOVH;
  /**
   * The substitution sender used to bypass operator filter
   * @nullable
   */
  readonly substitution?: string | null;
}

/**
 * The SMS available characters class
 */
export type SmsEncodingEnumOVH = typeof SmsEncodingEnumOVH[keyof typeof SmsEncodingEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsEncodingEnumOVH = {
  '7bits': '7bits',
  unicode: 'unicode',
} as const;

/**
 * Way type
 */
export type SmsDocumentWayTypeEnumOVH = typeof SmsDocumentWayTypeEnumOVH[keyof typeof SmsDocumentWayTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsDocumentWayTypeEnumOVH = {
  incoming: 'incoming',
  outgoing: 'outgoing',
} as const;

/**
 * All country suffixes accessible for sms services and "all" available
 */
export type SmsCountryEnumOVH = typeof SmsCountryEnumOVH[keyof typeof SmsCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsCountryEnumOVH = {
  ad: 'ad',
  ae: 'ae',
  af: 'af',
  ag: 'ag',
  ai: 'ai',
  al: 'al',
  all: 'all',
  am: 'am',
  an: 'an',
  ao: 'ao',
  ar: 'ar',
  at: 'at',
  au: 'au',
  aw: 'aw',
  az: 'az',
  ba: 'ba',
  bb: 'bb',
  bd: 'bd',
  be: 'be',
  bf: 'bf',
  bg: 'bg',
  bh: 'bh',
  bi: 'bi',
  bj: 'bj',
  bm: 'bm',
  bn: 'bn',
  bo: 'bo',
  br: 'br',
  bs: 'bs',
  bt: 'bt',
  bw: 'bw',
  by: 'by',
  bz: 'bz',
  ca: 'ca',
  cd: 'cd',
  cf: 'cf',
  cg: 'cg',
  ch: 'ch',
  ci: 'ci',
  ck: 'ck',
  cl: 'cl',
  cm: 'cm',
  cn: 'cn',
  co: 'co',
  cr: 'cr',
  cu: 'cu',
  cv: 'cv',
  cy: 'cy',
  cz: 'cz',
  de: 'de',
  dk: 'dk',
  dm: 'dm',
  dz: 'dz',
  ec: 'ec',
  ee: 'ee',
  eg: 'eg',
  es: 'es',
  et: 'et',
  fi: 'fi',
  fj: 'fj',
  fk: 'fk',
  fo: 'fo',
  fr: 'fr',
  ga: 'ga',
  gb: 'gb',
  gd: 'gd',
  ge: 'ge',
  gf: 'gf',
  gh: 'gh',
  gi: 'gi',
  gl: 'gl',
  gm: 'gm',
  gn: 'gn',
  gp: 'gp',
  gq: 'gq',
  gr: 'gr',
  gt: 'gt',
  gu: 'gu',
  gw: 'gw',
  gy: 'gy',
  hk: 'hk',
  hn: 'hn',
  hr: 'hr',
  ht: 'ht',
  hu: 'hu',
  id: 'id',
  ie: 'ie',
  il: 'il',
  in: 'in',
  io: 'io',
  iq: 'iq',
  ir: 'ir',
  is: 'is',
  it: 'it',
  jm: 'jm',
  jo: 'jo',
  jp: 'jp',
  ke: 'ke',
  kg: 'kg',
  kh: 'kh',
  km: 'km',
  kn: 'kn',
  kr: 'kr',
  kw: 'kw',
  ky: 'ky',
  kz: 'kz',
  la: 'la',
  lb: 'lb',
  lc: 'lc',
  li: 'li',
  lk: 'lk',
  lr: 'lr',
  ls: 'ls',
  lt: 'lt',
  lu: 'lu',
  lv: 'lv',
  ly: 'ly',
  ma: 'ma',
  md: 'md',
  me: 'me',
  mg: 'mg',
  mk: 'mk',
  ml: 'ml',
  mn: 'mn',
  mo: 'mo',
  mq: 'mq',
  mr: 'mr',
  ms: 'ms',
  mt: 'mt',
  mu: 'mu',
  mv: 'mv',
  mw: 'mw',
  mx: 'mx',
  my: 'my',
  mz: 'mz',
  na: 'na',
  nc: 'nc',
  ne: 'ne',
  ng: 'ng',
  ni: 'ni',
  nl: 'nl',
  no: 'no',
  np: 'np',
  nz: 'nz',
  om: 'om',
  pa: 'pa',
  pe: 'pe',
  pf: 'pf',
  pg: 'pg',
  ph: 'ph',
  pk: 'pk',
  pl: 'pl',
  ps: 'ps',
  pt: 'pt',
  py: 'py',
  qa: 'qa',
  re: 're',
  ro: 'ro',
  rs: 'rs',
  ru: 'ru',
  rw: 'rw',
  sa: 'sa',
  sb: 'sb',
  sc: 'sc',
  sd: 'sd',
  se: 'se',
  sg: 'sg',
  si: 'si',
  sk: 'sk',
  sl: 'sl',
  sm: 'sm',
  sn: 'sn',
  so: 'so',
  sr: 'sr',
  st: 'st',
  sv: 'sv',
  sy: 'sy',
  sz: 'sz',
  tc: 'tc',
  td: 'td',
  tg: 'tg',
  th: 'th',
  tj: 'tj',
  tl: 'tl',
  tm: 'tm',
  tn: 'tn',
  to: 'to',
  tr: 'tr',
  tt: 'tt',
  tw: 'tw',
  tz: 'tz',
  ua: 'ua',
  ug: 'ug',
  us: 'us',
  uy: 'uy',
  uz: 'uz',
  vc: 'vc',
  ve: 've',
  vg: 'vg',
  vi: 'vi',
  vn: 'vn',
  vu: 'vu',
  ws: 'ws',
  ye: 'ye',
  yt: 'yt',
  za: 'za',
  zm: 'zm',
  zw: 'zw',
} as const;

/**
 * Rates of a given destination
 */
export interface SmsDestinationRatesOVH {
  /** The country full name */
  country?: string;
  /** The country 2-letters code */
  countryCode?: SmsCountryEnumOVH;
  /** Credits consumed by sending one SMS towards the given destination */
  credit?: number;
  /** Price of one SMS sent towards the given destination */
  price?: OrderPriceOVH;
}

/**
 * The sms coding
 */
export type SmsCodingEnumOVH = typeof SmsCodingEnumOVH[keyof typeof SmsCodingEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsCodingEnumOVH = {
  '7bit': '7bit',
  '8bit': '8bit',
} as const;

/**
 * Deprecated: The sms class of sms sending job
 */
export type SmsClassEnumOVH = typeof SmsClassEnumOVH[keyof typeof SmsClassEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsClassEnumOVH = {
  flash: 'flash',
  phoneDisplay: 'phoneDisplay',
  sim: 'sim',
  toolkit: 'toolkit',
} as const;

/**
 * The web access for your virtual number chat application
 */
export interface SmsChatAccessOVH {
  /** The creation date of this access */
  readonly creationDate?: string;
  readonly id?: number;
  /** The url of the web access */
  readonly url?: string;
}

/**
 * The charset format
 */
export type SmsCharsetEnumOVH = typeof SmsCharsetEnumOVH[keyof typeof SmsCharsetEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsCharsetEnumOVH = {
  'UTF-8': 'UTF-8',
} as const;

/**
 * In case of smpp the channel can not be "both"
 */
export type SmsChannelEnumOVH = typeof SmsChannelEnumOVH[keyof typeof SmsChannelEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsChannelEnumOVH = {
  both: 'both',
  marketing: 'marketing',
  transactional: 'transactional',
} as const;

/**
 * SMS blacklist
 */
export interface SmsBlacklistOVH {
  /**
   * ID of the batch responsible of the blacklist
   * @nullable
   */
  readonly batchID?: string | null;
  readonly dateCreation?: string;
  /** The sms number blacklisted */
  readonly number?: string;
  /**
   * ID of the outgoing SMS responsible of the blacklist
   * @nullable
   */
  readonly smsOutgoingID?: number | null;
}

/**
 * Countries where we sell SMS credits
 */
export type SmsBillingCountryEnumOVH = typeof SmsBillingCountryEnumOVH[keyof typeof SmsBillingCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsBillingCountryEnumOVH = {
  es: 'es',
  fr: 'fr',
  gb: 'gb',
  ie: 'ie',
  it: 'it',
  pl: 'pl',
} as const;

/**
 * Params to update a batch
 */
export interface SmsBatchUpdateParamsOVH {
  /** Batch name */
  name: string;
}

/**
 * Batch statuses
 */
export type SmsBatchStatusEnumOVH = typeof SmsBatchStatusEnumOVH[keyof typeof SmsBatchStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsBatchStatusEnumOVH = {
  CANCELED: 'CANCELED',
  CANCELING: 'CANCELING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  INSERTED: 'INSERTED',
  INSERTING: 'INSERTING',
  PENDING: 'PENDING',
  TO_CANCEL: 'TO_CANCEL',
} as const;

/**
 * Batch's statistics
 */
export interface SmsBatchStatisticsOVH {
  /** The cost of the batch in credits, computed during batch processing */
  readonly credits?: number;
  /** Number of SMS that are delivered */
  readonly delivered?: number;
  /** The estimated cost of the batch in credits, computed before batch processing */
  readonly estimatedCredits?: number;
  /** Number of SMS in error */
  readonly failed?: number;
  /** Batch ID */
  readonly id?: string;
  /** Number of SMS that are in pending status */
  readonly pending?: number;
  /** Number of SMS that are sent to the broker */
  readonly sent?: number;
  /** Number of SMS that received a STOP by the receiver */
  readonly stoplisted?: number;
}

/**
 * Batch error details
 */
export interface SmsBatchErrorOVH {
  /** Error message */
  readonly message?: string;
  /** Receiver that triggered the error */
  readonly receiver?: string;
}

/**
 * SMS classes
 */
export type SmsBatchClassEnumOVH = typeof SmsBatchClassEnumOVH[keyof typeof SmsBatchClassEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsBatchClassEnumOVH = {
  FLASH: 'FLASH',
  PHONE: 'PHONE',
  SIM: 'SIM',
} as const;

/**
 * Params to create a batch
 */
export interface SmsBatchParamsOVH {
  /** Deprecated: SMS class */
  class?: SmsBatchClassEnumOVH;
  /** SMS deferred sending date */
  deferred?: string;
  /** SMS sender. Either "from" or "senderForResponse" must be passed */
  from?: string;
  /** SMS message */
  message: string;
  /** Batch name */
  name?: string;
  /** STOP clause not needed */
  noStop?: boolean;
  /** Ask to compute a sender that allows response. Either "from" or "senderForResponse" must be passed */
  senderForResponse?: boolean;
  /** SMS receivers slot ID. Either "to" or "slotID" must be passed */
  slotID?: string;
  /** SMS tag */
  tag?: string;
  /** SMS receivers list. Either "to" or "slotID" must be passed */
  to?: PhoneNumberOVH[];
}

/**
 * Batch of SMS to send
 */
export interface SmsBatchOVH {
  /** SMS account ID */
  readonly accountID?: number;
  /** Creation datetime */
  readonly createdAt?: string;
  /** Details on error(s) on the batch, if any */
  readonly errors?: readonly SmsBatchErrorOVH[];
  /** The estimated cost of the batch in credits */
  readonly estimatedCredits?: number;
  /**
   * Datetime when the batch finished processing SMSs
   * @nullable
   */
  readonly finishedAt?: string | null;
  /**
   * SMS sender
   * @nullable
   */
  readonly from?: string | null;
  /** Batch ID */
  readonly id?: string;
  /** SMS message */
  readonly message?: string;
  /** Batch name */
  readonly name?: string;
  /** Number of processed records in this batch */
  readonly processedRecords?: number;
  /**
   * SMS receivers list
   * @nullable
   */
  readonly receivers?: readonly PhoneNumberOVH[] | null;
  /**
   * Datetime when the SMSs of the batch are sent (based on deferred time if exists)
   * @nullable
   */
  readonly sentAt?: string | null;
  /**
   * Slot ID
   * @nullable
   */
  readonly slotID?: string | null;
  /**
   * Datetime when the batch started processing SMSs
   * @nullable
   */
  readonly startedAt?: string | null;
  /** Batch status */
  readonly status?: SmsBatchStatusEnumOVH;
  /** Total number of records in this batch */
  readonly totalRecords?: number;
  /** Last update datetime */
  readonly updatedAt?: string;
}

/**
 * Smpp allowed IPs action
 */
export type SmsAllowedIPsActionEnumOVH = typeof SmsAllowedIPsActionEnumOVH[keyof typeof SmsAllowedIPsActionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmsAllowedIPsActionEnumOVH = {
  add: 'add',
  remove: 'remove',
} as const;

/**
 * Smpp allowed IPs
 */
export interface SmsAllowedIPsOVH {
  /** Action to perform on the provided IPs */
  action: SmsAllowedIPsActionEnumOVH;
  /** List of IPs to add or remove */
  ips: IpOVH[];
}

/**
 * A structure describing all information about alert threshold informations
 */
export interface SmsAlertThresholdOVH {
  alertEmail?: string;
  alertNumber?: string;
  alertThreshold?: number;
  support?: SmsSupportEnumOVH;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type SmsAccountWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * @nullable
 */
export type SmsAccountWithIAMOVHAutomaticRecreditAmount = SmsPackQuantityAutomaticRecreditEnumOVH | null;

/**
 * SMS details
 */
export interface SmsAccountWithIAMOVH {
  /** @nullable */
  automaticRecreditAmount?: SmsAccountWithIAMOVHAutomaticRecreditAmount;
  /**
   * URL called when state of a sent SMS changes
   * @nullable
   */
  callBack?: string | null;
  /** For what purpose this account can be used for */
  readonly channel?: SmsChannelEnumOVH;
  readonly creditsHoldByQuota?: number;
  readonly creditsLeft?: number;
  /** Credit threshold after which an automatic recredit is launched */
  creditThresholdForAutomaticRecredit?: number;
  description?: string;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: SmsAccountWithIAMOVHIam;
  readonly name?: string;
  /** Whether the account can be used for smpp or not */
  readonly smpp?: boolean;
  smsResponse?: SmsResponseOVH;
  readonly status?: SmsStatusAccountEnumOVH;
  /**
   * URL called when a STOP is received after a receiver replied stop to a SMS
   * @nullable
   */
  stopCallBack?: string | null;
  templates?: SmsTemplatesOVH;
  readonly userQuantityWithQuota?: number;
}

/**
 * @nullable
 */
export type SmsAccountOVHAutomaticRecreditAmount = SmsPackQuantityAutomaticRecreditEnumOVH | null;

/**
 * SMS details
 */
export interface SmsAccountOVH {
  /** @nullable */
  automaticRecreditAmount?: SmsAccountOVHAutomaticRecreditAmount;
  /**
   * URL called when state of a sent SMS changes
   * @nullable
   */
  callBack?: string | null;
  /** For what purpose this account can be used for */
  readonly channel?: SmsChannelEnumOVH;
  readonly creditsHoldByQuota?: number;
  readonly creditsLeft?: number;
  /** Credit threshold after which an automatic recredit is launched */
  creditThresholdForAutomaticRecredit?: number;
  description?: string;
  readonly name?: string;
  /** Whether the account can be used for smpp or not */
  readonly smpp?: boolean;
  smsResponse?: SmsResponseOVH;
  readonly status?: SmsStatusAccountEnumOVH;
  /**
   * URL called when a STOP is received after a receiver replied stop to a SMS
   * @nullable
   */
  stopCallBack?: string | null;
  templates?: SmsTemplatesOVH;
  readonly userQuantityWithQuota?: number;
}

export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  automaticV2024: 'automaticV2024',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * All country prices accessible from a reference
 */
export type ReferenceCountryEnumOVH = typeof ReferenceCountryEnumOVH[keyof typeof ReferenceCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReferenceCountryEnumOVH = {
  all: 'all',
  ca: 'ca',
  cz: 'cz',
  de: 'de',
  en: 'en',
  es: 'es',
  fi: 'fi',
  fr: 'fr',
  gb: 'gb',
  ie: 'ie',
  it: 'it',
  lt: 'lt',
  ma: 'ma',
  nl: 'nl',
  pl: 'pl',
  pp: 'pp',
  pt: 'pt',
  qc: 'qc',
  ru: 'ru',
  sk: 'sk',
  sn: 'sn',
  tn: 'tn',
  we: 'we',
} as const;

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

export type OrderCurrencyCodeEnumOVH = typeof OrderCurrencyCodeEnumOVH[keyof typeof OrderCurrencyCodeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderCurrencyCodeEnumOVH = {
  AUD: 'AUD',
  CAD: 'CAD',
  CZK: 'CZK',
  EUR: 'EUR',
  GBP: 'GBP',
  INR: 'INR',
  LTL: 'LTL',
  MAD: 'MAD',
  'N/A': 'N/A',
  PLN: 'PLN',
  SGD: 'SGD',
  TND: 'TND',
  USD: 'USD',
  XOF: 'XOF',
  points: 'points',
} as const;

/**
 * Price with it's currency and textual representation
 */
export interface OrderPriceOVH {
  currencyCode?: OrderCurrencyCodeEnumOVH;
  text?: string;
  value?: number;
}

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;


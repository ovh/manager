/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetSmsParams,
  GetSmsPttsParams,
  GetSmsRatesDestinationsParams,
  GetSmsRatesPacksParams,
  GetSmsServiceNameBlacklistsParams,
  GetSmsServiceNameDocumentParams,
  GetSmsServiceNameExceptionsParams,
  GetSmsServiceNameIncomingParams,
  GetSmsServiceNameOutgoingParams,
  GetSmsServiceNamePhonebooksBookKeyExportParams,
  GetSmsServiceNameSeeOffersParams,
  GetSmsServiceNameSendersAvailableForValidationParams,
  GetSmsServiceNameTaskParams,
  GetSmsServiceNameUsersLoginDocumentParams,
  GetSmsServiceNameUsersLoginIncomingParams,
  GetSmsServiceNameUsersLoginOutgoingParams,
  GetSmsServiceNameVirtualNumbersNumberIncomingParams,
  GetSmsServiceNameVirtualNumbersNumberOutgoingParams,
  GetSmsVirtualNumbersParams,
  IpOVH,
  PostSmsEstimateBody,
  PostSmsServiceNameHlrBody,
  PostSmsServiceNameJobsBody,
  PostSmsServiceNamePhonebooksBody,
  PostSmsServiceNamePhonebooksBookKeyImportBody,
  PostSmsServiceNamePhonebooksBookKeyPhonebookContactBody,
  PostSmsServiceNameReceiversBody,
  PostSmsServiceNameReceiversSlotIdCleanBody,
  PostSmsServiceNameSendersBody,
  PostSmsServiceNameSendersSenderDocumentsBody,
  PostSmsServiceNameSendersSenderValidateBody,
  PostSmsServiceNameTemplatesControlBody,
  PostSmsServiceNameTemplatesControlNameRelaunchValidationBody,
  PostSmsServiceNameTransferCreditsBody,
  PostSmsServiceNameUsersBody,
  PostSmsServiceNameUsersLoginJobsBody,
  PostSmsServiceNameUsersLoginReceiversBody,
  PostSmsServiceNameUsersLoginReceiversSlotIdCleanBody,
  PostSmsServiceNameVirtualNumbersNumberJobsBody,
  ServicesServiceOVH,
  SmsAccountOVH,
  SmsAccountWithIAMOVH,
  SmsAllowedIPsOVH,
  SmsBatchOVH,
  SmsBatchParamsOVH,
  SmsBatchStatisticsOVH,
  SmsBatchUpdateParamsOVH,
  SmsBlacklistOVH,
  SmsChatAccessOVH,
  SmsDestinationRatesOVH,
  SmsExceptionOVH,
  SmsHlrLookupNumberOVH,
  SmsHlrOVH,
  SmsIncomingOVH,
  SmsJobEstimateOVH,
  SmsJobOVH,
  SmsOutgoingOVH,
  SmsPackDetailsOVH,
  SmsPackOfferOVH,
  SmsPhonebookContactOVH,
  SmsPhonebookOVH,
  SmsPttDetailsOVH,
  SmsReceiverOVH,
  SmsReceiversAsynchronousCleanReportOVH,
  SmsSenderAvailableOVH,
  SmsSenderDocumentOVH,
  SmsSenderOVH,
  SmsSettingsOVH,
  SmsSmsSendingReportOVH,
  SmsTaskOVH,
  SmsTemplateControlOVH,
  SmsUserOVH,
  SmsVirtualNumberGenericServiceWithIAMOVH,
  SmsVirtualNumberJobOVH,
  SmsVirtualNumberOVH,
  TelephonyPcsFileOVH,
  TelephonyTaskOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getSms = (
    params?: GetSmsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/sms`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsQueryKey = (params?: GetSmsParams,) => {
    return [`/sms`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsQueryOptions = <TData = Awaited<ReturnType<typeof getSms>>, TError = unknown>(params?: GetSmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSms>>> = ({ signal }) => getSms(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsQueryResult = NonNullable<Awaited<ReturnType<typeof getSms>>>
export type GetSmsQueryError = unknown


export function useGetSms<TData = Awaited<ReturnType<typeof getSms>>, TError = unknown>(
 params: undefined |  GetSmsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSms<TData = Awaited<ReturnType<typeof getSms>>, TError = unknown>(
 params?: GetSmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSms<TData = Awaited<ReturnType<typeof getSms>>, TError = unknown>(
 params?: GetSmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetSms<TData = Awaited<ReturnType<typeof getSms>>, TError = unknown>(
 params?: GetSmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the encoding, length and number of SMS parts of a text message
 */
export const postSmsEstimate = (
    postSmsEstimateBody: PostSmsEstimateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsJobEstimateOVH>(
      {url: `/sms/estimate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsEstimateBody, signal
    },
      options);
    }
  


export const getPostSmsEstimateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsEstimate>>, TError,{data: PostSmsEstimateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsEstimate>>, TError,{data: PostSmsEstimateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsEstimate>>, {data: PostSmsEstimateBody}> = (props) => {
          const {data} = props ?? {};

          return  postSmsEstimate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsEstimateMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsEstimate>>>
    export type PostSmsEstimateMutationBody = PostSmsEstimateBody
    export type PostSmsEstimateMutationError = unknown

    /**
 * @summary Get the encoding, length and number of SMS parts of a text message
 */
export const usePostSmsEstimate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsEstimate>>, TError,{data: PostSmsEstimateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsEstimate>>,
        TError,
        {data: PostSmsEstimateBody},
        TContext
      > => {

      const mutationOptions = getPostSmsEstimateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get informations about the given ptt code
 */
export const getSmsPtts = (
    params: GetSmsPttsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsPttDetailsOVH>(
      {url: `/sms/ptts`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsPttsQueryKey = (params: GetSmsPttsParams,) => {
    return [`/sms/ptts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsPttsQueryOptions = <TData = Awaited<ReturnType<typeof getSmsPtts>>, TError = unknown>(params: GetSmsPttsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsPtts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsPttsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsPtts>>> = ({ signal }) => getSmsPtts(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsPtts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsPttsQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsPtts>>>
export type GetSmsPttsQueryError = unknown


export function useGetSmsPtts<TData = Awaited<ReturnType<typeof getSmsPtts>>, TError = unknown>(
 params: GetSmsPttsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsPtts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsPtts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsPtts<TData = Awaited<ReturnType<typeof getSmsPtts>>, TError = unknown>(
 params: GetSmsPttsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsPtts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsPtts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsPtts<TData = Awaited<ReturnType<typeof getSmsPtts>>, TError = unknown>(
 params: GetSmsPttsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsPtts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about the given ptt code
 */

export function useGetSmsPtts<TData = Awaited<ReturnType<typeof getSmsPtts>>, TError = unknown>(
 params: GetSmsPttsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsPtts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsPttsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the prices and credits to send a SMS towards given country
 */
export const getSmsRatesDestinations = (
    params: GetSmsRatesDestinationsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsDestinationRatesOVH>(
      {url: `/sms/rates/destinations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsRatesDestinationsQueryKey = (params: GetSmsRatesDestinationsParams,) => {
    return [`/sms/rates/destinations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsRatesDestinationsQueryOptions = <TData = Awaited<ReturnType<typeof getSmsRatesDestinations>>, TError = unknown>(params: GetSmsRatesDestinationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsRatesDestinations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsRatesDestinationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsRatesDestinations>>> = ({ signal }) => getSmsRatesDestinations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsRatesDestinations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsRatesDestinationsQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsRatesDestinations>>>
export type GetSmsRatesDestinationsQueryError = unknown


export function useGetSmsRatesDestinations<TData = Awaited<ReturnType<typeof getSmsRatesDestinations>>, TError = unknown>(
 params: GetSmsRatesDestinationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsRatesDestinations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsRatesDestinations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsRatesDestinations<TData = Awaited<ReturnType<typeof getSmsRatesDestinations>>, TError = unknown>(
 params: GetSmsRatesDestinationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsRatesDestinations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsRatesDestinations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsRatesDestinations<TData = Awaited<ReturnType<typeof getSmsRatesDestinations>>, TError = unknown>(
 params: GetSmsRatesDestinationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsRatesDestinations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the prices and credits to send a SMS towards given country
 */

export function useGetSmsRatesDestinations<TData = Awaited<ReturnType<typeof getSmsRatesDestinations>>, TError = unknown>(
 params: GetSmsRatesDestinationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsRatesDestinations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsRatesDestinationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the prices and credits of all the SMS packs with informations about the destination country
 */
export const getSmsRatesPacks = (
    params: GetSmsRatesPacksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsPackDetailsOVH[]>(
      {url: `/sms/rates/packs`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsRatesPacksQueryKey = (params: GetSmsRatesPacksParams,) => {
    return [`/sms/rates/packs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsRatesPacksQueryOptions = <TData = Awaited<ReturnType<typeof getSmsRatesPacks>>, TError = unknown>(params: GetSmsRatesPacksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsRatesPacks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsRatesPacksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsRatesPacks>>> = ({ signal }) => getSmsRatesPacks(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsRatesPacks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsRatesPacksQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsRatesPacks>>>
export type GetSmsRatesPacksQueryError = unknown


export function useGetSmsRatesPacks<TData = Awaited<ReturnType<typeof getSmsRatesPacks>>, TError = unknown>(
 params: GetSmsRatesPacksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsRatesPacks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsRatesPacks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsRatesPacks<TData = Awaited<ReturnType<typeof getSmsRatesPacks>>, TError = unknown>(
 params: GetSmsRatesPacksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsRatesPacks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsRatesPacks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsRatesPacks<TData = Awaited<ReturnType<typeof getSmsRatesPacks>>, TError = unknown>(
 params: GetSmsRatesPacksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsRatesPacks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the prices and credits of all the SMS packs with informations about the destination country
 */

export function useGetSmsRatesPacks<TData = Awaited<ReturnType<typeof getSmsRatesPacks>>, TError = unknown>(
 params: GetSmsRatesPacksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsRatesPacks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsRatesPacksQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Your virtual numbers
 */
export const getSmsVirtualNumbers = (
    params?: GetSmsVirtualNumbersParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/sms/virtualNumbers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsVirtualNumbersQueryKey = (params?: GetSmsVirtualNumbersParams,) => {
    return [`/sms/virtualNumbers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsVirtualNumbersQueryOptions = <TData = Awaited<ReturnType<typeof getSmsVirtualNumbers>>, TError = unknown>(params?: GetSmsVirtualNumbersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsVirtualNumbersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsVirtualNumbers>>> = ({ signal }) => getSmsVirtualNumbers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsVirtualNumbersQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsVirtualNumbers>>>
export type GetSmsVirtualNumbersQueryError = unknown


export function useGetSmsVirtualNumbers<TData = Awaited<ReturnType<typeof getSmsVirtualNumbers>>, TError = unknown>(
 params: undefined |  GetSmsVirtualNumbersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsVirtualNumbers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsVirtualNumbers<TData = Awaited<ReturnType<typeof getSmsVirtualNumbers>>, TError = unknown>(
 params?: GetSmsVirtualNumbersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsVirtualNumbers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsVirtualNumbers<TData = Awaited<ReturnType<typeof getSmsVirtualNumbers>>, TError = unknown>(
 params?: GetSmsVirtualNumbersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Your virtual numbers
 */

export function useGetSmsVirtualNumbers<TData = Awaited<ReturnType<typeof getSmsVirtualNumbers>>, TError = unknown>(
 params?: GetSmsVirtualNumbersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsVirtualNumbersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getSmsVirtualNumbersNumber = (
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsVirtualNumberGenericServiceWithIAMOVH>(
      {url: `/sms/virtualNumbers/${number}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsVirtualNumbersNumberQueryKey = (number: string,) => {
    return [`/sms/virtualNumbers/${number}`] as const;
    }

    
export const getGetSmsVirtualNumbersNumberQueryOptions = <TData = Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>, TError = unknown>(number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsVirtualNumbersNumberQueryKey(number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>> = ({ signal }) => getSmsVirtualNumbersNumber(number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsVirtualNumbersNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>>
export type GetSmsVirtualNumbersNumberQueryError = unknown


export function useGetSmsVirtualNumbersNumber<TData = Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>, TError = unknown>(
 number: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsVirtualNumbersNumber<TData = Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>, TError = unknown>(
 number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsVirtualNumbersNumber<TData = Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>, TError = unknown>(
 number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsVirtualNumbersNumber<TData = Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>, TError = unknown>(
 number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbersNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsVirtualNumbersNumberQueryOptions(number,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getSmsVirtualNumbersNumberServiceInfos = (
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/sms/virtualNumbers/${number}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsVirtualNumbersNumberServiceInfosQueryKey = (number: string,) => {
    return [`/sms/virtualNumbers/${number}/serviceInfos`] as const;
    }

    
export const getGetSmsVirtualNumbersNumberServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>, TError = unknown>(number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsVirtualNumbersNumberServiceInfosQueryKey(number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>> = ({ signal }) => getSmsVirtualNumbersNumberServiceInfos(number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsVirtualNumbersNumberServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>>
export type GetSmsVirtualNumbersNumberServiceInfosQueryError = unknown


export function useGetSmsVirtualNumbersNumberServiceInfos<TData = Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>, TError = unknown>(
 number: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsVirtualNumbersNumberServiceInfos<TData = Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>, TError = unknown>(
 number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsVirtualNumbersNumberServiceInfos<TData = Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>, TError = unknown>(
 number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetSmsVirtualNumbersNumberServiceInfos<TData = Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>, TError = unknown>(
 number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsVirtualNumbersNumberServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsVirtualNumbersNumberServiceInfosQueryOptions(number,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putSmsVirtualNumbersNumberServiceInfos = (
    number: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/virtualNumbers/${number}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutSmsVirtualNumbersNumberServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsVirtualNumbersNumberServiceInfos>>, TError,{number: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsVirtualNumbersNumberServiceInfos>>, TError,{number: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsVirtualNumbersNumberServiceInfos>>, {number: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {number,data} = props ?? {};

          return  putSmsVirtualNumbersNumberServiceInfos(number,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsVirtualNumbersNumberServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsVirtualNumbersNumberServiceInfos>>>
    export type PutSmsVirtualNumbersNumberServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutSmsVirtualNumbersNumberServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutSmsVirtualNumbersNumberServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsVirtualNumbersNumberServiceInfos>>, TError,{number: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsVirtualNumbersNumberServiceInfos>>,
        TError,
        {number: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutSmsVirtualNumbersNumberServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsAccountWithIAMOVH>(
      {url: `/sms/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}`] as const;
    }

    
export const getGetSmsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceName>>> = ({ signal }) => getSmsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceName>>>
export type GetSmsServiceNameQueryError = unknown


export function useGetSmsServiceName<TData = Awaited<ReturnType<typeof getSmsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceName<TData = Awaited<ReturnType<typeof getSmsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceName<TData = Awaited<ReturnType<typeof getSmsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceName<TData = Awaited<ReturnType<typeof getSmsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putSmsServiceName = (
    serviceName: string,
    smsAccountOVH: NonReadonly<SmsAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: smsAccountOVH
    },
      options);
    }
  


export const getPutSmsServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceName>>, TError,{serviceName: string;data: NonReadonly<SmsAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceName>>, TError,{serviceName: string;data: NonReadonly<SmsAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsServiceName>>, {serviceName: string;data: NonReadonly<SmsAccountOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putSmsServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsServiceName>>>
    export type PutSmsServiceNameMutationBody = NonReadonly<SmsAccountOVH>
    export type PutSmsServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutSmsServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceName>>, TError,{serviceName: string;data: NonReadonly<SmsAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<SmsAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutSmsServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get batches list
 */
export const getSmsServiceNameBatches = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsBatchOVH[]>(
      {url: `/sms/${serviceName}/batches`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameBatchesQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}/batches`] as const;
    }

    
export const getGetSmsServiceNameBatchesQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameBatches>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatches>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameBatchesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameBatches>>> = ({ signal }) => getSmsServiceNameBatches(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatches>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameBatchesQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameBatches>>>
export type GetSmsServiceNameBatchesQueryError = unknown


export function useGetSmsServiceNameBatches<TData = Awaited<ReturnType<typeof getSmsServiceNameBatches>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatches>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameBatches>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameBatches<TData = Awaited<ReturnType<typeof getSmsServiceNameBatches>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatches>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameBatches>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameBatches<TData = Awaited<ReturnType<typeof getSmsServiceNameBatches>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatches>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get batches list
 */

export function useGetSmsServiceNameBatches<TData = Awaited<ReturnType<typeof getSmsServiceNameBatches>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatches>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameBatchesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a batch
 */
export const postSmsServiceNameBatches = (
    serviceName: string,
    smsBatchParamsOVH: SmsBatchParamsOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsBatchOVH>(
      {url: `/sms/${serviceName}/batches`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: smsBatchParamsOVH, signal
    },
      options);
    }
  


export const getPostSmsServiceNameBatchesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameBatches>>, TError,{serviceName: string;data: SmsBatchParamsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameBatches>>, TError,{serviceName: string;data: SmsBatchParamsOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameBatches>>, {serviceName: string;data: SmsBatchParamsOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSmsServiceNameBatches(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameBatchesMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameBatches>>>
    export type PostSmsServiceNameBatchesMutationBody = SmsBatchParamsOVH
    export type PostSmsServiceNameBatchesMutationError = unknown

    /**
 * @summary Create a batch
 */
export const usePostSmsServiceNameBatches = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameBatches>>, TError,{serviceName: string;data: SmsBatchParamsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameBatches>>,
        TError,
        {serviceName: string;data: SmsBatchParamsOVH},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameBatchesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove a batch
 */
export const deleteSmsServiceNameBatchesId = (
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/batches/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameBatchesIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameBatchesId>>, TError,{serviceName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameBatchesId>>, TError,{serviceName: string;id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameBatchesId>>, {serviceName: string;id: string}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteSmsServiceNameBatchesId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameBatchesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameBatchesId>>>
    
    export type DeleteSmsServiceNameBatchesIdMutationError = unknown

    /**
 * @summary Remove a batch
 */
export const useDeleteSmsServiceNameBatchesId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameBatchesId>>, TError,{serviceName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameBatchesId>>,
        TError,
        {serviceName: string;id: string},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameBatchesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a batch
 */
export const getSmsServiceNameBatchesId = (
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsBatchOVH>(
      {url: `/sms/${serviceName}/batches/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameBatchesIdQueryKey = (serviceName: string,
    id: string,) => {
    return [`/sms/${serviceName}/batches/${id}`] as const;
    }

    
export const getGetSmsServiceNameBatchesIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>, TError = unknown>(serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameBatchesIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>> = ({ signal }) => getSmsServiceNameBatchesId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameBatchesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>>
export type GetSmsServiceNameBatchesIdQueryError = unknown


export function useGetSmsServiceNameBatchesId<TData = Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>, TError = unknown>(
 serviceName: string,
    id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameBatchesId<TData = Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>, TError = unknown>(
 serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameBatchesId<TData = Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>, TError = unknown>(
 serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a batch
 */

export function useGetSmsServiceNameBatchesId<TData = Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>, TError = unknown>(
 serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatchesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameBatchesIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a batch
 */
export const putSmsServiceNameBatchesId = (
    serviceName: string,
    id: string,
    smsBatchUpdateParamsOVH: SmsBatchUpdateParamsOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<SmsBatchOVH>(
      {url: `/sms/${serviceName}/batches/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: smsBatchUpdateParamsOVH
    },
      options);
    }
  


export const getPutSmsServiceNameBatchesIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameBatchesId>>, TError,{serviceName: string;id: string;data: SmsBatchUpdateParamsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameBatchesId>>, TError,{serviceName: string;id: string;data: SmsBatchUpdateParamsOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsServiceNameBatchesId>>, {serviceName: string;id: string;data: SmsBatchUpdateParamsOVH}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  putSmsServiceNameBatchesId(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsServiceNameBatchesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsServiceNameBatchesId>>>
    export type PutSmsServiceNameBatchesIdMutationBody = SmsBatchUpdateParamsOVH
    export type PutSmsServiceNameBatchesIdMutationError = unknown

    /**
 * @summary Update a batch
 */
export const usePutSmsServiceNameBatchesId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameBatchesId>>, TError,{serviceName: string;id: string;data: SmsBatchUpdateParamsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsServiceNameBatchesId>>,
        TError,
        {serviceName: string;id: string;data: SmsBatchUpdateParamsOVH},
        TContext
      > => {

      const mutationOptions = getPutSmsServiceNameBatchesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Cancel a deferred batch (no SMS must have been sent)
 */
export const postSmsServiceNameBatchesIdCancel = (
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsBatchOVH>(
      {url: `/sms/${serviceName}/batches/${id}/cancel`, method: 'POST', signal
    },
      options);
    }
  


export const getPostSmsServiceNameBatchesIdCancelMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameBatchesIdCancel>>, TError,{serviceName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameBatchesIdCancel>>, TError,{serviceName: string;id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameBatchesIdCancel>>, {serviceName: string;id: string}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  postSmsServiceNameBatchesIdCancel(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameBatchesIdCancelMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameBatchesIdCancel>>>
    
    export type PostSmsServiceNameBatchesIdCancelMutationError = unknown

    /**
 * @summary Cancel a deferred batch (no SMS must have been sent)
 */
export const usePostSmsServiceNameBatchesIdCancel = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameBatchesIdCancel>>, TError,{serviceName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameBatchesIdCancel>>,
        TError,
        {serviceName: string;id: string},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameBatchesIdCancelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Batch's statistics
 */
export const getSmsServiceNameBatchesIdStatistics = (
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsBatchStatisticsOVH>(
      {url: `/sms/${serviceName}/batches/${id}/statistics`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameBatchesIdStatisticsQueryKey = (serviceName: string,
    id: string,) => {
    return [`/sms/${serviceName}/batches/${id}/statistics`] as const;
    }

    
export const getGetSmsServiceNameBatchesIdStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>, TError = unknown>(serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameBatchesIdStatisticsQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>> = ({ signal }) => getSmsServiceNameBatchesIdStatistics(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameBatchesIdStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>>
export type GetSmsServiceNameBatchesIdStatisticsQueryError = unknown


export function useGetSmsServiceNameBatchesIdStatistics<TData = Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>, TError = unknown>(
 serviceName: string,
    id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameBatchesIdStatistics<TData = Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>, TError = unknown>(
 serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameBatchesIdStatistics<TData = Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>, TError = unknown>(
 serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Batch's statistics
 */

export function useGetSmsServiceNameBatchesIdStatistics<TData = Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>, TError = unknown>(
 serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBatchesIdStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameBatchesIdStatisticsQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Numbers blacklisted associated to the sms account
 */
export const getSmsServiceNameBlacklists = (
    serviceName: string,
    params?: GetSmsServiceNameBlacklistsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/sms/${serviceName}/blacklists`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameBlacklistsQueryKey = (serviceName: string,
    params?: GetSmsServiceNameBlacklistsParams,) => {
    return [`/sms/${serviceName}/blacklists`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameBlacklistsQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>, TError = unknown>(serviceName: string,
    params?: GetSmsServiceNameBlacklistsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameBlacklistsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>> = ({ signal }) => getSmsServiceNameBlacklists(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameBlacklistsQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>>
export type GetSmsServiceNameBlacklistsQueryError = unknown


export function useGetSmsServiceNameBlacklists<TData = Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetSmsServiceNameBlacklistsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameBlacklists<TData = Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameBlacklistsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameBlacklists<TData = Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameBlacklistsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Numbers blacklisted associated to the sms account
 */

export function useGetSmsServiceNameBlacklists<TData = Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameBlacklistsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBlacklists>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameBlacklistsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the blacklisted sms number given
 */
export const deleteSmsServiceNameBlacklistsNumber = (
    serviceName: string,
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/blacklists/${number}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameBlacklistsNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameBlacklistsNumber>>, TError,{serviceName: string;number: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameBlacklistsNumber>>, TError,{serviceName: string;number: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameBlacklistsNumber>>, {serviceName: string;number: string}> = (props) => {
          const {serviceName,number} = props ?? {};

          return  deleteSmsServiceNameBlacklistsNumber(serviceName,number,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameBlacklistsNumberMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameBlacklistsNumber>>>
    
    export type DeleteSmsServiceNameBlacklistsNumberMutationError = unknown

    /**
 * @summary Delete the blacklisted sms number given
 */
export const useDeleteSmsServiceNameBlacklistsNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameBlacklistsNumber>>, TError,{serviceName: string;number: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameBlacklistsNumber>>,
        TError,
        {serviceName: string;number: string},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameBlacklistsNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameBlacklistsNumber = (
    serviceName: string,
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsBlacklistOVH>(
      {url: `/sms/${serviceName}/blacklists/${number}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameBlacklistsNumberQueryKey = (serviceName: string,
    number: string,) => {
    return [`/sms/${serviceName}/blacklists/${number}`] as const;
    }

    
export const getGetSmsServiceNameBlacklistsNumberQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>, TError = unknown>(serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameBlacklistsNumberQueryKey(serviceName,number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>> = ({ signal }) => getSmsServiceNameBlacklistsNumber(serviceName,number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameBlacklistsNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>>
export type GetSmsServiceNameBlacklistsNumberQueryError = unknown


export function useGetSmsServiceNameBlacklistsNumber<TData = Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>, TError = unknown>(
 serviceName: string,
    number: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameBlacklistsNumber<TData = Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameBlacklistsNumber<TData = Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameBlacklistsNumber<TData = Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameBlacklistsNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameBlacklistsNumberQueryOptions(serviceName,number,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the /me/document id generated
 */
export const getSmsServiceNameDocument = (
    serviceName: string,
    params: GetSmsServiceNameDocumentParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/sms/${serviceName}/document`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameDocumentQueryKey = (serviceName: string,
    params: GetSmsServiceNameDocumentParams,) => {
    return [`/sms/${serviceName}/document`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameDocumentQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameDocument>>, TError = unknown>(serviceName: string,
    params: GetSmsServiceNameDocumentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameDocumentQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameDocument>>> = ({ signal }) => getSmsServiceNameDocument(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameDocument>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameDocumentQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameDocument>>>
export type GetSmsServiceNameDocumentQueryError = unknown


export function useGetSmsServiceNameDocument<TData = Awaited<ReturnType<typeof getSmsServiceNameDocument>>, TError = unknown>(
 serviceName: string,
    params: GetSmsServiceNameDocumentParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameDocument>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameDocument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameDocument<TData = Awaited<ReturnType<typeof getSmsServiceNameDocument>>, TError = unknown>(
 serviceName: string,
    params: GetSmsServiceNameDocumentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameDocument>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameDocument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameDocument<TData = Awaited<ReturnType<typeof getSmsServiceNameDocument>>, TError = unknown>(
 serviceName: string,
    params: GetSmsServiceNameDocumentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the /me/document id generated
 */

export function useGetSmsServiceNameDocument<TData = Awaited<ReturnType<typeof getSmsServiceNameDocument>>, TError = unknown>(
 serviceName: string,
    params: GetSmsServiceNameDocumentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameDocumentQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Describe filter exceptions in sms sending from a specific receiver.
 */
export const getSmsServiceNameExceptions = (
    serviceName: string,
    params: GetSmsServiceNameExceptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsExceptionOVH[]>(
      {url: `/sms/${serviceName}/exceptions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameExceptionsQueryKey = (serviceName: string,
    params: GetSmsServiceNameExceptionsParams,) => {
    return [`/sms/${serviceName}/exceptions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameExceptionsQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameExceptions>>, TError = unknown>(serviceName: string,
    params: GetSmsServiceNameExceptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameExceptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameExceptionsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameExceptions>>> = ({ signal }) => getSmsServiceNameExceptions(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameExceptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameExceptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameExceptions>>>
export type GetSmsServiceNameExceptionsQueryError = unknown


export function useGetSmsServiceNameExceptions<TData = Awaited<ReturnType<typeof getSmsServiceNameExceptions>>, TError = unknown>(
 serviceName: string,
    params: GetSmsServiceNameExceptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameExceptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameExceptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameExceptions<TData = Awaited<ReturnType<typeof getSmsServiceNameExceptions>>, TError = unknown>(
 serviceName: string,
    params: GetSmsServiceNameExceptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameExceptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameExceptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameExceptions<TData = Awaited<ReturnType<typeof getSmsServiceNameExceptions>>, TError = unknown>(
 serviceName: string,
    params: GetSmsServiceNameExceptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameExceptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Describe filter exceptions in sms sending from a specific receiver.
 */

export function useGetSmsServiceNameExceptions<TData = Awaited<ReturnType<typeof getSmsServiceNameExceptions>>, TError = unknown>(
 serviceName: string,
    params: GetSmsServiceNameExceptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameExceptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameExceptionsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Home Location Register informations. Give informations about a given cellular phone.
 */
export const getSmsServiceNameHlr = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/hlr`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameHlrQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}/hlr`] as const;
    }

    
export const getGetSmsServiceNameHlrQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameHlr>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameHlrQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameHlr>>> = ({ signal }) => getSmsServiceNameHlr(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlr>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameHlrQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameHlr>>>
export type GetSmsServiceNameHlrQueryError = unknown


export function useGetSmsServiceNameHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameHlr>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlr>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameHlr>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameHlr>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlr>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameHlr>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameHlr>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Home Location Register informations. Give informations about a given cellular phone.
 */

export function useGetSmsServiceNameHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameHlr>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameHlrQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add one or several sending hlr lookup request
 */
export const postSmsServiceNameHlr = (
    serviceName: string,
    postSmsServiceNameHlrBody: PostSmsServiceNameHlrBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsSmsSendingReportOVH>(
      {url: `/sms/${serviceName}/hlr`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameHlrBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameHlrMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameHlr>>, TError,{serviceName: string;data: PostSmsServiceNameHlrBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameHlr>>, TError,{serviceName: string;data: PostSmsServiceNameHlrBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameHlr>>, {serviceName: string;data: PostSmsServiceNameHlrBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSmsServiceNameHlr(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameHlrMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameHlr>>>
    export type PostSmsServiceNameHlrMutationBody = PostSmsServiceNameHlrBody
    export type PostSmsServiceNameHlrMutationError = unknown

    /**
 * @summary Add one or several sending hlr lookup request
 */
export const usePostSmsServiceNameHlr = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameHlr>>, TError,{serviceName: string;data: PostSmsServiceNameHlrBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameHlr>>,
        TError,
        {serviceName: string;data: PostSmsServiceNameHlrBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameHlrMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameHlrId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsHlrLookupNumberOVH>(
      {url: `/sms/${serviceName}/hlr/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameHlrIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/sms/${serviceName}/hlr/${id}`] as const;
    }

    
export const getGetSmsServiceNameHlrIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameHlrId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlrId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameHlrIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameHlrId>>> = ({ signal }) => getSmsServiceNameHlrId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlrId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameHlrIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameHlrId>>>
export type GetSmsServiceNameHlrIdQueryError = unknown


export function useGetSmsServiceNameHlrId<TData = Awaited<ReturnType<typeof getSmsServiceNameHlrId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlrId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameHlrId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameHlrId<TData = Awaited<ReturnType<typeof getSmsServiceNameHlrId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlrId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameHlrId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameHlrId<TData = Awaited<ReturnType<typeof getSmsServiceNameHlrId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlrId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameHlrId<TData = Awaited<ReturnType<typeof getSmsServiceNameHlrId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlrId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameHlrIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getSmsServiceNameHlrIdOperator = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsHlrOVH>(
      {url: `/sms/${serviceName}/hlr/${id}/operator`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameHlrIdOperatorQueryKey = (serviceName: string,
    id: number,) => {
    return [`/sms/${serviceName}/hlr/${id}/operator`] as const;
    }

    
export const getGetSmsServiceNameHlrIdOperatorQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameHlrIdOperatorQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>> = ({ signal }) => getSmsServiceNameHlrIdOperator(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameHlrIdOperatorQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>>
export type GetSmsServiceNameHlrIdOperatorQueryError = unknown


export function useGetSmsServiceNameHlrIdOperator<TData = Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameHlrIdOperator<TData = Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameHlrIdOperator<TData = Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameHlrIdOperator<TData = Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameHlrIdOperator>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameHlrIdOperatorQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Sms received associated to the sms account
 */
export const getSmsServiceNameIncoming = (
    serviceName: string,
    params?: GetSmsServiceNameIncomingParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/incoming`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameIncomingQueryKey = (serviceName: string,
    params?: GetSmsServiceNameIncomingParams,) => {
    return [`/sms/${serviceName}/incoming`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameIncomingQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameIncoming>>, TError = unknown>(serviceName: string,
    params?: GetSmsServiceNameIncomingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameIncoming>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameIncomingQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameIncoming>>> = ({ signal }) => getSmsServiceNameIncoming(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameIncoming>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameIncomingQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameIncoming>>>
export type GetSmsServiceNameIncomingQueryError = unknown


export function useGetSmsServiceNameIncoming<TData = Awaited<ReturnType<typeof getSmsServiceNameIncoming>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetSmsServiceNameIncomingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameIncoming>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameIncoming>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameIncoming<TData = Awaited<ReturnType<typeof getSmsServiceNameIncoming>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameIncomingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameIncoming>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameIncoming>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameIncoming<TData = Awaited<ReturnType<typeof getSmsServiceNameIncoming>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameIncomingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameIncoming>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Sms received associated to the sms account
 */

export function useGetSmsServiceNameIncoming<TData = Awaited<ReturnType<typeof getSmsServiceNameIncoming>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameIncomingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameIncoming>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameIncomingQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the sms incoming history given
 */
export const deleteSmsServiceNameIncomingId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/incoming/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameIncomingIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameIncomingId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameIncomingId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameIncomingId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteSmsServiceNameIncomingId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameIncomingIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameIncomingId>>>
    
    export type DeleteSmsServiceNameIncomingIdMutationError = unknown

    /**
 * @summary Delete the sms incoming history given
 */
export const useDeleteSmsServiceNameIncomingId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameIncomingId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameIncomingId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameIncomingIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameIncomingId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsIncomingOVH>(
      {url: `/sms/${serviceName}/incoming/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameIncomingIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/sms/${serviceName}/incoming/${id}`] as const;
    }

    
export const getGetSmsServiceNameIncomingIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameIncomingIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>> = ({ signal }) => getSmsServiceNameIncomingId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameIncomingIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>>
export type GetSmsServiceNameIncomingIdQueryError = unknown


export function useGetSmsServiceNameIncomingId<TData = Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameIncomingId<TData = Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameIncomingId<TData = Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameIncomingId<TData = Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameIncomingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameIncomingIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Sms in pending associated to the sms account
 */
export const getSmsServiceNameJobs = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/jobs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameJobsQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}/jobs`] as const;
    }

    
export const getGetSmsServiceNameJobsQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameJobs>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameJobs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameJobsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameJobs>>> = ({ signal }) => getSmsServiceNameJobs(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameJobs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameJobsQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameJobs>>>
export type GetSmsServiceNameJobsQueryError = unknown


export function useGetSmsServiceNameJobs<TData = Awaited<ReturnType<typeof getSmsServiceNameJobs>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameJobs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameJobs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameJobs<TData = Awaited<ReturnType<typeof getSmsServiceNameJobs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameJobs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameJobs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameJobs<TData = Awaited<ReturnType<typeof getSmsServiceNameJobs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameJobs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Sms in pending associated to the sms account
 */

export function useGetSmsServiceNameJobs<TData = Awaited<ReturnType<typeof getSmsServiceNameJobs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameJobs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameJobsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add one or several sending jobs
 */
export const postSmsServiceNameJobs = (
    serviceName: string,
    postSmsServiceNameJobsBody: PostSmsServiceNameJobsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsSmsSendingReportOVH>(
      {url: `/sms/${serviceName}/jobs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameJobsBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameJobsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameJobs>>, TError,{serviceName: string;data: PostSmsServiceNameJobsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameJobs>>, TError,{serviceName: string;data: PostSmsServiceNameJobsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameJobs>>, {serviceName: string;data: PostSmsServiceNameJobsBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSmsServiceNameJobs(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameJobsMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameJobs>>>
    export type PostSmsServiceNameJobsMutationBody = PostSmsServiceNameJobsBody
    export type PostSmsServiceNameJobsMutationError = unknown

    /**
 * @summary Add one or several sending jobs
 */
export const usePostSmsServiceNameJobs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameJobs>>, TError,{serviceName: string;data: PostSmsServiceNameJobsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameJobs>>,
        TError,
        {serviceName: string;data: PostSmsServiceNameJobsBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameJobsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the sms job given (stop sending)
 */
export const deleteSmsServiceNameJobsId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/jobs/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameJobsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameJobsId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameJobsId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameJobsId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteSmsServiceNameJobsId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameJobsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameJobsId>>>
    
    export type DeleteSmsServiceNameJobsIdMutationError = unknown

    /**
 * @summary Delete the sms job given (stop sending)
 */
export const useDeleteSmsServiceNameJobsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameJobsId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameJobsId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameJobsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameJobsId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsJobOVH>(
      {url: `/sms/${serviceName}/jobs/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameJobsIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/sms/${serviceName}/jobs/${id}`] as const;
    }

    
export const getGetSmsServiceNameJobsIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameJobsId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameJobsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameJobsIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameJobsId>>> = ({ signal }) => getSmsServiceNameJobsId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameJobsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameJobsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameJobsId>>>
export type GetSmsServiceNameJobsIdQueryError = unknown


export function useGetSmsServiceNameJobsId<TData = Awaited<ReturnType<typeof getSmsServiceNameJobsId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameJobsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameJobsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameJobsId<TData = Awaited<ReturnType<typeof getSmsServiceNameJobsId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameJobsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameJobsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameJobsId<TData = Awaited<ReturnType<typeof getSmsServiceNameJobsId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameJobsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameJobsId<TData = Awaited<ReturnType<typeof getSmsServiceNameJobsId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameJobsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameJobsIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get SMS list
 */
export const getSmsServiceNameOutgoing = (
    serviceName: string,
    params?: GetSmsServiceNameOutgoingParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/outgoing`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameOutgoingQueryKey = (serviceName: string,
    params?: GetSmsServiceNameOutgoingParams,) => {
    return [`/sms/${serviceName}/outgoing`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameOutgoingQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>, TError = unknown>(serviceName: string,
    params?: GetSmsServiceNameOutgoingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameOutgoingQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>> = ({ signal }) => getSmsServiceNameOutgoing(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameOutgoingQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>>
export type GetSmsServiceNameOutgoingQueryError = unknown


export function useGetSmsServiceNameOutgoing<TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetSmsServiceNameOutgoingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameOutgoing<TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameOutgoingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameOutgoing<TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameOutgoingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get SMS list
 */

export function useGetSmsServiceNameOutgoing<TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameOutgoingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameOutgoingQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete outgoing SMS from history
 */
export const deleteSmsServiceNameOutgoingId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/outgoing/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameOutgoingIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameOutgoingId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameOutgoingId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameOutgoingId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteSmsServiceNameOutgoingId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameOutgoingIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameOutgoingId>>>
    
    export type DeleteSmsServiceNameOutgoingIdMutationError = unknown

    /**
 * @summary Delete outgoing SMS from history
 */
export const useDeleteSmsServiceNameOutgoingId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameOutgoingId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameOutgoingId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameOutgoingIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get SMS details
 */
export const getSmsServiceNameOutgoingId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsOutgoingOVH>(
      {url: `/sms/${serviceName}/outgoing/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameOutgoingIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/sms/${serviceName}/outgoing/${id}`] as const;
    }

    
export const getGetSmsServiceNameOutgoingIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameOutgoingIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>> = ({ signal }) => getSmsServiceNameOutgoingId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameOutgoingIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>>
export type GetSmsServiceNameOutgoingIdQueryError = unknown


export function useGetSmsServiceNameOutgoingId<TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameOutgoingId<TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameOutgoingId<TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get SMS details
 */

export function useGetSmsServiceNameOutgoingId<TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameOutgoingIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getSmsServiceNameOutgoingIdHlr = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsHlrOVH>(
      {url: `/sms/${serviceName}/outgoing/${id}/hlr`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameOutgoingIdHlrQueryKey = (serviceName: string,
    id: number,) => {
    return [`/sms/${serviceName}/outgoing/${id}/hlr`] as const;
    }

    
export const getGetSmsServiceNameOutgoingIdHlrQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameOutgoingIdHlrQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>> = ({ signal }) => getSmsServiceNameOutgoingIdHlr(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameOutgoingIdHlrQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>>
export type GetSmsServiceNameOutgoingIdHlrQueryError = unknown


export function useGetSmsServiceNameOutgoingIdHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameOutgoingIdHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameOutgoingIdHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameOutgoingIdHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameOutgoingIdHlr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameOutgoingIdHlrQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return phonebooks associated to this account
 */
export const getSmsServiceNamePhonebooks = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/sms/${serviceName}/phonebooks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNamePhonebooksQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}/phonebooks`] as const;
    }

    
export const getGetSmsServiceNamePhonebooksQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNamePhonebooksQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>> = ({ signal }) => getSmsServiceNamePhonebooks(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNamePhonebooksQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>>
export type GetSmsServiceNamePhonebooksQueryError = unknown


export function useGetSmsServiceNamePhonebooks<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNamePhonebooks<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNamePhonebooks<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return phonebooks associated to this account
 */

export function useGetSmsServiceNamePhonebooks<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNamePhonebooksQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a phonebook. Return the bookKey.
 */
export const postSmsServiceNamePhonebooks = (
    serviceName: string,
    postSmsServiceNamePhonebooksBody: PostSmsServiceNamePhonebooksBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/sms/${serviceName}/phonebooks`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNamePhonebooksBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNamePhonebooksMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNamePhonebooks>>, TError,{serviceName: string;data: PostSmsServiceNamePhonebooksBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNamePhonebooks>>, TError,{serviceName: string;data: PostSmsServiceNamePhonebooksBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNamePhonebooks>>, {serviceName: string;data: PostSmsServiceNamePhonebooksBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSmsServiceNamePhonebooks(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNamePhonebooksMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNamePhonebooks>>>
    export type PostSmsServiceNamePhonebooksMutationBody = PostSmsServiceNamePhonebooksBody
    export type PostSmsServiceNamePhonebooksMutationError = unknown

    /**
 * @summary Add a phonebook. Return the bookKey.
 */
export const usePostSmsServiceNamePhonebooks = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNamePhonebooks>>, TError,{serviceName: string;data: PostSmsServiceNamePhonebooksBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNamePhonebooks>>,
        TError,
        {serviceName: string;data: PostSmsServiceNamePhonebooksBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNamePhonebooksMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a phonebook
 */
export const deleteSmsServiceNamePhonebooksBookKey = (
    serviceName: string,
    bookKey: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/phonebooks/${bookKey}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNamePhonebooksBookKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNamePhonebooksBookKey>>, TError,{serviceName: string;bookKey: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNamePhonebooksBookKey>>, TError,{serviceName: string;bookKey: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNamePhonebooksBookKey>>, {serviceName: string;bookKey: string}> = (props) => {
          const {serviceName,bookKey} = props ?? {};

          return  deleteSmsServiceNamePhonebooksBookKey(serviceName,bookKey,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNamePhonebooksBookKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNamePhonebooksBookKey>>>
    
    export type DeleteSmsServiceNamePhonebooksBookKeyMutationError = unknown

    /**
 * @summary Delete a phonebook
 */
export const useDeleteSmsServiceNamePhonebooksBookKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNamePhonebooksBookKey>>, TError,{serviceName: string;bookKey: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNamePhonebooksBookKey>>,
        TError,
        {serviceName: string;bookKey: string},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNamePhonebooksBookKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNamePhonebooksBookKey = (
    serviceName: string,
    bookKey: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsPhonebookOVH>(
      {url: `/sms/${serviceName}/phonebooks/${bookKey}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNamePhonebooksBookKeyQueryKey = (serviceName: string,
    bookKey: string,) => {
    return [`/sms/${serviceName}/phonebooks/${bookKey}`] as const;
    }

    
export const getGetSmsServiceNamePhonebooksBookKeyQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>, TError = unknown>(serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNamePhonebooksBookKeyQueryKey(serviceName,bookKey);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>> = ({ signal }) => getSmsServiceNamePhonebooksBookKey(serviceName,bookKey, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && bookKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNamePhonebooksBookKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>>
export type GetSmsServiceNamePhonebooksBookKeyQueryError = unknown


export function useGetSmsServiceNamePhonebooksBookKey<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>, TError = unknown>(
 serviceName: string,
    bookKey: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNamePhonebooksBookKey<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>, TError = unknown>(
 serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNamePhonebooksBookKey<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>, TError = unknown>(
 serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNamePhonebooksBookKey<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>, TError = unknown>(
 serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNamePhonebooksBookKeyQueryOptions(serviceName,bookKey,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putSmsServiceNamePhonebooksBookKey = (
    serviceName: string,
    bookKey: string,
    smsPhonebookOVH: NonReadonly<SmsPhonebookOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/phonebooks/${bookKey}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: smsPhonebookOVH
    },
      options);
    }
  


export const getPutSmsServiceNamePhonebooksBookKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNamePhonebooksBookKey>>, TError,{serviceName: string;bookKey: string;data: NonReadonly<SmsPhonebookOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNamePhonebooksBookKey>>, TError,{serviceName: string;bookKey: string;data: NonReadonly<SmsPhonebookOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsServiceNamePhonebooksBookKey>>, {serviceName: string;bookKey: string;data: NonReadonly<SmsPhonebookOVH>}> = (props) => {
          const {serviceName,bookKey,data} = props ?? {};

          return  putSmsServiceNamePhonebooksBookKey(serviceName,bookKey,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsServiceNamePhonebooksBookKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsServiceNamePhonebooksBookKey>>>
    export type PutSmsServiceNamePhonebooksBookKeyMutationBody = NonReadonly<SmsPhonebookOVH>
    export type PutSmsServiceNamePhonebooksBookKeyMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutSmsServiceNamePhonebooksBookKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNamePhonebooksBookKey>>, TError,{serviceName: string;bookKey: string;data: NonReadonly<SmsPhonebookOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsServiceNamePhonebooksBookKey>>,
        TError,
        {serviceName: string;bookKey: string;data: NonReadonly<SmsPhonebookOVH>},
        TContext
      > => {

      const mutationOptions = getPutSmsServiceNamePhonebooksBookKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Export the phonebook's contacts
 */
export const getSmsServiceNamePhonebooksBookKeyExport = (
    serviceName: string,
    bookKey: string,
    params: GetSmsServiceNamePhonebooksBookKeyExportParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyPcsFileOVH>(
      {url: `/sms/${serviceName}/phonebooks/${bookKey}/export`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNamePhonebooksBookKeyExportQueryKey = (serviceName: string,
    bookKey: string,
    params: GetSmsServiceNamePhonebooksBookKeyExportParams,) => {
    return [`/sms/${serviceName}/phonebooks/${bookKey}/export`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNamePhonebooksBookKeyExportQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>, TError = unknown>(serviceName: string,
    bookKey: string,
    params: GetSmsServiceNamePhonebooksBookKeyExportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNamePhonebooksBookKeyExportQueryKey(serviceName,bookKey,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>> = ({ signal }) => getSmsServiceNamePhonebooksBookKeyExport(serviceName,bookKey,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && bookKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNamePhonebooksBookKeyExportQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>>
export type GetSmsServiceNamePhonebooksBookKeyExportQueryError = unknown


export function useGetSmsServiceNamePhonebooksBookKeyExport<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>, TError = unknown>(
 serviceName: string,
    bookKey: string,
    params: GetSmsServiceNamePhonebooksBookKeyExportParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNamePhonebooksBookKeyExport<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>, TError = unknown>(
 serviceName: string,
    bookKey: string,
    params: GetSmsServiceNamePhonebooksBookKeyExportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNamePhonebooksBookKeyExport<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>, TError = unknown>(
 serviceName: string,
    bookKey: string,
    params: GetSmsServiceNamePhonebooksBookKeyExportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Export the phonebook's contacts
 */

export function useGetSmsServiceNamePhonebooksBookKeyExport<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>, TError = unknown>(
 serviceName: string,
    bookKey: string,
    params: GetSmsServiceNamePhonebooksBookKeyExportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyExport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNamePhonebooksBookKeyExportQueryOptions(serviceName,bookKey,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Import a contacts file. Supported formats are Excel (.xls and .xlsx) and CSV
 */
export const postSmsServiceNamePhonebooksBookKeyImport = (
    serviceName: string,
    bookKey: string,
    postSmsServiceNamePhonebooksBookKeyImportBody: PostSmsServiceNamePhonebooksBookKeyImportBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyTaskOVH>(
      {url: `/sms/${serviceName}/phonebooks/${bookKey}/import`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNamePhonebooksBookKeyImportBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNamePhonebooksBookKeyImportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNamePhonebooksBookKeyImport>>, TError,{serviceName: string;bookKey: string;data: PostSmsServiceNamePhonebooksBookKeyImportBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNamePhonebooksBookKeyImport>>, TError,{serviceName: string;bookKey: string;data: PostSmsServiceNamePhonebooksBookKeyImportBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNamePhonebooksBookKeyImport>>, {serviceName: string;bookKey: string;data: PostSmsServiceNamePhonebooksBookKeyImportBody}> = (props) => {
          const {serviceName,bookKey,data} = props ?? {};

          return  postSmsServiceNamePhonebooksBookKeyImport(serviceName,bookKey,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNamePhonebooksBookKeyImportMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNamePhonebooksBookKeyImport>>>
    export type PostSmsServiceNamePhonebooksBookKeyImportMutationBody = PostSmsServiceNamePhonebooksBookKeyImportBody
    export type PostSmsServiceNamePhonebooksBookKeyImportMutationError = unknown

    /**
 * @summary Import a contacts file. Supported formats are Excel (.xls and .xlsx) and CSV
 */
export const usePostSmsServiceNamePhonebooksBookKeyImport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNamePhonebooksBookKeyImport>>, TError,{serviceName: string;bookKey: string;data: PostSmsServiceNamePhonebooksBookKeyImportBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNamePhonebooksBookKeyImport>>,
        TError,
        {serviceName: string;bookKey: string;data: PostSmsServiceNamePhonebooksBookKeyImportBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNamePhonebooksBookKeyImportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Phonebook contacts
 */
export const getSmsServiceNamePhonebooksBookKeyPhonebookContact = (
    serviceName: string,
    bookKey: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/phonebooks/${bookKey}/phonebookContact`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNamePhonebooksBookKeyPhonebookContactQueryKey = (serviceName: string,
    bookKey: string,) => {
    return [`/sms/${serviceName}/phonebooks/${bookKey}/phonebookContact`] as const;
    }

    
export const getGetSmsServiceNamePhonebooksBookKeyPhonebookContactQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError = unknown>(serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNamePhonebooksBookKeyPhonebookContactQueryKey(serviceName,bookKey);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>> = ({ signal }) => getSmsServiceNamePhonebooksBookKeyPhonebookContact(serviceName,bookKey, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && bookKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNamePhonebooksBookKeyPhonebookContactQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>>
export type GetSmsServiceNamePhonebooksBookKeyPhonebookContactQueryError = unknown


export function useGetSmsServiceNamePhonebooksBookKeyPhonebookContact<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError = unknown>(
 serviceName: string,
    bookKey: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNamePhonebooksBookKeyPhonebookContact<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError = unknown>(
 serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNamePhonebooksBookKeyPhonebookContact<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError = unknown>(
 serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Phonebook contacts
 */

export function useGetSmsServiceNamePhonebooksBookKeyPhonebookContact<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError = unknown>(
 serviceName: string,
    bookKey: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNamePhonebooksBookKeyPhonebookContactQueryOptions(serviceName,bookKey,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a phonebook contact. Return identifier of the phonebook contact.
 */
export const postSmsServiceNamePhonebooksBookKeyPhonebookContact = (
    serviceName: string,
    bookKey: string,
    postSmsServiceNamePhonebooksBookKeyPhonebookContactBody: PostSmsServiceNamePhonebooksBookKeyPhonebookContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number>(
      {url: `/sms/${serviceName}/phonebooks/${bookKey}/phonebookContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNamePhonebooksBookKeyPhonebookContactBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNamePhonebooksBookKeyPhonebookContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError,{serviceName: string;bookKey: string;data: PostSmsServiceNamePhonebooksBookKeyPhonebookContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError,{serviceName: string;bookKey: string;data: PostSmsServiceNamePhonebooksBookKeyPhonebookContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNamePhonebooksBookKeyPhonebookContact>>, {serviceName: string;bookKey: string;data: PostSmsServiceNamePhonebooksBookKeyPhonebookContactBody}> = (props) => {
          const {serviceName,bookKey,data} = props ?? {};

          return  postSmsServiceNamePhonebooksBookKeyPhonebookContact(serviceName,bookKey,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNamePhonebooksBookKeyPhonebookContactMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNamePhonebooksBookKeyPhonebookContact>>>
    export type PostSmsServiceNamePhonebooksBookKeyPhonebookContactMutationBody = PostSmsServiceNamePhonebooksBookKeyPhonebookContactBody
    export type PostSmsServiceNamePhonebooksBookKeyPhonebookContactMutationError = unknown

    /**
 * @summary Create a phonebook contact. Return identifier of the phonebook contact.
 */
export const usePostSmsServiceNamePhonebooksBookKeyPhonebookContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNamePhonebooksBookKeyPhonebookContact>>, TError,{serviceName: string;bookKey: string;data: PostSmsServiceNamePhonebooksBookKeyPhonebookContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNamePhonebooksBookKeyPhonebookContact>>,
        TError,
        {serviceName: string;bookKey: string;data: PostSmsServiceNamePhonebooksBookKeyPhonebookContactBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNamePhonebooksBookKeyPhonebookContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a phonebook contact
 */
export const deleteSmsServiceNamePhonebooksBookKeyPhonebookContactId = (
    serviceName: string,
    bookKey: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/phonebooks/${bookKey}/phonebookContact/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNamePhonebooksBookKeyPhonebookContactIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError,{serviceName: string;bookKey: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError,{serviceName: string;bookKey: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, {serviceName: string;bookKey: string;id: number}> = (props) => {
          const {serviceName,bookKey,id} = props ?? {};

          return  deleteSmsServiceNamePhonebooksBookKeyPhonebookContactId(serviceName,bookKey,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNamePhonebooksBookKeyPhonebookContactIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNamePhonebooksBookKeyPhonebookContactId>>>
    
    export type DeleteSmsServiceNamePhonebooksBookKeyPhonebookContactIdMutationError = unknown

    /**
 * @summary Delete a phonebook contact
 */
export const useDeleteSmsServiceNamePhonebooksBookKeyPhonebookContactId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError,{serviceName: string;bookKey: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNamePhonebooksBookKeyPhonebookContactId>>,
        TError,
        {serviceName: string;bookKey: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNamePhonebooksBookKeyPhonebookContactIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNamePhonebooksBookKeyPhonebookContactId = (
    serviceName: string,
    bookKey: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsPhonebookContactOVH>(
      {url: `/sms/${serviceName}/phonebooks/${bookKey}/phonebookContact/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNamePhonebooksBookKeyPhonebookContactIdQueryKey = (serviceName: string,
    bookKey: string,
    id: number,) => {
    return [`/sms/${serviceName}/phonebooks/${bookKey}/phonebookContact/${id}`] as const;
    }

    
export const getGetSmsServiceNamePhonebooksBookKeyPhonebookContactIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError = unknown>(serviceName: string,
    bookKey: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNamePhonebooksBookKeyPhonebookContactIdQueryKey(serviceName,bookKey,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>> = ({ signal }) => getSmsServiceNamePhonebooksBookKeyPhonebookContactId(serviceName,bookKey,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && bookKey && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNamePhonebooksBookKeyPhonebookContactIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>>
export type GetSmsServiceNamePhonebooksBookKeyPhonebookContactIdQueryError = unknown


export function useGetSmsServiceNamePhonebooksBookKeyPhonebookContactId<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError = unknown>(
 serviceName: string,
    bookKey: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNamePhonebooksBookKeyPhonebookContactId<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError = unknown>(
 serviceName: string,
    bookKey: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNamePhonebooksBookKeyPhonebookContactId<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError = unknown>(
 serviceName: string,
    bookKey: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNamePhonebooksBookKeyPhonebookContactId<TData = Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError = unknown>(
 serviceName: string,
    bookKey: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNamePhonebooksBookKeyPhonebookContactIdQueryOptions(serviceName,bookKey,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putSmsServiceNamePhonebooksBookKeyPhonebookContactId = (
    serviceName: string,
    bookKey: string,
    id: number,
    smsPhonebookContactOVH: NonReadonly<SmsPhonebookContactOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/phonebooks/${bookKey}/phonebookContact/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: smsPhonebookContactOVH
    },
      options);
    }
  


export const getPutSmsServiceNamePhonebooksBookKeyPhonebookContactIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError,{serviceName: string;bookKey: string;id: number;data: NonReadonly<SmsPhonebookContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError,{serviceName: string;bookKey: string;id: number;data: NonReadonly<SmsPhonebookContactOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, {serviceName: string;bookKey: string;id: number;data: NonReadonly<SmsPhonebookContactOVH>}> = (props) => {
          const {serviceName,bookKey,id,data} = props ?? {};

          return  putSmsServiceNamePhonebooksBookKeyPhonebookContactId(serviceName,bookKey,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsServiceNamePhonebooksBookKeyPhonebookContactIdMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsServiceNamePhonebooksBookKeyPhonebookContactId>>>
    export type PutSmsServiceNamePhonebooksBookKeyPhonebookContactIdMutationBody = NonReadonly<SmsPhonebookContactOVH>
    export type PutSmsServiceNamePhonebooksBookKeyPhonebookContactIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutSmsServiceNamePhonebooksBookKeyPhonebookContactId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNamePhonebooksBookKeyPhonebookContactId>>, TError,{serviceName: string;bookKey: string;id: number;data: NonReadonly<SmsPhonebookContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsServiceNamePhonebooksBookKeyPhonebookContactId>>,
        TError,
        {serviceName: string;bookKey: string;id: number;data: NonReadonly<SmsPhonebookContactOVH>},
        TContext
      > => {

      const mutationOptions = getPutSmsServiceNamePhonebooksBookKeyPhonebookContactIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Receivers preloaded from text or csv document file
 */
export const getSmsServiceNameReceivers = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/receivers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameReceiversQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}/receivers`] as const;
    }

    
export const getGetSmsServiceNameReceiversQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameReceivers>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceivers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameReceiversQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameReceivers>>> = ({ signal }) => getSmsServiceNameReceivers(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceivers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameReceiversQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameReceivers>>>
export type GetSmsServiceNameReceiversQueryError = unknown


export function useGetSmsServiceNameReceivers<TData = Awaited<ReturnType<typeof getSmsServiceNameReceivers>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceivers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameReceivers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameReceivers<TData = Awaited<ReturnType<typeof getSmsServiceNameReceivers>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceivers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameReceivers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameReceivers<TData = Awaited<ReturnType<typeof getSmsServiceNameReceivers>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceivers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Receivers preloaded from text or csv document file
 */

export function useGetSmsServiceNameReceivers<TData = Awaited<ReturnType<typeof getSmsServiceNameReceivers>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceivers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameReceiversQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new document of csv receivers
 */
export const postSmsServiceNameReceivers = (
    serviceName: string,
    postSmsServiceNameReceiversBody: PostSmsServiceNameReceiversBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsReceiverOVH>(
      {url: `/sms/${serviceName}/receivers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameReceiversBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameReceiversMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameReceivers>>, TError,{serviceName: string;data: PostSmsServiceNameReceiversBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameReceivers>>, TError,{serviceName: string;data: PostSmsServiceNameReceiversBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameReceivers>>, {serviceName: string;data: PostSmsServiceNameReceiversBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSmsServiceNameReceivers(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameReceiversMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameReceivers>>>
    export type PostSmsServiceNameReceiversMutationBody = PostSmsServiceNameReceiversBody
    export type PostSmsServiceNameReceiversMutationError = unknown

    /**
 * @summary Add a new document of csv receivers
 */
export const usePostSmsServiceNameReceivers = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameReceivers>>, TError,{serviceName: string;data: PostSmsServiceNameReceiversBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameReceivers>>,
        TError,
        {serviceName: string;data: PostSmsServiceNameReceiversBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameReceiversMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the document from the slot
 */
export const deleteSmsServiceNameReceiversSlotId = (
    serviceName: string,
    slotId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/receivers/${slotId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameReceiversSlotIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameReceiversSlotId>>, TError,{serviceName: string;slotId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameReceiversSlotId>>, TError,{serviceName: string;slotId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameReceiversSlotId>>, {serviceName: string;slotId: number}> = (props) => {
          const {serviceName,slotId} = props ?? {};

          return  deleteSmsServiceNameReceiversSlotId(serviceName,slotId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameReceiversSlotIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameReceiversSlotId>>>
    
    export type DeleteSmsServiceNameReceiversSlotIdMutationError = unknown

    /**
 * @summary Delete the document from the slot
 */
export const useDeleteSmsServiceNameReceiversSlotId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameReceiversSlotId>>, TError,{serviceName: string;slotId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameReceiversSlotId>>,
        TError,
        {serviceName: string;slotId: number},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameReceiversSlotIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameReceiversSlotId = (
    serviceName: string,
    slotId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsReceiverOVH>(
      {url: `/sms/${serviceName}/receivers/${slotId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameReceiversSlotIdQueryKey = (serviceName: string,
    slotId: number,) => {
    return [`/sms/${serviceName}/receivers/${slotId}`] as const;
    }

    
export const getGetSmsServiceNameReceiversSlotIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>, TError = unknown>(serviceName: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameReceiversSlotIdQueryKey(serviceName,slotId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>> = ({ signal }) => getSmsServiceNameReceiversSlotId(serviceName,slotId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && slotId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameReceiversSlotIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>>
export type GetSmsServiceNameReceiversSlotIdQueryError = unknown


export function useGetSmsServiceNameReceiversSlotId<TData = Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>, TError = unknown>(
 serviceName: string,
    slotId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameReceiversSlotId<TData = Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>, TError = unknown>(
 serviceName: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameReceiversSlotId<TData = Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>, TError = unknown>(
 serviceName: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameReceiversSlotId<TData = Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>, TError = unknown>(
 serviceName: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameReceiversSlotIdQueryOptions(serviceName,slotId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putSmsServiceNameReceiversSlotId = (
    serviceName: string,
    slotId: number,
    smsReceiverOVH: NonReadonly<SmsReceiverOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/receivers/${slotId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: smsReceiverOVH
    },
      options);
    }
  


export const getPutSmsServiceNameReceiversSlotIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameReceiversSlotId>>, TError,{serviceName: string;slotId: number;data: NonReadonly<SmsReceiverOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameReceiversSlotId>>, TError,{serviceName: string;slotId: number;data: NonReadonly<SmsReceiverOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsServiceNameReceiversSlotId>>, {serviceName: string;slotId: number;data: NonReadonly<SmsReceiverOVH>}> = (props) => {
          const {serviceName,slotId,data} = props ?? {};

          return  putSmsServiceNameReceiversSlotId(serviceName,slotId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsServiceNameReceiversSlotIdMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsServiceNameReceiversSlotId>>>
    export type PutSmsServiceNameReceiversSlotIdMutationBody = NonReadonly<SmsReceiverOVH>
    export type PutSmsServiceNameReceiversSlotIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutSmsServiceNameReceiversSlotId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameReceiversSlotId>>, TError,{serviceName: string;slotId: number;data: NonReadonly<SmsReceiverOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsServiceNameReceiversSlotId>>,
        TError,
        {serviceName: string;slotId: number;data: NonReadonly<SmsReceiverOVH>},
        TContext
      > => {

      const mutationOptions = getPutSmsServiceNameReceiversSlotIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Clean the invalid and inactive receivers in the document by requesting HLR on each receiver. A report is sent by e-mail at the end of the operation.
 * @summary Clean the invalid and inactive receivers in the document by requesting HLR on each receiver
 */
export const postSmsServiceNameReceiversSlotIdClean = (
    serviceName: string,
    slotId: number,
    postSmsServiceNameReceiversSlotIdCleanBody: PostSmsServiceNameReceiversSlotIdCleanBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsReceiversAsynchronousCleanReportOVH>(
      {url: `/sms/${serviceName}/receivers/${slotId}/clean`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameReceiversSlotIdCleanBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameReceiversSlotIdCleanMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameReceiversSlotIdClean>>, TError,{serviceName: string;slotId: number;data: PostSmsServiceNameReceiversSlotIdCleanBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameReceiversSlotIdClean>>, TError,{serviceName: string;slotId: number;data: PostSmsServiceNameReceiversSlotIdCleanBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameReceiversSlotIdClean>>, {serviceName: string;slotId: number;data: PostSmsServiceNameReceiversSlotIdCleanBody}> = (props) => {
          const {serviceName,slotId,data} = props ?? {};

          return  postSmsServiceNameReceiversSlotIdClean(serviceName,slotId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameReceiversSlotIdCleanMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameReceiversSlotIdClean>>>
    export type PostSmsServiceNameReceiversSlotIdCleanMutationBody = PostSmsServiceNameReceiversSlotIdCleanBody
    export type PostSmsServiceNameReceiversSlotIdCleanMutationError = unknown

    /**
 * @summary Clean the invalid and inactive receivers in the document by requesting HLR on each receiver
 */
export const usePostSmsServiceNameReceiversSlotIdClean = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameReceiversSlotIdClean>>, TError,{serviceName: string;slotId: number;data: PostSmsServiceNameReceiversSlotIdCleanBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameReceiversSlotIdClean>>,
        TError,
        {serviceName: string;slotId: number;data: PostSmsServiceNameReceiversSlotIdCleanBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameReceiversSlotIdCleanMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the document data container
 */
export const getSmsServiceNameReceiversSlotIdCsv = (
    serviceName: string,
    slotId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/sms/${serviceName}/receivers/${slotId}/csv`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameReceiversSlotIdCsvQueryKey = (serviceName: string,
    slotId: number,) => {
    return [`/sms/${serviceName}/receivers/${slotId}/csv`] as const;
    }

    
export const getGetSmsServiceNameReceiversSlotIdCsvQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>, TError = unknown>(serviceName: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameReceiversSlotIdCsvQueryKey(serviceName,slotId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>> = ({ signal }) => getSmsServiceNameReceiversSlotIdCsv(serviceName,slotId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && slotId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameReceiversSlotIdCsvQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>>
export type GetSmsServiceNameReceiversSlotIdCsvQueryError = unknown


export function useGetSmsServiceNameReceiversSlotIdCsv<TData = Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>, TError = unknown>(
 serviceName: string,
    slotId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameReceiversSlotIdCsv<TData = Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>, TError = unknown>(
 serviceName: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameReceiversSlotIdCsv<TData = Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>, TError = unknown>(
 serviceName: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the document data container
 */

export function useGetSmsServiceNameReceiversSlotIdCsv<TData = Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>, TError = unknown>(
 serviceName: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameReceiversSlotIdCsv>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameReceiversSlotIdCsvQueryOptions(serviceName,slotId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Describe SMS offers available.
 */
export const getSmsServiceNameSeeOffers = (
    serviceName: string,
    params: GetSmsServiceNameSeeOffersParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsPackOfferOVH[]>(
      {url: `/sms/${serviceName}/seeOffers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameSeeOffersQueryKey = (serviceName: string,
    params: GetSmsServiceNameSeeOffersParams,) => {
    return [`/sms/${serviceName}/seeOffers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameSeeOffersQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>, TError = unknown>(serviceName: string,
    params: GetSmsServiceNameSeeOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameSeeOffersQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>> = ({ signal }) => getSmsServiceNameSeeOffers(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameSeeOffersQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>>
export type GetSmsServiceNameSeeOffersQueryError = unknown


export function useGetSmsServiceNameSeeOffers<TData = Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>, TError = unknown>(
 serviceName: string,
    params: GetSmsServiceNameSeeOffersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSeeOffers<TData = Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>, TError = unknown>(
 serviceName: string,
    params: GetSmsServiceNameSeeOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSeeOffers<TData = Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>, TError = unknown>(
 serviceName: string,
    params: GetSmsServiceNameSeeOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Describe SMS offers available.
 */

export function useGetSmsServiceNameSeeOffers<TData = Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>, TError = unknown>(
 serviceName: string,
    params: GetSmsServiceNameSeeOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSeeOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameSeeOffersQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Senders allowed associated to the sms account
 */
export const getSmsServiceNameSenders = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/sms/${serviceName}/senders`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameSendersQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}/senders`] as const;
    }

    
export const getGetSmsServiceNameSendersQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameSenders>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSenders>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameSendersQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameSenders>>> = ({ signal }) => getSmsServiceNameSenders(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSenders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameSendersQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameSenders>>>
export type GetSmsServiceNameSendersQueryError = unknown


export function useGetSmsServiceNameSenders<TData = Awaited<ReturnType<typeof getSmsServiceNameSenders>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSenders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSenders>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSenders<TData = Awaited<ReturnType<typeof getSmsServiceNameSenders>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSenders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSenders>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSenders<TData = Awaited<ReturnType<typeof getSmsServiceNameSenders>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSenders>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Senders allowed associated to the sms account
 */

export function useGetSmsServiceNameSenders<TData = Awaited<ReturnType<typeof getSmsServiceNameSenders>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSenders>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameSendersQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create the sms sender given
 */
export const postSmsServiceNameSenders = (
    serviceName: string,
    postSmsServiceNameSendersBody: PostSmsServiceNameSendersBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/sms/${serviceName}/senders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameSendersBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameSendersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameSenders>>, TError,{serviceName: string;data: PostSmsServiceNameSendersBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameSenders>>, TError,{serviceName: string;data: PostSmsServiceNameSendersBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameSenders>>, {serviceName: string;data: PostSmsServiceNameSendersBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSmsServiceNameSenders(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameSendersMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameSenders>>>
    export type PostSmsServiceNameSendersMutationBody = PostSmsServiceNameSendersBody
    export type PostSmsServiceNameSendersMutationError = unknown

    /**
 * @summary Create the sms sender given
 */
export const usePostSmsServiceNameSenders = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameSenders>>, TError,{serviceName: string;data: PostSmsServiceNameSendersBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameSenders>>,
        TError,
        {serviceName: string;data: PostSmsServiceNameSendersBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameSendersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the sms sender given
 */
export const deleteSmsServiceNameSendersSender = (
    serviceName: string,
    sender: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/senders/${sender}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameSendersSenderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameSendersSender>>, TError,{serviceName: string;sender: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameSendersSender>>, TError,{serviceName: string;sender: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameSendersSender>>, {serviceName: string;sender: string}> = (props) => {
          const {serviceName,sender} = props ?? {};

          return  deleteSmsServiceNameSendersSender(serviceName,sender,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameSendersSenderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameSendersSender>>>
    
    export type DeleteSmsServiceNameSendersSenderMutationError = unknown

    /**
 * @summary Delete the sms sender given
 */
export const useDeleteSmsServiceNameSendersSender = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameSendersSender>>, TError,{serviceName: string;sender: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameSendersSender>>,
        TError,
        {serviceName: string;sender: string},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameSendersSenderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameSendersSender = (
    serviceName: string,
    sender: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsSenderOVH>(
      {url: `/sms/${serviceName}/senders/${sender}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameSendersSenderQueryKey = (serviceName: string,
    sender: string,) => {
    return [`/sms/${serviceName}/senders/${sender}`] as const;
    }

    
export const getGetSmsServiceNameSendersSenderQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>, TError = unknown>(serviceName: string,
    sender: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameSendersSenderQueryKey(serviceName,sender);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>> = ({ signal }) => getSmsServiceNameSendersSender(serviceName,sender, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && sender), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameSendersSenderQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>>
export type GetSmsServiceNameSendersSenderQueryError = unknown


export function useGetSmsServiceNameSendersSender<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>, TError = unknown>(
 serviceName: string,
    sender: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSendersSender<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>, TError = unknown>(
 serviceName: string,
    sender: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSendersSender<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>, TError = unknown>(
 serviceName: string,
    sender: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameSendersSender<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>, TError = unknown>(
 serviceName: string,
    sender: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSender>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameSendersSenderQueryOptions(serviceName,sender,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putSmsServiceNameSendersSender = (
    serviceName: string,
    sender: string,
    smsSenderOVH: NonReadonly<SmsSenderOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/senders/${sender}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: smsSenderOVH
    },
      options);
    }
  


export const getPutSmsServiceNameSendersSenderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameSendersSender>>, TError,{serviceName: string;sender: string;data: NonReadonly<SmsSenderOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameSendersSender>>, TError,{serviceName: string;sender: string;data: NonReadonly<SmsSenderOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsServiceNameSendersSender>>, {serviceName: string;sender: string;data: NonReadonly<SmsSenderOVH>}> = (props) => {
          const {serviceName,sender,data} = props ?? {};

          return  putSmsServiceNameSendersSender(serviceName,sender,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsServiceNameSendersSenderMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsServiceNameSendersSender>>>
    export type PutSmsServiceNameSendersSenderMutationBody = NonReadonly<SmsSenderOVH>
    export type PutSmsServiceNameSendersSenderMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutSmsServiceNameSendersSender = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameSendersSender>>, TError,{serviceName: string;sender: string;data: NonReadonly<SmsSenderOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsServiceNameSendersSender>>,
        TError,
        {serviceName: string;sender: string;data: NonReadonly<SmsSenderOVH>},
        TContext
      > => {

      const mutationOptions = getPutSmsServiceNameSendersSenderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Documents linked to SMS sender for validation purpose
 */
export const getSmsServiceNameSendersSenderDocuments = (
    serviceName: string,
    sender: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/sms/${serviceName}/senders/${sender}/documents`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameSendersSenderDocumentsQueryKey = (serviceName: string,
    sender: string,) => {
    return [`/sms/${serviceName}/senders/${sender}/documents`] as const;
    }

    
export const getGetSmsServiceNameSendersSenderDocumentsQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>, TError = unknown>(serviceName: string,
    sender: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameSendersSenderDocumentsQueryKey(serviceName,sender);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>> = ({ signal }) => getSmsServiceNameSendersSenderDocuments(serviceName,sender, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && sender), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameSendersSenderDocumentsQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>>
export type GetSmsServiceNameSendersSenderDocumentsQueryError = unknown


export function useGetSmsServiceNameSendersSenderDocuments<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>, TError = unknown>(
 serviceName: string,
    sender: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSendersSenderDocuments<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>, TError = unknown>(
 serviceName: string,
    sender: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSendersSenderDocuments<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>, TError = unknown>(
 serviceName: string,
    sender: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Documents linked to SMS sender for validation purpose
 */

export function useGetSmsServiceNameSendersSenderDocuments<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>, TError = unknown>(
 serviceName: string,
    sender: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocuments>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameSendersSenderDocumentsQueryOptions(serviceName,sender,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new empty document
 */
export const postSmsServiceNameSendersSenderDocuments = (
    serviceName: string,
    sender: string,
    postSmsServiceNameSendersSenderDocumentsBody: PostSmsServiceNameSendersSenderDocumentsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsSenderDocumentOVH>(
      {url: `/sms/${serviceName}/senders/${sender}/documents`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameSendersSenderDocumentsBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameSendersSenderDocumentsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameSendersSenderDocuments>>, TError,{serviceName: string;sender: string;data: PostSmsServiceNameSendersSenderDocumentsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameSendersSenderDocuments>>, TError,{serviceName: string;sender: string;data: PostSmsServiceNameSendersSenderDocumentsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameSendersSenderDocuments>>, {serviceName: string;sender: string;data: PostSmsServiceNameSendersSenderDocumentsBody}> = (props) => {
          const {serviceName,sender,data} = props ?? {};

          return  postSmsServiceNameSendersSenderDocuments(serviceName,sender,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameSendersSenderDocumentsMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameSendersSenderDocuments>>>
    export type PostSmsServiceNameSendersSenderDocumentsMutationBody = PostSmsServiceNameSendersSenderDocumentsBody
    export type PostSmsServiceNameSendersSenderDocumentsMutationError = unknown

    /**
 * @summary Create a new empty document
 */
export const usePostSmsServiceNameSendersSenderDocuments = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameSendersSenderDocuments>>, TError,{serviceName: string;sender: string;data: PostSmsServiceNameSendersSenderDocumentsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameSendersSenderDocuments>>,
        TError,
        {serviceName: string;sender: string;data: PostSmsServiceNameSendersSenderDocumentsBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameSendersSenderDocumentsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameSendersSenderDocumentsDocumentID = (
    serviceName: string,
    sender: string,
    documentID: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsSenderDocumentOVH>(
      {url: `/sms/${serviceName}/senders/${sender}/documents/${documentID}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameSendersSenderDocumentsDocumentIDQueryKey = (serviceName: string,
    sender: string,
    documentID: string,) => {
    return [`/sms/${serviceName}/senders/${sender}/documents/${documentID}`] as const;
    }

    
export const getGetSmsServiceNameSendersSenderDocumentsDocumentIDQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>, TError = unknown>(serviceName: string,
    sender: string,
    documentID: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameSendersSenderDocumentsDocumentIDQueryKey(serviceName,sender,documentID);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>> = ({ signal }) => getSmsServiceNameSendersSenderDocumentsDocumentID(serviceName,sender,documentID, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && sender && documentID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameSendersSenderDocumentsDocumentIDQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>>
export type GetSmsServiceNameSendersSenderDocumentsDocumentIDQueryError = unknown


export function useGetSmsServiceNameSendersSenderDocumentsDocumentID<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>, TError = unknown>(
 serviceName: string,
    sender: string,
    documentID: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSendersSenderDocumentsDocumentID<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>, TError = unknown>(
 serviceName: string,
    sender: string,
    documentID: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSendersSenderDocumentsDocumentID<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>, TError = unknown>(
 serviceName: string,
    sender: string,
    documentID: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameSendersSenderDocumentsDocumentID<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>, TError = unknown>(
 serviceName: string,
    sender: string,
    documentID: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersSenderDocumentsDocumentID>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameSendersSenderDocumentsDocumentIDQueryOptions(serviceName,sender,documentID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putSmsServiceNameSendersSenderDocumentsDocumentID = (
    serviceName: string,
    sender: string,
    documentID: string,
    smsSenderDocumentOVH: NonReadonly<SmsSenderDocumentOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/senders/${sender}/documents/${documentID}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: smsSenderDocumentOVH
    },
      options);
    }
  


export const getPutSmsServiceNameSendersSenderDocumentsDocumentIDMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameSendersSenderDocumentsDocumentID>>, TError,{serviceName: string;sender: string;documentID: string;data: NonReadonly<SmsSenderDocumentOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameSendersSenderDocumentsDocumentID>>, TError,{serviceName: string;sender: string;documentID: string;data: NonReadonly<SmsSenderDocumentOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsServiceNameSendersSenderDocumentsDocumentID>>, {serviceName: string;sender: string;documentID: string;data: NonReadonly<SmsSenderDocumentOVH>}> = (props) => {
          const {serviceName,sender,documentID,data} = props ?? {};

          return  putSmsServiceNameSendersSenderDocumentsDocumentID(serviceName,sender,documentID,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsServiceNameSendersSenderDocumentsDocumentIDMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsServiceNameSendersSenderDocumentsDocumentID>>>
    export type PutSmsServiceNameSendersSenderDocumentsDocumentIDMutationBody = NonReadonly<SmsSenderDocumentOVH>
    export type PutSmsServiceNameSendersSenderDocumentsDocumentIDMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutSmsServiceNameSendersSenderDocumentsDocumentID = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameSendersSenderDocumentsDocumentID>>, TError,{serviceName: string;sender: string;documentID: string;data: NonReadonly<SmsSenderDocumentOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsServiceNameSendersSenderDocumentsDocumentID>>,
        TError,
        {serviceName: string;sender: string;documentID: string;data: NonReadonly<SmsSenderDocumentOVH>},
        TContext
      > => {

      const mutationOptions = getPutSmsServiceNameSendersSenderDocumentsDocumentIDMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Validate a given sender with an activation code.
 */
export const postSmsServiceNameSendersSenderValidate = (
    serviceName: string,
    sender: string,
    postSmsServiceNameSendersSenderValidateBody: PostSmsServiceNameSendersSenderValidateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/senders/${sender}/validate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameSendersSenderValidateBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameSendersSenderValidateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameSendersSenderValidate>>, TError,{serviceName: string;sender: string;data: PostSmsServiceNameSendersSenderValidateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameSendersSenderValidate>>, TError,{serviceName: string;sender: string;data: PostSmsServiceNameSendersSenderValidateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameSendersSenderValidate>>, {serviceName: string;sender: string;data: PostSmsServiceNameSendersSenderValidateBody}> = (props) => {
          const {serviceName,sender,data} = props ?? {};

          return  postSmsServiceNameSendersSenderValidate(serviceName,sender,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameSendersSenderValidateMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameSendersSenderValidate>>>
    export type PostSmsServiceNameSendersSenderValidateMutationBody = PostSmsServiceNameSendersSenderValidateBody
    export type PostSmsServiceNameSendersSenderValidateMutationError = unknown

    /**
 * @summary Validate a given sender with an activation code.
 */
export const usePostSmsServiceNameSendersSenderValidate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameSendersSenderValidate>>, TError,{serviceName: string;sender: string;data: PostSmsServiceNameSendersSenderValidateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameSendersSenderValidate>>,
        TError,
        {serviceName: string;sender: string;data: PostSmsServiceNameSendersSenderValidateBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameSendersSenderValidateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary The senders that are attached to your personal informations or OVH services and that can be automatically validated
 */
export const getSmsServiceNameSendersAvailableForValidation = (
    serviceName: string,
    params?: GetSmsServiceNameSendersAvailableForValidationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsSenderAvailableOVH[]>(
      {url: `/sms/${serviceName}/sendersAvailableForValidation`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameSendersAvailableForValidationQueryKey = (serviceName: string,
    params?: GetSmsServiceNameSendersAvailableForValidationParams,) => {
    return [`/sms/${serviceName}/sendersAvailableForValidation`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameSendersAvailableForValidationQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>, TError = unknown>(serviceName: string,
    params?: GetSmsServiceNameSendersAvailableForValidationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameSendersAvailableForValidationQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>> = ({ signal }) => getSmsServiceNameSendersAvailableForValidation(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameSendersAvailableForValidationQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>>
export type GetSmsServiceNameSendersAvailableForValidationQueryError = unknown


export function useGetSmsServiceNameSendersAvailableForValidation<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetSmsServiceNameSendersAvailableForValidationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSendersAvailableForValidation<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameSendersAvailableForValidationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSendersAvailableForValidation<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameSendersAvailableForValidationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary The senders that are attached to your personal informations or OVH services and that can be automatically validated
 */

export function useGetSmsServiceNameSendersAvailableForValidation<TData = Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameSendersAvailableForValidationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSendersAvailableForValidation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameSendersAvailableForValidationQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getSmsServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/sms/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetSmsServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>> = ({ signal }) => getSmsServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>>
export type GetSmsServiceNameServiceInfosQueryError = unknown


export function useGetSmsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetSmsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putSmsServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutSmsServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putSmsServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsServiceNameServiceInfos>>>
    export type PutSmsServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutSmsServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutSmsServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutSmsServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get SMPP allowed IPs
 */
export const getSmsServiceNameSmppAllowedIPs = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpOVH[]>(
      {url: `/sms/${serviceName}/smpp/allowedIPs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameSmppAllowedIPsQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}/smpp/allowedIPs`] as const;
    }

    
export const getGetSmsServiceNameSmppAllowedIPsQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameSmppAllowedIPsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>> = ({ signal }) => getSmsServiceNameSmppAllowedIPs(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameSmppAllowedIPsQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>>
export type GetSmsServiceNameSmppAllowedIPsQueryError = unknown


export function useGetSmsServiceNameSmppAllowedIPs<TData = Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSmppAllowedIPs<TData = Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSmppAllowedIPs<TData = Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get SMPP allowed IPs
 */

export function useGetSmsServiceNameSmppAllowedIPs<TData = Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSmppAllowedIPs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameSmppAllowedIPsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add or remove allowed IPs
 */
export const putSmsServiceNameSmppAllowedIPs = (
    serviceName: string,
    smsAllowedIPsOVH: SmsAllowedIPsOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<IpOVH[]>(
      {url: `/sms/${serviceName}/smpp/allowedIPs`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: smsAllowedIPsOVH
    },
      options);
    }
  


export const getPutSmsServiceNameSmppAllowedIPsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameSmppAllowedIPs>>, TError,{serviceName: string;data: SmsAllowedIPsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameSmppAllowedIPs>>, TError,{serviceName: string;data: SmsAllowedIPsOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsServiceNameSmppAllowedIPs>>, {serviceName: string;data: SmsAllowedIPsOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putSmsServiceNameSmppAllowedIPs(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsServiceNameSmppAllowedIPsMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsServiceNameSmppAllowedIPs>>>
    export type PutSmsServiceNameSmppAllowedIPsMutationBody = SmsAllowedIPsOVH
    export type PutSmsServiceNameSmppAllowedIPsMutationError = unknown

    /**
 * @summary Add or remove allowed IPs
 */
export const usePutSmsServiceNameSmppAllowedIPs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameSmppAllowedIPs>>, TError,{serviceName: string;data: SmsAllowedIPsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsServiceNameSmppAllowedIPs>>,
        TError,
        {serviceName: string;data: SmsAllowedIPsOVH},
        TContext
      > => {

      const mutationOptions = getPutSmsServiceNameSmppAllowedIPsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Renew SMPP password
 */
export const postSmsServiceNameSmppPassword = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/smpp/password`, method: 'POST', signal
    },
      options);
    }
  


export const getPostSmsServiceNameSmppPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameSmppPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameSmppPassword>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameSmppPassword>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postSmsServiceNameSmppPassword(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameSmppPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameSmppPassword>>>
    
    export type PostSmsServiceNameSmppPasswordMutationError = unknown

    /**
 * @summary Renew SMPP password
 */
export const usePostSmsServiceNameSmppPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameSmppPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameSmppPassword>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameSmppPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get SMPP settings
 */
export const getSmsServiceNameSmppSettings = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsSettingsOVH>(
      {url: `/sms/${serviceName}/smpp/settings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameSmppSettingsQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}/smpp/settings`] as const;
    }

    
export const getGetSmsServiceNameSmppSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameSmppSettingsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>> = ({ signal }) => getSmsServiceNameSmppSettings(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameSmppSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>>
export type GetSmsServiceNameSmppSettingsQueryError = unknown


export function useGetSmsServiceNameSmppSettings<TData = Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSmppSettings<TData = Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameSmppSettings<TData = Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get SMPP settings
 */

export function useGetSmsServiceNameSmppSettings<TData = Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameSmppSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameSmppSettingsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Operations on a SMS service
 */
export const getSmsServiceNameTask = (
    serviceName: string,
    params?: GetSmsServiceNameTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameTaskQueryKey = (serviceName: string,
    params?: GetSmsServiceNameTaskParams,) => {
    return [`/sms/${serviceName}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameTask>>, TError = unknown>(serviceName: string,
    params?: GetSmsServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameTaskQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameTask>>> = ({ signal }) => getSmsServiceNameTask(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameTask>>>
export type GetSmsServiceNameTaskQueryError = unknown


export function useGetSmsServiceNameTask<TData = Awaited<ReturnType<typeof getSmsServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetSmsServiceNameTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameTask<TData = Awaited<ReturnType<typeof getSmsServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameTask<TData = Awaited<ReturnType<typeof getSmsServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Operations on a SMS service
 */

export function useGetSmsServiceNameTask<TData = Awaited<ReturnType<typeof getSmsServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetSmsServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameTaskQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getSmsServiceNameTaskTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsTaskOVH>(
      {url: `/sms/${serviceName}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameTaskTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/sms/${serviceName}/task/${taskId}`] as const;
    }

    
export const getGetSmsServiceNameTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameTaskTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>> = ({ signal }) => getSmsServiceNameTaskTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>>
export type GetSmsServiceNameTaskTaskIdQueryError = unknown


export function useGetSmsServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameTaskTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Template pattern filled up for moderation (Needed to send in US country)
 */
export const getSmsServiceNameTemplatesControl = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/sms/${serviceName}/templatesControl`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameTemplatesControlQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}/templatesControl`] as const;
    }

    
export const getGetSmsServiceNameTemplatesControlQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameTemplatesControlQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>> = ({ signal }) => getSmsServiceNameTemplatesControl(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameTemplatesControlQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>>
export type GetSmsServiceNameTemplatesControlQueryError = unknown


export function useGetSmsServiceNameTemplatesControl<TData = Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameTemplatesControl<TData = Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameTemplatesControl<TData = Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Template pattern filled up for moderation (Needed to send in US country)
 */

export function useGetSmsServiceNameTemplatesControl<TData = Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameTemplatesControlQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create the sms template control given
 */
export const postSmsServiceNameTemplatesControl = (
    serviceName: string,
    postSmsServiceNameTemplatesControlBody: PostSmsServiceNameTemplatesControlBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/templatesControl`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameTemplatesControlBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameTemplatesControlMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameTemplatesControl>>, TError,{serviceName: string;data: PostSmsServiceNameTemplatesControlBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameTemplatesControl>>, TError,{serviceName: string;data: PostSmsServiceNameTemplatesControlBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameTemplatesControl>>, {serviceName: string;data: PostSmsServiceNameTemplatesControlBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSmsServiceNameTemplatesControl(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameTemplatesControlMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameTemplatesControl>>>
    export type PostSmsServiceNameTemplatesControlMutationBody = PostSmsServiceNameTemplatesControlBody
    export type PostSmsServiceNameTemplatesControlMutationError = unknown

    /**
 * @summary Create the sms template control given
 */
export const usePostSmsServiceNameTemplatesControl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameTemplatesControl>>, TError,{serviceName: string;data: PostSmsServiceNameTemplatesControlBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameTemplatesControl>>,
        TError,
        {serviceName: string;data: PostSmsServiceNameTemplatesControlBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameTemplatesControlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the sms template control
 */
export const deleteSmsServiceNameTemplatesControlName = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/templatesControl/${name}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameTemplatesControlNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameTemplatesControlName>>, TError,{serviceName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameTemplatesControlName>>, TError,{serviceName: string;name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameTemplatesControlName>>, {serviceName: string;name: string}> = (props) => {
          const {serviceName,name} = props ?? {};

          return  deleteSmsServiceNameTemplatesControlName(serviceName,name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameTemplatesControlNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameTemplatesControlName>>>
    
    export type DeleteSmsServiceNameTemplatesControlNameMutationError = unknown

    /**
 * @summary Delete the sms template control
 */
export const useDeleteSmsServiceNameTemplatesControlName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameTemplatesControlName>>, TError,{serviceName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameTemplatesControlName>>,
        TError,
        {serviceName: string;name: string},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameTemplatesControlNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameTemplatesControlName = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsTemplateControlOVH>(
      {url: `/sms/${serviceName}/templatesControl/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameTemplatesControlNameQueryKey = (serviceName: string,
    name: string,) => {
    return [`/sms/${serviceName}/templatesControl/${name}`] as const;
    }

    
export const getGetSmsServiceNameTemplatesControlNameQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameTemplatesControlNameQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>> = ({ signal }) => getSmsServiceNameTemplatesControlName(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameTemplatesControlNameQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>>
export type GetSmsServiceNameTemplatesControlNameQueryError = unknown


export function useGetSmsServiceNameTemplatesControlName<TData = Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameTemplatesControlName<TData = Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameTemplatesControlName<TData = Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameTemplatesControlName<TData = Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameTemplatesControlName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameTemplatesControlNameQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putSmsServiceNameTemplatesControlName = (
    serviceName: string,
    name: string,
    smsTemplateControlOVH: NonReadonly<SmsTemplateControlOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/templatesControl/${name}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: smsTemplateControlOVH
    },
      options);
    }
  


export const getPutSmsServiceNameTemplatesControlNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameTemplatesControlName>>, TError,{serviceName: string;name: string;data: NonReadonly<SmsTemplateControlOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameTemplatesControlName>>, TError,{serviceName: string;name: string;data: NonReadonly<SmsTemplateControlOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsServiceNameTemplatesControlName>>, {serviceName: string;name: string;data: NonReadonly<SmsTemplateControlOVH>}> = (props) => {
          const {serviceName,name,data} = props ?? {};

          return  putSmsServiceNameTemplatesControlName(serviceName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsServiceNameTemplatesControlNameMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsServiceNameTemplatesControlName>>>
    export type PutSmsServiceNameTemplatesControlNameMutationBody = NonReadonly<SmsTemplateControlOVH>
    export type PutSmsServiceNameTemplatesControlNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutSmsServiceNameTemplatesControlName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameTemplatesControlName>>, TError,{serviceName: string;name: string;data: NonReadonly<SmsTemplateControlOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsServiceNameTemplatesControlName>>,
        TError,
        {serviceName: string;name: string;data: NonReadonly<SmsTemplateControlOVH>},
        TContext
      > => {

      const mutationOptions = getPutSmsServiceNameTemplatesControlNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Attempt a new validation after moderation refusal
 */
export const postSmsServiceNameTemplatesControlNameRelaunchValidation = (
    serviceName: string,
    name: string,
    postSmsServiceNameTemplatesControlNameRelaunchValidationBody: PostSmsServiceNameTemplatesControlNameRelaunchValidationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/templatesControl/${name}/relaunchValidation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameTemplatesControlNameRelaunchValidationBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameTemplatesControlNameRelaunchValidationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameTemplatesControlNameRelaunchValidation>>, TError,{serviceName: string;name: string;data: PostSmsServiceNameTemplatesControlNameRelaunchValidationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameTemplatesControlNameRelaunchValidation>>, TError,{serviceName: string;name: string;data: PostSmsServiceNameTemplatesControlNameRelaunchValidationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameTemplatesControlNameRelaunchValidation>>, {serviceName: string;name: string;data: PostSmsServiceNameTemplatesControlNameRelaunchValidationBody}> = (props) => {
          const {serviceName,name,data} = props ?? {};

          return  postSmsServiceNameTemplatesControlNameRelaunchValidation(serviceName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameTemplatesControlNameRelaunchValidationMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameTemplatesControlNameRelaunchValidation>>>
    export type PostSmsServiceNameTemplatesControlNameRelaunchValidationMutationBody = PostSmsServiceNameTemplatesControlNameRelaunchValidationBody
    export type PostSmsServiceNameTemplatesControlNameRelaunchValidationMutationError = unknown

    /**
 * @summary Attempt a new validation after moderation refusal
 */
export const usePostSmsServiceNameTemplatesControlNameRelaunchValidation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameTemplatesControlNameRelaunchValidation>>, TError,{serviceName: string;name: string;data: PostSmsServiceNameTemplatesControlNameRelaunchValidationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameTemplatesControlNameRelaunchValidation>>,
        TError,
        {serviceName: string;name: string;data: PostSmsServiceNameTemplatesControlNameRelaunchValidationBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameTemplatesControlNameRelaunchValidationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Credit transfer between two sms accounts.
 */
export const postSmsServiceNameTransferCredits = (
    serviceName: string,
    postSmsServiceNameTransferCreditsBody: PostSmsServiceNameTransferCreditsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/transferCredits`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameTransferCreditsBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameTransferCreditsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameTransferCredits>>, TError,{serviceName: string;data: PostSmsServiceNameTransferCreditsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameTransferCredits>>, TError,{serviceName: string;data: PostSmsServiceNameTransferCreditsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameTransferCredits>>, {serviceName: string;data: PostSmsServiceNameTransferCreditsBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSmsServiceNameTransferCredits(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameTransferCreditsMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameTransferCredits>>>
    export type PostSmsServiceNameTransferCreditsMutationBody = PostSmsServiceNameTransferCreditsBody
    export type PostSmsServiceNameTransferCreditsMutationError = unknown

    /**
 * @summary Credit transfer between two sms accounts.
 */
export const usePostSmsServiceNameTransferCredits = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameTransferCredits>>, TError,{serviceName: string;data: PostSmsServiceNameTransferCreditsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameTransferCredits>>,
        TError,
        {serviceName: string;data: PostSmsServiceNameTransferCreditsBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameTransferCreditsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Users associated to the sms account
 */
export const getSmsServiceNameUsers = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/sms/${serviceName}/users`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}/users`] as const;
    }

    
export const getGetSmsServiceNameUsersQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsers>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsers>>> = ({ signal }) => getSmsServiceNameUsers(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsers>>>
export type GetSmsServiceNameUsersQueryError = unknown


export function useGetSmsServiceNameUsers<TData = Awaited<ReturnType<typeof getSmsServiceNameUsers>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsers<TData = Awaited<ReturnType<typeof getSmsServiceNameUsers>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsers<TData = Awaited<ReturnType<typeof getSmsServiceNameUsers>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Users associated to the sms account
 */

export function useGetSmsServiceNameUsers<TData = Awaited<ReturnType<typeof getSmsServiceNameUsers>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new user for an sms account
 */
export const postSmsServiceNameUsers = (
    serviceName: string,
    postSmsServiceNameUsersBody: PostSmsServiceNameUsersBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameUsersBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameUsersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameUsers>>, TError,{serviceName: string;data: PostSmsServiceNameUsersBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameUsers>>, TError,{serviceName: string;data: PostSmsServiceNameUsersBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameUsers>>, {serviceName: string;data: PostSmsServiceNameUsersBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSmsServiceNameUsers(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameUsers>>>
    export type PostSmsServiceNameUsersMutationBody = PostSmsServiceNameUsersBody
    export type PostSmsServiceNameUsersMutationError = unknown

    /**
 * @summary Create a new user for an sms account
 */
export const usePostSmsServiceNameUsers = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameUsers>>, TError,{serviceName: string;data: PostSmsServiceNameUsersBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameUsers>>,
        TError,
        {serviceName: string;data: PostSmsServiceNameUsersBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameUsersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the sms user given
 */
export const deleteSmsServiceNameUsersLogin = (
    serviceName: string,
    login: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/users/${login}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameUsersLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLogin>>, TError,{serviceName: string;login: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLogin>>, TError,{serviceName: string;login: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLogin>>, {serviceName: string;login: string}> = (props) => {
          const {serviceName,login} = props ?? {};

          return  deleteSmsServiceNameUsersLogin(serviceName,login,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameUsersLoginMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLogin>>>
    
    export type DeleteSmsServiceNameUsersLoginMutationError = unknown

    /**
 * @summary Delete the sms user given
 */
export const useDeleteSmsServiceNameUsersLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLogin>>, TError,{serviceName: string;login: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameUsersLogin>>,
        TError,
        {serviceName: string;login: string},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameUsersLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameUsersLogin = (
    serviceName: string,
    login: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsUserOVH>(
      {url: `/sms/${serviceName}/users/${login}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersLoginQueryKey = (serviceName: string,
    login: string,) => {
    return [`/sms/${serviceName}/users/${login}`] as const;
    }

    
export const getGetSmsServiceNameUsersLoginQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>, TError = unknown>(serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersLoginQueryKey(serviceName,login);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>> = ({ signal }) => getSmsServiceNameUsersLogin(serviceName,login, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersLoginQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>>
export type GetSmsServiceNameUsersLoginQueryError = unknown


export function useGetSmsServiceNameUsersLogin<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>, TError = unknown>(
 serviceName: string,
    login: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLogin<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLogin<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameUsersLogin<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersLoginQueryOptions(serviceName,login,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putSmsServiceNameUsersLogin = (
    serviceName: string,
    login: string,
    smsUserOVH: NonReadonly<SmsUserOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/users/${login}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: smsUserOVH
    },
      options);
    }
  


export const getPutSmsServiceNameUsersLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameUsersLogin>>, TError,{serviceName: string;login: string;data: NonReadonly<SmsUserOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameUsersLogin>>, TError,{serviceName: string;login: string;data: NonReadonly<SmsUserOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsServiceNameUsersLogin>>, {serviceName: string;login: string;data: NonReadonly<SmsUserOVH>}> = (props) => {
          const {serviceName,login,data} = props ?? {};

          return  putSmsServiceNameUsersLogin(serviceName,login,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsServiceNameUsersLoginMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsServiceNameUsersLogin>>>
    export type PutSmsServiceNameUsersLoginMutationBody = NonReadonly<SmsUserOVH>
    export type PutSmsServiceNameUsersLoginMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutSmsServiceNameUsersLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameUsersLogin>>, TError,{serviceName: string;login: string;data: NonReadonly<SmsUserOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsServiceNameUsersLogin>>,
        TError,
        {serviceName: string;login: string;data: NonReadonly<SmsUserOVH>},
        TContext
      > => {

      const mutationOptions = getPutSmsServiceNameUsersLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the /me/document id generated
 */
export const getSmsServiceNameUsersLoginDocument = (
    serviceName: string,
    login: string,
    params: GetSmsServiceNameUsersLoginDocumentParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/sms/${serviceName}/users/${login}/document`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersLoginDocumentQueryKey = (serviceName: string,
    login: string,
    params: GetSmsServiceNameUsersLoginDocumentParams,) => {
    return [`/sms/${serviceName}/users/${login}/document`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameUsersLoginDocumentQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>, TError = unknown>(serviceName: string,
    login: string,
    params: GetSmsServiceNameUsersLoginDocumentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersLoginDocumentQueryKey(serviceName,login,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>> = ({ signal }) => getSmsServiceNameUsersLoginDocument(serviceName,login,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersLoginDocumentQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>>
export type GetSmsServiceNameUsersLoginDocumentQueryError = unknown


export function useGetSmsServiceNameUsersLoginDocument<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>, TError = unknown>(
 serviceName: string,
    login: string,
    params: GetSmsServiceNameUsersLoginDocumentParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginDocument<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>, TError = unknown>(
 serviceName: string,
    login: string,
    params: GetSmsServiceNameUsersLoginDocumentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginDocument<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>, TError = unknown>(
 serviceName: string,
    login: string,
    params: GetSmsServiceNameUsersLoginDocumentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the /me/document id generated
 */

export function useGetSmsServiceNameUsersLoginDocument<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>, TError = unknown>(
 serviceName: string,
    login: string,
    params: GetSmsServiceNameUsersLoginDocumentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersLoginDocumentQueryOptions(serviceName,login,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Sms received associated to the sms user
 */
export const getSmsServiceNameUsersLoginIncoming = (
    serviceName: string,
    login: string,
    params?: GetSmsServiceNameUsersLoginIncomingParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/users/${login}/incoming`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersLoginIncomingQueryKey = (serviceName: string,
    login: string,
    params?: GetSmsServiceNameUsersLoginIncomingParams,) => {
    return [`/sms/${serviceName}/users/${login}/incoming`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameUsersLoginIncomingQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>, TError = unknown>(serviceName: string,
    login: string,
    params?: GetSmsServiceNameUsersLoginIncomingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersLoginIncomingQueryKey(serviceName,login,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>> = ({ signal }) => getSmsServiceNameUsersLoginIncoming(serviceName,login,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersLoginIncomingQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>>
export type GetSmsServiceNameUsersLoginIncomingQueryError = unknown


export function useGetSmsServiceNameUsersLoginIncoming<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>, TError = unknown>(
 serviceName: string,
    login: string,
    params: undefined |  GetSmsServiceNameUsersLoginIncomingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginIncoming<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>, TError = unknown>(
 serviceName: string,
    login: string,
    params?: GetSmsServiceNameUsersLoginIncomingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginIncoming<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>, TError = unknown>(
 serviceName: string,
    login: string,
    params?: GetSmsServiceNameUsersLoginIncomingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Sms received associated to the sms user
 */

export function useGetSmsServiceNameUsersLoginIncoming<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>, TError = unknown>(
 serviceName: string,
    login: string,
    params?: GetSmsServiceNameUsersLoginIncomingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncoming>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersLoginIncomingQueryOptions(serviceName,login,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the sms incoming history given
 */
export const deleteSmsServiceNameUsersLoginIncomingId = (
    serviceName: string,
    login: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/users/${login}/incoming/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameUsersLoginIncomingIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginIncomingId>>, TError,{serviceName: string;login: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginIncomingId>>, TError,{serviceName: string;login: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginIncomingId>>, {serviceName: string;login: string;id: number}> = (props) => {
          const {serviceName,login,id} = props ?? {};

          return  deleteSmsServiceNameUsersLoginIncomingId(serviceName,login,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameUsersLoginIncomingIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginIncomingId>>>
    
    export type DeleteSmsServiceNameUsersLoginIncomingIdMutationError = unknown

    /**
 * @summary Delete the sms incoming history given
 */
export const useDeleteSmsServiceNameUsersLoginIncomingId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginIncomingId>>, TError,{serviceName: string;login: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginIncomingId>>,
        TError,
        {serviceName: string;login: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameUsersLoginIncomingIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameUsersLoginIncomingId = (
    serviceName: string,
    login: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsIncomingOVH>(
      {url: `/sms/${serviceName}/users/${login}/incoming/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersLoginIncomingIdQueryKey = (serviceName: string,
    login: string,
    id: number,) => {
    return [`/sms/${serviceName}/users/${login}/incoming/${id}`] as const;
    }

    
export const getGetSmsServiceNameUsersLoginIncomingIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>, TError = unknown>(serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersLoginIncomingIdQueryKey(serviceName,login,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>> = ({ signal }) => getSmsServiceNameUsersLoginIncomingId(serviceName,login,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersLoginIncomingIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>>
export type GetSmsServiceNameUsersLoginIncomingIdQueryError = unknown


export function useGetSmsServiceNameUsersLoginIncomingId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginIncomingId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginIncomingId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameUsersLoginIncomingId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginIncomingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersLoginIncomingIdQueryOptions(serviceName,login,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Sms in pending associated to the sms user
 */
export const getSmsServiceNameUsersLoginJobs = (
    serviceName: string,
    login: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/users/${login}/jobs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersLoginJobsQueryKey = (serviceName: string,
    login: string,) => {
    return [`/sms/${serviceName}/users/${login}/jobs`] as const;
    }

    
export const getGetSmsServiceNameUsersLoginJobsQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>, TError = unknown>(serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersLoginJobsQueryKey(serviceName,login);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>> = ({ signal }) => getSmsServiceNameUsersLoginJobs(serviceName,login, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersLoginJobsQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>>
export type GetSmsServiceNameUsersLoginJobsQueryError = unknown


export function useGetSmsServiceNameUsersLoginJobs<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>, TError = unknown>(
 serviceName: string,
    login: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginJobs<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginJobs<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Sms in pending associated to the sms user
 */

export function useGetSmsServiceNameUsersLoginJobs<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersLoginJobsQueryOptions(serviceName,login,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add one or several sending jobs
 */
export const postSmsServiceNameUsersLoginJobs = (
    serviceName: string,
    login: string,
    postSmsServiceNameUsersLoginJobsBody: PostSmsServiceNameUsersLoginJobsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsSmsSendingReportOVH>(
      {url: `/sms/${serviceName}/users/${login}/jobs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameUsersLoginJobsBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameUsersLoginJobsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginJobs>>, TError,{serviceName: string;login: string;data: PostSmsServiceNameUsersLoginJobsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginJobs>>, TError,{serviceName: string;login: string;data: PostSmsServiceNameUsersLoginJobsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginJobs>>, {serviceName: string;login: string;data: PostSmsServiceNameUsersLoginJobsBody}> = (props) => {
          const {serviceName,login,data} = props ?? {};

          return  postSmsServiceNameUsersLoginJobs(serviceName,login,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameUsersLoginJobsMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginJobs>>>
    export type PostSmsServiceNameUsersLoginJobsMutationBody = PostSmsServiceNameUsersLoginJobsBody
    export type PostSmsServiceNameUsersLoginJobsMutationError = unknown

    /**
 * @summary Add one or several sending jobs
 */
export const usePostSmsServiceNameUsersLoginJobs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginJobs>>, TError,{serviceName: string;login: string;data: PostSmsServiceNameUsersLoginJobsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameUsersLoginJobs>>,
        TError,
        {serviceName: string;login: string;data: PostSmsServiceNameUsersLoginJobsBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameUsersLoginJobsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the sms job given (stop sending)
 */
export const deleteSmsServiceNameUsersLoginJobsId = (
    serviceName: string,
    login: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/users/${login}/jobs/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameUsersLoginJobsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginJobsId>>, TError,{serviceName: string;login: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginJobsId>>, TError,{serviceName: string;login: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginJobsId>>, {serviceName: string;login: string;id: number}> = (props) => {
          const {serviceName,login,id} = props ?? {};

          return  deleteSmsServiceNameUsersLoginJobsId(serviceName,login,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameUsersLoginJobsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginJobsId>>>
    
    export type DeleteSmsServiceNameUsersLoginJobsIdMutationError = unknown

    /**
 * @summary Delete the sms job given (stop sending)
 */
export const useDeleteSmsServiceNameUsersLoginJobsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginJobsId>>, TError,{serviceName: string;login: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginJobsId>>,
        TError,
        {serviceName: string;login: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameUsersLoginJobsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameUsersLoginJobsId = (
    serviceName: string,
    login: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsJobOVH>(
      {url: `/sms/${serviceName}/users/${login}/jobs/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersLoginJobsIdQueryKey = (serviceName: string,
    login: string,
    id: number,) => {
    return [`/sms/${serviceName}/users/${login}/jobs/${id}`] as const;
    }

    
export const getGetSmsServiceNameUsersLoginJobsIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>, TError = unknown>(serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersLoginJobsIdQueryKey(serviceName,login,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>> = ({ signal }) => getSmsServiceNameUsersLoginJobsId(serviceName,login,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersLoginJobsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>>
export type GetSmsServiceNameUsersLoginJobsIdQueryError = unknown


export function useGetSmsServiceNameUsersLoginJobsId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginJobsId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginJobsId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameUsersLoginJobsId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginJobsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersLoginJobsIdQueryOptions(serviceName,login,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Sms sent associated to the sms user
 */
export const getSmsServiceNameUsersLoginOutgoing = (
    serviceName: string,
    login: string,
    params?: GetSmsServiceNameUsersLoginOutgoingParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/users/${login}/outgoing`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersLoginOutgoingQueryKey = (serviceName: string,
    login: string,
    params?: GetSmsServiceNameUsersLoginOutgoingParams,) => {
    return [`/sms/${serviceName}/users/${login}/outgoing`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameUsersLoginOutgoingQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>, TError = unknown>(serviceName: string,
    login: string,
    params?: GetSmsServiceNameUsersLoginOutgoingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersLoginOutgoingQueryKey(serviceName,login,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>> = ({ signal }) => getSmsServiceNameUsersLoginOutgoing(serviceName,login,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersLoginOutgoingQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>>
export type GetSmsServiceNameUsersLoginOutgoingQueryError = unknown


export function useGetSmsServiceNameUsersLoginOutgoing<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>, TError = unknown>(
 serviceName: string,
    login: string,
    params: undefined |  GetSmsServiceNameUsersLoginOutgoingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginOutgoing<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>, TError = unknown>(
 serviceName: string,
    login: string,
    params?: GetSmsServiceNameUsersLoginOutgoingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginOutgoing<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>, TError = unknown>(
 serviceName: string,
    login: string,
    params?: GetSmsServiceNameUsersLoginOutgoingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Sms sent associated to the sms user
 */

export function useGetSmsServiceNameUsersLoginOutgoing<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>, TError = unknown>(
 serviceName: string,
    login: string,
    params?: GetSmsServiceNameUsersLoginOutgoingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersLoginOutgoingQueryOptions(serviceName,login,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the sms outgoing history given
 */
export const deleteSmsServiceNameUsersLoginOutgoingId = (
    serviceName: string,
    login: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/users/${login}/outgoing/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameUsersLoginOutgoingIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginOutgoingId>>, TError,{serviceName: string;login: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginOutgoingId>>, TError,{serviceName: string;login: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginOutgoingId>>, {serviceName: string;login: string;id: number}> = (props) => {
          const {serviceName,login,id} = props ?? {};

          return  deleteSmsServiceNameUsersLoginOutgoingId(serviceName,login,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameUsersLoginOutgoingIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginOutgoingId>>>
    
    export type DeleteSmsServiceNameUsersLoginOutgoingIdMutationError = unknown

    /**
 * @summary Delete the sms outgoing history given
 */
export const useDeleteSmsServiceNameUsersLoginOutgoingId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginOutgoingId>>, TError,{serviceName: string;login: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginOutgoingId>>,
        TError,
        {serviceName: string;login: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameUsersLoginOutgoingIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameUsersLoginOutgoingId = (
    serviceName: string,
    login: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsOutgoingOVH>(
      {url: `/sms/${serviceName}/users/${login}/outgoing/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersLoginOutgoingIdQueryKey = (serviceName: string,
    login: string,
    id: number,) => {
    return [`/sms/${serviceName}/users/${login}/outgoing/${id}`] as const;
    }

    
export const getGetSmsServiceNameUsersLoginOutgoingIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>, TError = unknown>(serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersLoginOutgoingIdQueryKey(serviceName,login,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>> = ({ signal }) => getSmsServiceNameUsersLoginOutgoingId(serviceName,login,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersLoginOutgoingIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>>
export type GetSmsServiceNameUsersLoginOutgoingIdQueryError = unknown


export function useGetSmsServiceNameUsersLoginOutgoingId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginOutgoingId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginOutgoingId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameUsersLoginOutgoingId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersLoginOutgoingIdQueryOptions(serviceName,login,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getSmsServiceNameUsersLoginOutgoingIdHlr = (
    serviceName: string,
    login: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsHlrOVH>(
      {url: `/sms/${serviceName}/users/${login}/outgoing/${id}/hlr`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersLoginOutgoingIdHlrQueryKey = (serviceName: string,
    login: string,
    id: number,) => {
    return [`/sms/${serviceName}/users/${login}/outgoing/${id}/hlr`] as const;
    }

    
export const getGetSmsServiceNameUsersLoginOutgoingIdHlrQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>, TError = unknown>(serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersLoginOutgoingIdHlrQueryKey(serviceName,login,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>> = ({ signal }) => getSmsServiceNameUsersLoginOutgoingIdHlr(serviceName,login,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersLoginOutgoingIdHlrQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>>
export type GetSmsServiceNameUsersLoginOutgoingIdHlrQueryError = unknown


export function useGetSmsServiceNameUsersLoginOutgoingIdHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginOutgoingIdHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginOutgoingIdHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameUsersLoginOutgoingIdHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>, TError = unknown>(
 serviceName: string,
    login: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginOutgoingIdHlr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersLoginOutgoingIdHlrQueryOptions(serviceName,login,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Receivers preloaded from text or csv document file
 */
export const getSmsServiceNameUsersLoginReceivers = (
    serviceName: string,
    login: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/users/${login}/receivers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersLoginReceiversQueryKey = (serviceName: string,
    login: string,) => {
    return [`/sms/${serviceName}/users/${login}/receivers`] as const;
    }

    
export const getGetSmsServiceNameUsersLoginReceiversQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>, TError = unknown>(serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersLoginReceiversQueryKey(serviceName,login);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>> = ({ signal }) => getSmsServiceNameUsersLoginReceivers(serviceName,login, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersLoginReceiversQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>>
export type GetSmsServiceNameUsersLoginReceiversQueryError = unknown


export function useGetSmsServiceNameUsersLoginReceivers<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>, TError = unknown>(
 serviceName: string,
    login: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginReceivers<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginReceivers<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Receivers preloaded from text or csv document file
 */

export function useGetSmsServiceNameUsersLoginReceivers<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceivers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersLoginReceiversQueryOptions(serviceName,login,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new document of csv receivers
 */
export const postSmsServiceNameUsersLoginReceivers = (
    serviceName: string,
    login: string,
    postSmsServiceNameUsersLoginReceiversBody: PostSmsServiceNameUsersLoginReceiversBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsReceiverOVH>(
      {url: `/sms/${serviceName}/users/${login}/receivers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameUsersLoginReceiversBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameUsersLoginReceiversMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginReceivers>>, TError,{serviceName: string;login: string;data: PostSmsServiceNameUsersLoginReceiversBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginReceivers>>, TError,{serviceName: string;login: string;data: PostSmsServiceNameUsersLoginReceiversBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginReceivers>>, {serviceName: string;login: string;data: PostSmsServiceNameUsersLoginReceiversBody}> = (props) => {
          const {serviceName,login,data} = props ?? {};

          return  postSmsServiceNameUsersLoginReceivers(serviceName,login,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameUsersLoginReceiversMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginReceivers>>>
    export type PostSmsServiceNameUsersLoginReceiversMutationBody = PostSmsServiceNameUsersLoginReceiversBody
    export type PostSmsServiceNameUsersLoginReceiversMutationError = unknown

    /**
 * @summary Add a new document of csv receivers
 */
export const usePostSmsServiceNameUsersLoginReceivers = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginReceivers>>, TError,{serviceName: string;login: string;data: PostSmsServiceNameUsersLoginReceiversBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameUsersLoginReceivers>>,
        TError,
        {serviceName: string;login: string;data: PostSmsServiceNameUsersLoginReceiversBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameUsersLoginReceiversMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the document from the slot
 */
export const deleteSmsServiceNameUsersLoginReceiversSlotId = (
    serviceName: string,
    login: string,
    slotId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/users/${login}/receivers/${slotId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameUsersLoginReceiversSlotIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginReceiversSlotId>>, TError,{serviceName: string;login: string;slotId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginReceiversSlotId>>, TError,{serviceName: string;login: string;slotId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginReceiversSlotId>>, {serviceName: string;login: string;slotId: number}> = (props) => {
          const {serviceName,login,slotId} = props ?? {};

          return  deleteSmsServiceNameUsersLoginReceiversSlotId(serviceName,login,slotId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameUsersLoginReceiversSlotIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginReceiversSlotId>>>
    
    export type DeleteSmsServiceNameUsersLoginReceiversSlotIdMutationError = unknown

    /**
 * @summary Delete the document from the slot
 */
export const useDeleteSmsServiceNameUsersLoginReceiversSlotId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginReceiversSlotId>>, TError,{serviceName: string;login: string;slotId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameUsersLoginReceiversSlotId>>,
        TError,
        {serviceName: string;login: string;slotId: number},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameUsersLoginReceiversSlotIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameUsersLoginReceiversSlotId = (
    serviceName: string,
    login: string,
    slotId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsReceiverOVH>(
      {url: `/sms/${serviceName}/users/${login}/receivers/${slotId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersLoginReceiversSlotIdQueryKey = (serviceName: string,
    login: string,
    slotId: number,) => {
    return [`/sms/${serviceName}/users/${login}/receivers/${slotId}`] as const;
    }

    
export const getGetSmsServiceNameUsersLoginReceiversSlotIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>, TError = unknown>(serviceName: string,
    login: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersLoginReceiversSlotIdQueryKey(serviceName,login,slotId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>> = ({ signal }) => getSmsServiceNameUsersLoginReceiversSlotId(serviceName,login,slotId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login && slotId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersLoginReceiversSlotIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>>
export type GetSmsServiceNameUsersLoginReceiversSlotIdQueryError = unknown


export function useGetSmsServiceNameUsersLoginReceiversSlotId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>, TError = unknown>(
 serviceName: string,
    login: string,
    slotId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginReceiversSlotId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>, TError = unknown>(
 serviceName: string,
    login: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginReceiversSlotId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>, TError = unknown>(
 serviceName: string,
    login: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameUsersLoginReceiversSlotId<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>, TError = unknown>(
 serviceName: string,
    login: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersLoginReceiversSlotIdQueryOptions(serviceName,login,slotId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putSmsServiceNameUsersLoginReceiversSlotId = (
    serviceName: string,
    login: string,
    slotId: number,
    smsReceiverOVH: NonReadonly<SmsReceiverOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/users/${login}/receivers/${slotId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: smsReceiverOVH
    },
      options);
    }
  


export const getPutSmsServiceNameUsersLoginReceiversSlotIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameUsersLoginReceiversSlotId>>, TError,{serviceName: string;login: string;slotId: number;data: NonReadonly<SmsReceiverOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameUsersLoginReceiversSlotId>>, TError,{serviceName: string;login: string;slotId: number;data: NonReadonly<SmsReceiverOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSmsServiceNameUsersLoginReceiversSlotId>>, {serviceName: string;login: string;slotId: number;data: NonReadonly<SmsReceiverOVH>}> = (props) => {
          const {serviceName,login,slotId,data} = props ?? {};

          return  putSmsServiceNameUsersLoginReceiversSlotId(serviceName,login,slotId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSmsServiceNameUsersLoginReceiversSlotIdMutationResult = NonNullable<Awaited<ReturnType<typeof putSmsServiceNameUsersLoginReceiversSlotId>>>
    export type PutSmsServiceNameUsersLoginReceiversSlotIdMutationBody = NonReadonly<SmsReceiverOVH>
    export type PutSmsServiceNameUsersLoginReceiversSlotIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutSmsServiceNameUsersLoginReceiversSlotId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSmsServiceNameUsersLoginReceiversSlotId>>, TError,{serviceName: string;login: string;slotId: number;data: NonReadonly<SmsReceiverOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSmsServiceNameUsersLoginReceiversSlotId>>,
        TError,
        {serviceName: string;login: string;slotId: number;data: NonReadonly<SmsReceiverOVH>},
        TContext
      > => {

      const mutationOptions = getPutSmsServiceNameUsersLoginReceiversSlotIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Clean the invalid and inactive receivers in the document by requesting HLR on each receiver. A report is sent by e-mail at the end of the operation.
 * @summary Clean the invalid and inactive receivers in the document by requesting HLR on each receiver
 */
export const postSmsServiceNameUsersLoginReceiversSlotIdClean = (
    serviceName: string,
    login: string,
    slotId: number,
    postSmsServiceNameUsersLoginReceiversSlotIdCleanBody: PostSmsServiceNameUsersLoginReceiversSlotIdCleanBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsReceiversAsynchronousCleanReportOVH>(
      {url: `/sms/${serviceName}/users/${login}/receivers/${slotId}/clean`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameUsersLoginReceiversSlotIdCleanBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameUsersLoginReceiversSlotIdCleanMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginReceiversSlotIdClean>>, TError,{serviceName: string;login: string;slotId: number;data: PostSmsServiceNameUsersLoginReceiversSlotIdCleanBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginReceiversSlotIdClean>>, TError,{serviceName: string;login: string;slotId: number;data: PostSmsServiceNameUsersLoginReceiversSlotIdCleanBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginReceiversSlotIdClean>>, {serviceName: string;login: string;slotId: number;data: PostSmsServiceNameUsersLoginReceiversSlotIdCleanBody}> = (props) => {
          const {serviceName,login,slotId,data} = props ?? {};

          return  postSmsServiceNameUsersLoginReceiversSlotIdClean(serviceName,login,slotId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameUsersLoginReceiversSlotIdCleanMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginReceiversSlotIdClean>>>
    export type PostSmsServiceNameUsersLoginReceiversSlotIdCleanMutationBody = PostSmsServiceNameUsersLoginReceiversSlotIdCleanBody
    export type PostSmsServiceNameUsersLoginReceiversSlotIdCleanMutationError = unknown

    /**
 * @summary Clean the invalid and inactive receivers in the document by requesting HLR on each receiver
 */
export const usePostSmsServiceNameUsersLoginReceiversSlotIdClean = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameUsersLoginReceiversSlotIdClean>>, TError,{serviceName: string;login: string;slotId: number;data: PostSmsServiceNameUsersLoginReceiversSlotIdCleanBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameUsersLoginReceiversSlotIdClean>>,
        TError,
        {serviceName: string;login: string;slotId: number;data: PostSmsServiceNameUsersLoginReceiversSlotIdCleanBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameUsersLoginReceiversSlotIdCleanMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the document data container
 */
export const getSmsServiceNameUsersLoginReceiversSlotIdCsv = (
    serviceName: string,
    login: string,
    slotId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/sms/${serviceName}/users/${login}/receivers/${slotId}/csv`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameUsersLoginReceiversSlotIdCsvQueryKey = (serviceName: string,
    login: string,
    slotId: number,) => {
    return [`/sms/${serviceName}/users/${login}/receivers/${slotId}/csv`] as const;
    }

    
export const getGetSmsServiceNameUsersLoginReceiversSlotIdCsvQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>, TError = unknown>(serviceName: string,
    login: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameUsersLoginReceiversSlotIdCsvQueryKey(serviceName,login,slotId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>> = ({ signal }) => getSmsServiceNameUsersLoginReceiversSlotIdCsv(serviceName,login,slotId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login && slotId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameUsersLoginReceiversSlotIdCsvQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>>
export type GetSmsServiceNameUsersLoginReceiversSlotIdCsvQueryError = unknown


export function useGetSmsServiceNameUsersLoginReceiversSlotIdCsv<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>, TError = unknown>(
 serviceName: string,
    login: string,
    slotId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginReceiversSlotIdCsv<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>, TError = unknown>(
 serviceName: string,
    login: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameUsersLoginReceiversSlotIdCsv<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>, TError = unknown>(
 serviceName: string,
    login: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the document data container
 */

export function useGetSmsServiceNameUsersLoginReceiversSlotIdCsv<TData = Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>, TError = unknown>(
 serviceName: string,
    login: string,
    slotId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameUsersLoginReceiversSlotIdCsv>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameUsersLoginReceiversSlotIdCsvQueryOptions(serviceName,login,slotId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Virtual numbers associated to the sms account
 */
export const getSmsServiceNameVirtualNumbers = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/sms/${serviceName}/virtualNumbers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameVirtualNumbersQueryKey = (serviceName: string,) => {
    return [`/sms/${serviceName}/virtualNumbers`] as const;
    }

    
export const getGetSmsServiceNameVirtualNumbersQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameVirtualNumbersQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>> = ({ signal }) => getSmsServiceNameVirtualNumbers(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameVirtualNumbersQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>>
export type GetSmsServiceNameVirtualNumbersQueryError = unknown


export function useGetSmsServiceNameVirtualNumbers<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbers<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbers<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Virtual numbers associated to the sms account
 */

export function useGetSmsServiceNameVirtualNumbers<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameVirtualNumbersQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getSmsServiceNameVirtualNumbersNumber = (
    serviceName: string,
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsVirtualNumberOVH>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameVirtualNumbersNumberQueryKey = (serviceName: string,
    number: string,) => {
    return [`/sms/${serviceName}/virtualNumbers/${number}`] as const;
    }

    
export const getGetSmsServiceNameVirtualNumbersNumberQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>, TError = unknown>(serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameVirtualNumbersNumberQueryKey(serviceName,number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>> = ({ signal }) => getSmsServiceNameVirtualNumbersNumber(serviceName,number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameVirtualNumbersNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>>
export type GetSmsServiceNameVirtualNumbersNumberQueryError = unknown


export function useGetSmsServiceNameVirtualNumbersNumber<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>, TError = unknown>(
 serviceName: string,
    number: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumber<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumber<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameVirtualNumbersNumber<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameVirtualNumbersNumberQueryOptions(serviceName,number,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the given web access
 */
export const deleteSmsServiceNameVirtualNumbersNumberChatAccess = (
    serviceName: string,
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/chatAccess`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameVirtualNumbersNumberChatAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberChatAccess>>, TError,{serviceName: string;number: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberChatAccess>>, TError,{serviceName: string;number: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberChatAccess>>, {serviceName: string;number: string}> = (props) => {
          const {serviceName,number} = props ?? {};

          return  deleteSmsServiceNameVirtualNumbersNumberChatAccess(serviceName,number,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameVirtualNumbersNumberChatAccessMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberChatAccess>>>
    
    export type DeleteSmsServiceNameVirtualNumbersNumberChatAccessMutationError = unknown

    /**
 * @summary Delete the given web access
 */
export const useDeleteSmsServiceNameVirtualNumbersNumberChatAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberChatAccess>>, TError,{serviceName: string;number: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberChatAccess>>,
        TError,
        {serviceName: string;number: string},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameVirtualNumbersNumberChatAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameVirtualNumbersNumberChatAccess = (
    serviceName: string,
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsChatAccessOVH>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/chatAccess`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameVirtualNumbersNumberChatAccessQueryKey = (serviceName: string,
    number: string,) => {
    return [`/sms/${serviceName}/virtualNumbers/${number}/chatAccess`] as const;
    }

    
export const getGetSmsServiceNameVirtualNumbersNumberChatAccessQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>, TError = unknown>(serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameVirtualNumbersNumberChatAccessQueryKey(serviceName,number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>> = ({ signal }) => getSmsServiceNameVirtualNumbersNumberChatAccess(serviceName,number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameVirtualNumbersNumberChatAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>>
export type GetSmsServiceNameVirtualNumbersNumberChatAccessQueryError = unknown


export function useGetSmsServiceNameVirtualNumbersNumberChatAccess<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>, TError = unknown>(
 serviceName: string,
    number: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberChatAccess<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberChatAccess<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameVirtualNumbersNumberChatAccess<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberChatAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameVirtualNumbersNumberChatAccessQueryOptions(serviceName,number,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new web access for this ressource
 */
export const postSmsServiceNameVirtualNumbersNumberChatAccess = (
    serviceName: string,
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsChatAccessOVH>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/chatAccess`, method: 'POST', signal
    },
      options);
    }
  


export const getPostSmsServiceNameVirtualNumbersNumberChatAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameVirtualNumbersNumberChatAccess>>, TError,{serviceName: string;number: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameVirtualNumbersNumberChatAccess>>, TError,{serviceName: string;number: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameVirtualNumbersNumberChatAccess>>, {serviceName: string;number: string}> = (props) => {
          const {serviceName,number} = props ?? {};

          return  postSmsServiceNameVirtualNumbersNumberChatAccess(serviceName,number,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameVirtualNumbersNumberChatAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameVirtualNumbersNumberChatAccess>>>
    
    export type PostSmsServiceNameVirtualNumbersNumberChatAccessMutationError = unknown

    /**
 * @summary Create a new web access for this ressource
 */
export const usePostSmsServiceNameVirtualNumbersNumberChatAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameVirtualNumbersNumberChatAccess>>, TError,{serviceName: string;number: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameVirtualNumbersNumberChatAccess>>,
        TError,
        {serviceName: string;number: string},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameVirtualNumbersNumberChatAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Sms received associated to the sms account
 */
export const getSmsServiceNameVirtualNumbersNumberIncoming = (
    serviceName: string,
    number: string,
    params?: GetSmsServiceNameVirtualNumbersNumberIncomingParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/incoming`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameVirtualNumbersNumberIncomingQueryKey = (serviceName: string,
    number: string,
    params?: GetSmsServiceNameVirtualNumbersNumberIncomingParams,) => {
    return [`/sms/${serviceName}/virtualNumbers/${number}/incoming`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameVirtualNumbersNumberIncomingQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>, TError = unknown>(serviceName: string,
    number: string,
    params?: GetSmsServiceNameVirtualNumbersNumberIncomingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameVirtualNumbersNumberIncomingQueryKey(serviceName,number,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>> = ({ signal }) => getSmsServiceNameVirtualNumbersNumberIncoming(serviceName,number,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameVirtualNumbersNumberIncomingQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>>
export type GetSmsServiceNameVirtualNumbersNumberIncomingQueryError = unknown


export function useGetSmsServiceNameVirtualNumbersNumberIncoming<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>, TError = unknown>(
 serviceName: string,
    number: string,
    params: undefined |  GetSmsServiceNameVirtualNumbersNumberIncomingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberIncoming<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>, TError = unknown>(
 serviceName: string,
    number: string,
    params?: GetSmsServiceNameVirtualNumbersNumberIncomingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberIncoming<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>, TError = unknown>(
 serviceName: string,
    number: string,
    params?: GetSmsServiceNameVirtualNumbersNumberIncomingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Sms received associated to the sms account
 */

export function useGetSmsServiceNameVirtualNumbersNumberIncoming<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>, TError = unknown>(
 serviceName: string,
    number: string,
    params?: GetSmsServiceNameVirtualNumbersNumberIncomingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncoming>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameVirtualNumbersNumberIncomingQueryOptions(serviceName,number,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the sms incoming history given
 */
export const deleteSmsServiceNameVirtualNumbersNumberIncomingId = (
    serviceName: string,
    number: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/incoming/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameVirtualNumbersNumberIncomingIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberIncomingId>>, TError,{serviceName: string;number: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberIncomingId>>, TError,{serviceName: string;number: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberIncomingId>>, {serviceName: string;number: string;id: number}> = (props) => {
          const {serviceName,number,id} = props ?? {};

          return  deleteSmsServiceNameVirtualNumbersNumberIncomingId(serviceName,number,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameVirtualNumbersNumberIncomingIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberIncomingId>>>
    
    export type DeleteSmsServiceNameVirtualNumbersNumberIncomingIdMutationError = unknown

    /**
 * @summary Delete the sms incoming history given
 */
export const useDeleteSmsServiceNameVirtualNumbersNumberIncomingId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberIncomingId>>, TError,{serviceName: string;number: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberIncomingId>>,
        TError,
        {serviceName: string;number: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameVirtualNumbersNumberIncomingIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameVirtualNumbersNumberIncomingId = (
    serviceName: string,
    number: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsIncomingOVH>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/incoming/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameVirtualNumbersNumberIncomingIdQueryKey = (serviceName: string,
    number: string,
    id: number,) => {
    return [`/sms/${serviceName}/virtualNumbers/${number}/incoming/${id}`] as const;
    }

    
export const getGetSmsServiceNameVirtualNumbersNumberIncomingIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>, TError = unknown>(serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameVirtualNumbersNumberIncomingIdQueryKey(serviceName,number,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>> = ({ signal }) => getSmsServiceNameVirtualNumbersNumberIncomingId(serviceName,number,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameVirtualNumbersNumberIncomingIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>>
export type GetSmsServiceNameVirtualNumbersNumberIncomingIdQueryError = unknown


export function useGetSmsServiceNameVirtualNumbersNumberIncomingId<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberIncomingId<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberIncomingId<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameVirtualNumbersNumberIncomingId<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberIncomingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameVirtualNumbersNumberIncomingIdQueryOptions(serviceName,number,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Sms in pending associated to the sms account
 */
export const getSmsServiceNameVirtualNumbersNumberJobs = (
    serviceName: string,
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/jobs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameVirtualNumbersNumberJobsQueryKey = (serviceName: string,
    number: string,) => {
    return [`/sms/${serviceName}/virtualNumbers/${number}/jobs`] as const;
    }

    
export const getGetSmsServiceNameVirtualNumbersNumberJobsQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>, TError = unknown>(serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameVirtualNumbersNumberJobsQueryKey(serviceName,number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>> = ({ signal }) => getSmsServiceNameVirtualNumbersNumberJobs(serviceName,number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameVirtualNumbersNumberJobsQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>>
export type GetSmsServiceNameVirtualNumbersNumberJobsQueryError = unknown


export function useGetSmsServiceNameVirtualNumbersNumberJobs<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>, TError = unknown>(
 serviceName: string,
    number: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberJobs<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberJobs<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Sms in pending associated to the sms account
 */

export function useGetSmsServiceNameVirtualNumbersNumberJobs<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameVirtualNumbersNumberJobsQueryOptions(serviceName,number,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add one or several sending jobs
 */
export const postSmsServiceNameVirtualNumbersNumberJobs = (
    serviceName: string,
    number: string,
    postSmsServiceNameVirtualNumbersNumberJobsBody: PostSmsServiceNameVirtualNumbersNumberJobsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsSmsSendingReportOVH>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/jobs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSmsServiceNameVirtualNumbersNumberJobsBody, signal
    },
      options);
    }
  


export const getPostSmsServiceNameVirtualNumbersNumberJobsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameVirtualNumbersNumberJobs>>, TError,{serviceName: string;number: string;data: PostSmsServiceNameVirtualNumbersNumberJobsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameVirtualNumbersNumberJobs>>, TError,{serviceName: string;number: string;data: PostSmsServiceNameVirtualNumbersNumberJobsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSmsServiceNameVirtualNumbersNumberJobs>>, {serviceName: string;number: string;data: PostSmsServiceNameVirtualNumbersNumberJobsBody}> = (props) => {
          const {serviceName,number,data} = props ?? {};

          return  postSmsServiceNameVirtualNumbersNumberJobs(serviceName,number,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSmsServiceNameVirtualNumbersNumberJobsMutationResult = NonNullable<Awaited<ReturnType<typeof postSmsServiceNameVirtualNumbersNumberJobs>>>
    export type PostSmsServiceNameVirtualNumbersNumberJobsMutationBody = PostSmsServiceNameVirtualNumbersNumberJobsBody
    export type PostSmsServiceNameVirtualNumbersNumberJobsMutationError = unknown

    /**
 * @summary Add one or several sending jobs
 */
export const usePostSmsServiceNameVirtualNumbersNumberJobs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSmsServiceNameVirtualNumbersNumberJobs>>, TError,{serviceName: string;number: string;data: PostSmsServiceNameVirtualNumbersNumberJobsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSmsServiceNameVirtualNumbersNumberJobs>>,
        TError,
        {serviceName: string;number: string;data: PostSmsServiceNameVirtualNumbersNumberJobsBody},
        TContext
      > => {

      const mutationOptions = getPostSmsServiceNameVirtualNumbersNumberJobsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the sms job given (stop sending)
 */
export const deleteSmsServiceNameVirtualNumbersNumberJobsId = (
    serviceName: string,
    number: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/jobs/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameVirtualNumbersNumberJobsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberJobsId>>, TError,{serviceName: string;number: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberJobsId>>, TError,{serviceName: string;number: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberJobsId>>, {serviceName: string;number: string;id: number}> = (props) => {
          const {serviceName,number,id} = props ?? {};

          return  deleteSmsServiceNameVirtualNumbersNumberJobsId(serviceName,number,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameVirtualNumbersNumberJobsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberJobsId>>>
    
    export type DeleteSmsServiceNameVirtualNumbersNumberJobsIdMutationError = unknown

    /**
 * @summary Delete the sms job given (stop sending)
 */
export const useDeleteSmsServiceNameVirtualNumbersNumberJobsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberJobsId>>, TError,{serviceName: string;number: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberJobsId>>,
        TError,
        {serviceName: string;number: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameVirtualNumbersNumberJobsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameVirtualNumbersNumberJobsId = (
    serviceName: string,
    number: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsVirtualNumberJobOVH>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/jobs/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameVirtualNumbersNumberJobsIdQueryKey = (serviceName: string,
    number: string,
    id: number,) => {
    return [`/sms/${serviceName}/virtualNumbers/${number}/jobs/${id}`] as const;
    }

    
export const getGetSmsServiceNameVirtualNumbersNumberJobsIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>, TError = unknown>(serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameVirtualNumbersNumberJobsIdQueryKey(serviceName,number,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>> = ({ signal }) => getSmsServiceNameVirtualNumbersNumberJobsId(serviceName,number,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameVirtualNumbersNumberJobsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>>
export type GetSmsServiceNameVirtualNumbersNumberJobsIdQueryError = unknown


export function useGetSmsServiceNameVirtualNumbersNumberJobsId<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberJobsId<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberJobsId<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameVirtualNumbersNumberJobsId<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberJobsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameVirtualNumbersNumberJobsIdQueryOptions(serviceName,number,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Sms sent associated to the sms account
 */
export const getSmsServiceNameVirtualNumbersNumberOutgoing = (
    serviceName: string,
    number: string,
    params?: GetSmsServiceNameVirtualNumbersNumberOutgoingParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/outgoing`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSmsServiceNameVirtualNumbersNumberOutgoingQueryKey = (serviceName: string,
    number: string,
    params?: GetSmsServiceNameVirtualNumbersNumberOutgoingParams,) => {
    return [`/sms/${serviceName}/virtualNumbers/${number}/outgoing`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSmsServiceNameVirtualNumbersNumberOutgoingQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>, TError = unknown>(serviceName: string,
    number: string,
    params?: GetSmsServiceNameVirtualNumbersNumberOutgoingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameVirtualNumbersNumberOutgoingQueryKey(serviceName,number,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>> = ({ signal }) => getSmsServiceNameVirtualNumbersNumberOutgoing(serviceName,number,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameVirtualNumbersNumberOutgoingQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>>
export type GetSmsServiceNameVirtualNumbersNumberOutgoingQueryError = unknown


export function useGetSmsServiceNameVirtualNumbersNumberOutgoing<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>, TError = unknown>(
 serviceName: string,
    number: string,
    params: undefined |  GetSmsServiceNameVirtualNumbersNumberOutgoingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberOutgoing<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>, TError = unknown>(
 serviceName: string,
    number: string,
    params?: GetSmsServiceNameVirtualNumbersNumberOutgoingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberOutgoing<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>, TError = unknown>(
 serviceName: string,
    number: string,
    params?: GetSmsServiceNameVirtualNumbersNumberOutgoingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Sms sent associated to the sms account
 */

export function useGetSmsServiceNameVirtualNumbersNumberOutgoing<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>, TError = unknown>(
 serviceName: string,
    number: string,
    params?: GetSmsServiceNameVirtualNumbersNumberOutgoingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameVirtualNumbersNumberOutgoingQueryOptions(serviceName,number,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the sms outgoing history given
 */
export const deleteSmsServiceNameVirtualNumbersNumberOutgoingId = (
    serviceName: string,
    number: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/outgoing/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSmsServiceNameVirtualNumbersNumberOutgoingIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError,{serviceName: string;number: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError,{serviceName: string;number: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberOutgoingId>>, {serviceName: string;number: string;id: number}> = (props) => {
          const {serviceName,number,id} = props ?? {};

          return  deleteSmsServiceNameVirtualNumbersNumberOutgoingId(serviceName,number,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSmsServiceNameVirtualNumbersNumberOutgoingIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberOutgoingId>>>
    
    export type DeleteSmsServiceNameVirtualNumbersNumberOutgoingIdMutationError = unknown

    /**
 * @summary Delete the sms outgoing history given
 */
export const useDeleteSmsServiceNameVirtualNumbersNumberOutgoingId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError,{serviceName: string;number: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSmsServiceNameVirtualNumbersNumberOutgoingId>>,
        TError,
        {serviceName: string;number: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSmsServiceNameVirtualNumbersNumberOutgoingIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSmsServiceNameVirtualNumbersNumberOutgoingId = (
    serviceName: string,
    number: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsOutgoingOVH>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/outgoing/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameVirtualNumbersNumberOutgoingIdQueryKey = (serviceName: string,
    number: string,
    id: number,) => {
    return [`/sms/${serviceName}/virtualNumbers/${number}/outgoing/${id}`] as const;
    }

    
export const getGetSmsServiceNameVirtualNumbersNumberOutgoingIdQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError = unknown>(serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameVirtualNumbersNumberOutgoingIdQueryKey(serviceName,number,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>> = ({ signal }) => getSmsServiceNameVirtualNumbersNumberOutgoingId(serviceName,number,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameVirtualNumbersNumberOutgoingIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>>
export type GetSmsServiceNameVirtualNumbersNumberOutgoingIdQueryError = unknown


export function useGetSmsServiceNameVirtualNumbersNumberOutgoingId<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberOutgoingId<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberOutgoingId<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameVirtualNumbersNumberOutgoingId<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameVirtualNumbersNumberOutgoingIdQueryOptions(serviceName,number,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr = (
    serviceName: string,
    number: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SmsHlrOVH>(
      {url: `/sms/${serviceName}/virtualNumbers/${number}/outgoing/${id}/hlr`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSmsServiceNameVirtualNumbersNumberOutgoingIdHlrQueryKey = (serviceName: string,
    number: string,
    id: number,) => {
    return [`/sms/${serviceName}/virtualNumbers/${number}/outgoing/${id}/hlr`] as const;
    }

    
export const getGetSmsServiceNameVirtualNumbersNumberOutgoingIdHlrQueryOptions = <TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>, TError = unknown>(serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSmsServiceNameVirtualNumbersNumberOutgoingIdHlrQueryKey(serviceName,number,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>> = ({ signal }) => getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr(serviceName,number,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSmsServiceNameVirtualNumbersNumberOutgoingIdHlrQueryResult = NonNullable<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>>
export type GetSmsServiceNameVirtualNumbersNumberOutgoingIdHlrQueryError = unknown


export function useGetSmsServiceNameVirtualNumbersNumberOutgoingIdHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberOutgoingIdHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSmsServiceNameVirtualNumbersNumberOutgoingIdHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSmsServiceNameVirtualNumbersNumberOutgoingIdHlr<TData = Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>, TError = unknown>(
 serviceName: string,
    number: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSmsServiceNameVirtualNumbersNumberOutgoingIdHlr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSmsServiceNameVirtualNumbersNumberOutgoingIdHlrQueryOptions(serviceName,number,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





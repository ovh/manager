/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetNutanixAvailabilitiesParams,
  GetNutanixAvailabilitiesRawParams,
  GetNutanixAvailableVersionsParams,
  GetNutanixParams,
  GetNutanixRequirementsParams,
  NutanixAvailabilitiesRawOVH,
  NutanixAvailabilityOVH,
  NutanixClusterOVH,
  NutanixDeployOVH,
  NutanixNodeDetailsOVH,
  NutanixReinstallOVH,
  NutanixRequirementsOVH,
  NutanixStateOVH,
  NutanixStateWithIAMOVH,
  PutNutanixServiceNameParams,
  ServicesChangeContactOVH,
  ServicesConfirmTerminationOVH,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get list of owned Nutanix Clusters
 */
export const getNutanix = (
    params?: GetNutanixParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/nutanix`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNutanixQueryKey = (params?: GetNutanixParams,) => {
    return [`/nutanix`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNutanixQueryOptions = <TData = Awaited<ReturnType<typeof getNutanix>>, TError = unknown>(params?: GetNutanixParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNutanixQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNutanix>>> = ({ signal }) => getNutanix(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNutanix>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNutanixQueryResult = NonNullable<Awaited<ReturnType<typeof getNutanix>>>
export type GetNutanixQueryError = unknown


export function useGetNutanix<TData = Awaited<ReturnType<typeof getNutanix>>, TError = unknown>(
 params: undefined |  GetNutanixParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanix>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanix<TData = Awaited<ReturnType<typeof getNutanix>>, TError = unknown>(
 params?: GetNutanixParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanix>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanix<TData = Awaited<ReturnType<typeof getNutanix>>, TError = unknown>(
 params?: GetNutanixParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of owned Nutanix Clusters
 */

export function useGetNutanix<TData = Awaited<ReturnType<typeof getNutanix>>, TError = unknown>(
 params?: GetNutanixParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNutanixQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Fetch the availabilities for a given cluster configuration
 */
export const getNutanixAvailabilities = (
    params: GetNutanixAvailabilitiesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NutanixAvailabilityOVH[]>(
      {url: `/nutanix/availabilities`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNutanixAvailabilitiesQueryKey = (params: GetNutanixAvailabilitiesParams,) => {
    return [`/nutanix/availabilities`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNutanixAvailabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getNutanixAvailabilities>>, TError = unknown>(params: GetNutanixAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNutanixAvailabilitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNutanixAvailabilities>>> = ({ signal }) => getNutanixAvailabilities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNutanixAvailabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getNutanixAvailabilities>>>
export type GetNutanixAvailabilitiesQueryError = unknown


export function useGetNutanixAvailabilities<TData = Awaited<ReturnType<typeof getNutanixAvailabilities>>, TError = unknown>(
 params: GetNutanixAvailabilitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixAvailabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixAvailabilities<TData = Awaited<ReturnType<typeof getNutanixAvailabilities>>, TError = unknown>(
 params: GetNutanixAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixAvailabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixAvailabilities<TData = Awaited<ReturnType<typeof getNutanixAvailabilities>>, TError = unknown>(
 params: GetNutanixAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Fetch the availabilities for a given cluster configuration
 */

export function useGetNutanixAvailabilities<TData = Awaited<ReturnType<typeof getNutanixAvailabilities>>, TError = unknown>(
 params: GetNutanixAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNutanixAvailabilitiesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List the raw availability for Nutanix cluster
 */
export const getNutanixAvailabilitiesRaw = (
    params: GetNutanixAvailabilitiesRawParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NutanixAvailabilitiesRawOVH[]>(
      {url: `/nutanix/availabilities/raw`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNutanixAvailabilitiesRawQueryKey = (params: GetNutanixAvailabilitiesRawParams,) => {
    return [`/nutanix/availabilities/raw`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNutanixAvailabilitiesRawQueryOptions = <TData = Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>, TError = unknown>(params: GetNutanixAvailabilitiesRawParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNutanixAvailabilitiesRawQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>> = ({ signal }) => getNutanixAvailabilitiesRaw(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNutanixAvailabilitiesRawQueryResult = NonNullable<Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>>
export type GetNutanixAvailabilitiesRawQueryError = unknown


export function useGetNutanixAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>, TError = unknown>(
 params: GetNutanixAvailabilitiesRawParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>, TError = unknown>(
 params: GetNutanixAvailabilitiesRawParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>, TError = unknown>(
 params: GetNutanixAvailabilitiesRawParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the raw availability for Nutanix cluster
 */

export function useGetNutanixAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>, TError = unknown>(
 params: GetNutanixAvailabilitiesRawParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailabilitiesRaw>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNutanixAvailabilitiesRawQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Fetch the available Nutanix versions to install
 */
export const getNutanixAvailableVersions = (
    params?: GetNutanixAvailableVersionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/nutanix/availableVersions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNutanixAvailableVersionsQueryKey = (params?: GetNutanixAvailableVersionsParams,) => {
    return [`/nutanix/availableVersions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNutanixAvailableVersionsQueryOptions = <TData = Awaited<ReturnType<typeof getNutanixAvailableVersions>>, TError = unknown>(params?: GetNutanixAvailableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNutanixAvailableVersionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNutanixAvailableVersions>>> = ({ signal }) => getNutanixAvailableVersions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailableVersions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNutanixAvailableVersionsQueryResult = NonNullable<Awaited<ReturnType<typeof getNutanixAvailableVersions>>>
export type GetNutanixAvailableVersionsQueryError = unknown


export function useGetNutanixAvailableVersions<TData = Awaited<ReturnType<typeof getNutanixAvailableVersions>>, TError = unknown>(
 params: undefined |  GetNutanixAvailableVersionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailableVersions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixAvailableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixAvailableVersions<TData = Awaited<ReturnType<typeof getNutanixAvailableVersions>>, TError = unknown>(
 params?: GetNutanixAvailableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailableVersions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixAvailableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixAvailableVersions<TData = Awaited<ReturnType<typeof getNutanixAvailableVersions>>, TError = unknown>(
 params?: GetNutanixAvailableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Fetch the available Nutanix versions to install
 */

export function useGetNutanixAvailableVersions<TData = Awaited<ReturnType<typeof getNutanixAvailableVersions>>, TError = unknown>(
 params?: GetNutanixAvailableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixAvailableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNutanixAvailableVersionsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Fetch the requirements for a given cluster configuration
 */
export const getNutanixRequirements = (
    params: GetNutanixRequirementsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NutanixRequirementsOVH>(
      {url: `/nutanix/requirements`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNutanixRequirementsQueryKey = (params: GetNutanixRequirementsParams,) => {
    return [`/nutanix/requirements`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNutanixRequirementsQueryOptions = <TData = Awaited<ReturnType<typeof getNutanixRequirements>>, TError = unknown>(params: GetNutanixRequirementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixRequirements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNutanixRequirementsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNutanixRequirements>>> = ({ signal }) => getNutanixRequirements(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNutanixRequirements>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNutanixRequirementsQueryResult = NonNullable<Awaited<ReturnType<typeof getNutanixRequirements>>>
export type GetNutanixRequirementsQueryError = unknown


export function useGetNutanixRequirements<TData = Awaited<ReturnType<typeof getNutanixRequirements>>, TError = unknown>(
 params: GetNutanixRequirementsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixRequirements>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixRequirements>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixRequirements<TData = Awaited<ReturnType<typeof getNutanixRequirements>>, TError = unknown>(
 params: GetNutanixRequirementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixRequirements>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixRequirements>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixRequirements<TData = Awaited<ReturnType<typeof getNutanixRequirements>>, TError = unknown>(
 params: GetNutanixRequirementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixRequirements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Fetch the requirements for a given cluster configuration
 */

export function useGetNutanixRequirements<TData = Awaited<ReturnType<typeof getNutanixRequirements>>, TError = unknown>(
 params: GetNutanixRequirementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixRequirements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNutanixRequirementsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get nutanix cluster info
 */
export const getNutanixServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NutanixStateWithIAMOVH>(
      {url: `/nutanix/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetNutanixServiceNameQueryKey = (serviceName: string,) => {
    return [`/nutanix/${serviceName}`] as const;
    }

    
export const getGetNutanixServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getNutanixServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNutanixServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNutanixServiceName>>> = ({ signal }) => getNutanixServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNutanixServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getNutanixServiceName>>>
export type GetNutanixServiceNameQueryError = unknown


export function useGetNutanixServiceName<TData = Awaited<ReturnType<typeof getNutanixServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixServiceName<TData = Awaited<ReturnType<typeof getNutanixServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixServiceName<TData = Awaited<ReturnType<typeof getNutanixServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get nutanix cluster info
 */

export function useGetNutanixServiceName<TData = Awaited<ReturnType<typeof getNutanixServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNutanixServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update nutanix cluster info
 */
export const putNutanixServiceName = (
    serviceName: string,
    nutanixClusterOVH: NonReadonly<NutanixClusterOVH>,
    params?: PutNutanixServiceNameParams,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<NutanixStateOVH>(
      {url: `/nutanix/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nutanixClusterOVH,
        params
    },
      options);
    }
  


export const getPutNutanixServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNutanixServiceName>>, TError,{serviceName: string;data: NonReadonly<NutanixClusterOVH>;params?: PutNutanixServiceNameParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putNutanixServiceName>>, TError,{serviceName: string;data: NonReadonly<NutanixClusterOVH>;params?: PutNutanixServiceNameParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putNutanixServiceName>>, {serviceName: string;data: NonReadonly<NutanixClusterOVH>;params?: PutNutanixServiceNameParams}> = (props) => {
          const {serviceName,data,params} = props ?? {};

          return  putNutanixServiceName(serviceName,data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutNutanixServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putNutanixServiceName>>>
    export type PutNutanixServiceNameMutationBody = NonReadonly<NutanixClusterOVH>
    export type PutNutanixServiceNameMutationError = unknown

    /**
 * @summary Update nutanix cluster info
 */
export const usePutNutanixServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNutanixServiceName>>, TError,{serviceName: string;data: NonReadonly<NutanixClusterOVH>;params?: PutNutanixServiceNameParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putNutanixServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<NutanixClusterOVH>;params?: PutNutanixServiceNameParams},
        TContext
      > => {

      const mutationOptions = getPutNutanixServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postNutanixServiceNameChangeContact = (
    serviceName: string,
    servicesChangeContactOVH: ServicesChangeContactOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/nutanix/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesChangeContactOVH, signal
    },
      options);
    }
  


export const getPostNutanixServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNutanixServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postNutanixServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNutanixServiceNameChangeContact>>, {serviceName: string;data: ServicesChangeContactOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postNutanixServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNutanixServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postNutanixServiceNameChangeContact>>>
    export type PostNutanixServiceNameChangeContactMutationBody = ServicesChangeContactOVH
    export type PostNutanixServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostNutanixServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNutanixServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postNutanixServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: ServicesChangeContactOVH},
        TContext
      > => {

      const mutationOptions = getPostNutanixServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postNutanixServiceNameConfirmTermination = (
    serviceName: string,
    servicesConfirmTerminationOVH: ServicesConfirmTerminationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/nutanix/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesConfirmTerminationOVH, signal
    },
      options);
    }
  


export const getPostNutanixServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNutanixServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postNutanixServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNutanixServiceNameConfirmTermination>>, {serviceName: string;data: ServicesConfirmTerminationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postNutanixServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNutanixServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postNutanixServiceNameConfirmTermination>>>
    export type PostNutanixServiceNameConfirmTerminationMutationBody = ServicesConfirmTerminationOVH
    export type PostNutanixServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostNutanixServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNutanixServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postNutanixServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: ServicesConfirmTerminationOVH},
        TContext
      > => {

      const mutationOptions = getPostNutanixServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all nodes in a cluster
 */
export const getNutanixServiceNameNodes = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NutanixNodeDetailsOVH[]>(
      {url: `/nutanix/${serviceName}/nodes`, method: 'GET', signal
    },
      options);
    }
  

export const getGetNutanixServiceNameNodesQueryKey = (serviceName: string,) => {
    return [`/nutanix/${serviceName}/nodes`] as const;
    }

    
export const getGetNutanixServiceNameNodesQueryOptions = <TData = Awaited<ReturnType<typeof getNutanixServiceNameNodes>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameNodes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNutanixServiceNameNodesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNutanixServiceNameNodes>>> = ({ signal }) => getNutanixServiceNameNodes(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameNodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNutanixServiceNameNodesQueryResult = NonNullable<Awaited<ReturnType<typeof getNutanixServiceNameNodes>>>
export type GetNutanixServiceNameNodesQueryError = unknown


export function useGetNutanixServiceNameNodes<TData = Awaited<ReturnType<typeof getNutanixServiceNameNodes>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameNodes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixServiceNameNodes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixServiceNameNodes<TData = Awaited<ReturnType<typeof getNutanixServiceNameNodes>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameNodes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixServiceNameNodes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixServiceNameNodes<TData = Awaited<ReturnType<typeof getNutanixServiceNameNodes>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameNodes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all nodes in a cluster
 */

export function useGetNutanixServiceNameNodes<TData = Awaited<ReturnType<typeof getNutanixServiceNameNodes>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameNodes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNutanixServiceNameNodesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a node details in a cluster
 */
export const getNutanixServiceNameNodesServer = (
    serviceName: string,
    server: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NutanixNodeDetailsOVH>(
      {url: `/nutanix/${serviceName}/nodes/${server}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetNutanixServiceNameNodesServerQueryKey = (serviceName: string,
    server: string,) => {
    return [`/nutanix/${serviceName}/nodes/${server}`] as const;
    }

    
export const getGetNutanixServiceNameNodesServerQueryOptions = <TData = Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>, TError = unknown>(serviceName: string,
    server: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNutanixServiceNameNodesServerQueryKey(serviceName,server);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>> = ({ signal }) => getNutanixServiceNameNodesServer(serviceName,server, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && server), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNutanixServiceNameNodesServerQueryResult = NonNullable<Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>>
export type GetNutanixServiceNameNodesServerQueryError = unknown


export function useGetNutanixServiceNameNodesServer<TData = Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>, TError = unknown>(
 serviceName: string,
    server: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixServiceNameNodesServer<TData = Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>, TError = unknown>(
 serviceName: string,
    server: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixServiceNameNodesServer<TData = Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>, TError = unknown>(
 serviceName: string,
    server: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a node details in a cluster
 */

export function useGetNutanixServiceNameNodesServer<TData = Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>, TError = unknown>(
 serviceName: string,
    server: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameNodesServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNutanixServiceNameNodesServerQueryOptions(serviceName,server,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Reinstall a node in a cluster
 */
export const putNutanixServiceNameNodesServer = (
    serviceName: string,
    server: string,
    nutanixReinstallOVH: NutanixReinstallOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/nutanix/${serviceName}/nodes/${server}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nutanixReinstallOVH
    },
      options);
    }
  


export const getPutNutanixServiceNameNodesServerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNutanixServiceNameNodesServer>>, TError,{serviceName: string;server: string;data: NutanixReinstallOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putNutanixServiceNameNodesServer>>, TError,{serviceName: string;server: string;data: NutanixReinstallOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putNutanixServiceNameNodesServer>>, {serviceName: string;server: string;data: NutanixReinstallOVH}> = (props) => {
          const {serviceName,server,data} = props ?? {};

          return  putNutanixServiceNameNodesServer(serviceName,server,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutNutanixServiceNameNodesServerMutationResult = NonNullable<Awaited<ReturnType<typeof putNutanixServiceNameNodesServer>>>
    export type PutNutanixServiceNameNodesServerMutationBody = NutanixReinstallOVH
    export type PutNutanixServiceNameNodesServerMutationError = unknown

    /**
 * @summary Reinstall a node in a cluster
 */
export const usePutNutanixServiceNameNodesServer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNutanixServiceNameNodesServer>>, TError,{serviceName: string;server: string;data: NutanixReinstallOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putNutanixServiceNameNodesServer>>,
        TError,
        {serviceName: string;server: string;data: NutanixReinstallOVH},
        TContext
      > => {

      const mutationOptions = getPutNutanixServiceNameNodesServerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putNutanixServiceNameNodesServerDeploy = (
    serviceName: string,
    server: string,
    nutanixDeployOVH: NutanixDeployOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/nutanix/${serviceName}/nodes/${server}/deploy`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nutanixDeployOVH
    },
      options);
    }
  


export const getPutNutanixServiceNameNodesServerDeployMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNutanixServiceNameNodesServerDeploy>>, TError,{serviceName: string;server: string;data: NutanixDeployOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putNutanixServiceNameNodesServerDeploy>>, TError,{serviceName: string;server: string;data: NutanixDeployOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putNutanixServiceNameNodesServerDeploy>>, {serviceName: string;server: string;data: NutanixDeployOVH}> = (props) => {
          const {serviceName,server,data} = props ?? {};

          return  putNutanixServiceNameNodesServerDeploy(serviceName,server,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutNutanixServiceNameNodesServerDeployMutationResult = NonNullable<Awaited<ReturnType<typeof putNutanixServiceNameNodesServerDeploy>>>
    export type PutNutanixServiceNameNodesServerDeployMutationBody = NutanixDeployOVH
    export type PutNutanixServiceNameNodesServerDeployMutationError = unknown

    export const usePutNutanixServiceNameNodesServerDeploy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNutanixServiceNameNodesServerDeploy>>, TError,{serviceName: string;server: string;data: NutanixDeployOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putNutanixServiceNameNodesServerDeploy>>,
        TError,
        {serviceName: string;server: string;data: NutanixDeployOVH},
        TContext
      > => {

      const mutationOptions = getPutNutanixServiceNameNodesServerDeployMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Terminate a node
 */
export const postNutanixServiceNameNodesServerTerminate = (
    serviceName: string,
    server: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/nutanix/${serviceName}/nodes/${server}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostNutanixServiceNameNodesServerTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNutanixServiceNameNodesServerTerminate>>, TError,{serviceName: string;server: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postNutanixServiceNameNodesServerTerminate>>, TError,{serviceName: string;server: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNutanixServiceNameNodesServerTerminate>>, {serviceName: string;server: string}> = (props) => {
          const {serviceName,server} = props ?? {};

          return  postNutanixServiceNameNodesServerTerminate(serviceName,server,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNutanixServiceNameNodesServerTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postNutanixServiceNameNodesServerTerminate>>>
    
    export type PostNutanixServiceNameNodesServerTerminateMutationError = unknown

    /**
 * @summary Terminate a node
 */
export const usePostNutanixServiceNameNodesServerTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNutanixServiceNameNodesServerTerminate>>, TError,{serviceName: string;server: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postNutanixServiceNameNodesServerTerminate>>,
        TError,
        {serviceName: string;server: string},
        TContext
      > => {

      const mutationOptions = getPostNutanixServiceNameNodesServerTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getNutanixServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/nutanix/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetNutanixServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/nutanix/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetNutanixServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNutanixServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>> = ({ signal }) => getNutanixServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNutanixServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>>
export type GetNutanixServiceNameServiceInfosQueryError = unknown


export function useGetNutanixServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNutanixServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetNutanixServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNutanixServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNutanixServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putNutanixServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/nutanix/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutNutanixServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNutanixServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putNutanixServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putNutanixServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putNutanixServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutNutanixServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putNutanixServiceNameServiceInfos>>>
    export type PutNutanixServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutNutanixServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutNutanixServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putNutanixServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putNutanixServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutNutanixServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ask for the termination of your service
 */
export const postNutanixServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/nutanix/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostNutanixServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNutanixServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postNutanixServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNutanixServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postNutanixServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNutanixServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postNutanixServiceNameTerminate>>>
    
    export type PostNutanixServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostNutanixServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNutanixServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postNutanixServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostNutanixServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type PutNutanixServiceNameParams = {
/**
 * I am aware that I am going to make changes that will reinstall my cluster
 */
redeploycluster?: boolean;
/**
 * I am aware that I am going to make changes that will scale-up my cluster
 */
scaleUp?: boolean;
};

export type GetNutanixRequirementsParams = {
erasureCoding: boolean;
rackAwareness: boolean;
redundancyFactor: NutanixRedundancyFactorEnumOVH;
};

export type GetNutanixAvailableVersionsParams = {
/**
 * Fully qualified name and unique name of the hardware
 */
fqn?: string;
};

export type GetNutanixAvailabilitiesRawParams = {
/**
 * The names of datacenters separated by commas
 */
datacenters?: string;
deploymentType?: NutanixDeploymentTypeEnumOVH;
erasureCoding?: boolean;
/**
 * If true, all datacenters are returned except those listed in datacenters parameter
 */
excludeDatacenters?: boolean;
/**
 * If true, all regions are returned except those listed in regions parameter
 */
excludeRegions?: boolean;
/**
 * The name of the memory hardware part
 */
memory?: string;
/**
 * The plan code in which the hardware is involved
 */
planCode?: string;
/**
 * Node quantity
 */
quantity: number;
redundancyFactor?: NutanixRedundancyFactorEnumOVH;
/**
 * The names of regions separated by commas
 */
regions?: string;
/**
 * The name of the base hardware
 */
server?: string;
/**
 * The name of the storage hardware part
 */
storage?: string;
/**
 * The name of the system storage hardware part
 */
systemStorage?: string;
};

export type GetNutanixAvailabilitiesParams = {
erasureCoding?: boolean;
/**
 * The name of the memory hardware part
 */
memory?: string;
/**
 * The plan code in which the hardware is involved
 */
planCode?: string;
/**
 * Node quantity
 */
quantity: number;
rackAwareness?: boolean;
redundancyFactor?: NutanixRedundancyFactorEnumOVH;
/**
 * The name of the base hardware
 */
server?: string;
/**
 * The name of the storage hardware part
 */
storage?: string;
/**
 * The name of the system storage hardware part
 */
systemStorage?: string;
};

export type GetNutanixParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Service change contact payload
 */
export interface ServicesChangeContactOVH {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
}

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * All reasons you can provide for a service termination
 */
export type ServiceTerminationReasonEnumOVH = typeof ServiceTerminationReasonEnumOVH[keyof typeof ServiceTerminationReasonEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTerminationReasonEnumOVH = {
  FEATURES_DONT_SUIT_ME: 'FEATURES_DONT_SUIT_ME',
  LACK_OF_PERFORMANCES: 'LACK_OF_PERFORMANCES',
  MIGRATED_TO_ANOTHER_OVH_PRODUCT: 'MIGRATED_TO_ANOTHER_OVH_PRODUCT',
  MIGRATED_TO_COMPETITOR: 'MIGRATED_TO_COMPETITOR',
  NOT_ENOUGH_RECOGNITION: 'NOT_ENOUGH_RECOGNITION',
  NOT_NEEDED_ANYMORE: 'NOT_NEEDED_ANYMORE',
  NOT_RELIABLE: 'NOT_RELIABLE',
  NO_ANSWER: 'NO_ANSWER',
  OTHER: 'OTHER',
  PRODUCT_DIMENSION_DONT_SUIT_ME: 'PRODUCT_DIMENSION_DONT_SUIT_ME',
  PRODUCT_TOOLS_DONT_SUIT_ME: 'PRODUCT_TOOLS_DONT_SUIT_ME',
  TOO_EXPENSIVE: 'TOO_EXPENSIVE',
  TOO_HARD_TO_USE: 'TOO_HARD_TO_USE',
  UNSATIFIED_BY_CUSTOMER_SUPPORT: 'UNSATIFIED_BY_CUSTOMER_SUPPORT',
} as const;

/**
 * All future uses you can provide for a service termination
 */
export type ServiceTerminationFutureUseEnumOVH = typeof ServiceTerminationFutureUseEnumOVH[keyof typeof ServiceTerminationFutureUseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTerminationFutureUseEnumOVH = {
  NOT_REPLACING_SERVICE: 'NOT_REPLACING_SERVICE',
  OTHER: 'OTHER',
  SUBSCRIBE_AN_OTHER_SERVICE: 'SUBSCRIBE_AN_OTHER_SERVICE',
  SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR: 'SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR',
  SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR: 'SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR',
} as const;

/**
 * Service confirm termination payload
 */
export interface ServicesConfirmTerminationOVH {
  /** Commentary about your termination request */
  commentary?: string;
  /** All future uses you can provide for a service termination */
  futureUse?: ServiceTerminationFutureUseEnumOVH;
  /** All reasons you can provide for a service termination */
  reason?: ServiceTerminationReasonEnumOVH;
  /** The termination token sent by email to the admin contact */
  token: string;
}

/**
 * service.StateEnum
 */
export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * Cluster status
 */
export type NutanixStatusEnumOVH = typeof NutanixStatusEnumOVH[keyof typeof NutanixStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NutanixStatusEnumOVH = {
  Active: 'Active',
  Deploying: 'Deploying',
  Error: 'Error',
} as const;

/**
 * IAM resource metadata
 * @nullable
 */
export type NutanixStateWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Nutanix Cluster State
 */
export interface NutanixStateOVH {
  /** Available redundancy Factor */
  readonly allowedRedundancyFactor?: readonly number[];
  /** Available versions to install */
  readonly availableVersions?: readonly string[];
  /** Cluster name */
  readonly serviceName?: string;
  /** Current cluster's status */
  readonly status?: NutanixStatusEnumOVH;
  /** Target Spec after deployment */
  readonly targetSpec?: NutanixClusterOVH;
}

/**
 * Node reinstall payload
 */
export interface NutanixReinstallOVH {
  /** AOS Version */
  version: string;
}

/**
 * Prism Central deployment type
 */
export type NutanixPctypeEnumOVH = typeof NutanixPctypeEnumOVH[keyof typeof NutanixPctypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NutanixPctypeEnumOVH = {
  alone: 'alone',
  scale: 'scale',
} as const;

/**
 * Prism Central Config
 */
export interface NutanixPrismcentralOVH {
  /** Prism Central IPs */
  ips?: Ipv4OVH[];
  /** Prism Central type */
  type?: NutanixPctypeEnumOVH;
  /** Prism Central IP */
  vip?: Ipv4OVH;
}

/**
 * Nodes in nutanix cluster
 */
export interface NutanixNodesOVH {
  /** Hypervisor IP */
  ahvIp?: Ipv4OVH;
  /** Controler VM IP */
  cvmIp?: Ipv4OVH;
  /** Name of the associated server */
  readonly server?: string;
}

/**
 * Node status
 */
export type NutanixNodeStatusEnumOVH = typeof NutanixNodeStatusEnumOVH[keyof typeof NutanixNodeStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NutanixNodeStatusEnumOVH = {
  DEPLOYED: 'DEPLOYED',
  DEPLOYING: 'DEPLOYING',
  DEPLOY_CANCELLED: 'DEPLOY_CANCELLED',
  DEPLOY_FAILURE: 'DEPLOY_FAILURE',
  UNDEPLOYED: 'UNDEPLOYED',
  UNDEPLOYING: 'UNDEPLOYING',
  UNDEPLOY_CANCELLED: 'UNDEPLOY_CANCELLED',
  UNDEPLOY_FAILURE: 'UNDEPLOY_FAILURE',
  UNKNOWN: 'UNKNOWN',
} as const;

/**
 * Node details in a nutanix cluster
 */
export interface NutanixNodeDetailsOVH {
  /** Hypervisor IP */
  readonly ahvIp?: Ipv4OVH;
  /** Controler VM IP */
  readonly cvmIp?: Ipv4OVH;
  /** Name of the associated server */
  readonly server?: string;
  /** Node status */
  readonly status?: NutanixNodeStatusEnumOVH;
}

/**
 * Node deployment payload
 */
export interface NutanixDeployOVH {
  /** Hypervisor IP */
  ahvIp?: Ipv4OVH;
  /** Controler VM IP */
  cvmIp?: Ipv4OVH;
  /** AOS Version */
  version?: string;
}

/**
 * Cluster configuration
 */
export interface NutanixClusterOVH {
  /** Control Panel URL */
  readonly controlPanelURL?: string;
  /** Erasure coding activation */
  erasureCoding?: boolean;
  /** Internal Gateway IP, with mask */
  gatewayCidr?: IpBlockOVH;
  /** Infra-Vlan number */
  infraVlanNumber?: number;
  /** External Gateway IP, with mask */
  readonly ipfo?: IpBlockOVH;
  /** IPLB ID */
  readonly iplb?: string;
  /** Cluster name */
  readonly name?: string;
  /** Cluster node list */
  nodes?: NutanixNodesOVH[];
  /** Prism Central Configuration */
  prismCentral?: NutanixPrismcentralOVH;
  /** Prism Element IP */
  prismElementVip?: Ipv4OVH;
  /** UUID for secret */
  readonly prismSecretId?: string;
  /** Rack Awareness activation */
  readonly rackAwareness?: boolean;
  /** Redundancy Factor */
  redundancyFactor?: number;
  /** AOS Version */
  version?: string;
  /** vRack name */
  readonly vrack?: string;
}

/**
 * Nutanix Cluster State
 */
export interface NutanixStateWithIAMOVH {
  /** Available redundancy Factor */
  readonly allowedRedundancyFactor?: readonly number[];
  /** Available versions to install */
  readonly availableVersions?: readonly string[];
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: NutanixStateWithIAMOVHIam;
  /** Cluster name */
  readonly serviceName?: string;
  /** Current cluster's status */
  readonly status?: NutanixStatusEnumOVH;
  /** Target Spec after deployment */
  readonly targetSpec?: NutanixClusterOVH;
}

/**
 * Redundancy factor
 * @nullable
 */
export type NutanixAvailabilityOVHRedundancyFactor = NutanixRedundancyFactorEnumOVH | null;

/**
 * Deployment type
 * @nullable
 */
export type NutanixAvailabilityOVHDeploymentType = NutanixDeploymentTypeEnumOVH | null;

/**
 * Return the needed requirements for a given cluster configuration
 */
export interface NutanixRequirementsOVH {
  /** Maximum number of nodes */
  readonly maxNodes?: number;
  /** Minimum number of nodes */
  readonly minNodes?: number;
  /** Number of added/removed nodes in case of scaling up/down */
  readonly scaleFactor?: number;
}

/**
 * Cluster redundancy factor
 */
export type NutanixRedundancyFactorEnumOVH = typeof NutanixRedundancyFactorEnumOVH[keyof typeof NutanixRedundancyFactorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NutanixRedundancyFactorEnumOVH = {
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

/**
 * Cluster deployment type
 */
export type NutanixDeploymentTypeEnumOVH = typeof NutanixDeploymentTypeEnumOVH[keyof typeof NutanixDeploymentTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NutanixDeploymentTypeEnumOVH = {
  NodeAwareness: 'NodeAwareness',
} as const;

/**
 * Cluster availability
 */
export type NutanixAvailabilityEnumOVH = typeof NutanixAvailabilityEnumOVH[keyof typeof NutanixAvailabilityEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NutanixAvailabilityEnumOVH = {
  '1440H': '1440H',
  '240H': '240H',
  '2880H': '2880H',
  '480H': '480H',
  '720H': '720H',
  '72H': '72H',
  comingSoon: 'comingSoon',
  unavailable: 'unavailable',
} as const;

/**
 * Cluster datacenter availability
 */
export interface NutanixDatacenterAvailabilityOVH {
  /** Availability status */
  readonly availability?: NutanixAvailabilityEnumOVH;
  /** Datacenter code */
  readonly datacenter?: string;
}

/**
 * Cluster availability
 */
export interface NutanixAvailabilityOVH {
  /** A structure describing the hardware availability for each datacenter */
  readonly datacenters?: readonly NutanixDatacenterAvailabilityOVH[];
  /**
   * Deployment type
   * @nullable
   */
  readonly deploymentType?: NutanixAvailabilityOVHDeploymentType;
  /**
   * Erasure coding activation
   * @nullable
   */
  readonly erasureCoding?: boolean | null;
  /** Fully qualified name and unique name of the hardware */
  readonly fqn?: string;
  /** Name of the memory hardware part */
  readonly memory?: string;
  /** Plan code in which the hardware is involved */
  readonly planCode?: string;
  /**
   * Redundancy factor
   * @nullable
   */
  readonly redundancyFactor?: NutanixAvailabilityOVHRedundancyFactor;
  /** Name of the base hardware */
  readonly server?: string;
  /** Name of the storage hardware part */
  readonly storage?: string;
  /**
   * Name of the system storage hardware part
   * @nullable
   */
  readonly systemStorage?: string | null;
}

/**
 * A structure describing the hardware raw availability for each datacenter
 */
export interface NutanixAvailabilitiesRawDatacenterOVH {
  /** The availability */
  readonly availability?: NutanixAvailabilityEnumOVH;
  /** The datacenter code */
  readonly datacenter?: string;
  /**
   * Last availability rule applied
   * @nullable
   */
  readonly lastRule?: string | null;
  /** Real stock including parent references */
  readonly parentAvailable?: number;
  /** Real stock */
  readonly trueAvailable?: number;
}

/**
 * Redundancy factor
 * @nullable
 */
export type NutanixAvailabilitiesRawOVHRedundancyFactor = NutanixRedundancyFactorEnumOVH | null;

/**
 * Deployment type
 * @nullable
 */
export type NutanixAvailabilitiesRawOVHDeploymentType = NutanixDeploymentTypeEnumOVH | null;

/**
 * Cluster availability
 */
export interface NutanixAvailabilitiesRawOVH {
  /** A structure describing the hardware availability for each datacenter */
  readonly datacenters?: readonly NutanixAvailabilitiesRawDatacenterOVH[];
  /**
   * Deployment type
   * @nullable
   */
  readonly deploymentType?: NutanixAvailabilitiesRawOVHDeploymentType;
  /**
   * Erasure coding activation
   * @nullable
   */
  readonly erasureCoding?: boolean | null;
  /** Fully qualified name and unique name of the hardware */
  readonly fqn?: string;
  /** Name of the memory hardware part */
  readonly memory?: string;
  /** Plan code in which the hardware is involved */
  readonly planCode?: string;
  /**
   * Redundancy factor
   * @nullable
   */
  readonly redundancyFactor?: NutanixAvailabilitiesRawOVHRedundancyFactor;
  /** Name of the base hardware */
  readonly server?: string;
  /** Name of the storage hardware part */
  readonly storage?: string;
  /**
   * Name of the system storage hardware part
   * @nullable
   */
  readonly systemStorage?: string | null;
}

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;


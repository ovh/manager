/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLicenseCloudLinuxOrderableVersionsParams,
  GetLicenseCloudLinuxParams,
  GetLicenseCloudLinuxServiceNameTasksParams,
  LicenseCloudLinuxCloudLinuxWithIAMOVH,
  LicenseCloudLinuxOrderConfigurationOVH,
  LicenseTaskOVH,
  PostLicenseCloudLinuxServiceNameConfirmTerminationBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getLicenseCloudLinux = (
    params?: GetLicenseCloudLinuxParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/cloudLinux`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseCloudLinuxQueryKey = (params?: GetLicenseCloudLinuxParams,) => {
    return [`/license/cloudLinux`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseCloudLinuxQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCloudLinux>>, TError = unknown>(params?: GetLicenseCloudLinuxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinux>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCloudLinuxQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCloudLinux>>> = ({ signal }) => getLicenseCloudLinux(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinux>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCloudLinuxQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCloudLinux>>>
export type GetLicenseCloudLinuxQueryError = unknown


export function useGetLicenseCloudLinux<TData = Awaited<ReturnType<typeof getLicenseCloudLinux>>, TError = unknown>(
 params: undefined |  GetLicenseCloudLinuxParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinux>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCloudLinux>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCloudLinux<TData = Awaited<ReturnType<typeof getLicenseCloudLinux>>, TError = unknown>(
 params?: GetLicenseCloudLinuxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinux>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCloudLinux>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCloudLinux<TData = Awaited<ReturnType<typeof getLicenseCloudLinux>>, TError = unknown>(
 params?: GetLicenseCloudLinuxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinux>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetLicenseCloudLinux<TData = Awaited<ReturnType<typeof getLicenseCloudLinux>>, TError = unknown>(
 params?: GetLicenseCloudLinuxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinux>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCloudLinuxQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the orderable CloudLinux versions
 */
export const getLicenseCloudLinuxOrderableVersions = (
    params: GetLicenseCloudLinuxOrderableVersionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseCloudLinuxOrderConfigurationOVH[]>(
      {url: `/license/cloudLinux/orderableVersions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseCloudLinuxOrderableVersionsQueryKey = (params: GetLicenseCloudLinuxOrderableVersionsParams,) => {
    return [`/license/cloudLinux/orderableVersions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseCloudLinuxOrderableVersionsQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>, TError = unknown>(params: GetLicenseCloudLinuxOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCloudLinuxOrderableVersionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>> = ({ signal }) => getLicenseCloudLinuxOrderableVersions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCloudLinuxOrderableVersionsQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>>
export type GetLicenseCloudLinuxOrderableVersionsQueryError = unknown


export function useGetLicenseCloudLinuxOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>, TError = unknown>(
 params: GetLicenseCloudLinuxOrderableVersionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCloudLinuxOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>, TError = unknown>(
 params: GetLicenseCloudLinuxOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCloudLinuxOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>, TError = unknown>(
 params: GetLicenseCloudLinuxOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the orderable CloudLinux versions
 */

export function useGetLicenseCloudLinuxOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>, TError = unknown>(
 params: GetLicenseCloudLinuxOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCloudLinuxOrderableVersionsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseCloudLinuxServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseCloudLinuxCloudLinuxWithIAMOVH>(
      {url: `/license/cloudLinux/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseCloudLinuxServiceNameQueryKey = (serviceName: string,) => {
    return [`/license/cloudLinux/${serviceName}`] as const;
    }

    
export const getGetLicenseCloudLinuxServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCloudLinuxServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>> = ({ signal }) => getLicenseCloudLinuxServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCloudLinuxServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>>
export type GetLicenseCloudLinuxServiceNameQueryError = unknown


export function useGetLicenseCloudLinuxServiceName<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCloudLinuxServiceName<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCloudLinuxServiceName<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseCloudLinuxServiceName<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCloudLinuxServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Confirm service termination
 */
export const postLicenseCloudLinuxServiceNameConfirmTermination = (
    serviceName: string,
    postLicenseCloudLinuxServiceNameConfirmTerminationBody: PostLicenseCloudLinuxServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/cloudLinux/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseCloudLinuxServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostLicenseCloudLinuxServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseCloudLinuxServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseCloudLinuxServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseCloudLinuxServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseCloudLinuxServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseCloudLinuxServiceNameConfirmTermination>>, {serviceName: string;data: PostLicenseCloudLinuxServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseCloudLinuxServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseCloudLinuxServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseCloudLinuxServiceNameConfirmTermination>>>
    export type PostLicenseCloudLinuxServiceNameConfirmTerminationMutationBody = PostLicenseCloudLinuxServiceNameConfirmTerminationBody
    export type PostLicenseCloudLinuxServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostLicenseCloudLinuxServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseCloudLinuxServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseCloudLinuxServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseCloudLinuxServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostLicenseCloudLinuxServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseCloudLinuxServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getLicenseCloudLinuxServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/license/cloudLinux/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseCloudLinuxServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/license/cloudLinux/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetLicenseCloudLinuxServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCloudLinuxServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>> = ({ signal }) => getLicenseCloudLinuxServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCloudLinuxServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>>
export type GetLicenseCloudLinuxServiceNameServiceInfosQueryError = unknown


export function useGetLicenseCloudLinuxServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCloudLinuxServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCloudLinuxServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetLicenseCloudLinuxServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCloudLinuxServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putLicenseCloudLinuxServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/cloudLinux/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutLicenseCloudLinuxServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseCloudLinuxServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseCloudLinuxServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseCloudLinuxServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseCloudLinuxServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseCloudLinuxServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseCloudLinuxServiceNameServiceInfos>>>
    export type PutLicenseCloudLinuxServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutLicenseCloudLinuxServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutLicenseCloudLinuxServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseCloudLinuxServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseCloudLinuxServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseCloudLinuxServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Tasks linked to this license
 */
export const getLicenseCloudLinuxServiceNameTasks = (
    serviceName: string,
    params?: GetLicenseCloudLinuxServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/license/cloudLinux/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseCloudLinuxServiceNameTasksQueryKey = (serviceName: string,
    params?: GetLicenseCloudLinuxServiceNameTasksParams,) => {
    return [`/license/cloudLinux/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseCloudLinuxServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetLicenseCloudLinuxServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCloudLinuxServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>> = ({ signal }) => getLicenseCloudLinuxServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCloudLinuxServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>>
export type GetLicenseCloudLinuxServiceNameTasksQueryError = unknown


export function useGetLicenseCloudLinuxServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicenseCloudLinuxServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCloudLinuxServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseCloudLinuxServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCloudLinuxServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseCloudLinuxServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Tasks linked to this license
 */

export function useGetLicenseCloudLinuxServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseCloudLinuxServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCloudLinuxServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseCloudLinuxServiceNameTasksTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/cloudLinux/${serviceName}/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseCloudLinuxServiceNameTasksTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/license/cloudLinux/${serviceName}/tasks/${taskId}`] as const;
    }

    
export const getGetLicenseCloudLinuxServiceNameTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCloudLinuxServiceNameTasksTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>> = ({ signal }) => getLicenseCloudLinuxServiceNameTasksTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCloudLinuxServiceNameTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>>
export type GetLicenseCloudLinuxServiceNameTasksTaskIdQueryError = unknown


export function useGetLicenseCloudLinuxServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCloudLinuxServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCloudLinuxServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseCloudLinuxServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCloudLinuxServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCloudLinuxServiceNameTasksTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postLicenseCloudLinuxServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/cloudLinux/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicenseCloudLinuxServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseCloudLinuxServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseCloudLinuxServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseCloudLinuxServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicenseCloudLinuxServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseCloudLinuxServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseCloudLinuxServiceNameTerminate>>>
    
    export type PostLicenseCloudLinuxServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostLicenseCloudLinuxServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseCloudLinuxServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseCloudLinuxServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicenseCloudLinuxServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

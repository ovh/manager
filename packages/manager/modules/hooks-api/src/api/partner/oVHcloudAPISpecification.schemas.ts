/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
/**
 * Common error model
 */
export type GetPartner500 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type GetPartner404 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * partner type
 */
export type Partner2PartnerTypeEnumOVH = typeof Partner2PartnerTypeEnumOVH[keyof typeof Partner2PartnerTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Partner2PartnerTypeEnumOVH = {
  consultingCompany: 'consultingCompany',
  iaasProvider: 'iaasProvider',
  managedServiceProvider: 'managedServiceProvider',
  other: 'other',
  softwareEditor: 'softwareEditor',
  strategicConsulting: 'strategicConsulting',
  systemsIntegrator: 'systemsIntegrator',
  telecomOperators: 'telecomOperators',
  trainingCompany: 'trainingCompany',
  valueAddedReseller: 'valueAddedReseller',
  webAgency: 'webAgency',
} as const;

/**
 * Partner area of expertise option
 */
export interface Partner2FormSchemaPartnershipAreaOfExpertiseOptionOVH {
  /** Option text */
  readonly text?: string;
  /** Option value */
  readonly value?: Partner2AreaOfExpertiseEnumOVH;
}

/**
 * Partner area of expertise
 */
export interface Partner2FormSchemaPartnershipAreaOfExpertiseOVH {
  /** Configuration of the field */
  readonly fieldConfig?: Partner2FormFieldConfigOVH;
  /** Options for area of expertise */
  readonly options?: readonly Partner2FormSchemaPartnershipAreaOfExpertiseOptionOVH[];
}

/**
 * Partner position options
 */
export interface Partner2FormSchemaContactPositionOptionOVH {
  /** Option text */
  readonly text?: string;
  /** Option value */
  readonly value?: Partner2PositionEnumOVH;
}

/**
 * Partner partner type option
 */
export interface Partner2FormSchemaAccountPartnerTypeOptionOVH {
  /** Option text */
  readonly text?: string;
  /** Option value */
  readonly value?: Partner2PartnerTypeEnumOVH;
}

/**
 * Partner account schema
 */
export interface Partner2FormSchemaAccountOVH {
  /** Money field ‚Ç¨ */
  readonly companyTurnover?: Partner2FormFieldOVH;
  /** Configuration of the name field */
  readonly name?: Partner2FormFieldOVH;
  /** Number of employees */
  readonly numberOfEmployees?: Partner2FormSchemaAccountNumberOfEmployeesOVH;
  /** Configuration of the partner type field */
  readonly partnerType?: Partner2FormSchemaAccountPartnerTypeOVH;
  /** In what year was your company established? */
  readonly yearEstablished?: Partner2FormFieldOVH;
}

/**
 * Field configuration
 */
export interface Partner2FormFieldConfigOVH {
  /** Field label */
  readonly label?: string;
  /**
   * Minimum length of the field
   * @nullable
   */
  readonly minLength?: number | null;
  /** Display order */
  readonly order?: number;
  /** Field requirement */
  readonly required?: boolean;
  /** Section on the website */
  readonly section?: string;
  /**
   * List of fields managed by display rule
   * @nullable
   */
  readonly targets?: readonly string[] | null;
  /** Field type */
  readonly type?: string;
}

/**
 * Partner contact position
 */
export interface Partner2FormSchemaContactPositionOVH {
  /** Configuration of the position field */
  readonly fieldConfig?: Partner2FormFieldConfigOVH;
  /** Options for position */
  readonly options?: readonly Partner2FormSchemaContactPositionOptionOVH[];
}

/**
 * Partner Partner type
 */
export interface Partner2FormSchemaAccountPartnerTypeOVH {
  /** Configuration of the field */
  readonly fieldConfig?: Partner2FormFieldConfigOVH;
  /** Options for partner type */
  readonly options?: readonly Partner2FormSchemaAccountPartnerTypeOptionOVH[];
}

/**
 * Partner Number of employees
 */
export interface Partner2FormSchemaAccountNumberOfEmployeesOVH {
  /** Configuration of the field */
  readonly fieldConfig?: Partner2FormFieldConfigOVH;
  /** Options for Number of employees */
  readonly options?: readonly Partner2FormSchemaAccountNumberOfEmployeesOptionOVH[];
}

/**
 * Partner Form Schema
 */
export interface Partner2FormSchemaOVH {
  /** Account */
  readonly account?: Partner2FormSchemaAccountOVH;
  /** Contact */
  readonly contact?: Partner2FormSchemaContactOVH;
  /** Partner Ship */
  readonly partnership?: Partner2FormSchemaPartnerShipOVH;
}

/**
 * Field
 */
export interface Partner2FormFieldOVH {
  /** Configuration of the field */
  readonly fieldConfig?: Partner2FormFieldConfigOVH;
}

/**
 * Partner ship schema
 */
export interface Partner2FormSchemaPartnerShipOVH {
  /** Area of expertise */
  readonly areaOfExpertise?: Partner2FormSchemaPartnershipAreaOfExpertiseOVH;
  /** boolean Yes/No */
  readonly emailCommunication?: Partner2FormFieldOVH;
  /** Why you want to take part in OVH's Partners Program */
  readonly partnersProgramReason?: Partner2FormFieldOVH;
  /** How do you plan to achieve the OVHcloud sales yearly projection? */
  readonly salesGrowthOpportunities?: Partner2FormFieldOVH;
  /** Sales projection (in euros) */
  readonly salesProjection?: Partner2FormFieldOVH;
  /** boolean Yes/No */
  readonly supportAgreementStatement?: Partner2FormFieldOVH;
}

/**
 * Partner contact schema
 */
export interface Partner2FormSchemaContactOVH {
  /** Configuration of the email field */
  readonly email?: Partner2FormFieldOVH;
  /** Configuration of the firstName field */
  readonly firstName?: Partner2FormFieldOVH;
  /** Configuration of the job title field */
  readonly jobTitle?: Partner2FormFieldOVH;
  /** Configuration of the lastName field */
  readonly lastName?: Partner2FormFieldOVH;
  /** Configuration of the phone field */
  readonly phone?: Partner2FormFieldOVH;
  /** Configuration of the position field */
  readonly position?: Partner2FormSchemaContactPositionOVH;
}

/**
 * employeesNumber
 */
export type Partner2EmployeesNumberEnumOVH = typeof Partner2EmployeesNumberEnumOVH[keyof typeof Partner2EmployeesNumberEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Partner2EmployeesNumberEnumOVH = {
  '1000to1999': '1000to1999',
  '100To199': '100To199',
  '10To19': '10To19',
  '1Or2': '1Or2',
  '2000to4999': '2000to4999',
  '200To249': '200To249',
  '20To49': '20To49',
  '250To499': '250To499',
  '3To5': '3To5',
  '5000to9999': '5000to9999',
  '500to999': '500to999',
  '50To99': '50To99',
  '6To9': '6To9',
  over10000: 'over10000',
} as const;

/**
 * Partner number of employees option
 */
export interface Partner2FormSchemaAccountNumberOfEmployeesOptionOVH {
  /** Option text */
  readonly text?: string;
  /** Option value */
  readonly value?: Partner2EmployeesNumberEnumOVH;
}

/**
 * Job positions
 */
export type Partner2PositionEnumOVH = typeof Partner2PositionEnumOVH[keyof typeof Partner2PositionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Partner2PositionEnumOVH = {
  AF: 'AF',
  BusinessOwner: 'BusinessOwner',
  HR: 'HR',
  ITDevops: 'ITDevops',
  ITOther: 'ITOther',
  ITSysAdmin: 'ITSysAdmin',
  LC: 'LC',
  Marketing: 'Marketing',
  Other: 'Other',
  PreSales: 'PreSales',
  Production: 'Production',
  Purchasing: 'Purchasing',
  RD: 'RD',
  Sales: 'Sales',
} as const;

/**
 * Acceptance Status
 * @nullable
 */
export type Partner2PartnerOVHAcceptanceStatus = Partner2AcceptanceStatusEnumOVH | null;

/**
 * Contact Entity
 */
export interface Partner2ContactOVH {
  /** Contact Email */
  email: string;
  /** Contact First Name */
  firstName: string;
  /**
   * Contact Job Title
   * @nullable
   */
  jobTitle?: string | null;
  /** Contact Last Name */
  lastName: string;
  /** Contact Phone */
  phone: string;
  /** Contact Position */
  position: Partner2PositionEnumOVH;
}

/**
 * Area of expertise
 */
export type Partner2AreaOfExpertiseEnumOVH = typeof Partner2AreaOfExpertiseEnumOVH[keyof typeof Partner2AreaOfExpertiseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Partner2AreaOfExpertiseEnumOVH = {
  BigData: 'BigData',
  Connectivity: 'Connectivity',
  DC: 'DC',
  DomainName: 'DomainName',
  EmailMsSolution: 'EmailMsSolution',
  HPC: 'HPC',
  Nutanix: 'Nutanix',
  Orchestration: 'Orchestration',
  PC: 'PC',
  PCIDSS: 'PCIDSS',
  SecurityCertif: 'SecurityCertif',
  VPS: 'VPS',
  VoIP: 'VoIP',
  WH: 'WH',
} as const;

/**
 * Partner ship evolution
 */
export interface Partner2PartnerShipOVH {
  /**
   * Area of Expertise
   * @nullable
   */
  areaOfExpertise?: Partner2AreaOfExpertiseEnumOVH[] | null;
  /** GDPR - email/communication opt in */
  emailCommunication?: boolean;
  /**
   * Why you want to take part in OVH's Partners Program
   * @nullable
   */
  partnersProgramReason?: string | null;
  /**
   * OVHcloud sales growth opportunities
   * @nullable
   */
  salesGrowthOpportunities?: string | null;
  /** Sales projection (in euros) */
  salesProjection?: number;
  /** Support agreement statement */
  supportAgreementStatement?: boolean;
}

/**
 * Partner Entity
 */
export interface Partner2PartnerOVH {
  /**
   * Acceptance Status
   * @nullable
   */
  readonly acceptanceStatus?: Partner2PartnerOVHAcceptanceStatus;
  /** Account */
  account: Partner2AccountOVH;
  /**
   * DEPRECATED - Area of Expertise
   * @nullable
   */
  areaOfExpertise?: Partner2AreaOfExpertiseEnumOVH[] | null;
  /** Contact */
  contact: Partner2ContactOVH;
  /**  How the PartnerShip will Growth */
  partnership?: Partner2PartnerShipOVH;
  /**
   * DEPRECATED - Why you want to take part in OVH's Partners Program
   * @nullable
   */
  partnersProgramReason?: string | null;
  /**
   * DEPRECATED - Sales Projection (in euros) 
   * @nullable
   */
  salesProjection?: number | null;
}

/**
 * Partner Type
 * @nullable
 */
export type Partner2AccountOVHPartnerType = Partner2PartnerTypeEnumOVH | null;

/**
 * Number of employees
 * @nullable
 */
export type Partner2AccountOVHNumberOfEmployees = Partner2EmployeesNumberEnumOVH | null;

/**
 * DEPRECATED - Account Country
 * @nullable
 */
export type Partner2AccountOVHCountry = NichandleCountryEnumOVH | null;

/**
 * Account Entity
 */
export interface Partner2AccountOVH {
  /**
   * DEPRECATED - Account City
   * @nullable
   */
  city?: string | null;
  /**
   * Company turnover (in euros)
   * @nullable
   */
  companyTurnover?: number | null;
  /**
   * DEPRECATED - Account Country
   * @nullable
   */
  country?: Partner2AccountOVHCountry;
  /** Account Name */
  name: string;
  /**
   * Number of employees
   * @nullable
   */
  numberOfEmployees?: Partner2AccountOVHNumberOfEmployees;
  /**
   * Partner Type
   * @nullable
   */
  partnerType?: Partner2AccountOVHPartnerType;
  /**
   * In what year was your company established?
   * @nullable
   */
  yearEstablished?: string | null;
}

/**
 * Acceptance status
 */
export type Partner2AcceptanceStatusEnumOVH = typeof Partner2AcceptanceStatusEnumOVH[keyof typeof Partner2AcceptanceStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Partner2AcceptanceStatusEnumOVH = {
  Advanced: 'Advanced',
  AdvancedHandOperated: 'AdvancedHandOperated',
  AdvancedQualified: 'AdvancedQualified',
  Open: 'Open',
  Registered: 'Registered',
  RegisteredQualified: 'RegisteredQualified',
  Rejected: 'Rejected',
} as const;

/**
 * Countries a nichandle can choose
 */
export type NichandleCountryEnumOVH = typeof NichandleCountryEnumOVH[keyof typeof NichandleCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandleCountryEnumOVH = {
  AC: 'AC',
  AD: 'AD',
  AE: 'AE',
  AF: 'AF',
  AG: 'AG',
  AI: 'AI',
  AL: 'AL',
  AM: 'AM',
  AO: 'AO',
  AQ: 'AQ',
  AR: 'AR',
  AS: 'AS',
  AT: 'AT',
  AU: 'AU',
  AW: 'AW',
  AX: 'AX',
  AZ: 'AZ',
  BA: 'BA',
  BB: 'BB',
  BD: 'BD',
  BE: 'BE',
  BF: 'BF',
  BG: 'BG',
  BH: 'BH',
  BI: 'BI',
  BJ: 'BJ',
  BL: 'BL',
  BM: 'BM',
  BN: 'BN',
  BO: 'BO',
  BQ: 'BQ',
  BR: 'BR',
  BS: 'BS',
  BT: 'BT',
  BW: 'BW',
  BY: 'BY',
  BZ: 'BZ',
  CA: 'CA',
  CC: 'CC',
  CD: 'CD',
  CF: 'CF',
  CG: 'CG',
  CH: 'CH',
  CI: 'CI',
  CK: 'CK',
  CL: 'CL',
  CM: 'CM',
  CN: 'CN',
  CO: 'CO',
  CR: 'CR',
  CU: 'CU',
  CV: 'CV',
  CW: 'CW',
  CX: 'CX',
  CY: 'CY',
  CZ: 'CZ',
  DE: 'DE',
  DG: 'DG',
  DJ: 'DJ',
  DK: 'DK',
  DM: 'DM',
  DO: 'DO',
  DZ: 'DZ',
  EA: 'EA',
  EC: 'EC',
  EE: 'EE',
  EG: 'EG',
  EH: 'EH',
  ER: 'ER',
  ES: 'ES',
  ET: 'ET',
  FI: 'FI',
  FJ: 'FJ',
  FK: 'FK',
  FM: 'FM',
  FO: 'FO',
  FR: 'FR',
  GA: 'GA',
  GB: 'GB',
  GD: 'GD',
  GE: 'GE',
  GF: 'GF',
  GG: 'GG',
  GH: 'GH',
  GI: 'GI',
  GL: 'GL',
  GM: 'GM',
  GN: 'GN',
  GP: 'GP',
  GQ: 'GQ',
  GR: 'GR',
  GS: 'GS',
  GT: 'GT',
  GU: 'GU',
  GW: 'GW',
  GY: 'GY',
  HK: 'HK',
  HN: 'HN',
  HR: 'HR',
  HT: 'HT',
  HU: 'HU',
  IC: 'IC',
  ID: 'ID',
  IE: 'IE',
  IL: 'IL',
  IM: 'IM',
  IN: 'IN',
  IO: 'IO',
  IQ: 'IQ',
  IR: 'IR',
  IS: 'IS',
  IT: 'IT',
  JE: 'JE',
  JM: 'JM',
  JO: 'JO',
  JP: 'JP',
  KE: 'KE',
  KG: 'KG',
  KH: 'KH',
  KI: 'KI',
  KM: 'KM',
  KN: 'KN',
  KP: 'KP',
  KR: 'KR',
  KW: 'KW',
  KY: 'KY',
  KZ: 'KZ',
  LA: 'LA',
  LB: 'LB',
  LC: 'LC',
  LI: 'LI',
  LK: 'LK',
  LR: 'LR',
  LS: 'LS',
  LT: 'LT',
  LU: 'LU',
  LV: 'LV',
  LY: 'LY',
  MA: 'MA',
  MC: 'MC',
  MD: 'MD',
  ME: 'ME',
  MF: 'MF',
  MG: 'MG',
  MH: 'MH',
  MK: 'MK',
  ML: 'ML',
  MM: 'MM',
  MN: 'MN',
  MO: 'MO',
  MP: 'MP',
  MQ: 'MQ',
  MR: 'MR',
  MS: 'MS',
  MT: 'MT',
  MU: 'MU',
  MV: 'MV',
  MW: 'MW',
  MX: 'MX',
  MY: 'MY',
  MZ: 'MZ',
  NA: 'NA',
  NC: 'NC',
  NE: 'NE',
  NF: 'NF',
  NG: 'NG',
  NI: 'NI',
  NL: 'NL',
  NO: 'NO',
  NP: 'NP',
  NR: 'NR',
  NU: 'NU',
  NZ: 'NZ',
  OM: 'OM',
  PA: 'PA',
  PE: 'PE',
  PF: 'PF',
  PG: 'PG',
  PH: 'PH',
  PK: 'PK',
  PL: 'PL',
  PM: 'PM',
  PN: 'PN',
  PR: 'PR',
  PS: 'PS',
  PT: 'PT',
  PW: 'PW',
  PY: 'PY',
  QA: 'QA',
  RE: 'RE',
  RO: 'RO',
  RS: 'RS',
  RU: 'RU',
  RW: 'RW',
  SA: 'SA',
  SB: 'SB',
  SC: 'SC',
  SD: 'SD',
  SE: 'SE',
  SG: 'SG',
  SH: 'SH',
  SI: 'SI',
  SJ: 'SJ',
  SK: 'SK',
  SL: 'SL',
  SM: 'SM',
  SN: 'SN',
  SO: 'SO',
  SR: 'SR',
  SS: 'SS',
  ST: 'ST',
  SV: 'SV',
  SX: 'SX',
  SY: 'SY',
  SZ: 'SZ',
  TA: 'TA',
  TC: 'TC',
  TD: 'TD',
  TF: 'TF',
  TG: 'TG',
  TH: 'TH',
  TJ: 'TJ',
  TK: 'TK',
  TL: 'TL',
  TM: 'TM',
  TN: 'TN',
  TO: 'TO',
  TR: 'TR',
  TT: 'TT',
  TV: 'TV',
  TW: 'TW',
  TZ: 'TZ',
  UA: 'UA',
  UG: 'UG',
  UM: 'UM',
  UNKNOWN: 'UNKNOWN',
  US: 'US',
  UY: 'UY',
  UZ: 'UZ',
  VA: 'VA',
  VC: 'VC',
  VE: 'VE',
  VG: 'VG',
  VI: 'VI',
  VN: 'VN',
  VU: 'VU',
  WF: 'WF',
  WS: 'WS',
  XK: 'XK',
  YE: 'YE',
  YT: 'YT',
  ZA: 'ZA',
  ZM: 'ZM',
  ZW: 'ZW',
} as const;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;


/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetPartner404,
  GetPartner500,
  Partner2FormSchemaOVH,
  Partner2PartnerOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get partner status
 */
export const getPartner = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Partner2PartnerOVH>(
      {url: `/partner`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPartnerQueryKey = () => {
    return [`/partner`] as const;
    }

    
export const getGetPartnerQueryOptions = <TData = Awaited<ReturnType<typeof getPartner>>, TError = GetPartner404 | GetPartner500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartner>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPartnerQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPartner>>> = ({ signal }) => getPartner(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPartner>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPartnerQueryResult = NonNullable<Awaited<ReturnType<typeof getPartner>>>
export type GetPartnerQueryError = GetPartner404 | GetPartner500


export function useGetPartner<TData = Awaited<ReturnType<typeof getPartner>>, TError = GetPartner404 | GetPartner500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartner>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPartner>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPartner<TData = Awaited<ReturnType<typeof getPartner>>, TError = GetPartner404 | GetPartner500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartner>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPartner>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPartner<TData = Awaited<ReturnType<typeof getPartner>>, TError = GetPartner404 | GetPartner500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartner>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get partner status
 */

export function useGetPartner<TData = Awaited<ReturnType<typeof getPartner>>, TError = GetPartner404 | GetPartner500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartner>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPartnerQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Register as a partner
 */
export const postPartner = (
    partner2PartnerOVH: NonReadonly<Partner2PartnerOVH>,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/partner`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: partner2PartnerOVH, signal
    },
      options);
    }
  


export const getPostPartnerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPartner>>, TError,{data: NonReadonly<Partner2PartnerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postPartner>>, TError,{data: NonReadonly<Partner2PartnerOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPartner>>, {data: NonReadonly<Partner2PartnerOVH>}> = (props) => {
          const {data} = props ?? {};

          return  postPartner(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostPartnerMutationResult = NonNullable<Awaited<ReturnType<typeof postPartner>>>
    export type PostPartnerMutationBody = NonReadonly<Partner2PartnerOVH>
    export type PostPartnerMutationError = unknown

    /**
 * @summary Register as a partner
 */
export const usePostPartner = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPartner>>, TError,{data: NonReadonly<Partner2PartnerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postPartner>>,
        TError,
        {data: NonReadonly<Partner2PartnerOVH>},
        TContext
      > => {

      const mutationOptions = getPostPartnerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get partner form schema
 */
export const getPartnerFormSchema = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Partner2FormSchemaOVH>(
      {url: `/partner/form/schema`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPartnerFormSchemaQueryKey = () => {
    return [`/partner/form/schema`] as const;
    }

    
export const getGetPartnerFormSchemaQueryOptions = <TData = Awaited<ReturnType<typeof getPartnerFormSchema>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnerFormSchema>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPartnerFormSchemaQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPartnerFormSchema>>> = ({ signal }) => getPartnerFormSchema(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPartnerFormSchema>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPartnerFormSchemaQueryResult = NonNullable<Awaited<ReturnType<typeof getPartnerFormSchema>>>
export type GetPartnerFormSchemaQueryError = unknown


export function useGetPartnerFormSchema<TData = Awaited<ReturnType<typeof getPartnerFormSchema>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnerFormSchema>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPartnerFormSchema>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPartnerFormSchema<TData = Awaited<ReturnType<typeof getPartnerFormSchema>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnerFormSchema>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPartnerFormSchema>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPartnerFormSchema<TData = Awaited<ReturnType<typeof getPartnerFormSchema>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnerFormSchema>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get partner form schema
 */

export function useGetPartnerFormSchema<TData = Awaited<ReturnType<typeof getPartnerFormSchema>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnerFormSchema>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPartnerFormSchemaQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





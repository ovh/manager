/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type GetXdslServiceNameTasksParams = {
/**
 * Filter the value of function property (=)
 */
function?: string;
/**
 * Filter the value of status property (=)
 */
status?: XdslTaskStatusEnumOVH;
};

export type GetXdslServiceNameStatisticsParams = {
period: XdslStatisticsPeriodEnumOVH;
type: XdslAccessStatisticsTypeEnumOVH;
};

export type GetXdslServiceNameResiliationTermsParams = {
/**
 * The desired resiliation date
 */
resiliationDate?: string;
};

export type GetXdslServiceNameModemAvailableWLANChannelParams = {
/**
 * WLAN frequency you want to retrieve channels
 */
frequency: XdslWLANFrequencyEnumOVH;
};

export type GetXdslServiceNameLinesNumberStatisticsParams = {
period: XdslStatisticsPeriodEnumOVH;
type: XdslLineStatisticsTypeEnumOVH;
};

export type GetXdslServiceNameLinesNumberDslamPortLogsParams = {
limit: number;
};

export type GetXdslServiceNameFiberEligibilitiesParams = {
/**
 * Filter the value of status property (=)
 */
status?: XdslFiberEligibilityStatusEnumOVH;
};

export type GetXdslSpareParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

export type GetXdslIncidentsParams = {
/**
 * Filter the value of creationDate property (>)
 */
creationDate?: string;
/**
 * Filter the value of endDate property (<)
 */
endDate?: string;
};

export type GetXdslEmailProParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

export type GetXdslParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Type of WLAN security protection
 */
export type XdslXdslModemConfigSecurityTypeEnumOVH = typeof XdslXdslModemConfigSecurityTypeEnumOVH[keyof typeof XdslXdslModemConfigSecurityTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslXdslModemConfigSecurityTypeEnumOVH = {
  None: 'None',
  WEP: 'WEP',
  WPA: 'WPA',
  WPA2: 'WPA2',
  WPA2andWPA3: 'WPA2andWPA3',
  WPA3: 'WPA3',
  WPAandWPA2: 'WPAandWPA2',
} as const;

/**
 * Type of protocol for the Port Mapping
 */
export type XdslXdslModemConfigProtocolTypeEnumOVH = typeof XdslXdslModemConfigProtocolTypeEnumOVH[keyof typeof XdslXdslModemConfigProtocolTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslXdslModemConfigProtocolTypeEnumOVH = {
  TCP: 'TCP',
  UDP: 'UDP',
} as const;

/**
 * Size of the Maximum Transmission Unit on the modem's interfaces
 */
export type XdslXdslModemConfigMTUSizeEnumOVH = typeof XdslXdslModemConfigMTUSizeEnumOVH[keyof typeof XdslXdslModemConfigMTUSizeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslXdslModemConfigMTUSizeEnumOVH = {
  NUMBER_1432: 1432,
  NUMBER_1456: 1456,
  NUMBER_1492: 1492,
} as const;

/**
 * Modem frequency
 */
export type XdslXdslModemConfigFrequencyEnumOVH = typeof XdslXdslModemConfigFrequencyEnumOVH[keyof typeof XdslXdslModemConfigFrequencyEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslXdslModemConfigFrequencyEnumOVH = {
  '24GHz': '2.4GHz',
  '5GHz': '5GHz',
} as const;

/**
 * Level of the Firewall ( BlockAll will block all connections, Normal will block all incoming connections except those in PortMapping and let go all outgoing connections , Disabled will disable all the Firewall and let all incoming or outgoing connections pass through )
 */
export type XdslXdslModemConfigEasyFirewallLevelEnumOVH = typeof XdslXdslModemConfigEasyFirewallLevelEnumOVH[keyof typeof XdslXdslModemConfigEasyFirewallLevelEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslXdslModemConfigEasyFirewallLevelEnumOVH = {
  BlockAll: 'BlockAll',
  Disabled: 'Disabled',
  Normal: 'Normal',
} as const;

/**
 * How did the device got its IP Address
 */
export type XdslXdslModemConfigConnectedDeviceAddressSourceEnumOVH = typeof XdslXdslModemConfigConnectedDeviceAddressSourceEnumOVH[keyof typeof XdslXdslModemConfigConnectedDeviceAddressSourceEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslXdslModemConfigConnectedDeviceAddressSourceEnumOVH = {
  DHCP: 'DHCP',
  Static: 'Static',
  Unknown: 'Unknown',
} as const;

/**
 * How the WiFi channel is selected
 */
export type XdslXdslModemConfigChannelModeEnumOVH = typeof XdslXdslModemConfigChannelModeEnumOVH[keyof typeof XdslXdslModemConfigChannelModeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslXdslModemConfigChannelModeEnumOVH = {
  Auto: 'Auto',
  Manual: 'Manual',
} as const;

/**
 * How the modem gets its LAN IP Address
 */
export type XdslXdslModemConfigAddressingTypeEnumOVH = typeof XdslXdslModemConfigAddressingTypeEnumOVH[keyof typeof XdslXdslModemConfigAddressingTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslXdslModemConfigAddressingTypeEnumOVH = {
  DHCP: 'DHCP',
  Static: 'Static',
} as const;

/**
 * ACS backend used by the modem
 */
export type XdslXdslModemConfigACSBackendEnumOVH = typeof XdslXdslModemConfigACSBackendEnumOVH[keyof typeof XdslXdslModemConfigACSBackendEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslXdslModemConfigACSBackendEnumOVH = {
  beta: 'beta',
  dev: 'dev',
  stable: 'stable',
} as const;

/**
 * IAM resource metadata
 * @nullable
 */
export type XdslXdslEmailProWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * XDSL Email Pro
 */
export interface XdslXdslEmailProWithIAMOVH {
  /** Mailbox usage */
  readonly currentUsage?: ComplexTypeUnitAndValueDoubleOVH;
  /**
   * Account display name
   * @nullable
   */
  displayName?: string | null;
  /** Email domain */
  readonly domain?: string;
  /**
   * Account first name
   * @nullable
   */
  firstName?: string | null;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: XdslXdslEmailProWithIAMOVHIam;
  /** Account id */
  readonly id?: number;
  /**
   * Account initials
   * @nullable
   */
  initial?: string | null;
  /**
   * Last logoff
   * @nullable
   */
  readonly lastLogoffDate?: string | null;
  /**
   * Last logon
   * @nullable
   */
  readonly lastLogonDate?: string | null;
  /**
   * Account last name
   * @nullable
   */
  lastName?: string | null;
  /** Account login */
  readonly login?: string;
  /**
   * Time of account's password last update
   * @nullable
   */
  readonly passwordLastUpdate?: string | null;
  /** Default email for this mailbox */
  readonly primaryEmailAddress?: string;
  /** Account maximum size */
  readonly quota?: ComplexTypeUnitAndValueLongOVH;
  /** Account state */
  readonly state?: EmailProObjectStateEnumOVH;
  /**
   * Pending tasks for this account
   * @nullable
   */
  readonly taskPendingId?: number | null;
}

/**
 * XDSL Email Pro
 */
export interface XdslXdslEmailProOVH {
  /** Mailbox usage */
  readonly currentUsage?: ComplexTypeUnitAndValueDoubleOVH;
  /**
   * Account display name
   * @nullable
   */
  displayName?: string | null;
  /** Email domain */
  readonly domain?: string;
  /**
   * Account first name
   * @nullable
   */
  firstName?: string | null;
  /** Account id */
  readonly id?: number;
  /**
   * Account initials
   * @nullable
   */
  initial?: string | null;
  /**
   * Last logoff
   * @nullable
   */
  readonly lastLogoffDate?: string | null;
  /**
   * Last logon
   * @nullable
   */
  readonly lastLogonDate?: string | null;
  /**
   * Account last name
   * @nullable
   */
  lastName?: string | null;
  /** Account login */
  readonly login?: string;
  /**
   * Time of account's password last update
   * @nullable
   */
  readonly passwordLastUpdate?: string | null;
  /** Default email for this mailbox */
  readonly primaryEmailAddress?: string;
  /** Account maximum size */
  readonly quota?: ComplexTypeUnitAndValueLongOVH;
  /** Account state */
  readonly state?: EmailProObjectStateEnumOVH;
  /**
   * Pending tasks for this account
   * @nullable
   */
  readonly taskPendingId?: number | null;
}

/**
 * xdsl.updateInvalidOrMissingRio.post
 */
export interface XdslUpdateInvalidOrMissingRioPostOVH {
  /** Do not set RIO, and relaunch order without portability */
  relaunchWithoutPortability: boolean;
  /** RIO number for portability */
  rio?: string;
}

/**
 * xdsl.templateModem.post
 */
export interface XdslTemplateModemPostOVH {
  /** Modem Template name (only alphanumeric characters) */
  name: string;
  /** The access name with the config you want to duplicate */
  serviceName: string;
}

/**
 * Type of WLAN security protection
 */
export type XdslTemplateModemSecurityTypeEnumOVH = typeof XdslTemplateModemSecurityTypeEnumOVH[keyof typeof XdslTemplateModemSecurityTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslTemplateModemSecurityTypeEnumOVH = {
  None: 'None',
  WPA: 'WPA',
  WPA2: 'WPA2',
  WPA2andWPA3: 'WPA2andWPA3',
  WPA3: 'WPA3',
  WPAandWPA2: 'WPAandWPA2',
} as const;

/**
 * WLAN Configuration for Modem Template
 */
export interface XdslTemplateModemWLANOVH {
  /** Indicate if frequencies 2.4GHz and 5GHz are agregated */
  readonly bandSteering?: boolean;
  /** Channel number (Useless if channelMode is set to Auto) */
  readonly channel?: number;
  /** How the WiFi channel is selected */
  readonly channelMode?: XdslXdslModemConfigChannelModeEnumOVH;
  /** Wifi state */
  readonly enabled?: boolean;
  /** Modem frequency */
  readonly frequency?: XdslXdslModemConfigFrequencyEnumOVH;
  /** Indicate if it is normal access wifi or guest wifi */
  readonly guest?: boolean;
  /** Encrypted WLAN passphrase */
  readonly securityKey?: string;
  /** Type of WLAN security protection */
  readonly securityType?: XdslTemplateModemSecurityTypeEnumOVH;
  /** Service Set Identifier of the WLAN interface */
  readonly SSID?: string;
  /** Control if Wifi is discoverable or hidden */
  readonly SSIDAdvertisementEnabled?: boolean;
  /** Wifi Name */
  readonly wifiName?: string;
}

/**
 * An ip which will access to the defined rule. Default : no restriction applied
 * @nullable
 */
export type XdslTemplateModemPortMappingOVHAllowedRemoteIp = Ipv4OVH | null;

/**
 * PortMapping Configuration for Modem Template
 */
export interface XdslTemplateModemPortMappingOVH {
  /**
   * An ip which will access to the defined rule. Default : no restriction applied
   * @nullable
   */
  readonly allowedRemoteIp?: XdslTemplateModemPortMappingOVHAllowedRemoteIp;
  /**
   * Description of the Port Mapping
   * @nullable
   */
  readonly description?: string | null;
  /**
   * The last port of the interval on the External Client that will get the connections
   * @nullable
   */
  readonly externalPortEnd?: number | null;
  /** External Port that the modem will listen on. List of externalPorts not available for now in the API : 8, 21, 68, 5060, 21800-21805, 51005 */
  readonly externalPortStart?: number;
  /** IP address (e.g., 192.0.2.0) */
  readonly internalClient?: IpOVH;
  /** The port on the Internal Client that will get the connections */
  readonly internalPort?: number;
  /** Name of the port mapping entry */
  readonly name?: string;
  /** Type of protocol for the Port Mapping */
  readonly protocol?: XdslXdslModemConfigProtocolTypeEnumOVH;
}

/**
 * Parameters and values to ignore when apply modem template configuration
 */
export interface XdslTemplateModemParametersToIgnoreOVH {
  /**
   * Ignore DMZ configuration
   * @nullable
   */
  dmzIP?: boolean | null;
  /**
   * Ignore LAN and DHCP configurations
   * @nullable
   */
  LANandDHCP?: boolean | null;
  /**
   * Ignore MTU Size value
   * @nullable
   */
  mtuSize?: boolean | null;
  /**
   * PortMapping names list to ignore. Ignore only listed portMapping
   * @nullable
   */
  portMappingList?: string[] | null;
  /**
   * WLAN names list to ignore. Ignore only listed WLAN
   * @nullable
   */
  WLANList?: string[] | null;
}

/**
 * LAN Configuration for Modem Template
 */
export interface XdslTemplateModemLANOVH {
  /** How the modem gets its LAN IP Address */
  readonly addressingType?: XdslXdslModemConfigAddressingTypeEnumOVH;
  /** IP address (e.g., 192.0.2.0) */
  readonly IPAddress?: IpOVH;
  /** Name of the LAN */
  readonly lanName?: string;
  /** IP address (e.g., 192.0.2.0) */
  readonly subnetMask?: IpOVH;
}

/**
 * Secondary DNS servers to be given to the clients
 * @nullable
 */
export type XdslTemplateModemDHCPOVHSecondaryDNS = IpOVH | null;

/**
 * DHCP Configuration for Modem Template
 */
export interface XdslTemplateModemDHCPOVH {
  /** IP address (e.g., 192.0.2.0) */
  readonly defaultGateway?: IpOVH;
  /** Name of the DHCP */
  readonly dhcpName?: string;
  /** Domain name provided to the clients */
  readonly domainName?: string;
  /** IP address (e.g., 192.0.2.0) */
  readonly endAddress?: IpOVH;
  /** Lease time in seconds of client assigned address (-1 means infinite) */
  readonly leaseTime?: number;
  /** IP address (e.g., 192.0.2.0) */
  readonly primaryDNS?: IpOVH;
  /**
   * Secondary DNS servers to be given to the clients
   * @nullable
   */
  readonly secondaryDNS?: XdslTemplateModemDHCPOVHSecondaryDNS;
  /** State of the DHCP server of the modem */
  readonly serverEnabled?: boolean;
  /** IP address (e.g., 192.0.2.0) */
  readonly startAddress?: IpOVH;
  /** IP address (e.g., 192.0.2.0) */
  readonly subnetMask?: IpOVH;
}

/**
 * xdsl.spare.replace.post
 */
export interface XdslSpareReplacePostOVH {
  /** The modem to replace by the spare */
  domain: string;
}

/**
 * xdsl.rma.changeType.post
 */
export interface XdslRmaChangeTypePostOVH {
  /** Types of return merchandise authorisation you can change to */
  type: TelephonyRmaChangeTypeEnumOVH;
}

/**
 * xdsl.resiliate.post
 */
export interface XdslResiliatePostOVH {
  /** The desired resiliation date */
  resiliationDate?: string;
  /** Information about the reason for the resiliation */
  resiliationSurvey: XdslResiliationSurveyOVH;
}

/**
 * xdsl.requestTotalDeconsolidation.post
 */
export interface XdslRequestTotalDeconsolidationPostOVH {
  /** Do not port the number */
  noPortability?: boolean;
  /** A token to prove the ownership of the line number, needed to port the number */
  rio?: string;
}

/**
 * xdsl.orderMeeting.post
 */
export interface XdslOrderMeetingPostOVH {
  /** Meeting end date */
  endDate: string;
  /** Meeting start date */
  startDate: string;
  /** Meeting ui code ( code linked to the meeting returned by POST /xdsl/{serviceName}/orderMeetings ) */
  uiCode: string;
}

/**
 * The status of an order step
 */
export type XdslOrderFollowupStepStatusEnumOVH = typeof XdslOrderFollowupStepStatusEnumOVH[keyof typeof XdslOrderFollowupStepStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslOrderFollowupStepStatusEnumOVH = {
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
  waitingCustomer: 'waitingCustomer',
} as const;

/**
 * The status of an order step
 */
export type XdslOrderFollowupStepNameEnumOVH = typeof XdslOrderFollowupStepNameEnumOVH[keyof typeof XdslOrderFollowupStepNameEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslOrderFollowupStepNameEnumOVH = {
  accessIsOperational: 'accessIsOperational',
  checkInfrastructure: 'checkInfrastructure',
  configureAccessOnOVH: 'configureAccessOnOVH',
  orderPayed: 'orderPayed',
  orderReceived: 'orderReceived',
  orderTreatment: 'orderTreatment',
  sendModem: 'sendModem',
  sendOrderToProvider: 'sendOrderToProvider',
  setupCustomerPremisesEquipment: 'setupCustomerPremisesEquipment',
  waitingForProviderInstallReport: 'waitingForProviderInstallReport',
  waitingForWithdrawalPeriodToBeOver: 'waitingForWithdrawalPeriodToBeOver',
} as const;

/**
 * The duration units
 */
export type XdslOrderFollowupDurationUnitEnumOVH = typeof XdslOrderFollowupDurationUnitEnumOVH[keyof typeof XdslOrderFollowupDurationUnitEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslOrderFollowupDurationUnitEnumOVH = {
  day: 'day',
  hour: 'hour',
  minute: 'minute',
} as const;

/**
 * A step of the order process
 */
export interface XdslOrderFollowupStepOVH {
  readonly comments?: readonly string[];
  /** @nullable */
  readonly doneDate?: string | null;
  /** The duration units */
  readonly durationUnit?: XdslOrderFollowupDurationUnitEnumOVH;
  readonly expectedDuration?: number;
  /** The status of an order step */
  readonly name?: XdslOrderFollowupStepNameEnumOVH;
  /** The status of an order step */
  readonly status?: XdslOrderFollowupStepStatusEnumOVH;
}

/**
 * Type of notification.
 */
export type XdslMonitoringNotificationsTypeEnumOVH = typeof XdslMonitoringNotificationsTypeEnumOVH[keyof typeof XdslMonitoringNotificationsTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslMonitoringNotificationsTypeEnumOVH = {
  mail: 'mail',
  sms: 'sms',
} as const;

/**
 * Frequency between notifications.
 */
export type XdslMonitoringNotificationsFrequencyEnumOVH = typeof XdslMonitoringNotificationsFrequencyEnumOVH[keyof typeof XdslMonitoringNotificationsFrequencyEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslMonitoringNotificationsFrequencyEnumOVH = {
  '1h': '1h',
  '5m': '5m',
  '6h': '6h',
  once: 'once',
} as const;

/**
 * xdsl.monitoringNotifications.post
 */
export interface XdslMonitoringNotificationsPostOVH {
  /** Whether or not to allow notifications concerning generic incidents */
  allowIncident?: boolean;
  /** The number of seconds the access has to be down to trigger the alert */
  downThreshold?: number;
  /** The e-mail address, if type is mail */
  email?: string;
  /** Frequency between notifications. */
  frequency: XdslMonitoringNotificationsFrequencyEnumOVH;
  /** The phone number, if type is sms */
  phone?: string;
  /** The SMS account which will be debited for each sent SMS, if the type is sms */
  smsAccount?: string;
  /** Type of notification. */
  type: XdslMonitoringNotificationsTypeEnumOVH;
}

/**
 * xdsl.modem.upnp.post
 */
export interface XdslModemUpnpPostOVH {
  /** Status of the service */
  upnp: XdslServiceStatusEnumOVH;
}

/**
 * xdsl.modem.sipAlg.post
 */
export interface XdslModemSipAlgPostOVH {
  /** Status of the service */
  sipAlg: XdslServiceStatusEnumOVH;
}

/**
 * xdsl.modem.reset.post
 */
export interface XdslModemResetPostOVH {
  /** Reset configuration stored in OVH databases */
  resetOvhConfig?: boolean;
}

/**
 * xdsl.modem.reboot.post
 */
export interface XdslModemRebootPostOVH {
  /** Date when the reboot will start */
  todoDate?: string;
}

/**
 * xdsl.modem.portMappings.post
 */
export interface XdslModemPortMappingsPostOVH {
  /** IPv4 address (e.g., 192.0.2.0) */
  allowedRemoteIp?: Ipv4OVH;
  /** Description of the Port Mapping */
  description?: string;
  /** The last port of the interval on the External Client that will get the connections */
  externalPortEnd?: number;
  /** External Port that the modem will listen on */
  externalPortStart: number;
  /** IP address (e.g., 192.0.2.0) */
  internalClient: IpOVH;
  /** The port on the Internal Client that will get the connections */
  internalPort: number;
  /** The last port of the interval on the Internal Client that will get the connections */
  internalPortEnd?: number;
  /** Name of the port mapping entry */
  name: string;
  /** Type of protocol for the Port Mapping */
  protocol: XdslXdslModemConfigProtocolTypeEnumOVH;
}

/**
 * xdsl.modem.lan.dhcp.DHCPStaticAddresses.post
 */
export interface XdslModemLanDhcpDHCPStaticAddressesPostOVH {
  /** IP address (e.g., 192.0.2.0) */
  IPAddress: IpOVH;
  /** The MAC address of the device */
  MACAddress: string;
  /** Name of the DHCP static lease */
  name?: string;
}

/**
 * xdsl.modem.ipsecAlg.post
 */
export interface XdslModemIpsecAlgPostOVH {
  /** Status of the service */
  ipsecAlg: XdslServiceStatusEnumOVH;
}

/**
 * xdsl.modem.ftp.post
 */
export interface XdslModemFtpPostOVH {
  /** Status of the service */
  ftp: XdslServiceStatusEnumOVH;
}

/**
 * xdsl.modem.firmware.post
 */
export interface XdslModemFirmwarePostOVH {
  /** The firmware version to upgrade to */
  firmware: string;
  /** Date of execution, default is now */
  todoDate?: string;
}

/**
 * xdsl.modem.contentSharing.post
 */
export interface XdslModemContentSharingPostOVH {
  /** Status of the service */
  contentSharing: XdslServiceStatusEnumOVH;
}

/**
 * xdsl.modem.comfortExchange.post
 */
export interface XdslModemComfortExchangePostOVH {
  /** Customer identifier for shipping address. By default Internet access address will be used. Allowed values are nichandle or «/me/contact/xyz» */
  contactShipping?: string;
}

/**
 * xdsl.modem.callWaiting.post
 */
export interface XdslModemCallWaitingPostOVH {
  /** Status of the service */
  callWaiting: XdslServiceStatusEnumOVH;
}

/**
 * xdsl.modem.blocIp.post
 */
export interface XdslModemBlocIpPostOVH {
  /** Status of the service */
  status: XdslServiceStatusEnumOVH;
}

/**
 * Status allowed for mail sending
 */
export type XdslMailSendingStatusEnumOVH = typeof XdslMailSendingStatusEnumOVH[keyof typeof XdslMailSendingStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslMailSendingStatusEnumOVH = {
  disabled: 'disabled',
  enabled: 'enabled',
} as const;

/**
 * Status allowed for mail sending
 */
export type XdslMailSendingAccessStatusEnumOVH = typeof XdslMailSendingAccessStatusEnumOVH[keyof typeof XdslMailSendingAccessStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslMailSendingAccessStatusEnumOVH = {
  blockedForSpam: 'blockedForSpam',
  disabled: 'disabled',
  enabled: 'enabled',
} as const;

/**
 * xdsl.mailSending.post
 */
export interface XdslMailSendingPostOVH {
  /** Status allowed for mail sending */
  status: XdslMailSendingStatusEnumOVH;
}

/**
 * xdsl.lines.dslamPort.changeProfile.post
 */
export interface XdslLinesDslamPortChangeProfilePostOVH {
  /** The id of the xdsl.DslamLineProfile */
  dslamProfileId: number;
}

/**
 * xdsl.lines.diagnostic.run.post
 */
export interface XdslLinesDiagnosticRunPostOVH {
  /** Customer possible actions */
  actionsDone?: XdslLineDiagnosticCustomerActionsEnumOVH[];
  /** Customer answers for line diagnostic */
  answers?: XdslLineDiagnosticAnswersOVH;
  /** Line diagnostic fault type */
  faultType: XdslLineDiagnosticFaultTypeEnumOVH;
}

/**
 * Possible SELT test status
 */
export type XdslLineDiagnosticSeltStatusEnumOVH = typeof XdslLineDiagnosticSeltStatusEnumOVH[keyof typeof XdslLineDiagnosticSeltStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslLineDiagnosticSeltStatusEnumOVH = {
  failed: 'failed',
  notAvailable: 'notAvailable',
  ok: 'ok',
} as const;

/**
 * Possible SELT test states
 */
export type XdslLineDiagnosticSeltStateEnumOVH = typeof XdslLineDiagnosticSeltStateEnumOVH[keyof typeof XdslLineDiagnosticSeltStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslLineDiagnosticSeltStateEnumOVH = {
  open: 'open',
  short: 'short',
  synced: 'synced',
  unknown: 'unknown',
} as const;

/**
 * SELT test status
 * @nullable
 */
export type XdslLineDiagnosticSeltResultOVHStatus = XdslLineDiagnosticSeltStatusEnumOVH | null;

/**
 * Problem type identified by SELT test
 * @nullable
 */
export type XdslLineDiagnosticSeltResultOVHState = XdslLineDiagnosticSeltStateEnumOVH | null;

/**
 * Possible SELT test prelocalizations
 */
export type XdslLineDiagnosticSeltPrelocEnumOVH = typeof XdslLineDiagnosticSeltPrelocEnumOVH[keyof typeof XdslLineDiagnosticSeltPrelocEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslLineDiagnosticSeltPrelocEnumOVH = {
  CUST: 'CUST',
  DSLAM: 'DSLAM',
  LINE: 'LINE',
  RE: 'RE',
} as const;

/**
 * Prelocalization of the problem
 * @nullable
 */
export type XdslLineDiagnosticSeltResultOVHPreloc = XdslLineDiagnosticSeltPrelocEnumOVH | null;

/**
 * Customer answers for line diagnostic
 */
export interface XdslLineDiagnosticSeltResultOVH {
  /**
   * SELT test running date
   * @nullable
   */
  readonly date?: string | null;
  /**
   * Distance of the problem identified on the line (by SELT test), from NRA to customer
   * @nullable
   */
  readonly distance?: number | null;
  /**
   * Prelocalization of the problem
   * @nullable
   */
  readonly preloc?: XdslLineDiagnosticSeltResultOVHPreloc;
  /**
   * Problem type identified by SELT test
   * @nullable
   */
  readonly state?: XdslLineDiagnosticSeltResultOVHState;
  /**
   * SELT test status
   * @nullable
   */
  readonly status?: XdslLineDiagnosticSeltResultOVHStatus;
}

/**
 * Cables section details
 */
export interface XdslLineDiagnosticSectionOVH {
  /** cables length in meters */
  readonly length?: number;
  /** cables section in millimeters */
  readonly section?: number;
}

/**
 * Diagnostic robot possible actions
 */
export type XdslLineDiagnosticRobotActionsEnumOVH = typeof XdslLineDiagnosticRobotActionsEnumOVH[keyof typeof XdslLineDiagnosticRobotActionsEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslLineDiagnosticRobotActionsEnumOVH = {
  alignmentLockTest: 'alignmentLockTest',
  alignmentResetTest: 'alignmentResetTest',
  alignmentTestResult: 'alignmentTestResult',
  checkCustomerTicket: 'checkCustomerTicket',
  checkIfAccessPing: 'checkIfAccessPing',
  checkIfResolvedAfterConnectionTests: 'checkIfResolvedAfterConnectionTests',
  checkIfResolvedAfterInstallationCheck: 'checkIfResolvedAfterInstallationCheck',
  checkIfResolvedAfterTests: 'checkIfResolvedAfterTests',
  checkIfSeveralConnections: 'checkIfSeveralConnections',
  checkInstallation: 'checkInstallation',
  checkProblem: 'checkProblem',
  checkSynchronizationWithoutOtherModems: 'checkSynchronizationWithoutOtherModems',
  customerPrelocChecks: 'customerPrelocChecks',
  findProblem: 'findProblem',
  installationCheck: 'installationCheck',
  lockUnlock: 'lockUnlock',
  needToRequestMonitoring: 'needToRequestMonitoring',
  needToRequestOperatorIntervention: 'needToRequestOperatorIntervention',
  needToRequestOvhIntervention: 'needToRequestOvhIntervention',
  requestMonitoring: 'requestMonitoring',
  requestOperatorIntervention: 'requestOperatorIntervention',
  requestOvhIntervention: 'requestOvhIntervention',
  seltTest: 'seltTest',
} as const;

/**
 * Possible customer questions
 */
export type XdslLineDiagnosticQuestionsEnumOVH = typeof XdslLineDiagnosticQuestionsEnumOVH[keyof typeof XdslLineDiagnosticQuestionsEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslLineDiagnosticQuestionsEnumOVH = {
  bandwidthTestUnit: 'bandwidthTestUnit',
  comment: 'comment',
  conditionsAccepted: 'conditionsAccepted',
  contactPhone: 'contactPhone',
  datetimeOfAppearance: 'datetimeOfAppearance',
  downloadBandwidthTest: 'downloadBandwidthTest',
  endAfternoonHours: 'endAfternoonHours',
  endMorningHours: 'endMorningHours',
  followBySms: 'followBySms',
  hasModemKeptSynchronization: 'hasModemKeptSynchronization',
  idAppointment: 'idAppointment',
  individualSite: 'individualSite',
  modemIsSynchronized: 'modemIsSynchronized',
  modemMac: 'modemMac',
  modemStillSynchronized: 'modemStillSynchronized',
  modemType: 'modemType',
  ovhTicket: 'ovhTicket',
  problemType: 'problemType',
  resolvedAfterTests: 'resolvedAfterTests',
  secureSite: 'secureSite',
  severalInternetConnections: 'severalInternetConnections',
  siteClosedDays: 'siteClosedDays',
  siteDigicode: 'siteDigicode',
  siteOpening: 'siteOpening',
  startAfternoonHours: 'startAfternoonHours',
  startMorningHours: 'startMorningHours',
  uploadBandwidthTest: 'uploadBandwidthTest',
} as const;

/**
 * Possible customer questions
 */
export type XdslLineDiagnosticProblemTypeEnumOVH = typeof XdslLineDiagnosticProblemTypeEnumOVH[keyof typeof XdslLineDiagnosticProblemTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslLineDiagnosticProblemTypeEnumOVH = {
  lowBandwidth: 'lowBandwidth',
  syncLoss: 'syncLoss',
} as const;

/**
 * possible value for specific answer
 */
export interface XdslLineDiagnosticPossibleValueOVH {
  /**
   * answer id
   * @nullable
   */
  readonly id?: number | null;
  /**
   * answer choice string
   * @nullable
   */
  readonly label?: string | null;
  /**
   * answer choice value
   * @nullable
   */
  readonly value?: string | null;
}

/**
 * Question to customer
 */
export interface XdslLineDiagnosticQuestionOVH {
  /**
   * question description
   * @nullable
   */
  readonly defaultValue?: string | null;
  /** question description */
  readonly description?: string;
  /**
   * available values for enum
   * @nullable
   */
  readonly enumValues?: readonly string[] | null;
  /** Possible customer questions */
  readonly name?: XdslLineDiagnosticQuestionsEnumOVH;
  /**
   * list of possible values
   * @nullable
   */
  readonly possibleValues?: readonly XdslLineDiagnosticPossibleValueOVH[] | null;
  /**
   * is a required question
   * @nullable
   */
  readonly required?: boolean | null;
  /** answer type */
  readonly type?: string;
}

/**
 * information directly get on DSLAM or Modem
 * @nullable
 */
export type XdslLineDiagnosticLineDetailsOVHConnectionInfo = XdslLineDiagnosticConnectionInformationsOVH | null;

/**
 * Theoretical line capabilities
 */
export interface XdslLineDiagnosticLineCapabilitiesOVH {
  /**
   * Theoretical Downstream synchronization 
   * @nullable
   */
  readonly down?: number | null;
  /**
   * Theoretical line mitigation
   * @nullable
   */
  readonly mitigation?: string | null;
  /**
   * Theoretical ping
   * @nullable
   */
  readonly ping?: number | null;
  /**
   * Theoretical Upstream synchronization 
   * @nullable
   */
  readonly up?: number | null;
}

/**
 * Theoretical line capabilities
 * @nullable
 */
export type XdslLineDiagnosticLineDetailsOVHLineCapabilities = XdslLineDiagnosticLineCapabilitiesOVH | null;

/**
 * Line information
 */
export interface XdslLineDiagnosticLineDetailsOVH {
  /** access name */
  readonly accessName?: string;
  /**
   * Access IP ping or not
   * @nullable
   */
  readonly accessPing?: boolean | null;
  /**
   * address of the access
   * @nullable
   */
  readonly address?: string | null;
  /**
   * information directly get on DSLAM or Modem
   * @nullable
   */
  readonly connectionInfo?: XdslLineDiagnosticLineDetailsOVHConnectionInfo;
  /**
   * customer phone number for contact
   * @nullable
   */
  readonly contactPhone?: string | null;
  /**
   * custom access description
   * @nullable
   */
  readonly description?: string | null;
  /**
   * DSLAM is synchronized or not
   * @nullable
   */
  readonly dslamIsSynchronized?: boolean | null;
  /** is GTR access or not */
  readonly gtr?: boolean;
  /** Line length in meters */
  readonly length?: number;
  /**
   * Theoretical line capabilities
   * @nullable
   */
  readonly lineCapabilities?: XdslLineDiagnosticLineDetailsOVHLineCapabilities;
  /** Possible DSL technologies */
  readonly lineType?: XdslDslTypeEnumOVH;
  /**
   * NRA name
   * @nullable
   */
  readonly nra?: string | null;
  /** line number */
  readonly number?: string;
  /** The providers */
  readonly operator?: XdslProviderEnumOVH;
  /**
   * cables sections details
   * @nullable
   */
  readonly sections?: readonly XdslLineDiagnosticSectionOVH[] | null;
}

/**
 * Line diagnostic fault type
 */
export type XdslLineDiagnosticFaultTypeEnumOVH = typeof XdslLineDiagnosticFaultTypeEnumOVH[keyof typeof XdslLineDiagnosticFaultTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslLineDiagnosticFaultTypeEnumOVH = {
  alignment: 'alignment',
  noSync: 'noSync',
  syncLossOrLowBandwidth: 'syncLossOrLowBandwidth',
  unknown: 'unknown',
} as const;

/**
 * Diagnostic status possible values
 */
export type XdslLineDiagnosticDiagnosticStatusEnumOVH = typeof XdslLineDiagnosticDiagnosticStatusEnumOVH[keyof typeof XdslLineDiagnosticDiagnosticStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslLineDiagnosticDiagnosticStatusEnumOVH = {
  cancelled: 'cancelled',
  connectionProblem: 'connectionProblem',
  genericIncidentPending: 'genericIncidentPending',
  haveToConnectModemOnTheRightPlug: 'haveToConnectModemOnTheRightPlug',
  init: 'init',
  interventionRequested: 'interventionRequested',
  noBandwidthFault: 'noBandwidthFault',
  noProblemAnymore: 'noProblemAnymore',
  noSyncFaultDiagnosticRequired: 'noSyncFaultDiagnosticRequired',
  problem: 'problem',
  resolvedAfterTests: 'resolvedAfterTests',
  sleeping: 'sleeping',
  validationRefused: 'validationRefused',
  waitingHuman: 'waitingHuman',
  waitingRobot: 'waitingRobot',
  waitingValidation: 'waitingValidation',
} as const;

/**
 * Current or last robot action
 * @nullable
 */
export type XdslLineDiagnosticDiagnosticDataOVHRobotAction = XdslLineDiagnosticRobotActionsEnumOVH | null;

/**
 * Diagnostic status and information
 */
export interface XdslLineDiagnosticDiagnosticOVH {
  /** Diagnostic data and information */
  readonly data?: XdslLineDiagnosticDiagnosticDataOVH;
  /** Line diagnostic fault type */
  readonly faultType?: XdslLineDiagnosticFaultTypeEnumOVH;
  /** Diagnostic id */
  readonly id?: number;
  /** Diagnostic status possible values */
  readonly status?: XdslLineDiagnosticDiagnosticStatusEnumOVH;
}

/**
 * Customer possible actions
 */
export type XdslLineDiagnosticCustomerActionsEnumOVH = typeof XdslLineDiagnosticCustomerActionsEnumOVH[keyof typeof XdslLineDiagnosticCustomerActionsEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslLineDiagnosticCustomerActionsEnumOVH = {
  bePreparedToCheckModemSynchronization: 'bePreparedToCheckModemSynchronization',
  changeDslFilterAndPlugInDti: 'changeDslFilterAndPlugInDti',
  changeExtensionCable: 'changeExtensionCable',
  changeProfile: 'changeProfile',
  checkConnectionCable: 'checkConnectionCable',
  checkConnectionLoginAndParameters: 'checkConnectionLoginAndParameters',
  checkFilter: 'checkFilter',
  connectModemToOtherPlugs: 'connectModemToOtherPlugs',
  neutralTest: 'neutralTest',
  rebootModem: 'rebootModem',
  resetModem: 'resetModem',
  unplugEveryModems: 'unplugEveryModems',
  unplugModem: 'unplugModem',
} as const;

/**
 * Customer action to do
 */
export interface XdslLineDiagnosticCustomerActionToDoOVH {
  /** action's description */
  readonly description?: string;
  /** Customer possible actions */
  readonly name?: XdslLineDiagnosticCustomerActionsEnumOVH;
}

/**
 * Diagnostic data and information
 */
export interface XdslLineDiagnosticDiagnosticDataOVH {
  /** List of actions already done by customer */
  readonly actionsDone?: readonly XdslLineDiagnosticCustomerActionsEnumOVH[];
  /** List of actions that must be done by customer */
  readonly actionsToDo?: readonly XdslLineDiagnosticCustomerActionToDoOVH[];
  /** Customer answers for line diagnostic */
  readonly answers?: XdslLineDiagnosticAnswersOVH;
  /**
   * Diagnostic comment. Can be update during any diagnostic step
   * @nullable
   */
  readonly comment?: string | null;
  /** Diagnostic creation date */
  readonly creationDate?: string;
  /**
   * End of diagnostic date. Will be null until problem totally identified
   * @nullable
   */
  readonly diagnosticDoneDate?: string | null;
  /** Error message */
  readonly error?: string;
  /** Last diagnostic update date */
  readonly lastUpdate?: string;
  /** Line information */
  readonly lineDetails?: XdslLineDiagnosticLineDetailsOVH;
  /**
   * Current or last robot action
   * @nullable
   */
  readonly robotAction?: XdslLineDiagnosticDiagnosticDataOVHRobotAction;
  /** Customer answers for line diagnostic */
  readonly seltTest?: XdslLineDiagnosticSeltResultOVH;
  /** Diagnostic timeout in minutes. Any action restart timeout */
  readonly timeout?: number;
  /** List of questions that must be answered by customer */
  readonly toAnswer?: readonly XdslLineDiagnosticQuestionOVH[];
}

/**
 * Informations directly get on DSLAM or Modem
 */
export interface XdslLineDiagnosticConnectionInformationsOVH {
  /**
   * Amount of CRC error detected
   * @nullable
   */
  readonly crcError?: number | null;
  /**
   * Downstream attenuation
   * @nullable
   */
  readonly downstreamAttenuation?: number | null;
  /**
   * Downstream margin
   * @nullable
   */
  readonly downstreamMargin?: number | null;
  /**
   * Downstream synchronization
   * @nullable
   */
  readonly downstreamSync?: number | null;
  /**
   * Modem interface name
   * @nullable
   */
  readonly ifName?: string | null;
  /**
   * Profile on the DSLAM
   * @nullable
   */
  readonly profile?: string | null;
  /**
   * Upstream attenuation
   * @nullable
   */
  readonly upstreamAttenuation?: number | null;
  /**
   * Upstream margin
   * @nullable
   */
  readonly upstreamMargin?: number | null;
  /**
   * Upstream synchronization
   * @nullable
   */
  readonly upstreamSync?: number | null;
}

/**
 * bandwidth unit for proof.ovh.net test values
 */
export type XdslLineDiagnosticBandwidthTestUnitEnumOVH = typeof XdslLineDiagnosticBandwidthTestUnitEnumOVH[keyof typeof XdslLineDiagnosticBandwidthTestUnitEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslLineDiagnosticBandwidthTestUnitEnumOVH = {
  Kbps: 'Kbps',
  Mbps: 'Mbps',
} as const;

/**
 * Problem Type on DSL connection
 * @nullable
 */
export type XdslLineDiagnosticAnswersOVHProblemType = XdslLineDiagnosticProblemTypeEnumOVH | null;

/**
 * bandwidth unit for proof.ovh.net test values
 * @nullable
 */
export type XdslLineDiagnosticAnswersOVHBandwidthTestUnit = XdslLineDiagnosticBandwidthTestUnitEnumOVH | null;

/**
 * Customer answers for line diagnostic
 */
export interface XdslLineDiagnosticAnswersOVH {
  /**
   * bandwidth unit for proof.ovh.net test values
   * @nullable
   */
  readonly bandwidthTestUnit?: XdslLineDiagnosticAnswersOVHBandwidthTestUnit;
  /**
   * comment will contains all information needed for intervention and about your access problem
   * @nullable
   */
  readonly comment?: string | null;
  /**
   * customer knows that he can be charged (150 euros HT) if he is responsible for the problem or if tests have not been done correctly ?
   * @nullable
   */
  readonly conditionsAccepted?: boolean | null;
  /**
   * customer's phone number
   * @nullable
   */
  readonly contactPhone?: string | null;
  /**
   * approximative datetime of problem happening
   * @nullable
   */
  readonly datetimeOfAppearance?: string | null;
  /**
   * bandwidth download value on proof.ovh.net test
   * @nullable
   */
  readonly downloadBandwidthTest?: number | null;
  /**
   * afternoon closing information or time for the site
   * @nullable
   */
  readonly endAfternoonHours?: string | null;
  /**
   * morning closing information or time for the site
   * @nullable
   */
  readonly endMorningHours?: string | null;
  /**
   * indicate if customer wants to be informed by sms
   * @nullable
   */
  readonly followBySms?: boolean | null;
  /**
   * Has modem kept his synchronization during line port reset ?
   * @nullable
   */
  readonly hasModemKeptSynchronization?: boolean | null;
  /**
   * id of appointment chosen ("possibleValues" contains choices list with id)
   * @nullable
   */
  readonly idAppointment?: number | null;
  /**
   * is non-professional site ?
   * @nullable
   */
  readonly individualSite?: boolean | null;
  /**
   * Is modem synchronized ? (whatever internet connection)
   * @nullable
   */
  readonly modemIsSynchronized?: boolean | null;
  /**
   * modem mac address
   * @nullable
   */
  readonly modemMac?: string | null;
  /**
   * Modem still synchronized ? Please check once again.
   * @nullable
   */
  readonly modemStillSynchronized?: boolean | null;
  /**
   * modem brand and reference
   * @nullable
   */
  readonly modemType?: string | null;
  /**
   * Ovh ticket name or ticket ID, only if a ticket is already opened for this problem
   * @nullable
   */
  readonly ovhTicket?: string | null;
  /**
   * Problem Type on DSL connection
   * @nullable
   */
  readonly problemType?: XdslLineDiagnosticAnswersOVHProblemType;
  /**
   * is access problem solved ?
   * @nullable
   */
  readonly resolvedAfterTests?: boolean | null;
  /**
   * is secure site ?
   * @nullable
   */
  readonly secureSite?: boolean | null;
  /**
   * Has customer several internal connections ? (on the same place)
   * @nullable
   */
  readonly severalInternetConnections?: boolean | null;
  /**
   * days or period where site access is not possible
   * @nullable
   */
  readonly siteClosedDays?: string | null;
  /**
   * digicode for site entrance
   * @nullable
   */
  readonly siteDigicode?: string | null;
  /**
   * site opening hours or information
   * @nullable
   */
  readonly siteOpening?: string | null;
  /**
   * afternoon opening information or time for the site
   * @nullable
   */
  readonly startAfternoonHours?: string | null;
  /**
   * morning opening information or time for the site
   * @nullable
   */
  readonly startMorningHours?: string | null;
  /**
   * bandwidth upload value on proof.ovh.net test
   * @nullable
   */
  readonly uploadBandwidthTest?: number | null;
}

/**
 * xdsl.ipv6.post
 */
export interface XdslIpv6PostOVH {
  /** Should the IPv6 be enabled ? */
  enabled: boolean;
}

/**
 * xdsl.email.pro.changePassword.post
 */
export interface XdslEmailProChangePasswordPostOVH {
  /** New email password */
  password: string;
}

/**
 * Status of an Email Pro task.
 */
export type XdslEmailProTaskStatusEnumOVH = typeof XdslEmailProTaskStatusEnumOVH[keyof typeof XdslEmailProTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslEmailProTaskStatusEnumOVH = {
  cancelled: 'cancelled',
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * Task Struct
 */
export interface XdslEmailProTaskOVH {
  /**
   * Finished date of the task
   * @nullable
   */
  readonly finishDate?: string | null;
  /** Function of the task */
  readonly function?: string;
  /** Status of an Email Pro task. */
  readonly status?: XdslEmailProTaskStatusEnumOVH;
  /** Todo date of the task */
  readonly todoDate?: string;
}

/**
 * Connected Device
 */
export interface XdslConnectedDeviceOVH {
  /** The state of this device on the modem */
  readonly active?: boolean;
  /** How did the device got its IP address */
  readonly addressSource?: XdslXdslModemConfigConnectedDeviceAddressSourceEnumOVH;
  /** Host name given by the device to the modem */
  readonly hostName?: string;
  /** The date time of the last update of thoses information */
  readonly informationDate?: string;
  /** On which interface is connected the device */
  readonly interfaceType?: string;
  /** The IP address of the device */
  readonly ipAddress?: IpOVH;
  /** The remaining time in seconds of the DHCP lease of this device (-1 means infinite) */
  readonly leaseTimeRemaining?: number;
  /** MAC address of the device */
  readonly macAddress?: string;
}

/**
 * xdsl.changeContact.post
 */
export interface XdslChangeContactPostOVH {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
}

/**
 * xdsl.applyTemplateToModem.post
 */
export interface XdslApplyTemplateToModemPostOVH {
  /** Modem Template Name */
  templateName: string;
}

/**
 * Evidences AsyncTask status
 */
export type XdslAntiSpamEvidencesInfoStatusEnumOVH = typeof XdslAntiSpamEvidencesInfoStatusEnumOVH[keyof typeof XdslAntiSpamEvidencesInfoStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslAntiSpamEvidencesInfoStatusEnumOVH = {
  error: 'error',
  ok: 'ok',
  pending: 'pending',
} as const;

/**
 * detail on evidences stored on PCS
 */
export interface XdslAntiSpamEvidencesInfoDetailOVH {
  /** File date on the PCS */
  readonly date?: string;
  /** File name on the PCS */
  readonly filename?: string;
  /** Temporary URL to access file */
  readonly url?: string;
}

/**
 * List of evidences
 */
export interface XdslAntiSpamEvidencesInfoOVH {
  /**
   * AsyncTask detailed error
   * @nullable
   */
  readonly error?: string | null;
  /**
   * Table with evidences stored on PCS
   * @nullable
   */
  readonly result?: readonly XdslAntiSpamEvidencesInfoDetailOVH[] | null;
  /** Evidences AsyncTask status */
  readonly status?: XdslAntiSpamEvidencesInfoStatusEnumOVH;
}

/**
 * AntiSpam status
 */
export type XdslAntiSpamAntiSpamStatusEnumOVH = typeof XdslAntiSpamAntiSpamStatusEnumOVH[keyof typeof XdslAntiSpamAntiSpamStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslAntiSpamAntiSpamStatusEnumOVH = {
  block: 'block',
  done: 'done',
  new: 'new',
  unblock: 'unblock',
  warn: 'warn',
} as const;

/**
 * Frequency of WLAN
 */
export type XdslWLANFrequencyEnumOVH = typeof XdslWLANFrequencyEnumOVH[keyof typeof XdslWLANFrequencyEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslWLANFrequencyEnumOVH = {
  '24GHz': '2.4GHz',
  '5GHz': '5GHz',
} as const;

/**
 * WLAN Configuration of the Modem
 */
export interface XdslWLANOVH {
  /** Indicate if frequencies 2.4GHz and 5GHz are agregated */
  readonly bandSteering?: boolean;
  /** Choice of a channel (When chosen, channelMode is set to Manual) */
  channel?: number;
  /** How the WiFi channel is selected */
  channelMode?: XdslXdslModemConfigChannelModeEnumOVH;
  /** Wifi state */
  enabled?: boolean;
  /** Frequency (2.4GHz | 5GHz) */
  readonly frequency?: XdslXdslModemConfigFrequencyEnumOVH;
  /** Indicate if it is normal access wifi or guest wifi */
  readonly guest?: boolean;
  /** WiFi security key */
  securityKey?: string;
  /** Type of WLAN security protection */
  securityType?: XdslXdslModemConfigSecurityTypeEnumOVH;
  /** Service Set Identifier of the WLAN interface */
  SSID?: string;
  /** Hide or show the Wifi */
  SSIDAdvertisementEnabled?: boolean;
  /**
   * ID of the ongoing todo (NULL if none)
   * @nullable
   */
  readonly taskId?: number | null;
  /** Name of the Wifi */
  readonly wifiName?: string;
}

/**
 * A value associated to a timestamp
 */
export interface XdslTimestampAndValueOVH {
  readonly timestamp?: number;
  /** @nullable */
  readonly value?: number | null;
}

/**
 * Do not apply these parameters from template. You can use parametersCapabilities to know availability
 * @nullable
 */
export type XdslTemplateModemOVHParametersToIgnore = XdslTemplateModemParametersToIgnoreOVH | null;

/**
 * Size of the Maximum Transmission Unit on the modem's interfaces
 * @nullable
 */
export type XdslTemplateModemOVHMtuSize = XdslXdslModemConfigMTUSizeEnumOVH | null;

/**
 * IP Address of the DMZ
 * @nullable
 */
export type XdslTemplateModemOVHDmzIP = IpOVH | null;

/**
 * Modem Template
 */
export interface XdslTemplateModemOVH {
  /** Parameters capabilities. Lists what can be applied from this template */
  readonly capabilities?: string;
  /** Template creation date */
  readonly creationDate?: string;
  /** List of DHCP for this template */
  readonly DHCP?: readonly XdslTemplateModemDHCPOVH[];
  /**
   * IP Address of the DMZ
   * @nullable
   */
  readonly dmzIP?: XdslTemplateModemOVHDmzIP;
  /** List of LAN for this template */
  readonly LAN?: readonly XdslTemplateModemLANOVH[];
  /**
   * Size of the Maximum Transmission Unit on the modem's interfaces
   * @nullable
   */
  readonly mtuSize?: XdslTemplateModemOVHMtuSize;
  /** Name of the Modem Template */
  readonly name?: string;
  /**
   * Do not apply these parameters from template. You can use parametersCapabilities to know availability
   * @nullable
   */
  parametersToIgnore?: XdslTemplateModemOVHParametersToIgnore;
  /** List of PortMapping for this template */
  readonly portMapping?: readonly XdslTemplateModemPortMappingOVH[];
  /** List of WLAN for this template */
  readonly WLAN?: readonly XdslTemplateModemWLANOVH[];
}

/**
 * Status of a task.
 */
export type XdslTaskStatusEnumOVH = typeof XdslTaskStatusEnumOVH[keyof typeof XdslTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslTaskStatusEnumOVH = {
  cancelled: 'cancelled',
  doing: 'doing',
  done: 'done',
  error: 'error',
  problem: 'problem',
  todo: 'todo',
} as const;

/**
 * Describes the current status of a task
 */
export interface XdslTaskOVH {
  readonly function?: string;
  readonly id?: number;
  readonly status?: XdslTaskStatusEnumOVH;
  /** Date when the action will start */
  readonly todoDate?: string;
  readonly updateDate?: string;
}

/**
 * Describe statistics information of a Modem
 */
export interface XdslStatsModemInfoOVH {
  /** Connection uptime */
  readonly connectionUptime?: number;
  /** Amount of CRC error detected */
  readonly crcError?: number;
  /** Modem uptime */
  readonly deviceUptime?: number;
  /** Downstream attenuation */
  readonly downstreamAttenuation?: number;
  /** Downstream margin */
  readonly downstreamMargin?: number;
  /** Downstream synchronization */
  readonly downstreamSync?: number;
  /** Amount of FEC error detected */
  readonly fecError?: number;
  /** Amount of HEC error detected */
  readonly hecError?: number;
  /** Time of last refresh */
  readonly lastUpdate?: string;
  /** Line modulation used */
  readonly modulation?: string;
  /** Count from last refresh in seconds */
  readonly quarterHourStart?: number;
  /** Synchronization uptime */
  readonly syncUptime?: number;
  /** Upstream attenuation */
  readonly upstreamAttenuation?: number;
  /** Upstream margin */
  readonly upstreamMargin?: number;
  /** Upstream synchronization */
  readonly upstreamSync?: number;
}

/**
 * Periods for statistics.
 */
export type XdslStatisticsPeriodEnumOVH = typeof XdslStatisticsPeriodEnumOVH[keyof typeof XdslStatisticsPeriodEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslStatisticsPeriodEnumOVH = {
  daily: 'daily',
  monthly: 'monthly',
  preview: 'preview',
  weekly: 'weekly',
  yearly: 'yearly',
} as const;

/**
 * Status of the service
 */
export type XdslServiceStatusEnumOVH = typeof XdslServiceStatusEnumOVH[keyof typeof XdslServiceStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslServiceStatusEnumOVH = {
  disabled: 'disabled',
  enabled: 'enabled',
} as const;

/**
 * Reason of a resiliation
 */
export type XdslResiliationReasonEnumOVH = typeof XdslResiliationReasonEnumOVH[keyof typeof XdslResiliationReasonEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslResiliationReasonEnumOVH = {
  addressMove: 'addressMove',
  billingProblems: 'billingProblems',
  cessationOfActivity: 'cessationOfActivity',
  changeOfTerms: 'changeOfTerms',
  ftth: 'ftth',
  goToCompetitor: 'goToCompetitor',
  other: 'other',
  technicalProblems: 'technicalProblems',
} as const;

/**
 * Show the resiliation terms
 */
export interface XdslResiliationTermsOVH {
  /** Price with it's currency and textual representation */
  readonly due?: OrderPriceOVH;
  /**
   * Date until which the customer is engaged
   * @nullable
   */
  readonly engageDate?: string | null;
  /** Minumum resiliationDate */
  readonly minResiliationDate?: string;
  /** Date at which the access will be resiliated */
  readonly resiliationDate?: string;
  /** List of available resiliation reasons */
  readonly resiliationReasons?: readonly XdslResiliationReasonEnumOVH[];
}

/**
 * Information about the reason for the resiliation
 */
export interface XdslResiliationSurveyOVH {
  /**
   * Comment about this resiliation
   * @nullable
   */
  readonly comment?: string | null;
  /** Reason of a resiliation */
  readonly type?: XdslResiliationReasonEnumOVH;
}

/**
 * Details about the resiliation
 */
export interface XdslResiliationFollowUpDetailOVH {
  /** Date when the resiliation will take effect */
  readonly dateTodo?: string;
  /** If the customer needs to return his modem */
  readonly needModemReturn?: boolean;
  /** Date when the resiliation was done */
  readonly registrationDate?: string;
  /** Status of the resiliation */
  readonly status?: string;
}

/**
 * Log entry of an auth attempt to the radius server
 */
export interface XdslRadiusConnectionLogOVH {
  readonly date?: string;
  readonly login?: string;
  readonly message?: string;
  readonly state?: string;
}

/**
 * The providers
 */
export type XdslProviderEnumOVH = typeof XdslProviderEnumOVH[keyof typeof XdslProviderEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslProviderEnumOVH = {
  axione: 'axione',
  bouygues: 'bouygues',
  ft: 'ft',
  ftBySfr: 'ftBySfr',
  kosc: 'kosc',
  koscDeg: 'koscDeg',
  ovh: 'ovh',
  sfr: 'sfr',
} as const;

/**
 * Details of a provider
 */
export interface XdslProviderOVH {
  /** Provider code */
  readonly code?: string;
  /** Provider name */
  readonly name?: string;
}

/**
 * An ip which will access to the defined rule. Default : no restriction applied
 * @nullable
 */
export type XdslPortMappingOVHAllowedRemoteIp = Ipv4OVH | null;

/**
 * Port Mappings
 */
export interface XdslPortMappingOVH {
  /**
   * An ip which will access to the defined rule. Default : no restriction applied
   * @nullable
   */
  allowedRemoteIp?: XdslPortMappingOVHAllowedRemoteIp;
  /**
   * Description of the Port Mapping
   * @nullable
   */
  description?: string | null;
  /**
   * The last port of the interval on the External Client that will get the connections
   * @nullable
   */
  externalPortEnd?: number | null;
  /** External Port that the modem will listen on. List of externalPorts not available for now in the API : 8, 21, 68, 5060, 21800-21805, 51005 */
  externalPortStart?: number;
  /** ID of the port mapping entry */
  readonly id?: number;
  /** IP address (e.g., 192.0.2.0) */
  internalClient?: IpOVH;
  /** The port on the Internal Client that will get the connections */
  internalPort?: number;
  /**
   * The last port of the interval on the Internal Client that will get the connections
   * @nullable
   */
  internalPortEnd?: number | null;
  /** Name of the port mapping entry */
  readonly name?: string;
  /** Type of protocol for the Port Mapping */
  protocol?: XdslXdslModemConfigProtocolTypeEnumOVH;
  /**
   * ID of the ongoing todo (NULL if none)
   * @nullable
   */
  readonly taskId?: number | null;
}

/**
 * Scheduled action before the next renewal of the service
 */
export interface XdslPendingActionOVH {
  readonly action?: string;
  readonly dateTodo?: string;
}

/**
 * Operators
 */
export type XdslOperatorTypeEnumOVH = typeof XdslOperatorTypeEnumOVH[keyof typeof XdslOperatorTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslOperatorTypeEnumOVH = {
  collect: 'collect',
  kosc: 'kosc',
  ovh: 'ovh',
} as const;

/**
 * Access ONT information
 */
export interface XdslOntOVH {
  /** MAC address of the device */
  readonly mac?: string;
  /** Serial of the device */
  readonly serial?: string;
}

/**
 * Details of a provider
 */
export interface XdslOfferOVH {
  /** Offer code */
  readonly code?: string;
  /** Offer name */
  readonly name?: string;
}

/**
 * Defines where and how the notifications will be sent
 */
export interface XdslMonitoringNotificationOVH {
  /** Whether or not to allow notifications for generic incidents */
  allowIncident?: boolean;
  /** The number of seconds the access has to be down to trigger an alert */
  downThreshold?: number;
  /**
   * The e-mail address, if type is mail
   * @nullable
   */
  email?: string | null;
  /** Whether to enable or not */
  enabled?: boolean;
  /** Frequency between notifications. */
  frequency?: XdslMonitoringNotificationsFrequencyEnumOVH;
  readonly id?: number;
  /**
   * The phone number, if type is sms
   * @nullable
   */
  phone?: string | null;
  /**
   * The SMS account which will be debited for each sent SMS, if the type is sms
   * @nullable
   */
  readonly smsAccount?: string | null;
  readonly type?: XdslMonitoringNotificationsTypeEnumOVH;
}

/**
 * Describe general information of a Modem
 */
export interface XdslModemInfoOVH {
  /** Describe device information of a Modem */
  readonly device?: XdslDeviceModemInfoOVH;
  /** Describe statistics information of a Modem */
  readonly statistics?: XdslStatsModemInfoOVH;
}

/**
 * Information about modem exchange
 */
export interface XdslModemExchangeInfoOVH {
  /** To know if you can exchange your modem */
  readonly canExchange?: boolean;
  /** Model of the new modem */
  readonly newModel?: string;
  /** Price with it's currency and textual representation */
  readonly price?: OrderPriceOVH;
  /** Price with it's currency and textual representation */
  readonly priceWithTax?: OrderPriceOVH;
}

/**
 * Describe the capabilities of the Modem
 */
export interface XdslModemCapabilitiesOVH {
  readonly canBeManagedByOvh?: boolean;
  readonly canChangeACS?: boolean;
  readonly canChangeBridgeMode?: boolean;
  readonly canChangeDHCP?: boolean;
  readonly canChangeDMZ?: boolean;
  readonly canChangeEasyFirewallLevel?: boolean;
  readonly canChangeFirmware?: boolean;
  readonly canChangeLAN?: boolean;
  readonly canChangeManagement?: boolean;
  readonly canChangeMtu?: boolean;
  readonly canChangePortMapping?: boolean;
  readonly canChangeWLAN?: boolean;
  readonly canReboot?: boolean;
  readonly canReconfigureVoip?: boolean;
  readonly canRefreshConnectedDevices?: boolean;
  readonly canReset?: boolean;
}

/**
 * Size of the Maximum Transmission Unit on the modem's interfaces
 * @nullable
 */
export type XdslModemOVHMtuSize = XdslXdslModemConfigMTUSizeEnumOVH | null;

/**
 * Level of the FireWall on the modem
 * @nullable
 */
export type XdslModemOVHEasyFirewallLevel = XdslXdslModemConfigEasyFirewallLevelEnumOVH | null;

/**
 * IP Address of the DMZ (To modify or delete the DMZ IP on the modem, a re-configuration of your modem has to be made, your configuration will be maintained, but you will lose your connection a few minutes)
 * @nullable
 */
export type XdslModemOVHDmzIP = IpOVH | null;

/**
 * Modem
 */
export interface XdslModemOVH {
  /** ACS backend used by the modem */
  acsBackend?: XdslXdslModemConfigACSBackendEnumOVH;
  /**
   * Version of ACS API used
   * @nullable
   */
  readonly acsVersion?: string | null;
  readonly brandName?: string;
  readonly capabilities?: XdslModemCapabilitiesOVH;
  /**
   * IP Address of the DMZ (To modify or delete the DMZ IP on the modem, a re-configuration of your modem has to be made, your configuration will be maintained, but you will lose your connection a few minutes)
   * @nullable
   */
  dmzIP?: XdslModemOVHDmzIP;
  /**
   * Level of the FireWall on the modem
   * @nullable
   */
  readonly easyFirewallLevel?: XdslModemOVHEasyFirewallLevel;
  /** Whether or not the modem supports IPv6 */
  readonly ipv6Support?: boolean;
  /** Whether or not the modem is in bridge mode. To pass from bridge mode to routed mode, a reset is necessary. If the modem is managedByOvh, the bridge state will be kept after a reset */
  isBridged?: boolean;
  /**
   * Last time the modem made a CWMP request to the Auto Configuration Server
   * @nullable
   */
  readonly lastCwmpRequestDate?: string | null;
  readonly macAddress?: string;
  /** Whether or not the user can configure his modem via OVH Interface (will lock telnet and local HTTP configuration page) */
  managedByOvh?: boolean;
  readonly model?: string;
  /**
   * Size of the Maximum Transmission Unit on the modem's interfaces
   * @nullable
   */
  mtuSize?: XdslModemOVHMtuSize;
  readonly serialNumber?: string;
}

/**
 * Line tests results
 */
export type XdslLineTestEnumOVH = typeof XdslLineTestEnumOVH[keyof typeof XdslLineTestEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslLineTestEnumOVH = {
  actionPending: 'actionPending',
  customerSideProblem: 'customerSideProblem',
  error: 'error',
  noProblem: 'noProblem',
  ovhSideProblem: 'ovhSideProblem',
} as const;

/**
 * Various types of statisctics available for the line.
 */
export type XdslLineStatisticsTypeEnumOVH = typeof XdslLineStatisticsTypeEnumOVH[keyof typeof XdslLineStatisticsTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslLineStatisticsTypeEnumOVH = {
  'attenuation:download': 'attenuation:download',
  'attenuation:upload': 'attenuation:upload',
  'error:crc': 'error:crc',
  'error:fec': 'error:fec',
  'error:hec': 'error:hec',
  'snr:download': 'snr:download',
  'snr:upload': 'snr:upload',
  'synchronization:download': 'synchronization:download',
  'synchronization:upload': 'synchronization:upload',
} as const;

/**
 * xdsl.LineSectionLength
 */
export interface XdslLineSectionLengthOVH {
  /** The diameter of this section in millimeters */
  readonly diameter?: number;
  /** The length of this section in meters */
  readonly length?: number;
}

/**
 * @nullable
 */
export type XdslLineDiagnosticOVHLineTest = XdslLineTestEnumOVH | null;

/**
 * Detailed line tests
 */
export interface XdslLineDiagnosticOVH {
  /** @nullable */
  readonly lineTest?: XdslLineDiagnosticOVHLineTest;
  /** @nullable */
  readonly lineTestTime?: string | null;
  readonly number?: string;
  /** @nullable */
  readonly proposedProfileId?: number | null;
  readonly sync?: boolean;
}

/**
 * Infos about a Landline at the concentration point
 */
export interface XdslLandlineConcentrationPointOVH {
  /** Identifier of the head of the cable from the MDF */
  readonly lineHead?: string;
  /** Identifier of the section at the lineHead */
  readonly lineInitialSection?: number;
  /** Identifier of the pair at the lineHead's lineInitialSection */
  readonly lineInitialSectionPair?: number;
}

/**
 * Data to identify the line at the concentration point
 * @nullable
 */
export type XdslLineOVHConcentrationPoint = XdslLandlineConcentrationPointOVH | null;

/**
 * LAN Configuration of the Modem
 */
export interface XdslLANOVH {
  /** How the modem gets its LAN IP Address */
  addressingType?: XdslXdslModemConfigAddressingTypeEnumOVH;
  /** IP address (e.g., 192.0.2.0) */
  IPAddress?: IpOVH;
  /** Name of the LAN */
  readonly lanName?: string;
  /** IP address (e.g., 192.0.2.0) */
  subnetMask?: IpOVH;
  /**
   * ID of the ongoing todo (NULL if none)
   * @nullable
   */
  readonly taskId?: number | null;
}

/**
 * Status of an IP.
 */
export type XdslIpStatusEnumOVH = typeof XdslIpStatusEnumOVH[keyof typeof XdslIpStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslIpStatusEnumOVH = {
  active: 'active',
  close: 'close',
  toDelete: 'toDelete',
} as const;

/**
 * Detected incident
 */
export interface XdslIncidentOVH {
  readonly comment?: string;
  /** Estimated start date */
  readonly creationDate?: string;
  /** Department list */
  readonly departments?: readonly string[];
  /**
   * Estimated end date
   * @nullable
   */
  readonly endDate?: string | null;
  /** ID of the incident */
  readonly id?: number;
  /** NRA list */
  readonly nra?: readonly string[];
  /** Operator */
  readonly operators?: readonly XdslOperatorTypeEnumOVH[];
  /**
   * Task ID on travaux.ovh.com
   * @nullable
   */
  readonly taskId?: number | null;
  /** @nullable */
  readonly taskReference?: string | null;
}

/**
 * Informations about an IP address
 */
export interface XdslIPOVH {
  readonly dnsList?: readonly IpOVH[];
  /** The IP address */
  readonly ip?: IpOVH;
  readonly range?: number;
  /** status of the IP */
  readonly status?: XdslIpStatusEnumOVH;
  readonly version?: CoreTypesIpVersionEnumOVH;
}

/**
 * GRT option for an access.
 */
export type XdslGtrEnumOVH = typeof XdslGtrEnumOVH[keyof typeof XdslGtrEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslGtrEnumOVH = {
  '10ho': '10ho',
  '20m_10ho': '20m_10ho',
  '20m_4ho': '20m_4ho',
  '4hno': '4hno',
  '4ho': '4ho',
  '5m_10ho': '5m_10ho',
  '5m_4ho': '5m_4ho',
  dplus1: 'dplus1',
  none: 'none',
} as const;

/**
 * Status of the fiber eligibility
 */
export type XdslFiberEligibilityStatusEnumOVH = typeof XdslFiberEligibilityStatusEnumOVH[keyof typeof XdslFiberEligibilityStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslFiberEligibilityStatusEnumOVH = {
  eligible: 'eligible',
  no_building: 'no_building',
  not_eligible: 'not_eligible',
  not_yet_eligible: 'not_yet_eligible',
} as const;

/**
 * Provider
 * @nullable
 */
export type XdslFiberEligibilityOVHProvider = XdslProviderOVH | null;

/**
 * Offer
 * @nullable
 */
export type XdslFiberEligibilityOVHOffer = XdslOfferOVH | null;

/**
 * Copper grid closure trajectory
 * @nullable
 */
export type XdslFiberEligibilityOVHCopperGridClosureTrajectory = XdslCopperGridClosureTrajectoryOVH | null;

/**
 * Fiber eligibility
 */
export interface XdslFiberEligibilityOVH {
  /**
   * Availability date
   * @nullable
   */
  readonly availabilityDate?: string | null;
  /**
   * Building name
   * @nullable
   */
  readonly buildingName?: string | null;
  /**
   * Building reference
   * @nullable
   */
  readonly buildingReference?: string | null;
  /**
   * Building sequence id
   * @nullable
   */
  readonly buildingSeqId?: number | null;
  /**
   * Copper grid closure trajectory
   * @nullable
   */
  readonly copperGridClosureTrajectory?: XdslFiberEligibilityOVHCopperGridClosureTrajectory;
  /**
   * First eligible date
   * @nullable
   */
  readonly firstEligibleDate?: string | null;
  /**
   * Available GRTs
   * @nullable
   */
  readonly grts?: readonly XdslGtrEnumOVH[] | null;
  /** Identifier */
  readonly id?: number;
  /** Last update date */
  readonly lastUpdate?: string;
  /**
   * Offer
   * @nullable
   */
  readonly offer?: XdslFiberEligibilityOVHOffer;
  /**
   * Provider
   * @nullable
   */
  readonly provider?: XdslFiberEligibilityOVHProvider;
  /** Status */
  readonly status?: XdslFiberEligibilityStatusEnumOVH;
}

/**
 * Maximum time needed to repair a landline
 */
export type XdslFaultRepairTimeEnumOVH = typeof XdslFaultRepairTimeEnumOVH[keyof typeof XdslFaultRepairTimeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslFaultRepairTimeEnumOVH = {
  '10HO': '10HO',
  '4HNO': '4HNO',
  '4HO': '4HO',
  DPLUS1: 'DPLUS1',
  NORMAL: 'NORMAL',
} as const;

/**
 * Informations about the extra IP range during address move
 */
export interface XdslExtraIpRangeMoveOVH {
  /** Date of the migration */
  readonly date?: string;
  /** IPv4 CIDR notation (e.g., 192.0.2.0/24) */
  readonly ipRange?: Ipv4BlockOVH;
  /** Access where the IP range will be moved to */
  readonly moveTo?: string;
}

/**
 * Different states of a DSLAM port
 */
export type XdslDslamPortStatusEnumOVH = typeof XdslDslamPortStatusEnumOVH[keyof typeof XdslDslamPortStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslDslamPortStatusEnumOVH = {
  activated: 'activated',
  deactivated: 'deactivated',
  outofsync: 'outofsync',
} as const;

/**
 * A message log from the DSLAM
 */
export interface XdslDslamPortLogOVH {
  readonly date?: string;
  /** The last time this message occured */
  readonly lastOccurrenceDate?: string;
  readonly message?: string;
  /** The number of times this message occured between date and lastOccurrenceDate */
  readonly numberOfOccurrences?: number;
}

/**
 * Profile on the DSLAM
 */
export interface XdslDslamLineProfileOVH {
  readonly id?: number;
  readonly isCurrent?: boolean;
  readonly name?: string;
}

/**
 * @nullable
 */
export type XdslDslamPortOVHProfile = XdslDslamLineProfileOVH | null;

/**
 * Information about the port on the DSLAM
 */
export interface XdslDslamPortOVH {
  /**
   * Last time the port lost the synchronization
   * @nullable
   */
  readonly lastDesyncDate?: string | null;
  /**
   * Last time the port synchronized
   * @nullable
   */
  readonly lastSyncDate?: string | null;
  /** @nullable */
  readonly profile?: XdslDslamPortOVHProfile;
  readonly status?: XdslDslamPortStatusEnumOVH;
}

/**
 * Possible DSL technologies
 */
export type XdslDslTypeEnumOVH = typeof XdslDslTypeEnumOVH[keyof typeof XdslDslTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslDslTypeEnumOVH = {
  adsl: 'adsl',
  ftte: 'ftte',
  ftth: 'ftth',
  sdsl: 'sdsl',
  vdsl: 'vdsl',
} as const;

/**
 * Describe device information of a Modem
 */
export interface XdslDeviceModemInfoOVH {
  /** Modem brand */
  readonly brand?: string;
  /** IPv4 address (e.g., 192.0.2.0) */
  readonly ip?: Ipv4OVH;
  /** Time of last information refresh */
  readonly lastUpdate?: string;
  /** Modem mac address */
  readonly macAddress?: string;
  /** Modem type of model */
  readonly model?: string;
  /** Organizational Unique Identifier */
  readonly oui?: string;
  /**
   * Protocol used for connection
   * @nullable
   */
  readonly overEthernet?: string | null;
  /**
   * login used for ppp protocol
   * @nullable
   */
  readonly pppLogin?: string | null;
  /** Modem serial key */
  readonly serial?: string;
  /** Software Version */
  readonly softVersion?: string;
}

/**
 * Show the deconsolidation terms
 */
export interface XdslDeconsolidationTermsOVH {
  /** Duration of month the access will be engaged */
  readonly engagement?: number;
  /** Price with it's currency and textual representation */
  readonly monthlyPrice?: OrderPriceOVH;
  /** Price with it's currency and textual representation */
  readonly price?: OrderPriceOVH;
}

/**
 * Deconsolidation of the line.
 */
export type XdslDeconsolidationEnumOVH = typeof XdslDeconsolidationEnumOVH[keyof typeof XdslDeconsolidationEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslDeconsolidationEnumOVH = {
  createNeighbour: 'createNeighbour',
  creation: 'creation',
  creationNeighbour: 'creationNeighbour',
  partial: 'partial',
  total: 'total',
} as const;

/**
 * Information about the physical copper line
 */
export interface XdslLineOVH {
  /**
   * Data to identify the line at the concentration point
   * @nullable
   */
  readonly concentrationPoint?: XdslLineOVHConcentrationPoint;
  readonly deconsolidation?: XdslDeconsolidationEnumOVH;
  /**
   * True if the line is directly wired on the DSLAM
   * @nullable
   */
  readonly directDistribution?: boolean | null;
  /** Distance in meters from the DSLAM */
  readonly distance?: number;
  readonly faultRepairTime?: XdslFaultRepairTimeEnumOVH;
  /** Detailed information about the sections between the DSLAM and the telephone jack */
  readonly lineSectionsLength?: readonly XdslLineSectionLengthOVH[];
  /** Mitigation of the line in dB */
  readonly mitigation?: number;
  /** The number of the line */
  readonly number?: string;
  /**
   * The number used to place the order. Null if the same as the current number.
   * @nullable
   */
  readonly originalNumber?: string | null;
  /** Whether the line number has been ported to OVH, to be used with VoIP service */
  readonly portability?: boolean;
  /**
   * The download synchronisation on the DSLAM in Kbps
   * @nullable
   */
  readonly syncDown?: number | null;
  /**
   * The upload synchronisation on the DSLAM in Kbps
   * @nullable
   */
  readonly syncUp?: number | null;
}

/**
 * DHCP Static Address
 */
export interface XdslDHCPStaticAddressOVH {
  /** IP address (e.g., 192.0.2.0) */
  IPAddress?: IpOVH;
  /** The MAC address of the device */
  readonly MACAddress?: string;
  /**
   * Name of the DHCP Static lease
   * @nullable
   */
  name?: string | null;
  /**
   * ID of the ongoing todo (NULL if none)
   * @nullable
   */
  readonly taskId?: number | null;
}

/**
 * Secondary DNS servers to be given to the clients
 * @nullable
 */
export type XdslDHCPOVHSecondaryDNS = IpOVH | null;

/**
 * DHCP Configuration of the Modem
 */
export interface XdslDHCPOVH {
  /** IP address (e.g., 192.0.2.0) */
  defaultGateway?: IpOVH;
  /** Name of the DHCP */
  readonly dhcpName?: string;
  /** Domain name provided to the clients */
  domainName?: string;
  /** IP address (e.g., 192.0.2.0) */
  endAddress?: IpOVH;
  /** Lease time in seconds of client assigned address (-1 means infinite) */
  leaseTime?: number;
  /** IP address (e.g., 192.0.2.0) */
  primaryDNS?: IpOVH;
  /**
   * Secondary DNS servers to be given to the clients
   * @nullable
   */
  secondaryDNS?: XdslDHCPOVHSecondaryDNS;
  /** State of the DHCP server of the modem */
  serverEnabled?: boolean;
  /** IP address (e.g., 192.0.2.0) */
  startAddress?: IpOVH;
  /** IP address (e.g., 192.0.2.0) */
  subnetMask?: IpOVH;
  /**
   * ID of the ongoing todo (NULL if none)
   * @nullable
   */
  readonly taskId?: number | null;
}

/**
 * Copper grid closure trajectory
 */
export interface XdslCopperGridClosureTrajectoryOVH {
  /**
   * Commercial closure announcement date
   * @nullable
   */
  readonly commercialClosureAnnouncementDate?: string | null;
  /**
   * Commercial closure date
   * @nullable
   */
  readonly commercialClosureDate?: string | null;
  /**
   * Commercial closure initial date
   * @nullable
   */
  readonly commercialClosureInitialDate?: string | null;
  /** Department code */
  readonly departmentCode?: string;
  /**
   * Department name
   * @nullable
   */
  readonly departmentName?: string | null;
  /**
   * FTTH zone
   * @nullable
   */
  readonly ftthZone?: string | null;
  /** INSEE code */
  readonly inseeCode?: string;
  /**
   * Lot
   * @nullable
   */
  readonly lot?: string | null;
  /** Municipality name */
  readonly municipalityName?: string;
  /**
   * OI code
   * @nullable
   */
  readonly oiCode?: string | null;
  /**
   * OI name
   * @nullable
   */
  readonly oiName?: string | null;
  /**
   * Technical closure announcement date
   * @nullable
   */
  readonly technicalClosureAnnouncementDate?: string | null;
  /**
   * Technical closure date
   * @nullable
   */
  readonly technicalClosureDate?: string | null;
  /**
   * Technical closure initial date
   * @nullable
   */
  readonly technicalClosureInitialDate?: string | null;
}

/**
 * Describe general information of a Modem
 * @nullable
 */
export type XdslAsyncTaskXdslModemInfoOVHResult = XdslModemInfoOVH | null;

/**
 * AsyncTask status
 */
export type XdslAsyncTaskStatusEnumOVH = typeof XdslAsyncTaskStatusEnumOVH[keyof typeof XdslAsyncTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslAsyncTaskStatusEnumOVH = {
  error: 'error',
  ok: 'ok',
  pending: 'pending',
} as const;

/**
 * xdsl.AsyncTask_xdsl.ModemInfo
 */
export interface XdslAsyncTaskXdslModemInfoOVH {
  /** @nullable */
  readonly error?: string | null;
  /**
   * Describe general information of a Modem
   * @nullable
   */
  readonly result?: XdslAsyncTaskXdslModemInfoOVHResult;
  /** AsyncTask status */
  readonly status?: XdslAsyncTaskStatusEnumOVH;
}

/**
 * xdsl.AsyncTask_connectivity.eligibility.Meetings
 */
export interface XdslAsyncTaskConnectivityEligibilityMeetingsOVH {
  /** @nullable */
  readonly error?: string | null;
  /** List of available meeting time slots */
  readonly result?: ConnectivityEligibilityMeetingsOVH;
  /** AsyncTask status */
  readonly status?: XdslAsyncTaskStatusEnumOVH;
}

/**
 * Spams detected from xdsl access
 */
export interface XdslAntiSpamOVH {
  /** Detection date */
  readonly date?: string;
  /** IP which spam */
  readonly ip?: IpOVH;
  /** Last spam detection date */
  readonly lastSpamDetected?: string;
  /** AntiSpam status */
  readonly status?: XdslAntiSpamAntiSpamStatusEnumOVH;
}

/**
 * All components of an address
 */
export interface XdslAddressDetailOVH {
  /** @nullable */
  readonly building?: string | null;
  readonly city?: string;
  /** @nullable */
  readonly door?: string | null;
  readonly firstName?: string;
  /** @nullable */
  readonly floor?: string | null;
  /** Identifier of the city */
  readonly inseeCode?: string;
  readonly lastName?: string;
  readonly numberStreet?: string;
  /** @nullable */
  readonly residence?: string | null;
  /** Identifier of the street */
  readonly rivoliCode?: string;
  /** @nullable */
  readonly stairs?: string | null;
  readonly street?: string;
  readonly zipCode?: string;
}

/**
 * Status of mail sending on the Access
 * @nullable
 */
export type XdslAccessWithIAMOVHMailSending = XdslMailSendingAccessStatusEnumOVH | null;

/**
 * IAM resource metadata
 * @nullable
 */
export type XdslAccessWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Status of the access
 */
export type XdslAccessStatusEnumOVH = typeof XdslAccessStatusEnumOVH[keyof typeof XdslAccessStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslAccessStatusEnumOVH = {
  active: 'active',
  cancelled: 'cancelled',
  close: 'close',
  deleting: 'deleting',
  doing: 'doing',
  migration: 'migration',
  slamming: 'slamming',
  terminated: 'terminated',
  upgradeOffer: 'upgradeOffer',
} as const;

/**
 * Various types of statisctics available for the access.
 */
export type XdslAccessStatisticsTypeEnumOVH = typeof XdslAccessStatisticsTypeEnumOVH[keyof typeof XdslAccessStatisticsTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslAccessStatisticsTypeEnumOVH = {
  ping: 'ping',
  'traffic:download': 'traffic:download',
  'traffic:upload': 'traffic:upload',
} as const;

/**
 * Available access roles
 */
export type XdslAccessRoleEnumOVH = typeof XdslAccessRoleEnumOVH[keyof typeof XdslAccessRoleEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslAccessRoleEnumOVH = {
  backup: 'backup',
  main: 'main',
} as const;

/**
 * XDSL Access
 */
export interface XdslAccessWithIAMOVH {
  readonly accessName?: string;
  readonly accessType?: XdslDslTypeEnumOVH;
  readonly address?: XdslAddressDetailOVH;
  readonly capabilities?: XdslAccessCapabilitiesOVH;
  description?: string;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: XdslAccessWithIAMOVHIam;
  readonly ipv6Enabled?: boolean;
  /**
   * Rate limit on the LNS in kbps - Only available if canApplyLnsRateLimit capability is set to true - Must be a multiple of 64 - Min value 64 / Max value 100032
   * @nullable
   */
  lnsRateLimit?: number | null;
  /**
   * Status of mail sending on the Access
   * @nullable
   */
  readonly mailSending?: XdslAccessWithIAMOVHMailSending;
  /** Whether or not this access is monitored */
  monitoring?: boolean;
  readonly nra?: string;
  /**
   * Pack name, if access is in a pack
   * @nullable
   */
  readonly packName?: string | null;
  readonly pairsNumber?: number;
  /** The provider */
  readonly provider?: XdslProviderEnumOVH;
  /**
   * The provider of the infrastructure, if applicable
   * @nullable
   */
  readonly providerInfra?: string | null;
  readonly role?: XdslAccessRoleEnumOVH;
  readonly status?: XdslAccessStatusEnumOVH;
}

/**
 * An access latency item
 */
export interface XdslAccessLatencyOVH {
  /** @nullable */
  readonly loss?: number | null;
  /** @nullable */
  readonly status?: number | null;
  readonly timestamp?: number;
  /** @nullable */
  readonly value?: number | null;
  /** @nullable */
  readonly verboseStatus?: string | null;
}

/**
 * Describe the capabilities of the access diagnostic
 */
export interface XdslAccessDiagnosticCapabilitiesOVH {
  readonly incident?: boolean;
  readonly isActiveOnLns?: boolean;
  readonly isModemConnected?: boolean;
  readonly lineTest?: boolean;
  readonly ping?: boolean;
  readonly proposedProfileId?: boolean;
  readonly sync?: boolean;
}

/**
 * Diagnostic of the access
 */
export interface XdslAccessDiagnosticOVH {
  /** Available tests for this access */
  readonly capabilities?: XdslAccessDiagnosticCapabilitiesOVH;
  /** Datime of the diagnostic */
  readonly diagnosticTime?: string;
  /**
   * Is there an ongoing genericIncident on the access ?
   * @nullable
   */
  readonly incident?: boolean | null;
  /**
   * Is the access active on its primary or secondary LNS
   * @nullable
   */
  readonly isActiveOnLns?: boolean | null;
  /**
   * Is the modem connected ?
   * @nullable
   */
  readonly isModemConnected?: boolean | null;
  /**
   * Test details by line
   * @nullable
   */
  readonly lineDetails?: readonly XdslLineDiagnosticOVH[] | null;
  /**
   * Is there an ongoing scheduled maintenance by operator on the access ?
   * @nullable
   */
  readonly maintenance?: boolean | null;
  /**
   * Does the access ping ?
   * @nullable
   */
  readonly ping?: boolean | null;
  /** Remaining number of diagnostic for this access */
  readonly remaining?: number;
}

/**
 * Describe the capabilities of the Access
 */
export interface XdslAccessCapabilitiesOVH {
  readonly canApplyLnsRateLimit?: boolean;
  readonly canChangeDslamProfile?: boolean;
  readonly canChangeLns?: boolean;
  readonly canGetRadiusConnectionLogs?: boolean;
  readonly canResetDslamPort?: boolean;
  readonly hasDslamPort?: boolean;
}

/**
 * Status of mail sending on the Access
 * @nullable
 */
export type XdslAccessOVHMailSending = XdslMailSendingAccessStatusEnumOVH | null;

/**
 * XDSL Access
 */
export interface XdslAccessOVH {
  readonly accessName?: string;
  readonly accessType?: XdslDslTypeEnumOVH;
  readonly address?: XdslAddressDetailOVH;
  readonly capabilities?: XdslAccessCapabilitiesOVH;
  description?: string;
  readonly ipv6Enabled?: boolean;
  /**
   * Rate limit on the LNS in kbps - Only available if canApplyLnsRateLimit capability is set to true - Must be a multiple of 64 - Min value 64 / Max value 100032
   * @nullable
   */
  lnsRateLimit?: number | null;
  /**
   * Status of mail sending on the Access
   * @nullable
   */
  readonly mailSending?: XdslAccessOVHMailSending;
  /** Whether or not this access is monitored */
  monitoring?: boolean;
  readonly nra?: string;
  /**
   * Pack name, if access is in a pack
   * @nullable
   */
  readonly packName?: string | null;
  readonly pairsNumber?: number;
  /** The provider */
  readonly provider?: XdslProviderEnumOVH;
  /**
   * The provider of the infrastructure, if applicable
   * @nullable
   */
  readonly providerInfra?: string | null;
  readonly role?: XdslAccessRoleEnumOVH;
  readonly status?: XdslAccessStatusEnumOVH;
}

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Return merchandise authorisation type
 */
export type TelephonyRmaTypeEnumOVH = typeof TelephonyRmaTypeEnumOVH[keyof typeof TelephonyRmaTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaTypeEnumOVH = {
  after_sale_equipment_service_exchange: 'after sale equipment service exchange',
  after_sale_phone_service_exchange: 'after sale phone service exchange',
  equipment_restitution: 'equipment restitution',
  fast_exchange: 'fast exchange',
  old_merchandise_reception_before_exchange: 'old merchandise reception before exchange',
  phone_restitution: 'phone restitution',
  resends_due_to_shipping_lost_by_the_carrier: 'resends due to shipping lost by the carrier',
  resends_due_to_shipping_not_withdraw: 'resends due to shipping not withdraw',
  specific_return_merchandise_authorisation: 'specific return merchandise authorisation',
  termination: 'termination',
  unknown: 'unknown',
} as const;

/**
 * Status of the RMA step
 */
export type TelephonyRmaStepStatusEnumOVH = typeof TelephonyRmaStepStatusEnumOVH[keyof typeof TelephonyRmaStepStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaStepStatusEnumOVH = {
  done: 'done',
  todo: 'todo',
} as const;

/**
 * RMA step names
 */
export type TelephonyRmaStepNameEnumOVH = typeof TelephonyRmaStepNameEnumOVH[keyof typeof TelephonyRmaStepNameEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaStepNameEnumOVH = {
  dispatchJustification: 'dispatchJustification',
  equipmentSending: 'equipmentSending',
  equipmentTesting: 'equipmentTesting',
  opening: 'opening',
  parcelReception: 'parcelReception',
  parcelValidation: 'parcelValidation',
  validation: 'validation',
} as const;

/**
 * Informations related to the current RMA step status
 */
export interface TelephonyRmaStepOVH {
  /** A brief description of the step */
  readonly description?: string;
  /**
   * The date when this step was done
   * @nullable
   */
  readonly doneDate?: string | null;
  /**
   * Additional information about the step
   * @nullable
   */
  readonly infos?: string | null;
  /** RMA step names */
  readonly name?: TelephonyRmaStepNameEnumOVH;
  /** Status of the RMA step */
  readonly status?: TelephonyRmaStepStatusEnumOVH;
}

/**
 * Return merchandise authorisation step
 */
export type TelephonyRmaStatusEnumOVH = typeof TelephonyRmaStatusEnumOVH[keyof typeof TelephonyRmaStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaStatusEnumOVH = {
  closed: 'closed',
  open: 'open',
  received: 'received',
} as const;

/**
 * Return merchandise authorisation type
 */
export type TelephonyRmaReplaceTypeEnumOVH = typeof TelephonyRmaReplaceTypeEnumOVH[keyof typeof TelephonyRmaReplaceTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaReplaceTypeEnumOVH = {
  changePhone: 'changePhone',
  phoneRestitution: 'phoneRestitution',
  undefined: 'undefined',
} as const;

/**
 * Return merchandise authorisation offer type
 */
export type TelephonyRmaOfferTypeEnumOVH = typeof TelephonyRmaOfferTypeEnumOVH[keyof typeof TelephonyRmaOfferTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaOfferTypeEnumOVH = {
  deposit: 'deposit',
  loan: 'loan',
  purchase: 'purchase',
} as const;

/**
 * Types of return merchandise authorisation you can change to
 */
export type TelephonyRmaChangeTypeEnumOVH = typeof TelephonyRmaChangeTypeEnumOVH[keyof typeof TelephonyRmaChangeTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelephonyRmaChangeTypeEnumOVH = {
  resiliate: 'resiliate',
  toSip: 'toSip',
} as const;

/**
 * Offer type of the new merchandise in case of exchange
 * @nullable
 */
export type TelephonyRmaOVHOfferTypeNew = TelephonyRmaOfferTypeEnumOVH | null;

/**
 * Current Return Merchandise Authorisation
 */
export interface TelephonyRmaOVH {
  /** Is the RMA cancellable? */
  readonly cancellable?: boolean;
  /** Creation datetime of the return merchandise authorisation ticket */
  readonly creationDatetime?: string;
  /** Merchandise reference */
  readonly equipmentReference?: string;
  /** Return merchandise authorisation identifier */
  readonly id?: string;
  /**
   * New merchandise brand in case of exchange
   * @nullable
   */
  readonly newMerchandise?: string | null;
  /**
   * Offer type of the new merchandise in case of exchange
   * @nullable
   */
  readonly offerTypeNew?: TelephonyRmaOVHOfferTypeNew;
  /** Offer type of the return merchandise */
  readonly offerTypeOld?: TelephonyRmaOfferTypeEnumOVH;
  /** Return merchandise authorisation type */
  process?: TelephonyRmaReplaceTypeEnumOVH;
  /**
   * Reception datetime of the return merchandise authorisation ticket
   * @nullable
   */
  readonly receptionDatetime?: string | null;
  /** Contact information structure */
  shippingContact?: TelephonyContactOVH;
  /** Return merchandise authorisation step */
  readonly status?: TelephonyRmaStatusEnumOVH;
  /** Indicates the current status of the RMA with a list of steps */
  readonly steps?: readonly TelephonyRmaStepOVH[];
  /**
   * Termination datetime of the return merchandise authorisation ticket
   * @nullable
   */
  readonly terminationDatetime?: string | null;
  /** Typology process of merchandise return */
  readonly type?: TelephonyRmaTypeEnumOVH;
}

/**
 * Contact country
 * @nullable
 */
export type TelephonyContactOVHCountry = CoreTypesCountryEnumOVH | null;

/**
 * Contact information structure
 */
export interface TelephonyContactOVH {
  /**
   * Contact address
   * @nullable
   */
  address?: string | null;
  /**
   * Contact city
   * @nullable
   */
  city?: string | null;
  /**
   * Contact country
   * @nullable
   */
  country?: TelephonyContactOVHCountry;
  /** @nullable */
  email?: string | null;
  /**
   * Contact firstname
   * @nullable
   */
  firstname?: string | null;
  /**
   * Contact name
   * @nullable
   */
  name?: string | null;
  /**
   * Contact organisation
   * @nullable
   */
  organisation?: string | null;
  /**
   * Contact phone
   * @nullable
   */
  phone?: string | null;
  /**
   * Contact zip
   * @nullable
   */
  zip?: string | null;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type SpareXdslXdslSpareWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Spare properties
 */
export interface SpareXdslXdslSpareWithIAMOVH {
  /** Modem brand model */
  readonly brand?: string;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: SpareXdslXdslSpareWithIAMOVHIam;
  /** Mac address */
  readonly macAddress?: string;
}

/**
 * Spare properties
 */
export interface SpareXdslXdslSpareOVH {
  /** Modem brand model */
  readonly brand?: string;
  /** Mac address */
  readonly macAddress?: string;
}

/**
 * service.StateEnum
 */
export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * Type of reduction
 */
export type OrderReductionTypeEnumOVH = typeof OrderReductionTypeEnumOVH[keyof typeof OrderReductionTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderReductionTypeEnumOVH = {
  fixed_amount: 'fixed_amount',
  forced_amount: 'forced_amount',
  percentage: 'percentage',
} as const;

/**
 * Context of the reduction
 */
export type OrderReductionContextEnumOVH = typeof OrderReductionContextEnumOVH[keyof typeof OrderReductionContextEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderReductionContextEnumOVH = {
  promotion: 'promotion',
  voucher: 'voucher',
} as const;

/**
 * Price with its currency and textual representation
 */
export interface OrderPriceOVH {
  /** Currency code */
  readonly currencyCode?: OrderCurrencyCodeEnumOVH;
  /**
   * Price in microcents
   * @nullable
   */
  readonly priceInUcents?: number | null;
  /** Textual representation */
  readonly text?: string;
  /** The effective price */
  readonly value?: number;
}

/**
 * Order detail reduction
 */
export interface OrderReductionOVH {
  /** In which context the reduction is applied */
  readonly context?: OrderReductionContextEnumOVH;
  /** Promotion description */
  readonly description?: string;
  /** Reduction price applied with this promotion */
  readonly price?: OrderPriceOVH;
  /** Reduction description */
  readonly reductionDescription?: string;
  /** Reduction effect, price modification */
  readonly type?: OrderReductionTypeEnumOVH;
  /** The reduction value */
  readonly value?: OrderPriceOVH;
}

/**
 * Price concerning the reduced amount
 * @nullable
 */
export type OrderOrderPricesOVHReduction = OrderPriceOVH | null;

/**
 * Price before reduction application
 * @nullable
 */
export type OrderOrderPricesOVHOriginalWithoutTax = OrderPriceOVH | null;

/**
 * Prices of an order
 */
export interface OrderOrderPricesOVH {
  /**
   * Price before reduction application
   * @nullable
   */
  readonly originalWithoutTax?: OrderOrderPricesOVHOriginalWithoutTax;
  /**
   * Price concerning the reduced amount
   * @nullable
   */
  readonly reduction?: OrderOrderPricesOVHReduction;
  /** Tax amount */
  readonly tax?: OrderPriceOVH;
  /** Price without tax */
  readonly withoutTax?: OrderPriceOVH;
  /** Price with tax */
  readonly withTax?: OrderPriceOVH;
}

/**
 * Product type of item in order
 */
export type OrderOrderDetailTypeEnumOVH = typeof OrderOrderDetailTypeEnumOVH[keyof typeof OrderOrderDetailTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderOrderDetailTypeEnumOVH = {
  ACCESSORY: 'ACCESSORY',
  CAUTION: 'CAUTION',
  CHOOSED: 'CHOOSED',
  CONSUMPTION: 'CONSUMPTION',
  CREATION: 'CREATION',
  DELIVERY: 'DELIVERY',
  DURATION: 'DURATION',
  GIFT: 'GIFT',
  INSTALLATION: 'INSTALLATION',
  LICENSE: 'LICENSE',
  MUTE: 'MUTE',
  OTHER: 'OTHER',
  OUTPLAN: 'OUTPLAN',
  QUANTITY: 'QUANTITY',
  REFUND: 'REFUND',
  RENEW: 'RENEW',
  SPECIAL: 'SPECIAL',
  SWITCH: 'SWITCH',
  TRANSFER: 'TRANSFER',
  VOUCHER: 'VOUCHER',
} as const;

/**
 * Type of detail
 * @nullable
 */
export type OrderOrderDetailOVHDetailType = OrderOrderDetailTypeEnumOVH | null;

/**
 * Detail of an order
 */
export interface OrderOrderDetailOVH {
  /**
   * Cart Item ID the details is related to
   * @nullable
   */
  readonly cartItemID?: number | null;
  /** Description of the detail */
  readonly description?: string;
  /**
   * Type of detail
   * @nullable
   */
  readonly detailType?: OrderOrderDetailOVHDetailType;
  /** Service name */
  readonly domain?: string;
  /** Original price of the detail before reduction application */
  readonly originalTotalPrice?: OrderPriceOVH;
  /** Quantity of the service */
  readonly quantity?: number;
  /** List of reductions applied to the detail */
  readonly reductions?: readonly OrderReductionOVH[];
  /** Total price of the reduction */
  readonly reductionTotalPrice?: OrderPriceOVH;
  /** Price total of the services */
  readonly totalPrice?: OrderPriceOVH;
  /** Unitary price of the service */
  readonly unitPrice?: OrderPriceOVH;
}

/**
 * Currency code
 */
export type OrderCurrencyCodeEnumOVH = typeof OrderCurrencyCodeEnumOVH[keyof typeof OrderCurrencyCodeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderCurrencyCodeEnumOVH = {
  AUD: 'AUD',
  CAD: 'CAD',
  CZK: 'CZK',
  EUR: 'EUR',
  GBP: 'GBP',
  INR: 'INR',
  LTL: 'LTL',
  MAD: 'MAD',
  'N/A': 'N/A',
  PLN: 'PLN',
  SGD: 'SGD',
  TND: 'TND',
  USD: 'USD',
  XOF: 'XOF',
  points: 'points',
} as const;

/**
 * A contract
 */
export interface OrderContractOVH {
  /** Terms of the contract */
  readonly content?: string;
  /** Name of the contract */
  readonly name?: string;
  /** URL to download the contract */
  readonly url?: string;
}

/**
 * An order
 */
export interface OrderOrderOVH {
  /** List of contracts related to the order */
  readonly contracts?: readonly OrderContractOVH[];
  /** Details of the order */
  readonly details?: readonly OrderOrderDetailOVH[];
  /**
   * Identifier of the order
   * @nullable
   */
  readonly orderId?: number | null;
  /** Prices of the order including with and without taxes */
  readonly prices?: OrderOrderPricesOVH;
  /**
   * URL to download the order
   * @nullable
   */
  readonly url?: string | null;
}

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Current object state
 */
export type EmailProObjectStateEnumOVH = typeof EmailProObjectStateEnumOVH[keyof typeof EmailProObjectStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProObjectStateEnumOVH = {
  creating: 'creating',
  deleting: 'deleting',
  ok: 'ok',
  reopening: 'reopening',
  suspended: 'suspended',
  suspending: 'suspending',
  unknown: 'unknown',
} as const;

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;

/**
 * Ip versions
 */
export type CoreTypesIpVersionEnumOVH = typeof CoreTypesIpVersionEnumOVH[keyof typeof CoreTypesIpVersionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoreTypesIpVersionEnumOVH = {
  v4: 'v4',
  v6: 'v6',
} as const;

/**
 * ISO country codes
 */
export type CoreTypesCountryEnumOVH = typeof CoreTypesCountryEnumOVH[keyof typeof CoreTypesCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoreTypesCountryEnumOVH = {
  ac: 'ac',
  ad: 'ad',
  ae: 'ae',
  af: 'af',
  ag: 'ag',
  ai: 'ai',
  al: 'al',
  am: 'am',
  an: 'an',
  ao: 'ao',
  aq: 'aq',
  ar: 'ar',
  as: 'as',
  at: 'at',
  au: 'au',
  aw: 'aw',
  ax: 'ax',
  az: 'az',
  ba: 'ba',
  bb: 'bb',
  bd: 'bd',
  be: 'be',
  bf: 'bf',
  bg: 'bg',
  bh: 'bh',
  bi: 'bi',
  bj: 'bj',
  bl: 'bl',
  bm: 'bm',
  bn: 'bn',
  bo: 'bo',
  bq: 'bq',
  br: 'br',
  bs: 'bs',
  bt: 'bt',
  bv: 'bv',
  bw: 'bw',
  by: 'by',
  bz: 'bz',
  ca: 'ca',
  cc: 'cc',
  cd: 'cd',
  cf: 'cf',
  cg: 'cg',
  ch: 'ch',
  ci: 'ci',
  ck: 'ck',
  cl: 'cl',
  cm: 'cm',
  cn: 'cn',
  co: 'co',
  cr: 'cr',
  cs: 'cs',
  cu: 'cu',
  cv: 'cv',
  cw: 'cw',
  cx: 'cx',
  cy: 'cy',
  cz: 'cz',
  de: 'de',
  dj: 'dj',
  dk: 'dk',
  dm: 'dm',
  do: 'do',
  dz: 'dz',
  ec: 'ec',
  ee: 'ee',
  eg: 'eg',
  eh: 'eh',
  er: 'er',
  es: 'es',
  et: 'et',
  fc: 'fc',
  fd: 'fd',
  fi: 'fi',
  fj: 'fj',
  fk: 'fk',
  fm: 'fm',
  fo: 'fo',
  fr: 'fr',
  fx: 'fx',
  ga: 'ga',
  gb: 'gb',
  gd: 'gd',
  ge: 'ge',
  gf: 'gf',
  gg: 'gg',
  gh: 'gh',
  gi: 'gi',
  gl: 'gl',
  gm: 'gm',
  gn: 'gn',
  gp: 'gp',
  gq: 'gq',
  gr: 'gr',
  gs: 'gs',
  gt: 'gt',
  gu: 'gu',
  gw: 'gw',
  gy: 'gy',
  hk: 'hk',
  hm: 'hm',
  hn: 'hn',
  hr: 'hr',
  ht: 'ht',
  hu: 'hu',
  id: 'id',
  ie: 'ie',
  il: 'il',
  im: 'im',
  in: 'in',
  io: 'io',
  iq: 'iq',
  ir: 'ir',
  is: 'is',
  it: 'it',
  je: 'je',
  jm: 'jm',
  jo: 'jo',
  jp: 'jp',
  ke: 'ke',
  kg: 'kg',
  kh: 'kh',
  ki: 'ki',
  km: 'km',
  kn: 'kn',
  kp: 'kp',
  kr: 'kr',
  kw: 'kw',
  ky: 'ky',
  kz: 'kz',
  la: 'la',
  lb: 'lb',
  lc: 'lc',
  li: 'li',
  lk: 'lk',
  lr: 'lr',
  ls: 'ls',
  lt: 'lt',
  lu: 'lu',
  lv: 'lv',
  ly: 'ly',
  ma: 'ma',
  mc: 'mc',
  md: 'md',
  me: 'me',
  mf: 'mf',
  mg: 'mg',
  mh: 'mh',
  mk: 'mk',
  ml: 'ml',
  mm: 'mm',
  mn: 'mn',
  mo: 'mo',
  mp: 'mp',
  mq: 'mq',
  mr: 'mr',
  ms: 'ms',
  mt: 'mt',
  mu: 'mu',
  mv: 'mv',
  mw: 'mw',
  mx: 'mx',
  my: 'my',
  mz: 'mz',
  na: 'na',
  nc: 'nc',
  ne: 'ne',
  nf: 'nf',
  ng: 'ng',
  ni: 'ni',
  nl: 'nl',
  no: 'no',
  np: 'np',
  nr: 'nr',
  nu: 'nu',
  nz: 'nz',
  om: 'om',
  pa: 'pa',
  pe: 'pe',
  pf: 'pf',
  pg: 'pg',
  ph: 'ph',
  pk: 'pk',
  pl: 'pl',
  pm: 'pm',
  pn: 'pn',
  pr: 'pr',
  ps: 'ps',
  pt: 'pt',
  pw: 'pw',
  py: 'py',
  qa: 'qa',
  qc: 'qc',
  re: 're',
  ro: 'ro',
  rs: 'rs',
  ru: 'ru',
  rw: 'rw',
  sa: 'sa',
  sb: 'sb',
  sc: 'sc',
  sd: 'sd',
  se: 'se',
  sg: 'sg',
  sh: 'sh',
  si: 'si',
  sj: 'sj',
  sk: 'sk',
  sl: 'sl',
  sm: 'sm',
  sn: 'sn',
  so: 'so',
  sr: 'sr',
  ss: 'ss',
  st: 'st',
  sv: 'sv',
  sx: 'sx',
  sy: 'sy',
  sz: 'sz',
  tc: 'tc',
  td: 'td',
  tf: 'tf',
  tg: 'tg',
  th: 'th',
  tj: 'tj',
  tk: 'tk',
  tl: 'tl',
  tm: 'tm',
  tn: 'tn',
  to: 'to',
  tp: 'tp',
  tr: 'tr',
  tt: 'tt',
  tv: 'tv',
  tw: 'tw',
  tz: 'tz',
  ua: 'ua',
  ug: 'ug',
  uk: 'uk',
  um: 'um',
  us: 'us',
  uy: 'uy',
  uz: 'uz',
  va: 'va',
  vc: 'vc',
  ve: 've',
  vg: 'vg',
  vi: 'vi',
  vn: 'vn',
  vu: 'vu',
  we: 'we',
  wf: 'wf',
  ws: 'ws',
  ye: 'ye',
  yt: 'yt',
  yu: 'yu',
  za: 'za',
  zm: 'zm',
  zw: 'zw',
} as const;

/**
 * Represents a time slot for a meeting
 */
export interface ConnectivityEligibilityMeetingSlotOVH {
  /** End date */
  readonly endDate?: string;
  /**
   * Represent a meeting id for a fiber collect operator
   * @nullable
   */
  readonly slotId?: string | null;
  /** Start date */
  readonly startDate?: string;
  /**
   * An opaque string that represents an intervention unit
   * @nullable
   */
  readonly uiCode?: string | null;
}

/**
 * Represents meeting booking options
 */
export interface ConnectivityEligibilityMeetingCapacitiesOVH {
  /** Whether or not it is possible to book a meeting online */
  readonly eRdv?: boolean;
  /** Whether or not it is possible to be be called by phone to book a meeting */
  readonly phoneCall?: boolean;
}

/**
 * List of available meeting time slots
 */
export interface ConnectivityEligibilityMeetingsOVH {
  /** Whether or not it is possible to book a fake meeting */
  readonly canBookFakeMeeting?: boolean;
  /** Represents meeting booking options */
  readonly capacities?: ConnectivityEligibilityMeetingCapacitiesOVH;
  /** A time slot */
  readonly meetingSlots?: readonly ConnectivityEligibilityMeetingSlotOVH[];
}

/**
 * complexType.UnitAndValues_xdsl.TimestampAndValue
 */
export interface ComplexTypeUnitAndValuesXdslTimestampAndValueOVH {
  readonly unit?: string;
  readonly values?: readonly XdslTimestampAndValueOVH[];
}

/**
 * complexType.UnitAndValues_xdsl.AccessLatency
 */
export interface ComplexTypeUnitAndValuesXdslAccessLatencyOVH {
  readonly unit?: string;
  readonly values?: readonly XdslAccessLatencyOVH[];
}

/**
 * complexType.UnitAndValue_long
 */
export interface ComplexTypeUnitAndValueLongOVH {
  readonly unit?: string;
  readonly value?: number;
}

/**
 * complexType.UnitAndValue_double
 */
export interface ComplexTypeUnitAndValueDoubleOVH {
  readonly unit?: string;
  readonly value?: number;
}


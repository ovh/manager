/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ComplexTypeUnitAndValuesXdslAccessLatencyOVH,
  ComplexTypeUnitAndValuesXdslTimestampAndValueOVH,
  GetXdslEmailProParams,
  GetXdslIncidentsParams,
  GetXdslParams,
  GetXdslServiceNameFiberEligibilitiesParams,
  GetXdslServiceNameLinesNumberDslamPortLogsParams,
  GetXdslServiceNameLinesNumberStatisticsParams,
  GetXdslServiceNameModemAvailableWLANChannelParams,
  GetXdslServiceNameResiliationTermsParams,
  GetXdslServiceNameStatisticsParams,
  GetXdslServiceNameTasksParams,
  GetXdslSpareParams,
  IpOVH,
  OrderOrderOVH,
  ServicesServiceOVH,
  SpareXdslXdslSpareWithIAMOVH,
  TelephonyRmaOVH,
  XdslAccessDiagnosticOVH,
  XdslAccessOVH,
  XdslAccessWithIAMOVH,
  XdslAntiSpamEvidencesInfoOVH,
  XdslAntiSpamOVH,
  XdslApplyTemplateToModemPostOVH,
  XdslAsyncTaskConnectivityEligibilityMeetingsOVH,
  XdslAsyncTaskXdslModemInfoOVH,
  XdslChangeContactPostOVH,
  XdslConnectedDeviceOVH,
  XdslDHCPOVH,
  XdslDHCPStaticAddressOVH,
  XdslDeconsolidationTermsOVH,
  XdslDslamLineProfileOVH,
  XdslDslamPortLogOVH,
  XdslDslamPortOVH,
  XdslEmailProChangePasswordPostOVH,
  XdslEmailProTaskOVH,
  XdslExtraIpRangeMoveOVH,
  XdslFiberEligibilityOVH,
  XdslIPOVH,
  XdslIncidentOVH,
  XdslIpv6PostOVH,
  XdslLANOVH,
  XdslLineDiagnosticDiagnosticOVH,
  XdslLineOVH,
  XdslLinesDiagnosticRunPostOVH,
  XdslLinesDslamPortChangeProfilePostOVH,
  XdslMailSendingPostOVH,
  XdslModemBlocIpPostOVH,
  XdslModemCallWaitingPostOVH,
  XdslModemComfortExchangePostOVH,
  XdslModemContentSharingPostOVH,
  XdslModemExchangeInfoOVH,
  XdslModemFirmwarePostOVH,
  XdslModemFtpPostOVH,
  XdslModemIpsecAlgPostOVH,
  XdslModemLanDhcpDHCPStaticAddressesPostOVH,
  XdslModemOVH,
  XdslModemPortMappingsPostOVH,
  XdslModemRebootPostOVH,
  XdslModemResetPostOVH,
  XdslModemSipAlgPostOVH,
  XdslModemUpnpPostOVH,
  XdslMonitoringNotificationOVH,
  XdslMonitoringNotificationsPostOVH,
  XdslOntOVH,
  XdslOrderFollowupStepOVH,
  XdslOrderMeetingPostOVH,
  XdslPendingActionOVH,
  XdslPortMappingOVH,
  XdslRadiusConnectionLogOVH,
  XdslRequestTotalDeconsolidationPostOVH,
  XdslResiliatePostOVH,
  XdslResiliationFollowUpDetailOVH,
  XdslResiliationTermsOVH,
  XdslRmaChangeTypePostOVH,
  XdslServiceStatusEnumOVH,
  XdslSpareReplacePostOVH,
  XdslTaskOVH,
  XdslTemplateModemOVH,
  XdslTemplateModemPostOVH,
  XdslUpdateInvalidOrMissingRioPostOVH,
  XdslWLANOVH,
  XdslXdslEmailProOVH,
  XdslXdslEmailProWithIAMOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getXdsl = (
    params?: GetXdslParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetXdslQueryKey = (params?: GetXdslParams,) => {
    return [`/xdsl`, ...(params ? [params]: [])] as const;
    }

    
export const getGetXdslQueryOptions = <TData = Awaited<ReturnType<typeof getXdsl>>, TError = unknown>(params?: GetXdslParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdsl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdsl>>> = ({ signal }) => getXdsl(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdsl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslQueryResult = NonNullable<Awaited<ReturnType<typeof getXdsl>>>
export type GetXdslQueryError = unknown


export function useGetXdsl<TData = Awaited<ReturnType<typeof getXdsl>>, TError = unknown>(
 params: undefined |  GetXdslParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdsl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdsl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdsl<TData = Awaited<ReturnType<typeof getXdsl>>, TError = unknown>(
 params?: GetXdslParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdsl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdsl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdsl<TData = Awaited<ReturnType<typeof getXdsl>>, TError = unknown>(
 params?: GetXdslParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdsl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetXdsl<TData = Awaited<ReturnType<typeof getXdsl>>, TError = unknown>(
 params?: GetXdslParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdsl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available services
 */
export const getXdslEmailPro = (
    params?: GetXdslEmailProParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/email/pro`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetXdslEmailProQueryKey = (params?: GetXdslEmailProParams,) => {
    return [`/xdsl/email/pro`, ...(params ? [params]: [])] as const;
    }

    
export const getGetXdslEmailProQueryOptions = <TData = Awaited<ReturnType<typeof getXdslEmailPro>>, TError = unknown>(params?: GetXdslEmailProParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslEmailPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslEmailProQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslEmailPro>>> = ({ signal }) => getXdslEmailPro(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslEmailPro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslEmailProQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslEmailPro>>>
export type GetXdslEmailProQueryError = unknown


export function useGetXdslEmailPro<TData = Awaited<ReturnType<typeof getXdslEmailPro>>, TError = unknown>(
 params: undefined |  GetXdslEmailProParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslEmailPro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslEmailPro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslEmailPro<TData = Awaited<ReturnType<typeof getXdslEmailPro>>, TError = unknown>(
 params?: GetXdslEmailProParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslEmailPro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslEmailPro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslEmailPro<TData = Awaited<ReturnType<typeof getXdslEmailPro>>, TError = unknown>(
 params?: GetXdslEmailProParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslEmailPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetXdslEmailPro<TData = Awaited<ReturnType<typeof getXdslEmailPro>>, TError = unknown>(
 params?: GetXdslEmailProParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslEmailPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslEmailProQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the email
 */
export const deleteXdslEmailProEmail = (
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/email/pro/${email}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteXdslEmailProEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteXdslEmailProEmail>>, TError,{email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteXdslEmailProEmail>>, TError,{email: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteXdslEmailProEmail>>, {email: string}> = (props) => {
          const {email} = props ?? {};

          return  deleteXdslEmailProEmail(email,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteXdslEmailProEmailMutationResult = NonNullable<Awaited<ReturnType<typeof deleteXdslEmailProEmail>>>
    
    export type DeleteXdslEmailProEmailMutationError = unknown

    /**
 * @summary Delete the email
 */
export const useDeleteXdslEmailProEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteXdslEmailProEmail>>, TError,{email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteXdslEmailProEmail>>,
        TError,
        {email: string},
        TContext
      > => {

      const mutationOptions = getDeleteXdslEmailProEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getXdslEmailProEmail = (
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslXdslEmailProWithIAMOVH>(
      {url: `/xdsl/email/pro/${email}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslEmailProEmailQueryKey = (email: string,) => {
    return [`/xdsl/email/pro/${email}`] as const;
    }

    
export const getGetXdslEmailProEmailQueryOptions = <TData = Awaited<ReturnType<typeof getXdslEmailProEmail>>, TError = unknown>(email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslEmailProEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslEmailProEmailQueryKey(email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslEmailProEmail>>> = ({ signal }) => getXdslEmailProEmail(email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslEmailProEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslEmailProEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslEmailProEmail>>>
export type GetXdslEmailProEmailQueryError = unknown


export function useGetXdslEmailProEmail<TData = Awaited<ReturnType<typeof getXdslEmailProEmail>>, TError = unknown>(
 email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslEmailProEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslEmailProEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslEmailProEmail<TData = Awaited<ReturnType<typeof getXdslEmailProEmail>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslEmailProEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslEmailProEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslEmailProEmail<TData = Awaited<ReturnType<typeof getXdslEmailProEmail>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslEmailProEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslEmailProEmail<TData = Awaited<ReturnType<typeof getXdslEmailProEmail>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslEmailProEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslEmailProEmailQueryOptions(email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putXdslEmailProEmail = (
    email: string,
    xdslXdslEmailProOVH: NonReadonly<XdslXdslEmailProOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/email/pro/${email}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: xdslXdslEmailProOVH
    },
      options);
    }
  


export const getPutXdslEmailProEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslEmailProEmail>>, TError,{email: string;data: NonReadonly<XdslXdslEmailProOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putXdslEmailProEmail>>, TError,{email: string;data: NonReadonly<XdslXdslEmailProOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putXdslEmailProEmail>>, {email: string;data: NonReadonly<XdslXdslEmailProOVH>}> = (props) => {
          const {email,data} = props ?? {};

          return  putXdslEmailProEmail(email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutXdslEmailProEmailMutationResult = NonNullable<Awaited<ReturnType<typeof putXdslEmailProEmail>>>
    export type PutXdslEmailProEmailMutationBody = NonReadonly<XdslXdslEmailProOVH>
    export type PutXdslEmailProEmailMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutXdslEmailProEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslEmailProEmail>>, TError,{email: string;data: NonReadonly<XdslXdslEmailProOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putXdslEmailProEmail>>,
        TError,
        {email: string;data: NonReadonly<XdslXdslEmailProOVH>},
        TContext
      > => {

      const mutationOptions = getPutXdslEmailProEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the email password
 */
export const changeEmailPassword = (
    email: string,
    xdslEmailProChangePasswordPostOVH: XdslEmailProChangePasswordPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslEmailProTaskOVH>(
      {url: `/xdsl/email/pro/${email}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslEmailProChangePasswordPostOVH, signal
    },
      options);
    }
  


export const getChangeEmailPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeEmailPassword>>, TError,{email: string;data: XdslEmailProChangePasswordPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof changeEmailPassword>>, TError,{email: string;data: XdslEmailProChangePasswordPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeEmailPassword>>, {email: string;data: XdslEmailProChangePasswordPostOVH}> = (props) => {
          const {email,data} = props ?? {};

          return  changeEmailPassword(email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeEmailPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof changeEmailPassword>>>
    export type ChangeEmailPasswordMutationBody = XdslEmailProChangePasswordPostOVH
    export type ChangeEmailPasswordMutationError = unknown

    /**
 * @summary Change the email password
 */
export const useChangeEmailPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeEmailPassword>>, TError,{email: string;data: XdslEmailProChangePasswordPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof changeEmailPassword>>,
        TError,
        {email: string;data: XdslEmailProChangePasswordPostOVH},
        TContext
      > => {

      const mutationOptions = getChangeEmailPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of incidents
 */
export const getXdslIncidents = (
    params?: GetXdslIncidentsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/xdsl/incidents`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetXdslIncidentsQueryKey = (params?: GetXdslIncidentsParams,) => {
    return [`/xdsl/incidents`, ...(params ? [params]: [])] as const;
    }

    
export const getGetXdslIncidentsQueryOptions = <TData = Awaited<ReturnType<typeof getXdslIncidents>>, TError = unknown>(params?: GetXdslIncidentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslIncidents>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslIncidentsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslIncidents>>> = ({ signal }) => getXdslIncidents(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslIncidents>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslIncidentsQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslIncidents>>>
export type GetXdslIncidentsQueryError = unknown


export function useGetXdslIncidents<TData = Awaited<ReturnType<typeof getXdslIncidents>>, TError = unknown>(
 params: undefined |  GetXdslIncidentsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslIncidents>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslIncidents>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslIncidents<TData = Awaited<ReturnType<typeof getXdslIncidents>>, TError = unknown>(
 params?: GetXdslIncidentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslIncidents>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslIncidents>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslIncidents<TData = Awaited<ReturnType<typeof getXdslIncidents>>, TError = unknown>(
 params?: GetXdslIncidentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslIncidents>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of incidents
 */

export function useGetXdslIncidents<TData = Awaited<ReturnType<typeof getXdslIncidents>>, TError = unknown>(
 params?: GetXdslIncidentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslIncidents>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslIncidentsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getXdslIncidentsId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslIncidentOVH>(
      {url: `/xdsl/incidents/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslIncidentsIdQueryKey = (id: number,) => {
    return [`/xdsl/incidents/${id}`] as const;
    }

    
export const getGetXdslIncidentsIdQueryOptions = <TData = Awaited<ReturnType<typeof getXdslIncidentsId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslIncidentsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslIncidentsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslIncidentsId>>> = ({ signal }) => getXdslIncidentsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslIncidentsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslIncidentsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslIncidentsId>>>
export type GetXdslIncidentsIdQueryError = unknown


export function useGetXdslIncidentsId<TData = Awaited<ReturnType<typeof getXdslIncidentsId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslIncidentsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslIncidentsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslIncidentsId<TData = Awaited<ReturnType<typeof getXdslIncidentsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslIncidentsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslIncidentsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslIncidentsId<TData = Awaited<ReturnType<typeof getXdslIncidentsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslIncidentsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslIncidentsId<TData = Awaited<ReturnType<typeof getXdslIncidentsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslIncidentsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslIncidentsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available services
 */
export const getXdslSpare = (
    params?: GetXdslSpareParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/spare`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetXdslSpareQueryKey = (params?: GetXdslSpareParams,) => {
    return [`/xdsl/spare`, ...(params ? [params]: [])] as const;
    }

    
export const getGetXdslSpareQueryOptions = <TData = Awaited<ReturnType<typeof getXdslSpare>>, TError = unknown>(params?: GetXdslSpareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslSpareQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslSpare>>> = ({ signal }) => getXdslSpare(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslSpare>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslSpareQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslSpare>>>
export type GetXdslSpareQueryError = unknown


export function useGetXdslSpare<TData = Awaited<ReturnType<typeof getXdslSpare>>, TError = unknown>(
 params: undefined |  GetXdslSpareParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpare>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslSpare>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslSpare<TData = Awaited<ReturnType<typeof getXdslSpare>>, TError = unknown>(
 params?: GetXdslSpareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpare>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslSpare>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslSpare<TData = Awaited<ReturnType<typeof getXdslSpare>>, TError = unknown>(
 params?: GetXdslSpareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetXdslSpare<TData = Awaited<ReturnType<typeof getXdslSpare>>, TError = unknown>(
 params?: GetXdslSpareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslSpareQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all available spare brands
 */
export const getXdslSpareBrands = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/spare/brands`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslSpareBrandsQueryKey = () => {
    return [`/xdsl/spare/brands`] as const;
    }

    
export const getGetXdslSpareBrandsQueryOptions = <TData = Awaited<ReturnType<typeof getXdslSpareBrands>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareBrands>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslSpareBrandsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslSpareBrands>>> = ({ signal }) => getXdslSpareBrands(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareBrands>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslSpareBrandsQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslSpareBrands>>>
export type GetXdslSpareBrandsQueryError = unknown


export function useGetXdslSpareBrands<TData = Awaited<ReturnType<typeof getXdslSpareBrands>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareBrands>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslSpareBrands>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslSpareBrands<TData = Awaited<ReturnType<typeof getXdslSpareBrands>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareBrands>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslSpareBrands>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslSpareBrands<TData = Awaited<ReturnType<typeof getXdslSpareBrands>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareBrands>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all available spare brands
 */

export function useGetXdslSpareBrands<TData = Awaited<ReturnType<typeof getXdslSpareBrands>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareBrands>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslSpareBrandsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the spare as if it was not belonging to OVH anymore
 */
export const deleteXdslSpareSpare = (
    spare: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/spare/${spare}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteXdslSpareSpareMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteXdslSpareSpare>>, TError,{spare: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteXdslSpareSpare>>, TError,{spare: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteXdslSpareSpare>>, {spare: string}> = (props) => {
          const {spare} = props ?? {};

          return  deleteXdslSpareSpare(spare,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteXdslSpareSpareMutationResult = NonNullable<Awaited<ReturnType<typeof deleteXdslSpareSpare>>>
    
    export type DeleteXdslSpareSpareMutationError = unknown

    /**
 * @summary Delete the spare as if it was not belonging to OVH anymore
 */
export const useDeleteXdslSpareSpare = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteXdslSpareSpare>>, TError,{spare: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteXdslSpareSpare>>,
        TError,
        {spare: string},
        TContext
      > => {

      const mutationOptions = getDeleteXdslSpareSpareMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getXdslSpareSpare = (
    spare: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SpareXdslXdslSpareWithIAMOVH>(
      {url: `/xdsl/spare/${spare}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslSpareSpareQueryKey = (spare: string,) => {
    return [`/xdsl/spare/${spare}`] as const;
    }

    
export const getGetXdslSpareSpareQueryOptions = <TData = Awaited<ReturnType<typeof getXdslSpareSpare>>, TError = unknown>(spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslSpareSpareQueryKey(spare);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslSpareSpare>>> = ({ signal }) => getXdslSpareSpare(spare, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(spare), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpare>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslSpareSpareQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslSpareSpare>>>
export type GetXdslSpareSpareQueryError = unknown


export function useGetXdslSpareSpare<TData = Awaited<ReturnType<typeof getXdslSpareSpare>>, TError = unknown>(
 spare: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpare>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslSpareSpare>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslSpareSpare<TData = Awaited<ReturnType<typeof getXdslSpareSpare>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpare>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslSpareSpare>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslSpareSpare<TData = Awaited<ReturnType<typeof getXdslSpareSpare>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslSpareSpare<TData = Awaited<ReturnType<typeof getXdslSpareSpare>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslSpareSpareQueryOptions(spare,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return the list of brand compatible to be replaced
 */
export const getXdslSpareSpareCompatibleReplacement = (
    spare: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/spare/${spare}/compatibleReplacement`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslSpareSpareCompatibleReplacementQueryKey = (spare: string,) => {
    return [`/xdsl/spare/${spare}/compatibleReplacement`] as const;
    }

    
export const getGetXdslSpareSpareCompatibleReplacementQueryOptions = <TData = Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>, TError = unknown>(spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslSpareSpareCompatibleReplacementQueryKey(spare);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>> = ({ signal }) => getXdslSpareSpareCompatibleReplacement(spare, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(spare), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslSpareSpareCompatibleReplacementQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>>
export type GetXdslSpareSpareCompatibleReplacementQueryError = unknown


export function useGetXdslSpareSpareCompatibleReplacement<TData = Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>, TError = unknown>(
 spare: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslSpareSpareCompatibleReplacement<TData = Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslSpareSpareCompatibleReplacement<TData = Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return the list of brand compatible to be replaced
 */

export function useGetXdslSpareSpareCompatibleReplacement<TData = Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpareCompatibleReplacement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslSpareSpareCompatibleReplacementQueryOptions(spare,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Replace the modem by its spare
 */
export const replaceModemBySpare = (
    spare: string,
    xdslSpareReplacePostOVH: XdslSpareReplacePostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/spare/${spare}/replace`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslSpareReplacePostOVH, signal
    },
      options);
    }
  


export const getReplaceModemBySpareMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof replaceModemBySpare>>, TError,{spare: string;data: XdslSpareReplacePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof replaceModemBySpare>>, TError,{spare: string;data: XdslSpareReplacePostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof replaceModemBySpare>>, {spare: string;data: XdslSpareReplacePostOVH}> = (props) => {
          const {spare,data} = props ?? {};

          return  replaceModemBySpare(spare,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReplaceModemBySpareMutationResult = NonNullable<Awaited<ReturnType<typeof replaceModemBySpare>>>
    export type ReplaceModemBySpareMutationBody = XdslSpareReplacePostOVH
    export type ReplaceModemBySpareMutationError = unknown

    /**
 * @summary Replace the modem by its spare
 */
export const useReplaceModemBySpare = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof replaceModemBySpare>>, TError,{spare: string;data: XdslSpareReplacePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof replaceModemBySpare>>,
        TError,
        {spare: string;data: XdslSpareReplacePostOVH},
        TContext
      > => {

      const mutationOptions = getReplaceModemBySpareMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Return the broken equipment in instantRefund
 */
export const postXdslSpareSpareReturnMerchandise = (
    spare: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/spare/${spare}/returnMerchandise`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslSpareSpareReturnMerchandiseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslSpareSpareReturnMerchandise>>, TError,{spare: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslSpareSpareReturnMerchandise>>, TError,{spare: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslSpareSpareReturnMerchandise>>, {spare: string}> = (props) => {
          const {spare} = props ?? {};

          return  postXdslSpareSpareReturnMerchandise(spare,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslSpareSpareReturnMerchandiseMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslSpareSpareReturnMerchandise>>>
    
    export type PostXdslSpareSpareReturnMerchandiseMutationError = unknown

    /**
 * @summary Return the broken equipment in instantRefund
 */
export const usePostXdslSpareSpareReturnMerchandise = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslSpareSpareReturnMerchandise>>, TError,{spare: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslSpareSpareReturnMerchandise>>,
        TError,
        {spare: string},
        TContext
      > => {

      const mutationOptions = getPostXdslSpareSpareReturnMerchandiseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getXdslSpareSpareServiceInfos = (
    spare: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/xdsl/spare/${spare}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslSpareSpareServiceInfosQueryKey = (spare: string,) => {
    return [`/xdsl/spare/${spare}/serviceInfos`] as const;
    }

    
export const getGetXdslSpareSpareServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>, TError = unknown>(spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslSpareSpareServiceInfosQueryKey(spare);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>> = ({ signal }) => getXdslSpareSpareServiceInfos(spare, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(spare), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslSpareSpareServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>>
export type GetXdslSpareSpareServiceInfosQueryError = unknown


export function useGetXdslSpareSpareServiceInfos<TData = Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>, TError = unknown>(
 spare: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslSpareSpareServiceInfos<TData = Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslSpareSpareServiceInfos<TData = Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetXdslSpareSpareServiceInfos<TData = Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>, TError = unknown>(
 spare: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslSpareSpareServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslSpareSpareServiceInfosQueryOptions(spare,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putXdslSpareSpareServiceInfos = (
    spare: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/spare/${spare}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutXdslSpareSpareServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslSpareSpareServiceInfos>>, TError,{spare: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putXdslSpareSpareServiceInfos>>, TError,{spare: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putXdslSpareSpareServiceInfos>>, {spare: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {spare,data} = props ?? {};

          return  putXdslSpareSpareServiceInfos(spare,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutXdslSpareSpareServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putXdslSpareSpareServiceInfos>>>
    export type PutXdslSpareSpareServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutXdslSpareSpareServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutXdslSpareSpareServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslSpareSpareServiceInfos>>, TError,{spare: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putXdslSpareSpareServiceInfos>>,
        TError,
        {spare: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutXdslSpareSpareServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of TemplateModem
 */
export const getModemTemplates = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/templateModem`, method: 'GET', signal
    },
      options);
    }
  

export const getGetModemTemplatesQueryKey = () => {
    return [`/xdsl/templateModem`] as const;
    }

    
export const getGetModemTemplatesQueryOptions = <TData = Awaited<ReturnType<typeof getModemTemplates>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemTemplates>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetModemTemplatesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getModemTemplates>>> = ({ signal }) => getModemTemplates(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getModemTemplates>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetModemTemplatesQueryResult = NonNullable<Awaited<ReturnType<typeof getModemTemplates>>>
export type GetModemTemplatesQueryError = unknown


export function useGetModemTemplates<TData = Awaited<ReturnType<typeof getModemTemplates>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemTemplates>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModemTemplates>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetModemTemplates<TData = Awaited<ReturnType<typeof getModemTemplates>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemTemplates>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModemTemplates>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetModemTemplates<TData = Awaited<ReturnType<typeof getModemTemplates>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemTemplates>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of TemplateModem
 */

export function useGetModemTemplates<TData = Awaited<ReturnType<typeof getModemTemplates>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemTemplates>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetModemTemplatesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new Modem Template from existing modem
 */
export const createModemTemplate = (
    xdslTemplateModemPostOVH: XdslTemplateModemPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTemplateModemOVH>(
      {url: `/xdsl/templateModem`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslTemplateModemPostOVH, signal
    },
      options);
    }
  


export const getCreateModemTemplateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createModemTemplate>>, TError,{data: XdslTemplateModemPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof createModemTemplate>>, TError,{data: XdslTemplateModemPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createModemTemplate>>, {data: XdslTemplateModemPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  createModemTemplate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateModemTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof createModemTemplate>>>
    export type CreateModemTemplateMutationBody = XdslTemplateModemPostOVH
    export type CreateModemTemplateMutationError = unknown

    /**
 * @summary Create new Modem Template from existing modem
 */
export const useCreateModemTemplate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createModemTemplate>>, TError,{data: XdslTemplateModemPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof createModemTemplate>>,
        TError,
        {data: XdslTemplateModemPostOVH},
        TContext
      > => {

      const mutationOptions = getCreateModemTemplateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this Modem Template
 */
export const deleteModemTemplate = (
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/templateModem/${name}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteModemTemplateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteModemTemplate>>, TError,{name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteModemTemplate>>, TError,{name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteModemTemplate>>, {name: string}> = (props) => {
          const {name} = props ?? {};

          return  deleteModemTemplate(name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteModemTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof deleteModemTemplate>>>
    
    export type DeleteModemTemplateMutationError = unknown

    /**
 * @summary Delete this Modem Template
 */
export const useDeleteModemTemplate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteModemTemplate>>, TError,{name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteModemTemplate>>,
        TError,
        {name: string},
        TContext
      > => {

      const mutationOptions = getDeleteModemTemplateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getModemTemplate = (
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTemplateModemOVH>(
      {url: `/xdsl/templateModem/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetModemTemplateQueryKey = (name: string,) => {
    return [`/xdsl/templateModem/${name}`] as const;
    }

    
export const getGetModemTemplateQueryOptions = <TData = Awaited<ReturnType<typeof getModemTemplate>>, TError = unknown>(name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemTemplate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetModemTemplateQueryKey(name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getModemTemplate>>> = ({ signal }) => getModemTemplate(name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getModemTemplate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetModemTemplateQueryResult = NonNullable<Awaited<ReturnType<typeof getModemTemplate>>>
export type GetModemTemplateQueryError = unknown


export function useGetModemTemplate<TData = Awaited<ReturnType<typeof getModemTemplate>>, TError = unknown>(
 name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemTemplate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModemTemplate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetModemTemplate<TData = Awaited<ReturnType<typeof getModemTemplate>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemTemplate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModemTemplate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetModemTemplate<TData = Awaited<ReturnType<typeof getModemTemplate>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemTemplate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetModemTemplate<TData = Awaited<ReturnType<typeof getModemTemplate>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemTemplate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetModemTemplateQueryOptions(name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const updateModemTemplate = (
    name: string,
    xdslTemplateModemOVH: NonReadonly<XdslTemplateModemOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/templateModem/${name}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: xdslTemplateModemOVH
    },
      options);
    }
  


export const getUpdateModemTemplateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateModemTemplate>>, TError,{name: string;data: NonReadonly<XdslTemplateModemOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateModemTemplate>>, TError,{name: string;data: NonReadonly<XdslTemplateModemOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateModemTemplate>>, {name: string;data: NonReadonly<XdslTemplateModemOVH>}> = (props) => {
          const {name,data} = props ?? {};

          return  updateModemTemplate(name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateModemTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof updateModemTemplate>>>
    export type UpdateModemTemplateMutationBody = NonReadonly<XdslTemplateModemOVH>
    export type UpdateModemTemplateMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const useUpdateModemTemplate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateModemTemplate>>, TError,{name: string;data: NonReadonly<XdslTemplateModemOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateModemTemplate>>,
        TError,
        {name: string;data: NonReadonly<XdslTemplateModemOVH>},
        TContext
      > => {

      const mutationOptions = getUpdateModemTemplateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getXdslServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAccessWithIAMOVH>(
      {url: `/xdsl/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}`] as const;
    }

    
export const getGetXdslServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceName>>> = ({ signal }) => getXdslServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceName>>>
export type GetXdslServiceNameQueryError = unknown


export function useGetXdslServiceName<TData = Awaited<ReturnType<typeof getXdslServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceName<TData = Awaited<ReturnType<typeof getXdslServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceName<TData = Awaited<ReturnType<typeof getXdslServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceName<TData = Awaited<ReturnType<typeof getXdslServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putXdslServiceName = (
    serviceName: string,
    xdslAccessOVH: NonReadonly<XdslAccessOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: xdslAccessOVH
    },
      options);
    }
  


export const getPutXdslServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceName>>, TError,{serviceName: string;data: NonReadonly<XdslAccessOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceName>>, TError,{serviceName: string;data: NonReadonly<XdslAccessOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putXdslServiceName>>, {serviceName: string;data: NonReadonly<XdslAccessOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putXdslServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutXdslServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putXdslServiceName>>>
    export type PutXdslServiceNameMutationBody = NonReadonly<XdslAccessOVH>
    export type PutXdslServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutXdslServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceName>>, TError,{serviceName: string;data: NonReadonly<XdslAccessOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putXdslServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<XdslAccessOVH>},
        TContext
      > => {

      const mutationOptions = getPutXdslServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Informations about the extra IP range during address move
 */
export const getXdslServiceNameAddressMoveExtraIpRange = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslExtraIpRangeMoveOVH>(
      {url: `/xdsl/${serviceName}/addressMove/extraIpRange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameAddressMoveExtraIpRangeQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/addressMove/extraIpRange`] as const;
    }

    
export const getGetXdslServiceNameAddressMoveExtraIpRangeQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameAddressMoveExtraIpRangeQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>> = ({ signal }) => getXdslServiceNameAddressMoveExtraIpRange(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameAddressMoveExtraIpRangeQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>>
export type GetXdslServiceNameAddressMoveExtraIpRangeQueryError = unknown


export function useGetXdslServiceNameAddressMoveExtraIpRange<TData = Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameAddressMoveExtraIpRange<TData = Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameAddressMoveExtraIpRange<TData = Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Informations about the extra IP range during address move
 */

export function useGetXdslServiceNameAddressMoveExtraIpRange<TData = Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAddressMoveExtraIpRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameAddressMoveExtraIpRangeQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Initiate the extra IP range migration
 */
export const postXdslServiceNameAddressMoveExtraIpRangeMove = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/addressMove/extraIpRangeMove`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameAddressMoveExtraIpRangeMoveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameAddressMoveExtraIpRangeMove>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameAddressMoveExtraIpRangeMove>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameAddressMoveExtraIpRangeMove>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postXdslServiceNameAddressMoveExtraIpRangeMove(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameAddressMoveExtraIpRangeMoveMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameAddressMoveExtraIpRangeMove>>>
    
    export type PostXdslServiceNameAddressMoveExtraIpRangeMoveMutationError = unknown

    /**
 * @summary Initiate the extra IP range migration
 */
export const usePostXdslServiceNameAddressMoveExtraIpRangeMove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameAddressMoveExtraIpRangeMove>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameAddressMoveExtraIpRangeMove>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameAddressMoveExtraIpRangeMoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List antiSpams for this access
 */
export const getXdslServiceNameAntiSpams = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpOVH[]>(
      {url: `/xdsl/${serviceName}/antiSpams`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameAntiSpamsQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/antiSpams`] as const;
    }

    
export const getGetXdslServiceNameAntiSpamsQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameAntiSpamsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>> = ({ signal }) => getXdslServiceNameAntiSpams(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameAntiSpamsQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>>
export type GetXdslServiceNameAntiSpamsQueryError = unknown


export function useGetXdslServiceNameAntiSpams<TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameAntiSpams<TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameAntiSpams<TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List antiSpams for this access
 */

export function useGetXdslServiceNameAntiSpams<TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpams>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameAntiSpamsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getXdslServiceNameAntiSpamsIp = (
    serviceName: string,
    ip: IpOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAntiSpamOVH>(
      {url: `/xdsl/${serviceName}/antiSpams/${ip}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameAntiSpamsIpQueryKey = (serviceName: string,
    ip: IpOVH,) => {
    return [`/xdsl/${serviceName}/antiSpams/${ip}`] as const;
    }

    
export const getGetXdslServiceNameAntiSpamsIpQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>, TError = unknown>(serviceName: string,
    ip: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameAntiSpamsIpQueryKey(serviceName,ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>> = ({ signal }) => getXdslServiceNameAntiSpamsIp(serviceName,ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameAntiSpamsIpQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>>
export type GetXdslServiceNameAntiSpamsIpQueryError = unknown


export function useGetXdslServiceNameAntiSpamsIp<TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>, TError = unknown>(
 serviceName: string,
    ip: IpOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameAntiSpamsIp<TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>, TError = unknown>(
 serviceName: string,
    ip: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameAntiSpamsIp<TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>, TError = unknown>(
 serviceName: string,
    ip: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameAntiSpamsIp<TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>, TError = unknown>(
 serviceName: string,
    ip: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameAntiSpamsIpQueryOptions(serviceName,ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of evidences stored on PCS for this ip
 */
export const getXdslServiceNameAntiSpamsIpEvidences = (
    serviceName: string,
    ip: IpOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAntiSpamEvidencesInfoOVH>(
      {url: `/xdsl/${serviceName}/antiSpams/${ip}/evidences`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameAntiSpamsIpEvidencesQueryKey = (serviceName: string,
    ip: IpOVH,) => {
    return [`/xdsl/${serviceName}/antiSpams/${ip}/evidences`] as const;
    }

    
export const getGetXdslServiceNameAntiSpamsIpEvidencesQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>, TError = unknown>(serviceName: string,
    ip: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameAntiSpamsIpEvidencesQueryKey(serviceName,ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>> = ({ signal }) => getXdslServiceNameAntiSpamsIpEvidences(serviceName,ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameAntiSpamsIpEvidencesQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>>
export type GetXdslServiceNameAntiSpamsIpEvidencesQueryError = unknown


export function useGetXdslServiceNameAntiSpamsIpEvidences<TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>, TError = unknown>(
 serviceName: string,
    ip: IpOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameAntiSpamsIpEvidences<TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>, TError = unknown>(
 serviceName: string,
    ip: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameAntiSpamsIpEvidences<TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>, TError = unknown>(
 serviceName: string,
    ip: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of evidences stored on PCS for this ip
 */

export function useGetXdslServiceNameAntiSpamsIpEvidences<TData = Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>, TError = unknown>(
 serviceName: string,
    ip: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameAntiSpamsIpEvidences>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameAntiSpamsIpEvidencesQueryOptions(serviceName,ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Apply TemplateModem to existing Modem
 */
export const applyTemplateModem = (
    serviceName: string,
    xdslApplyTemplateToModemPostOVH: XdslApplyTemplateToModemPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/applyTemplateToModem`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslApplyTemplateToModemPostOVH, signal
    },
      options);
    }
  


export const getApplyTemplateModemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof applyTemplateModem>>, TError,{serviceName: string;data: XdslApplyTemplateToModemPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof applyTemplateModem>>, TError,{serviceName: string;data: XdslApplyTemplateToModemPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof applyTemplateModem>>, {serviceName: string;data: XdslApplyTemplateToModemPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  applyTemplateModem(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApplyTemplateModemMutationResult = NonNullable<Awaited<ReturnType<typeof applyTemplateModem>>>
    export type ApplyTemplateModemMutationBody = XdslApplyTemplateToModemPostOVH
    export type ApplyTemplateModemMutationError = unknown

    /**
 * @summary Apply TemplateModem to existing Modem
 */
export const useApplyTemplateModem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof applyTemplateModem>>, TError,{serviceName: string;data: XdslApplyTemplateToModemPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof applyTemplateModem>>,
        TError,
        {serviceName: string;data: XdslApplyTemplateToModemPostOVH},
        TContext
      > => {

      const mutationOptions = getApplyTemplateModemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about the ongoing resiliation
 */
export const getXdslServiceNameCanCancelResiliation = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/xdsl/${serviceName}/canCancelResiliation`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameCanCancelResiliationQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/canCancelResiliation`] as const;
    }

    
export const getGetXdslServiceNameCanCancelResiliationQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameCanCancelResiliationQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>> = ({ signal }) => getXdslServiceNameCanCancelResiliation(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameCanCancelResiliationQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>>
export type GetXdslServiceNameCanCancelResiliationQueryError = unknown


export function useGetXdslServiceNameCanCancelResiliation<TData = Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameCanCancelResiliation<TData = Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameCanCancelResiliation<TData = Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about the ongoing resiliation
 */

export function useGetXdslServiceNameCanCancelResiliation<TData = Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameCanCancelResiliation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameCanCancelResiliationQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Cancel the ongoing resiliation
 */
export const postXdslServiceNameCancelResiliation = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/cancelResiliation`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameCancelResiliationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameCancelResiliation>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameCancelResiliation>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameCancelResiliation>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postXdslServiceNameCancelResiliation(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameCancelResiliationMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameCancelResiliation>>>
    
    export type PostXdslServiceNameCancelResiliationMutationError = unknown

    /**
 * @summary Cancel the ongoing resiliation
 */
export const usePostXdslServiceNameCancelResiliation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameCancelResiliation>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameCancelResiliation>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameCancelResiliationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const changeContact = (
    serviceName: string,
    xdslChangeContactPostOVH: XdslChangeContactPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/xdsl/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslChangeContactPostOVH, signal
    },
      options);
    }
  


export const getChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeContact>>, TError,{serviceName: string;data: XdslChangeContactPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof changeContact>>, TError,{serviceName: string;data: XdslChangeContactPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeContact>>, {serviceName: string;data: XdslChangeContactPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  changeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof changeContact>>>
    export type ChangeContactMutationBody = XdslChangeContactPostOVH
    export type ChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const useChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeContact>>, TError,{serviceName: string;data: XdslChangeContactPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof changeContact>>,
        TError,
        {serviceName: string;data: XdslChangeContactPostOVH},
        TContext
      > => {

      const mutationOptions = getChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getXdslServiceNameDiagnostic = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAccessDiagnosticOVH>(
      {url: `/xdsl/${serviceName}/diagnostic`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameDiagnosticQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/diagnostic`] as const;
    }

    
export const getGetXdslServiceNameDiagnosticQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameDiagnosticQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>> = ({ signal }) => getXdslServiceNameDiagnostic(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameDiagnosticQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>>
export type GetXdslServiceNameDiagnosticQueryError = unknown


export function useGetXdslServiceNameDiagnostic<TData = Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameDiagnostic<TData = Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameDiagnostic<TData = Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameDiagnostic<TData = Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameDiagnostic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameDiagnosticQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Run diagnostic on the access
 */
export const postXdslServiceNameDiagnostic = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/diagnostic`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameDiagnosticMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameDiagnostic>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameDiagnostic>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameDiagnostic>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postXdslServiceNameDiagnostic(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameDiagnosticMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameDiagnostic>>>
    
    export type PostXdslServiceNameDiagnosticMutationError = unknown

    /**
 * @summary Run diagnostic on the access
 */
export const usePostXdslServiceNameDiagnostic = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameDiagnostic>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameDiagnostic>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameDiagnosticMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List fiber eligibilities for this access
 */
export const getXdslServiceNameFiberEligibilities = (
    serviceName: string,
    params?: GetXdslServiceNameFiberEligibilitiesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/xdsl/${serviceName}/fiberEligibilities`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetXdslServiceNameFiberEligibilitiesQueryKey = (serviceName: string,
    params?: GetXdslServiceNameFiberEligibilitiesParams,) => {
    return [`/xdsl/${serviceName}/fiberEligibilities`, ...(params ? [params]: [])] as const;
    }

    
export const getGetXdslServiceNameFiberEligibilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>, TError = unknown>(serviceName: string,
    params?: GetXdslServiceNameFiberEligibilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameFiberEligibilitiesQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>> = ({ signal }) => getXdslServiceNameFiberEligibilities(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameFiberEligibilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>>
export type GetXdslServiceNameFiberEligibilitiesQueryError = unknown


export function useGetXdslServiceNameFiberEligibilities<TData = Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetXdslServiceNameFiberEligibilitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameFiberEligibilities<TData = Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>, TError = unknown>(
 serviceName: string,
    params?: GetXdslServiceNameFiberEligibilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameFiberEligibilities<TData = Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>, TError = unknown>(
 serviceName: string,
    params?: GetXdslServiceNameFiberEligibilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List fiber eligibilities for this access
 */

export function useGetXdslServiceNameFiberEligibilities<TData = Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>, TError = unknown>(
 serviceName: string,
    params?: GetXdslServiceNameFiberEligibilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameFiberEligibilitiesQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getXdslServiceNameFiberEligibilitiesId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslFiberEligibilityOVH>(
      {url: `/xdsl/${serviceName}/fiberEligibilities/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameFiberEligibilitiesIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/xdsl/${serviceName}/fiberEligibilities/${id}`] as const;
    }

    
export const getGetXdslServiceNameFiberEligibilitiesIdQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameFiberEligibilitiesIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>> = ({ signal }) => getXdslServiceNameFiberEligibilitiesId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameFiberEligibilitiesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>>
export type GetXdslServiceNameFiberEligibilitiesIdQueryError = unknown


export function useGetXdslServiceNameFiberEligibilitiesId<TData = Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameFiberEligibilitiesId<TData = Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameFiberEligibilitiesId<TData = Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameFiberEligibilitiesId<TData = Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameFiberEligibilitiesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameFiberEligibilitiesIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getXdslServiceNameIncident = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslIncidentOVH>(
      {url: `/xdsl/${serviceName}/incident`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameIncidentQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/incident`] as const;
    }

    
export const getGetXdslServiceNameIncidentQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameIncident>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameIncidentQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameIncident>>> = ({ signal }) => getXdslServiceNameIncident(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIncident>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameIncidentQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameIncident>>>
export type GetXdslServiceNameIncidentQueryError = unknown


export function useGetXdslServiceNameIncident<TData = Awaited<ReturnType<typeof getXdslServiceNameIncident>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIncident>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameIncident>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameIncident<TData = Awaited<ReturnType<typeof getXdslServiceNameIncident>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIncident>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameIncident>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameIncident<TData = Awaited<ReturnType<typeof getXdslServiceNameIncident>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameIncident<TData = Awaited<ReturnType<typeof getXdslServiceNameIncident>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameIncidentQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of IPs addresses for this access
 */
export const getXdslServiceNameIps = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpOVH[]>(
      {url: `/xdsl/${serviceName}/ips`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameIpsQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/ips`] as const;
    }

    
export const getGetXdslServiceNameIpsQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameIps>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameIpsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameIps>>> = ({ signal }) => getXdslServiceNameIps(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameIpsQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameIps>>>
export type GetXdslServiceNameIpsQueryError = unknown


export function useGetXdslServiceNameIps<TData = Awaited<ReturnType<typeof getXdslServiceNameIps>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameIps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameIps<TData = Awaited<ReturnType<typeof getXdslServiceNameIps>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameIps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameIps<TData = Awaited<ReturnType<typeof getXdslServiceNameIps>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of IPs addresses for this access
 */

export function useGetXdslServiceNameIps<TData = Awaited<ReturnType<typeof getXdslServiceNameIps>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameIpsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Order an extra /29 range of IPv4 addresses
 */
export const postXdslServiceNameIps = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/ips`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameIpsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameIps>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameIps>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameIps>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postXdslServiceNameIps(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameIpsMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameIps>>>
    
    export type PostXdslServiceNameIpsMutationError = unknown

    /**
 * @summary Order an extra /29 range of IPv4 addresses
 */
export const usePostXdslServiceNameIps = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameIps>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameIps>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameIpsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Stop renewing this extra IPv4 option
 */
export const deleteXdslServiceNameIpsIp = (
    serviceName: string,
    ip: IpOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/ips/${ip}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteXdslServiceNameIpsIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteXdslServiceNameIpsIp>>, TError,{serviceName: string;ip: IpOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteXdslServiceNameIpsIp>>, TError,{serviceName: string;ip: IpOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteXdslServiceNameIpsIp>>, {serviceName: string;ip: IpOVH}> = (props) => {
          const {serviceName,ip} = props ?? {};

          return  deleteXdslServiceNameIpsIp(serviceName,ip,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteXdslServiceNameIpsIpMutationResult = NonNullable<Awaited<ReturnType<typeof deleteXdslServiceNameIpsIp>>>
    
    export type DeleteXdslServiceNameIpsIpMutationError = unknown

    /**
 * @summary Stop renewing this extra IPv4 option
 */
export const useDeleteXdslServiceNameIpsIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteXdslServiceNameIpsIp>>, TError,{serviceName: string;ip: IpOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteXdslServiceNameIpsIp>>,
        TError,
        {serviceName: string;ip: IpOVH},
        TContext
      > => {

      const mutationOptions = getDeleteXdslServiceNameIpsIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getXdslServiceNameIpsIp = (
    serviceName: string,
    ip: IpOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslIPOVH>(
      {url: `/xdsl/${serviceName}/ips/${ip}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameIpsIpQueryKey = (serviceName: string,
    ip: IpOVH,) => {
    return [`/xdsl/${serviceName}/ips/${ip}`] as const;
    }

    
export const getGetXdslServiceNameIpsIpQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>, TError = unknown>(serviceName: string,
    ip: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameIpsIpQueryKey(serviceName,ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>> = ({ signal }) => getXdslServiceNameIpsIp(serviceName,ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameIpsIpQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>>
export type GetXdslServiceNameIpsIpQueryError = unknown


export function useGetXdslServiceNameIpsIp<TData = Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>, TError = unknown>(
 serviceName: string,
    ip: IpOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameIpsIp<TData = Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>, TError = unknown>(
 serviceName: string,
    ip: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameIpsIp<TData = Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>, TError = unknown>(
 serviceName: string,
    ip: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameIpsIp<TData = Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>, TError = unknown>(
 serviceName: string,
    ip: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameIpsIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameIpsIpQueryOptions(serviceName,ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the status of the IPv6 for this access
 */
export const updateIp = (
    serviceName: string,
    xdslIpv6PostOVH: XdslIpv6PostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/ipv6`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslIpv6PostOVH, signal
    },
      options);
    }
  


export const getUpdateIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateIp>>, TError,{serviceName: string;data: XdslIpv6PostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateIp>>, TError,{serviceName: string;data: XdslIpv6PostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateIp>>, {serviceName: string;data: XdslIpv6PostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  updateIp(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateIpMutationResult = NonNullable<Awaited<ReturnType<typeof updateIp>>>
    export type UpdateIpMutationBody = XdslIpv6PostOVH
    export type UpdateIpMutationError = unknown

    /**
 * @summary Change the status of the IPv6 for this access
 */
export const useUpdateIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateIp>>, TError,{serviceName: string;data: XdslIpv6PostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateIp>>,
        TError,
        {serviceName: string;data: XdslIpv6PostOVH},
        TContext
      > => {

      const mutationOptions = getUpdateIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary The lines of the access
 */
export const getXdslServiceNameLines = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/${serviceName}/lines`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameLinesQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/lines`] as const;
    }

    
export const getGetXdslServiceNameLinesQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameLines>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLines>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameLinesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameLines>>> = ({ signal }) => getXdslServiceNameLines(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLines>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameLinesQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameLines>>>
export type GetXdslServiceNameLinesQueryError = unknown


export function useGetXdslServiceNameLines<TData = Awaited<ReturnType<typeof getXdslServiceNameLines>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLines>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameLines>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameLines<TData = Awaited<ReturnType<typeof getXdslServiceNameLines>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLines>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameLines>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameLines<TData = Awaited<ReturnType<typeof getXdslServiceNameLines>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLines>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary The lines of the access
 */

export function useGetXdslServiceNameLines<TData = Awaited<ReturnType<typeof getXdslServiceNameLines>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLines>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameLinesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getXdslServiceNameLinesNumber = (
    serviceName: string,
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslLineOVH>(
      {url: `/xdsl/${serviceName}/lines/${number}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameLinesNumberQueryKey = (serviceName: string,
    number: string,) => {
    return [`/xdsl/${serviceName}/lines/${number}`] as const;
    }

    
export const getGetXdslServiceNameLinesNumberQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>, TError = unknown>(serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameLinesNumberQueryKey(serviceName,number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>> = ({ signal }) => getXdslServiceNameLinesNumber(serviceName,number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameLinesNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>>
export type GetXdslServiceNameLinesNumberQueryError = unknown


export function useGetXdslServiceNameLinesNumber<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>, TError = unknown>(
 serviceName: string,
    number: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameLinesNumber<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameLinesNumber<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameLinesNumber<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameLinesNumberQueryOptions(serviceName,number,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Cancel line diagnostic if possible
 */
export const postXdslServiceNameLinesNumberDiagnosticCancel = (
    serviceName: string,
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/lines/${number}/diagnostic/cancel`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameLinesNumberDiagnosticCancelMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameLinesNumberDiagnosticCancel>>, TError,{serviceName: string;number: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameLinesNumberDiagnosticCancel>>, TError,{serviceName: string;number: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameLinesNumberDiagnosticCancel>>, {serviceName: string;number: string}> = (props) => {
          const {serviceName,number} = props ?? {};

          return  postXdslServiceNameLinesNumberDiagnosticCancel(serviceName,number,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameLinesNumberDiagnosticCancelMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameLinesNumberDiagnosticCancel>>>
    
    export type PostXdslServiceNameLinesNumberDiagnosticCancelMutationError = unknown

    /**
 * @summary Cancel line diagnostic if possible
 */
export const usePostXdslServiceNameLinesNumberDiagnosticCancel = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameLinesNumberDiagnosticCancel>>, TError,{serviceName: string;number: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameLinesNumberDiagnosticCancel>>,
        TError,
        {serviceName: string;number: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameLinesNumberDiagnosticCancelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update and get advanced diagnostic of the line
 */
export const updateLineDiagnostic = (
    serviceName: string,
    number: string,
    xdslLinesDiagnosticRunPostOVH: XdslLinesDiagnosticRunPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslLineDiagnosticDiagnosticOVH>(
      {url: `/xdsl/${serviceName}/lines/${number}/diagnostic/run`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslLinesDiagnosticRunPostOVH, signal
    },
      options);
    }
  


export const getUpdateLineDiagnosticMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLineDiagnostic>>, TError,{serviceName: string;number: string;data: XdslLinesDiagnosticRunPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateLineDiagnostic>>, TError,{serviceName: string;number: string;data: XdslLinesDiagnosticRunPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateLineDiagnostic>>, {serviceName: string;number: string;data: XdslLinesDiagnosticRunPostOVH}> = (props) => {
          const {serviceName,number,data} = props ?? {};

          return  updateLineDiagnostic(serviceName,number,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateLineDiagnosticMutationResult = NonNullable<Awaited<ReturnType<typeof updateLineDiagnostic>>>
    export type UpdateLineDiagnosticMutationBody = XdslLinesDiagnosticRunPostOVH
    export type UpdateLineDiagnosticMutationError = unknown

    /**
 * @summary Update and get advanced diagnostic of the line
 */
export const useUpdateLineDiagnostic = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLineDiagnostic>>, TError,{serviceName: string;number: string;data: XdslLinesDiagnosticRunPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateLineDiagnostic>>,
        TError,
        {serviceName: string;number: string;data: XdslLinesDiagnosticRunPostOVH},
        TContext
      > => {

      const mutationOptions = getUpdateLineDiagnosticMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getXdslServiceNameLinesNumberDslamPort = (
    serviceName: string,
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslDslamPortOVH>(
      {url: `/xdsl/${serviceName}/lines/${number}/dslamPort`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameLinesNumberDslamPortQueryKey = (serviceName: string,
    number: string,) => {
    return [`/xdsl/${serviceName}/lines/${number}/dslamPort`] as const;
    }

    
export const getGetXdslServiceNameLinesNumberDslamPortQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>, TError = unknown>(serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameLinesNumberDslamPortQueryKey(serviceName,number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>> = ({ signal }) => getXdslServiceNameLinesNumberDslamPort(serviceName,number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameLinesNumberDslamPortQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>>
export type GetXdslServiceNameLinesNumberDslamPortQueryError = unknown


export function useGetXdslServiceNameLinesNumberDslamPort<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>, TError = unknown>(
 serviceName: string,
    number: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameLinesNumberDslamPort<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameLinesNumberDslamPort<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameLinesNumberDslamPort<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPort>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameLinesNumberDslamPortQueryOptions(serviceName,number,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all availables profiles for this port
 */
export const getXdslServiceNameLinesNumberDslamPortAvailableProfiles = (
    serviceName: string,
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslDslamLineProfileOVH[]>(
      {url: `/xdsl/${serviceName}/lines/${number}/dslamPort/availableProfiles`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameLinesNumberDslamPortAvailableProfilesQueryKey = (serviceName: string,
    number: string,) => {
    return [`/xdsl/${serviceName}/lines/${number}/dslamPort/availableProfiles`] as const;
    }

    
export const getGetXdslServiceNameLinesNumberDslamPortAvailableProfilesQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>, TError = unknown>(serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameLinesNumberDslamPortAvailableProfilesQueryKey(serviceName,number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>> = ({ signal }) => getXdslServiceNameLinesNumberDslamPortAvailableProfiles(serviceName,number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameLinesNumberDslamPortAvailableProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>>
export type GetXdslServiceNameLinesNumberDslamPortAvailableProfilesQueryError = unknown


export function useGetXdslServiceNameLinesNumberDslamPortAvailableProfiles<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>, TError = unknown>(
 serviceName: string,
    number: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameLinesNumberDslamPortAvailableProfiles<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameLinesNumberDslamPortAvailableProfiles<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all availables profiles for this port
 */

export function useGetXdslServiceNameLinesNumberDslamPortAvailableProfiles<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>, TError = unknown>(
 serviceName: string,
    number: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortAvailableProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameLinesNumberDslamPortAvailableProfilesQueryOptions(serviceName,number,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the profile of the port
 */
export const changeLineDSLAMProfile = (
    serviceName: string,
    number: string,
    xdslLinesDslamPortChangeProfilePostOVH: XdslLinesDslamPortChangeProfilePostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/lines/${number}/dslamPort/changeProfile`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslLinesDslamPortChangeProfilePostOVH, signal
    },
      options);
    }
  


export const getChangeLineDSLAMProfileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeLineDSLAMProfile>>, TError,{serviceName: string;number: string;data: XdslLinesDslamPortChangeProfilePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof changeLineDSLAMProfile>>, TError,{serviceName: string;number: string;data: XdslLinesDslamPortChangeProfilePostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeLineDSLAMProfile>>, {serviceName: string;number: string;data: XdslLinesDslamPortChangeProfilePostOVH}> = (props) => {
          const {serviceName,number,data} = props ?? {};

          return  changeLineDSLAMProfile(serviceName,number,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeLineDSLAMProfileMutationResult = NonNullable<Awaited<ReturnType<typeof changeLineDSLAMProfile>>>
    export type ChangeLineDSLAMProfileMutationBody = XdslLinesDslamPortChangeProfilePostOVH
    export type ChangeLineDSLAMProfileMutationError = unknown

    /**
 * @summary Change the profile of the port
 */
export const useChangeLineDSLAMProfile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeLineDSLAMProfile>>, TError,{serviceName: string;number: string;data: XdslLinesDslamPortChangeProfilePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof changeLineDSLAMProfile>>,
        TError,
        {serviceName: string;number: string;data: XdslLinesDslamPortChangeProfilePostOVH},
        TContext
      > => {

      const mutationOptions = getChangeLineDSLAMProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the logs emitted by the DSLAM for this port
 */
export const getXdslServiceNameLinesNumberDslamPortLogs = (
    serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberDslamPortLogsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslDslamPortLogOVH[]>(
      {url: `/xdsl/${serviceName}/lines/${number}/dslamPort/logs`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetXdslServiceNameLinesNumberDslamPortLogsQueryKey = (serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberDslamPortLogsParams,) => {
    return [`/xdsl/${serviceName}/lines/${number}/dslamPort/logs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetXdslServiceNameLinesNumberDslamPortLogsQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>, TError = unknown>(serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberDslamPortLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameLinesNumberDslamPortLogsQueryKey(serviceName,number,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>> = ({ signal }) => getXdslServiceNameLinesNumberDslamPortLogs(serviceName,number,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameLinesNumberDslamPortLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>>
export type GetXdslServiceNameLinesNumberDslamPortLogsQueryError = unknown


export function useGetXdslServiceNameLinesNumberDslamPortLogs<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>, TError = unknown>(
 serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberDslamPortLogsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameLinesNumberDslamPortLogs<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>, TError = unknown>(
 serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberDslamPortLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameLinesNumberDslamPortLogs<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>, TError = unknown>(
 serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberDslamPortLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the logs emitted by the DSLAM for this port
 */

export function useGetXdslServiceNameLinesNumberDslamPortLogs<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>, TError = unknown>(
 serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberDslamPortLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberDslamPortLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameLinesNumberDslamPortLogsQueryOptions(serviceName,number,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Reset the port on the DSLAM
 */
export const postXdslServiceNameLinesNumberDslamPortReset = (
    serviceName: string,
    number: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/lines/${number}/dslamPort/reset`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameLinesNumberDslamPortResetMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameLinesNumberDslamPortReset>>, TError,{serviceName: string;number: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameLinesNumberDslamPortReset>>, TError,{serviceName: string;number: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameLinesNumberDslamPortReset>>, {serviceName: string;number: string}> = (props) => {
          const {serviceName,number} = props ?? {};

          return  postXdslServiceNameLinesNumberDslamPortReset(serviceName,number,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameLinesNumberDslamPortResetMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameLinesNumberDslamPortReset>>>
    
    export type PostXdslServiceNameLinesNumberDslamPortResetMutationError = unknown

    /**
 * @summary Reset the port on the DSLAM
 */
export const usePostXdslServiceNameLinesNumberDslamPortReset = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameLinesNumberDslamPortReset>>, TError,{serviceName: string;number: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameLinesNumberDslamPortReset>>,
        TError,
        {serviceName: string;number: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameLinesNumberDslamPortResetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get various statistics about the line
 */
export const getXdslServiceNameLinesNumberStatistics = (
    serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberStatisticsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ComplexTypeUnitAndValuesXdslTimestampAndValueOVH>(
      {url: `/xdsl/${serviceName}/lines/${number}/statistics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetXdslServiceNameLinesNumberStatisticsQueryKey = (serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberStatisticsParams,) => {
    return [`/xdsl/${serviceName}/lines/${number}/statistics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetXdslServiceNameLinesNumberStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>, TError = unknown>(serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameLinesNumberStatisticsQueryKey(serviceName,number,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>> = ({ signal }) => getXdslServiceNameLinesNumberStatistics(serviceName,number,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameLinesNumberStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>>
export type GetXdslServiceNameLinesNumberStatisticsQueryError = unknown


export function useGetXdslServiceNameLinesNumberStatistics<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>, TError = unknown>(
 serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberStatisticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameLinesNumberStatistics<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>, TError = unknown>(
 serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameLinesNumberStatistics<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>, TError = unknown>(
 serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get various statistics about the line
 */

export function useGetXdslServiceNameLinesNumberStatistics<TData = Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>, TError = unknown>(
 serviceName: string,
    number: string,
    params: GetXdslServiceNameLinesNumberStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameLinesNumberStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameLinesNumberStatisticsQueryOptions(serviceName,number,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Enable or disable email sending ability
 */
export const updateMailSending = (
    serviceName: string,
    xdslMailSendingPostOVH: XdslMailSendingPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/mailSending`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslMailSendingPostOVH, signal
    },
      options);
    }
  


export const getUpdateMailSendingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMailSending>>, TError,{serviceName: string;data: XdslMailSendingPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateMailSending>>, TError,{serviceName: string;data: XdslMailSendingPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMailSending>>, {serviceName: string;data: XdslMailSendingPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  updateMailSending(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMailSendingMutationResult = NonNullable<Awaited<ReturnType<typeof updateMailSending>>>
    export type UpdateMailSendingMutationBody = XdslMailSendingPostOVH
    export type UpdateMailSendingMutationError = unknown

    /**
 * @summary Enable or disable email sending ability
 */
export const useUpdateMailSending = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMailSending>>, TError,{serviceName: string;data: XdslMailSendingPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateMailSending>>,
        TError,
        {serviceName: string;data: XdslMailSendingPostOVH},
        TContext
      > => {

      const mutationOptions = getUpdateMailSendingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getXdslServiceNameModem = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslModemOVH>(
      {url: `/xdsl/${serviceName}/modem`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem`] as const;
    }

    
export const getGetXdslServiceNameModemQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModem>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModem>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModem>>> = ({ signal }) => getXdslServiceNameModem(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModem>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModem>>>
export type GetXdslServiceNameModemQueryError = unknown


export function useGetXdslServiceNameModem<TData = Awaited<ReturnType<typeof getXdslServiceNameModem>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModem>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModem>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModem<TData = Awaited<ReturnType<typeof getXdslServiceNameModem>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModem>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModem>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModem<TData = Awaited<ReturnType<typeof getXdslServiceNameModem>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModem>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameModem<TData = Awaited<ReturnType<typeof getXdslServiceNameModem>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModem>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putXdslServiceNameModem = (
    serviceName: string,
    xdslModemOVH: NonReadonly<XdslModemOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/modem`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemOVH
    },
      options);
    }
  


export const getPutXdslServiceNameModemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameModem>>, TError,{serviceName: string;data: NonReadonly<XdslModemOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameModem>>, TError,{serviceName: string;data: NonReadonly<XdslModemOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putXdslServiceNameModem>>, {serviceName: string;data: NonReadonly<XdslModemOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putXdslServiceNameModem(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutXdslServiceNameModemMutationResult = NonNullable<Awaited<ReturnType<typeof putXdslServiceNameModem>>>
    export type PutXdslServiceNameModemMutationBody = NonReadonly<XdslModemOVH>
    export type PutXdslServiceNameModemMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutXdslServiceNameModem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameModem>>, TError,{serviceName: string;data: NonReadonly<XdslModemOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putXdslServiceNameModem>>,
        TError,
        {serviceName: string;data: NonReadonly<XdslModemOVH>},
        TContext
      > => {

      const mutationOptions = getPutXdslServiceNameModemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available ACS backend for this modem
 */
export const getXdslServiceNameModemAvailableACSBackend = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/${serviceName}/modem/availableACSBackend`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemAvailableACSBackendQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/availableACSBackend`] as const;
    }

    
export const getGetXdslServiceNameModemAvailableACSBackendQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemAvailableACSBackendQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>> = ({ signal }) => getXdslServiceNameModemAvailableACSBackend(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemAvailableACSBackendQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>>
export type GetXdslServiceNameModemAvailableACSBackendQueryError = unknown


export function useGetXdslServiceNameModemAvailableACSBackend<TData = Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemAvailableACSBackend<TData = Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemAvailableACSBackend<TData = Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available ACS backend for this modem
 */

export function useGetXdslServiceNameModemAvailableACSBackend<TData = Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableACSBackend>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemAvailableACSBackendQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available WLAN channel for this modem
 */
export const getXdslServiceNameModemAvailableWLANChannel = (
    serviceName: string,
    params: GetXdslServiceNameModemAvailableWLANChannelParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/xdsl/${serviceName}/modem/availableWLANChannel`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemAvailableWLANChannelQueryKey = (serviceName: string,
    params: GetXdslServiceNameModemAvailableWLANChannelParams,) => {
    return [`/xdsl/${serviceName}/modem/availableWLANChannel`, ...(params ? [params]: [])] as const;
    }

    
export const getGetXdslServiceNameModemAvailableWLANChannelQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>, TError = unknown>(serviceName: string,
    params: GetXdslServiceNameModemAvailableWLANChannelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemAvailableWLANChannelQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>> = ({ signal }) => getXdslServiceNameModemAvailableWLANChannel(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemAvailableWLANChannelQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>>
export type GetXdslServiceNameModemAvailableWLANChannelQueryError = unknown


export function useGetXdslServiceNameModemAvailableWLANChannel<TData = Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>, TError = unknown>(
 serviceName: string,
    params: GetXdslServiceNameModemAvailableWLANChannelParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemAvailableWLANChannel<TData = Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>, TError = unknown>(
 serviceName: string,
    params: GetXdslServiceNameModemAvailableWLANChannelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemAvailableWLANChannel<TData = Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>, TError = unknown>(
 serviceName: string,
    params: GetXdslServiceNameModemAvailableWLANChannelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available WLAN channel for this modem
 */

export function useGetXdslServiceNameModemAvailableWLANChannel<TData = Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>, TError = unknown>(
 serviceName: string,
    params: GetXdslServiceNameModemAvailableWLANChannelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemAvailableWLANChannel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemAvailableWLANChannelQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the status of the Bloc IP on modem
 */
export const getBlocIPStatus = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslServiceStatusEnumOVH>(
      {url: `/xdsl/${serviceName}/modem/blocIp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBlocIPStatusQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/blocIp`] as const;
    }

    
export const getGetBlocIPStatusQueryOptions = <TData = Awaited<ReturnType<typeof getBlocIPStatus>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlocIPStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBlocIPStatusQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBlocIPStatus>>> = ({ signal }) => getBlocIPStatus(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBlocIPStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetBlocIPStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getBlocIPStatus>>>
export type GetBlocIPStatusQueryError = unknown


export function useGetBlocIPStatus<TData = Awaited<ReturnType<typeof getBlocIPStatus>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlocIPStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlocIPStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBlocIPStatus<TData = Awaited<ReturnType<typeof getBlocIPStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlocIPStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlocIPStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBlocIPStatus<TData = Awaited<ReturnType<typeof getBlocIPStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlocIPStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the status of the Bloc IP on modem
 */

export function useGetBlocIPStatus<TData = Awaited<ReturnType<typeof getBlocIPStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlocIPStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetBlocIPStatusQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the status of the Bloc IP on modem
 */
export const updateBlocIPStatus = (
    serviceName: string,
    xdslModemBlocIpPostOVH: XdslModemBlocIpPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/blocIp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemBlocIpPostOVH, signal
    },
      options);
    }
  


export const getUpdateBlocIPStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBlocIPStatus>>, TError,{serviceName: string;data: XdslModemBlocIpPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateBlocIPStatus>>, TError,{serviceName: string;data: XdslModemBlocIpPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateBlocIPStatus>>, {serviceName: string;data: XdslModemBlocIpPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  updateBlocIPStatus(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateBlocIPStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateBlocIPStatus>>>
    export type UpdateBlocIPStatusMutationBody = XdslModemBlocIpPostOVH
    export type UpdateBlocIPStatusMutationError = unknown

    /**
 * @summary Change the status of the Bloc IP on modem
 */
export const useUpdateBlocIPStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBlocIPStatus>>, TError,{serviceName: string;data: XdslModemBlocIpPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateBlocIPStatus>>,
        TError,
        {serviceName: string;data: XdslModemBlocIpPostOVH},
        TContext
      > => {

      const mutationOptions = getUpdateBlocIPStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the status of callWaiting on modem
 */
export const getModemCallWaitingStatus = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslServiceStatusEnumOVH>(
      {url: `/xdsl/${serviceName}/modem/callWaiting`, method: 'GET', signal
    },
      options);
    }
  

export const getGetModemCallWaitingStatusQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/callWaiting`] as const;
    }

    
export const getGetModemCallWaitingStatusQueryOptions = <TData = Awaited<ReturnType<typeof getModemCallWaitingStatus>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemCallWaitingStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetModemCallWaitingStatusQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getModemCallWaitingStatus>>> = ({ signal }) => getModemCallWaitingStatus(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getModemCallWaitingStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetModemCallWaitingStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getModemCallWaitingStatus>>>
export type GetModemCallWaitingStatusQueryError = unknown


export function useGetModemCallWaitingStatus<TData = Awaited<ReturnType<typeof getModemCallWaitingStatus>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemCallWaitingStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModemCallWaitingStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetModemCallWaitingStatus<TData = Awaited<ReturnType<typeof getModemCallWaitingStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemCallWaitingStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModemCallWaitingStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetModemCallWaitingStatus<TData = Awaited<ReturnType<typeof getModemCallWaitingStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemCallWaitingStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the status of callWaiting on modem
 */

export function useGetModemCallWaitingStatus<TData = Awaited<ReturnType<typeof getModemCallWaitingStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModemCallWaitingStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetModemCallWaitingStatusQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the status of callWaiting on modem
 */
export const updateModemCallWaiting = (
    serviceName: string,
    xdslModemCallWaitingPostOVH: XdslModemCallWaitingPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/callWaiting`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemCallWaitingPostOVH, signal
    },
      options);
    }
  


export const getUpdateModemCallWaitingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateModemCallWaiting>>, TError,{serviceName: string;data: XdslModemCallWaitingPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateModemCallWaiting>>, TError,{serviceName: string;data: XdslModemCallWaitingPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateModemCallWaiting>>, {serviceName: string;data: XdslModemCallWaitingPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  updateModemCallWaiting(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateModemCallWaitingMutationResult = NonNullable<Awaited<ReturnType<typeof updateModemCallWaiting>>>
    export type UpdateModemCallWaitingMutationBody = XdslModemCallWaitingPostOVH
    export type UpdateModemCallWaitingMutationError = unknown

    /**
 * @summary Change the status of callWaiting on modem
 */
export const useUpdateModemCallWaiting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateModemCallWaiting>>, TError,{serviceName: string;data: XdslModemCallWaitingPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateModemCallWaiting>>,
        TError,
        {serviceName: string;data: XdslModemCallWaitingPostOVH},
        TContext
      > => {

      const mutationOptions = getUpdateModemCallWaitingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get info about access modem replacement by last model.
 */
export const getAccessModemReplacement = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslModemExchangeInfoOVH>(
      {url: `/xdsl/${serviceName}/modem/comfortExchange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAccessModemReplacementQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/comfortExchange`] as const;
    }

    
export const getGetAccessModemReplacementQueryOptions = <TData = Awaited<ReturnType<typeof getAccessModemReplacement>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccessModemReplacement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAccessModemReplacementQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccessModemReplacement>>> = ({ signal }) => getAccessModemReplacement(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAccessModemReplacement>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAccessModemReplacementQueryResult = NonNullable<Awaited<ReturnType<typeof getAccessModemReplacement>>>
export type GetAccessModemReplacementQueryError = unknown


export function useGetAccessModemReplacement<TData = Awaited<ReturnType<typeof getAccessModemReplacement>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccessModemReplacement>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccessModemReplacement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAccessModemReplacement<TData = Awaited<ReturnType<typeof getAccessModemReplacement>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccessModemReplacement>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccessModemReplacement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAccessModemReplacement<TData = Awaited<ReturnType<typeof getAccessModemReplacement>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccessModemReplacement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get info about access modem replacement by last model.
 */

export function useGetAccessModemReplacement<TData = Awaited<ReturnType<typeof getAccessModemReplacement>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccessModemReplacement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAccessModemReplacementQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Replace access modem by last model, fees will be applied.
 */
export const replaceAccessModem = (
    serviceName: string,
    xdslModemComfortExchangePostOVH: XdslModemComfortExchangePostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/xdsl/${serviceName}/modem/comfortExchange`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemComfortExchangePostOVH, signal
    },
      options);
    }
  


export const getReplaceAccessModemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof replaceAccessModem>>, TError,{serviceName: string;data: XdslModemComfortExchangePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof replaceAccessModem>>, TError,{serviceName: string;data: XdslModemComfortExchangePostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof replaceAccessModem>>, {serviceName: string;data: XdslModemComfortExchangePostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  replaceAccessModem(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReplaceAccessModemMutationResult = NonNullable<Awaited<ReturnType<typeof replaceAccessModem>>>
    export type ReplaceAccessModemMutationBody = XdslModemComfortExchangePostOVH
    export type ReplaceAccessModemMutationError = unknown

    /**
 * @summary Replace access modem by last model, fees will be applied.
 */
export const useReplaceAccessModem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof replaceAccessModem>>, TError,{serviceName: string;data: XdslModemComfortExchangePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof replaceAccessModem>>,
        TError,
        {serviceName: string;data: XdslModemComfortExchangePostOVH},
        TContext
      > => {

      const mutationOptions = getReplaceAccessModemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of devices connected on this modem
 */
export const getXdslServiceNameModemConnectedDevices = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/${serviceName}/modem/connectedDevices`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemConnectedDevicesQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/connectedDevices`] as const;
    }

    
export const getGetXdslServiceNameModemConnectedDevicesQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemConnectedDevicesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>> = ({ signal }) => getXdslServiceNameModemConnectedDevices(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemConnectedDevicesQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>>
export type GetXdslServiceNameModemConnectedDevicesQueryError = unknown


export function useGetXdslServiceNameModemConnectedDevices<TData = Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemConnectedDevices<TData = Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemConnectedDevices<TData = Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of devices connected on this modem
 */

export function useGetXdslServiceNameModemConnectedDevices<TData = Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemConnectedDevicesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getXdslServiceNameModemConnectedDevicesMacAddress = (
    serviceName: string,
    macAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslConnectedDeviceOVH>(
      {url: `/xdsl/${serviceName}/modem/connectedDevices/${macAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemConnectedDevicesMacAddressQueryKey = (serviceName: string,
    macAddress: string,) => {
    return [`/xdsl/${serviceName}/modem/connectedDevices/${macAddress}`] as const;
    }

    
export const getGetXdslServiceNameModemConnectedDevicesMacAddressQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>, TError = unknown>(serviceName: string,
    macAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemConnectedDevicesMacAddressQueryKey(serviceName,macAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>> = ({ signal }) => getXdslServiceNameModemConnectedDevicesMacAddress(serviceName,macAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && macAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemConnectedDevicesMacAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>>
export type GetXdslServiceNameModemConnectedDevicesMacAddressQueryError = unknown


export function useGetXdslServiceNameModemConnectedDevicesMacAddress<TData = Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemConnectedDevicesMacAddress<TData = Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemConnectedDevicesMacAddress<TData = Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameModemConnectedDevicesMacAddress<TData = Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemConnectedDevicesMacAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemConnectedDevicesMacAddressQueryOptions(serviceName,macAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the status of contentSharing on modem
 */
export const getContentSharingStatus = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslServiceStatusEnumOVH>(
      {url: `/xdsl/${serviceName}/modem/contentSharing`, method: 'GET', signal
    },
      options);
    }
  

export const getGetContentSharingStatusQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/contentSharing`] as const;
    }

    
export const getGetContentSharingStatusQueryOptions = <TData = Awaited<ReturnType<typeof getContentSharingStatus>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSharingStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentSharingStatusQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentSharingStatus>>> = ({ signal }) => getContentSharingStatus(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentSharingStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetContentSharingStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getContentSharingStatus>>>
export type GetContentSharingStatusQueryError = unknown


export function useGetContentSharingStatus<TData = Awaited<ReturnType<typeof getContentSharingStatus>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSharingStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentSharingStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetContentSharingStatus<TData = Awaited<ReturnType<typeof getContentSharingStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSharingStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentSharingStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetContentSharingStatus<TData = Awaited<ReturnType<typeof getContentSharingStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSharingStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the status of contentSharing on modem
 */

export function useGetContentSharingStatus<TData = Awaited<ReturnType<typeof getContentSharingStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSharingStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetContentSharingStatusQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the status of contentSharing on modem
 */
export const updateContentSharingStatus = (
    serviceName: string,
    xdslModemContentSharingPostOVH: XdslModemContentSharingPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/contentSharing`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemContentSharingPostOVH, signal
    },
      options);
    }
  


export const getUpdateContentSharingStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentSharingStatus>>, TError,{serviceName: string;data: XdslModemContentSharingPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateContentSharingStatus>>, TError,{serviceName: string;data: XdslModemContentSharingPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateContentSharingStatus>>, {serviceName: string;data: XdslModemContentSharingPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  updateContentSharingStatus(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateContentSharingStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateContentSharingStatus>>>
    export type UpdateContentSharingStatusMutationBody = XdslModemContentSharingPostOVH
    export type UpdateContentSharingStatusMutationError = unknown

    /**
 * @summary Change the status of contentSharing on modem
 */
export const useUpdateContentSharingStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentSharingStatus>>, TError,{serviceName: string;data: XdslModemContentSharingPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateContentSharingStatus>>,
        TError,
        {serviceName: string;data: XdslModemContentSharingPostOVH},
        TContext
      > => {

      const mutationOptions = getUpdateContentSharingStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the firmware version installed on modem
 */
export const getFirmwareVersion = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/xdsl/${serviceName}/modem/firmware`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFirmwareVersionQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/firmware`] as const;
    }

    
export const getGetFirmwareVersionQueryOptions = <TData = Awaited<ReturnType<typeof getFirmwareVersion>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFirmwareVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFirmwareVersionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFirmwareVersion>>> = ({ signal }) => getFirmwareVersion(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFirmwareVersion>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFirmwareVersionQueryResult = NonNullable<Awaited<ReturnType<typeof getFirmwareVersion>>>
export type GetFirmwareVersionQueryError = unknown


export function useGetFirmwareVersion<TData = Awaited<ReturnType<typeof getFirmwareVersion>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFirmwareVersion>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFirmwareVersion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFirmwareVersion<TData = Awaited<ReturnType<typeof getFirmwareVersion>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFirmwareVersion>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFirmwareVersion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFirmwareVersion<TData = Awaited<ReturnType<typeof getFirmwareVersion>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFirmwareVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the firmware version installed on modem
 */

export function useGetFirmwareVersion<TData = Awaited<ReturnType<typeof getFirmwareVersion>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFirmwareVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFirmwareVersionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a task to install target firmware on modem
 */
export const installFrimware = (
    serviceName: string,
    xdslModemFirmwarePostOVH: XdslModemFirmwarePostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/firmware`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemFirmwarePostOVH, signal
    },
      options);
    }
  


export const getInstallFrimwareMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof installFrimware>>, TError,{serviceName: string;data: XdslModemFirmwarePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof installFrimware>>, TError,{serviceName: string;data: XdslModemFirmwarePostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof installFrimware>>, {serviceName: string;data: XdslModemFirmwarePostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  installFrimware(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InstallFrimwareMutationResult = NonNullable<Awaited<ReturnType<typeof installFrimware>>>
    export type InstallFrimwareMutationBody = XdslModemFirmwarePostOVH
    export type InstallFrimwareMutationError = unknown

    /**
 * @summary Launch a task to install target firmware on modem
 */
export const useInstallFrimware = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof installFrimware>>, TError,{serviceName: string;data: XdslModemFirmwarePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof installFrimware>>,
        TError,
        {serviceName: string;data: XdslModemFirmwarePostOVH},
        TContext
      > => {

      const mutationOptions = getInstallFrimwareMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available firmware for this modem
 */
export const getXdslServiceNameModemFirmwareAvailable = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/${serviceName}/modem/firmwareAvailable`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemFirmwareAvailableQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/firmwareAvailable`] as const;
    }

    
export const getGetXdslServiceNameModemFirmwareAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemFirmwareAvailableQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>> = ({ signal }) => getXdslServiceNameModemFirmwareAvailable(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemFirmwareAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>>
export type GetXdslServiceNameModemFirmwareAvailableQueryError = unknown


export function useGetXdslServiceNameModemFirmwareAvailable<TData = Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemFirmwareAvailable<TData = Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemFirmwareAvailable<TData = Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available firmware for this modem
 */

export function useGetXdslServiceNameModemFirmwareAvailable<TData = Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemFirmwareAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemFirmwareAvailableQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the status of ftp service on modem
 */
export const getFTPStatus = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslServiceStatusEnumOVH>(
      {url: `/xdsl/${serviceName}/modem/ftp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFTPStatusQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/ftp`] as const;
    }

    
export const getGetFTPStatusQueryOptions = <TData = Awaited<ReturnType<typeof getFTPStatus>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFTPStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFTPStatusQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFTPStatus>>> = ({ signal }) => getFTPStatus(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFTPStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFTPStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getFTPStatus>>>
export type GetFTPStatusQueryError = unknown


export function useGetFTPStatus<TData = Awaited<ReturnType<typeof getFTPStatus>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFTPStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFTPStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFTPStatus<TData = Awaited<ReturnType<typeof getFTPStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFTPStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFTPStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFTPStatus<TData = Awaited<ReturnType<typeof getFTPStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFTPStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the status of ftp service on modem
 */

export function useGetFTPStatus<TData = Awaited<ReturnType<typeof getFTPStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFTPStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFTPStatusQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the status of the ftp service on modem
 */
export const updateFTPStatus = (
    serviceName: string,
    xdslModemFtpPostOVH: XdslModemFtpPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/ftp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemFtpPostOVH, signal
    },
      options);
    }
  


export const getUpdateFTPStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateFTPStatus>>, TError,{serviceName: string;data: XdslModemFtpPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateFTPStatus>>, TError,{serviceName: string;data: XdslModemFtpPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateFTPStatus>>, {serviceName: string;data: XdslModemFtpPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  updateFTPStatus(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateFTPStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateFTPStatus>>>
    export type UpdateFTPStatusMutationBody = XdslModemFtpPostOVH
    export type UpdateFTPStatusMutationError = unknown

    /**
 * @summary Change the status of the ftp service on modem
 */
export const useUpdateFTPStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateFTPStatus>>, TError,{serviceName: string;data: XdslModemFtpPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateFTPStatus>>,
        TError,
        {serviceName: string;data: XdslModemFtpPostOVH},
        TContext
      > => {

      const mutationOptions = getUpdateFTPStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the status of ipsec alg service on modem
 */
export const getIpsecAlgStatus = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslServiceStatusEnumOVH>(
      {url: `/xdsl/${serviceName}/modem/ipsecAlg`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpsecAlgStatusQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/ipsecAlg`] as const;
    }

    
export const getGetIpsecAlgStatusQueryOptions = <TData = Awaited<ReturnType<typeof getIpsecAlgStatus>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpsecAlgStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpsecAlgStatusQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpsecAlgStatus>>> = ({ signal }) => getIpsecAlgStatus(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpsecAlgStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpsecAlgStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getIpsecAlgStatus>>>
export type GetIpsecAlgStatusQueryError = unknown


export function useGetIpsecAlgStatus<TData = Awaited<ReturnType<typeof getIpsecAlgStatus>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpsecAlgStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpsecAlgStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpsecAlgStatus<TData = Awaited<ReturnType<typeof getIpsecAlgStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpsecAlgStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpsecAlgStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpsecAlgStatus<TData = Awaited<ReturnType<typeof getIpsecAlgStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpsecAlgStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the status of ipsec alg service on modem
 */

export function useGetIpsecAlgStatus<TData = Awaited<ReturnType<typeof getIpsecAlgStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpsecAlgStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpsecAlgStatusQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the status of the ipsec alg service on modem
 */
export const updateIpsecAlgStatus = (
    serviceName: string,
    xdslModemIpsecAlgPostOVH: XdslModemIpsecAlgPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/ipsecAlg`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemIpsecAlgPostOVH, signal
    },
      options);
    }
  


export const getUpdateIpsecAlgStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateIpsecAlgStatus>>, TError,{serviceName: string;data: XdslModemIpsecAlgPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateIpsecAlgStatus>>, TError,{serviceName: string;data: XdslModemIpsecAlgPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateIpsecAlgStatus>>, {serviceName: string;data: XdslModemIpsecAlgPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  updateIpsecAlgStatus(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateIpsecAlgStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateIpsecAlgStatus>>>
    export type UpdateIpsecAlgStatusMutationBody = XdslModemIpsecAlgPostOVH
    export type UpdateIpsecAlgStatusMutationError = unknown

    /**
 * @summary Change the status of the ipsec alg service on modem
 */
export const useUpdateIpsecAlgStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateIpsecAlgStatus>>, TError,{serviceName: string;data: XdslModemIpsecAlgPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateIpsecAlgStatus>>,
        TError,
        {serviceName: string;data: XdslModemIpsecAlgPostOVH},
        TContext
      > => {

      const mutationOptions = getUpdateIpsecAlgStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of LANs on this modem
 */
export const getXdslServiceNameModemLan = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/${serviceName}/modem/lan`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemLanQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/lan`] as const;
    }

    
export const getGetXdslServiceNameModemLanQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModemLan>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemLanQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModemLan>>> = ({ signal }) => getXdslServiceNameModemLan(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLan>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemLanQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModemLan>>>
export type GetXdslServiceNameModemLanQueryError = unknown


export function useGetXdslServiceNameModemLan<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLan>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLan>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemLan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemLan<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLan>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLan>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemLan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemLan<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLan>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of LANs on this modem
 */

export function useGetXdslServiceNameModemLan<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLan>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemLanQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getXdslServiceNameModemLanLanName = (
    serviceName: string,
    lanName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslLANOVH>(
      {url: `/xdsl/${serviceName}/modem/lan/${lanName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemLanLanNameQueryKey = (serviceName: string,
    lanName: string,) => {
    return [`/xdsl/${serviceName}/modem/lan/${lanName}`] as const;
    }

    
export const getGetXdslServiceNameModemLanLanNameQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>, TError = unknown>(serviceName: string,
    lanName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemLanLanNameQueryKey(serviceName,lanName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>> = ({ signal }) => getXdslServiceNameModemLanLanName(serviceName,lanName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && lanName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemLanLanNameQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>>
export type GetXdslServiceNameModemLanLanNameQueryError = unknown


export function useGetXdslServiceNameModemLanLanName<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>, TError = unknown>(
 serviceName: string,
    lanName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemLanLanName<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>, TError = unknown>(
 serviceName: string,
    lanName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemLanLanName<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>, TError = unknown>(
 serviceName: string,
    lanName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameModemLanLanName<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>, TError = unknown>(
 serviceName: string,
    lanName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemLanLanNameQueryOptions(serviceName,lanName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putXdslServiceNameModemLanLanName = (
    serviceName: string,
    lanName: string,
    xdslLANOVH: NonReadonly<XdslLANOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/modem/lan/${lanName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: xdslLANOVH
    },
      options);
    }
  


export const getPutXdslServiceNameModemLanLanNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameModemLanLanName>>, TError,{serviceName: string;lanName: string;data: NonReadonly<XdslLANOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameModemLanLanName>>, TError,{serviceName: string;lanName: string;data: NonReadonly<XdslLANOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putXdslServiceNameModemLanLanName>>, {serviceName: string;lanName: string;data: NonReadonly<XdslLANOVH>}> = (props) => {
          const {serviceName,lanName,data} = props ?? {};

          return  putXdslServiceNameModemLanLanName(serviceName,lanName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutXdslServiceNameModemLanLanNameMutationResult = NonNullable<Awaited<ReturnType<typeof putXdslServiceNameModemLanLanName>>>
    export type PutXdslServiceNameModemLanLanNameMutationBody = NonReadonly<XdslLANOVH>
    export type PutXdslServiceNameModemLanLanNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutXdslServiceNameModemLanLanName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameModemLanLanName>>, TError,{serviceName: string;lanName: string;data: NonReadonly<XdslLANOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putXdslServiceNameModemLanLanName>>,
        TError,
        {serviceName: string;lanName: string;data: NonReadonly<XdslLANOVH>},
        TContext
      > => {

      const mutationOptions = getPutXdslServiceNameModemLanLanNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of DHCP on this modem
 */
export const getXdslServiceNameModemLanLanNameDhcp = (
    serviceName: string,
    lanName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/${serviceName}/modem/lan/${lanName}/dhcp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemLanLanNameDhcpQueryKey = (serviceName: string,
    lanName: string,) => {
    return [`/xdsl/${serviceName}/modem/lan/${lanName}/dhcp`] as const;
    }

    
export const getGetXdslServiceNameModemLanLanNameDhcpQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>, TError = unknown>(serviceName: string,
    lanName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemLanLanNameDhcpQueryKey(serviceName,lanName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>> = ({ signal }) => getXdslServiceNameModemLanLanNameDhcp(serviceName,lanName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && lanName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemLanLanNameDhcpQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>>
export type GetXdslServiceNameModemLanLanNameDhcpQueryError = unknown


export function useGetXdslServiceNameModemLanLanNameDhcp<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>, TError = unknown>(
 serviceName: string,
    lanName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemLanLanNameDhcp<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>, TError = unknown>(
 serviceName: string,
    lanName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemLanLanNameDhcp<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>, TError = unknown>(
 serviceName: string,
    lanName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of DHCP on this modem
 */

export function useGetXdslServiceNameModemLanLanNameDhcp<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>, TError = unknown>(
 serviceName: string,
    lanName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemLanLanNameDhcpQueryOptions(serviceName,lanName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getXdslServiceNameModemLanLanNameDhcpDhcpName = (
    serviceName: string,
    lanName: string,
    dhcpName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslDHCPOVH>(
      {url: `/xdsl/${serviceName}/modem/lan/${lanName}/dhcp/${dhcpName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemLanLanNameDhcpDhcpNameQueryKey = (serviceName: string,
    lanName: string,
    dhcpName: string,) => {
    return [`/xdsl/${serviceName}/modem/lan/${lanName}/dhcp/${dhcpName}`] as const;
    }

    
export const getGetXdslServiceNameModemLanLanNameDhcpDhcpNameQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError = unknown>(serviceName: string,
    lanName: string,
    dhcpName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemLanLanNameDhcpDhcpNameQueryKey(serviceName,lanName,dhcpName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>> = ({ signal }) => getXdslServiceNameModemLanLanNameDhcpDhcpName(serviceName,lanName,dhcpName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && lanName && dhcpName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemLanLanNameDhcpDhcpNameQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>>
export type GetXdslServiceNameModemLanLanNameDhcpDhcpNameQueryError = unknown


export function useGetXdslServiceNameModemLanLanNameDhcpDhcpName<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError = unknown>(
 serviceName: string,
    lanName: string,
    dhcpName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemLanLanNameDhcpDhcpName<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError = unknown>(
 serviceName: string,
    lanName: string,
    dhcpName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemLanLanNameDhcpDhcpName<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError = unknown>(
 serviceName: string,
    lanName: string,
    dhcpName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameModemLanLanNameDhcpDhcpName<TData = Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError = unknown>(
 serviceName: string,
    lanName: string,
    dhcpName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemLanLanNameDhcpDhcpNameQueryOptions(serviceName,lanName,dhcpName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putXdslServiceNameModemLanLanNameDhcpDhcpName = (
    serviceName: string,
    lanName: string,
    dhcpName: string,
    xdslDHCPOVH: NonReadonly<XdslDHCPOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/modem/lan/${lanName}/dhcp/${dhcpName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: xdslDHCPOVH
    },
      options);
    }
  


export const getPutXdslServiceNameModemLanLanNameDhcpDhcpNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError,{serviceName: string;lanName: string;dhcpName: string;data: NonReadonly<XdslDHCPOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError,{serviceName: string;lanName: string;dhcpName: string;data: NonReadonly<XdslDHCPOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putXdslServiceNameModemLanLanNameDhcpDhcpName>>, {serviceName: string;lanName: string;dhcpName: string;data: NonReadonly<XdslDHCPOVH>}> = (props) => {
          const {serviceName,lanName,dhcpName,data} = props ?? {};

          return  putXdslServiceNameModemLanLanNameDhcpDhcpName(serviceName,lanName,dhcpName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutXdslServiceNameModemLanLanNameDhcpDhcpNameMutationResult = NonNullable<Awaited<ReturnType<typeof putXdslServiceNameModemLanLanNameDhcpDhcpName>>>
    export type PutXdslServiceNameModemLanLanNameDhcpDhcpNameMutationBody = NonReadonly<XdslDHCPOVH>
    export type PutXdslServiceNameModemLanLanNameDhcpDhcpNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutXdslServiceNameModemLanLanNameDhcpDhcpName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameModemLanLanNameDhcpDhcpName>>, TError,{serviceName: string;lanName: string;dhcpName: string;data: NonReadonly<XdslDHCPOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putXdslServiceNameModemLanLanNameDhcpDhcpName>>,
        TError,
        {serviceName: string;lanName: string;dhcpName: string;data: NonReadonly<XdslDHCPOVH>},
        TContext
      > => {

      const mutationOptions = getPutXdslServiceNameModemLanLanNameDhcpDhcpNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of DHCP Static Address of this modem
 */
export const getDHCPStaticAddresses = (
    serviceName: string,
    lanName: string,
    dhcpName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/${serviceName}/modem/lan/${lanName}/dhcp/${dhcpName}/DHCPStaticAddresses`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDHCPStaticAddressesQueryKey = (serviceName: string,
    lanName: string,
    dhcpName: string,) => {
    return [`/xdsl/${serviceName}/modem/lan/${lanName}/dhcp/${dhcpName}/DHCPStaticAddresses`] as const;
    }

    
export const getGetDHCPStaticAddressesQueryOptions = <TData = Awaited<ReturnType<typeof getDHCPStaticAddresses>>, TError = unknown>(serviceName: string,
    lanName: string,
    dhcpName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDHCPStaticAddresses>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDHCPStaticAddressesQueryKey(serviceName,lanName,dhcpName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDHCPStaticAddresses>>> = ({ signal }) => getDHCPStaticAddresses(serviceName,lanName,dhcpName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && lanName && dhcpName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDHCPStaticAddresses>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDHCPStaticAddressesQueryResult = NonNullable<Awaited<ReturnType<typeof getDHCPStaticAddresses>>>
export type GetDHCPStaticAddressesQueryError = unknown


export function useGetDHCPStaticAddresses<TData = Awaited<ReturnType<typeof getDHCPStaticAddresses>>, TError = unknown>(
 serviceName: string,
    lanName: string,
    dhcpName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDHCPStaticAddresses>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDHCPStaticAddresses>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDHCPStaticAddresses<TData = Awaited<ReturnType<typeof getDHCPStaticAddresses>>, TError = unknown>(
 serviceName: string,
    lanName: string,
    dhcpName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDHCPStaticAddresses>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDHCPStaticAddresses>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDHCPStaticAddresses<TData = Awaited<ReturnType<typeof getDHCPStaticAddresses>>, TError = unknown>(
 serviceName: string,
    lanName: string,
    dhcpName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDHCPStaticAddresses>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of DHCP Static Address of this modem
 */

export function useGetDHCPStaticAddresses<TData = Awaited<ReturnType<typeof getDHCPStaticAddresses>>, TError = unknown>(
 serviceName: string,
    lanName: string,
    dhcpName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDHCPStaticAddresses>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDHCPStaticAddressesQueryOptions(serviceName,lanName,dhcpName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a DHCP static lease
 */
export const addDHCPStaticAddress = (
    serviceName: string,
    lanName: string,
    dhcpName: string,
    xdslModemLanDhcpDHCPStaticAddressesPostOVH: XdslModemLanDhcpDHCPStaticAddressesPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslDHCPStaticAddressOVH>(
      {url: `/xdsl/${serviceName}/modem/lan/${lanName}/dhcp/${dhcpName}/DHCPStaticAddresses`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemLanDhcpDHCPStaticAddressesPostOVH, signal
    },
      options);
    }
  


export const getAddDHCPStaticAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addDHCPStaticAddress>>, TError,{serviceName: string;lanName: string;dhcpName: string;data: XdslModemLanDhcpDHCPStaticAddressesPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof addDHCPStaticAddress>>, TError,{serviceName: string;lanName: string;dhcpName: string;data: XdslModemLanDhcpDHCPStaticAddressesPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addDHCPStaticAddress>>, {serviceName: string;lanName: string;dhcpName: string;data: XdslModemLanDhcpDHCPStaticAddressesPostOVH}> = (props) => {
          const {serviceName,lanName,dhcpName,data} = props ?? {};

          return  addDHCPStaticAddress(serviceName,lanName,dhcpName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddDHCPStaticAddressMutationResult = NonNullable<Awaited<ReturnType<typeof addDHCPStaticAddress>>>
    export type AddDHCPStaticAddressMutationBody = XdslModemLanDhcpDHCPStaticAddressesPostOVH
    export type AddDHCPStaticAddressMutationError = unknown

    /**
 * @summary Add a DHCP static lease
 */
export const useAddDHCPStaticAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addDHCPStaticAddress>>, TError,{serviceName: string;lanName: string;dhcpName: string;data: XdslModemLanDhcpDHCPStaticAddressesPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof addDHCPStaticAddress>>,
        TError,
        {serviceName: string;lanName: string;dhcpName: string;data: XdslModemLanDhcpDHCPStaticAddressesPostOVH},
        TContext
      > => {

      const mutationOptions = getAddDHCPStaticAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this port mapping
 */
export const removeDHCPStaticAddress = (
    serviceName: string,
    lanName: string,
    dhcpName: string,
    mACAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/lan/${lanName}/dhcp/${dhcpName}/DHCPStaticAddresses/${mACAddress}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveDHCPStaticAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeDHCPStaticAddress>>, TError,{serviceName: string;lanName: string;dhcpName: string;mACAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof removeDHCPStaticAddress>>, TError,{serviceName: string;lanName: string;dhcpName: string;mACAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeDHCPStaticAddress>>, {serviceName: string;lanName: string;dhcpName: string;mACAddress: string}> = (props) => {
          const {serviceName,lanName,dhcpName,mACAddress} = props ?? {};

          return  removeDHCPStaticAddress(serviceName,lanName,dhcpName,mACAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveDHCPStaticAddressMutationResult = NonNullable<Awaited<ReturnType<typeof removeDHCPStaticAddress>>>
    
    export type RemoveDHCPStaticAddressMutationError = unknown

    /**
 * @summary Delete this port mapping
 */
export const useRemoveDHCPStaticAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeDHCPStaticAddress>>, TError,{serviceName: string;lanName: string;dhcpName: string;mACAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof removeDHCPStaticAddress>>,
        TError,
        {serviceName: string;lanName: string;dhcpName: string;mACAddress: string},
        TContext
      > => {

      const mutationOptions = getRemoveDHCPStaticAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDHCPStaticAddress = (
    serviceName: string,
    lanName: string,
    dhcpName: string,
    mACAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslDHCPStaticAddressOVH>(
      {url: `/xdsl/${serviceName}/modem/lan/${lanName}/dhcp/${dhcpName}/DHCPStaticAddresses/${mACAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDHCPStaticAddressQueryKey = (serviceName: string,
    lanName: string,
    dhcpName: string,
    mACAddress: string,) => {
    return [`/xdsl/${serviceName}/modem/lan/${lanName}/dhcp/${dhcpName}/DHCPStaticAddresses/${mACAddress}`] as const;
    }

    
export const getGetDHCPStaticAddressQueryOptions = <TData = Awaited<ReturnType<typeof getDHCPStaticAddress>>, TError = unknown>(serviceName: string,
    lanName: string,
    dhcpName: string,
    mACAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDHCPStaticAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDHCPStaticAddressQueryKey(serviceName,lanName,dhcpName,mACAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDHCPStaticAddress>>> = ({ signal }) => getDHCPStaticAddress(serviceName,lanName,dhcpName,mACAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && lanName && dhcpName && mACAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDHCPStaticAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDHCPStaticAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getDHCPStaticAddress>>>
export type GetDHCPStaticAddressQueryError = unknown


export function useGetDHCPStaticAddress<TData = Awaited<ReturnType<typeof getDHCPStaticAddress>>, TError = unknown>(
 serviceName: string,
    lanName: string,
    dhcpName: string,
    mACAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDHCPStaticAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDHCPStaticAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDHCPStaticAddress<TData = Awaited<ReturnType<typeof getDHCPStaticAddress>>, TError = unknown>(
 serviceName: string,
    lanName: string,
    dhcpName: string,
    mACAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDHCPStaticAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDHCPStaticAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDHCPStaticAddress<TData = Awaited<ReturnType<typeof getDHCPStaticAddress>>, TError = unknown>(
 serviceName: string,
    lanName: string,
    dhcpName: string,
    mACAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDHCPStaticAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDHCPStaticAddress<TData = Awaited<ReturnType<typeof getDHCPStaticAddress>>, TError = unknown>(
 serviceName: string,
    lanName: string,
    dhcpName: string,
    mACAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDHCPStaticAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDHCPStaticAddressQueryOptions(serviceName,lanName,dhcpName,mACAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const updateDHCPStaticAddress = (
    serviceName: string,
    lanName: string,
    dhcpName: string,
    mACAddress: string,
    xdslDHCPStaticAddressOVH: NonReadonly<XdslDHCPStaticAddressOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/modem/lan/${lanName}/dhcp/${dhcpName}/DHCPStaticAddresses/${mACAddress}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: xdslDHCPStaticAddressOVH
    },
      options);
    }
  


export const getUpdateDHCPStaticAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDHCPStaticAddress>>, TError,{serviceName: string;lanName: string;dhcpName: string;mACAddress: string;data: NonReadonly<XdslDHCPStaticAddressOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateDHCPStaticAddress>>, TError,{serviceName: string;lanName: string;dhcpName: string;mACAddress: string;data: NonReadonly<XdslDHCPStaticAddressOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateDHCPStaticAddress>>, {serviceName: string;lanName: string;dhcpName: string;mACAddress: string;data: NonReadonly<XdslDHCPStaticAddressOVH>}> = (props) => {
          const {serviceName,lanName,dhcpName,mACAddress,data} = props ?? {};

          return  updateDHCPStaticAddress(serviceName,lanName,dhcpName,mACAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateDHCPStaticAddressMutationResult = NonNullable<Awaited<ReturnType<typeof updateDHCPStaticAddress>>>
    export type UpdateDHCPStaticAddressMutationBody = NonReadonly<XdslDHCPStaticAddressOVH>
    export type UpdateDHCPStaticAddressMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const useUpdateDHCPStaticAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDHCPStaticAddress>>, TError,{serviceName: string;lanName: string;dhcpName: string;mACAddress: string;data: NonReadonly<XdslDHCPStaticAddressOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateDHCPStaticAddress>>,
        TError,
        {serviceName: string;lanName: string;dhcpName: string;mACAddress: string;data: NonReadonly<XdslDHCPStaticAddressOVH>},
        TContext
      > => {

      const mutationOptions = getUpdateDHCPStaticAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of PortMappings on this modem
 */
export const getPortMappings = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/${serviceName}/modem/portMappings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPortMappingsQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/portMappings`] as const;
    }

    
export const getGetPortMappingsQueryOptions = <TData = Awaited<ReturnType<typeof getPortMappings>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPortMappings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPortMappingsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPortMappings>>> = ({ signal }) => getPortMappings(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPortMappings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPortMappingsQueryResult = NonNullable<Awaited<ReturnType<typeof getPortMappings>>>
export type GetPortMappingsQueryError = unknown


export function useGetPortMappings<TData = Awaited<ReturnType<typeof getPortMappings>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPortMappings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPortMappings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPortMappings<TData = Awaited<ReturnType<typeof getPortMappings>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPortMappings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPortMappings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPortMappings<TData = Awaited<ReturnType<typeof getPortMappings>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPortMappings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of PortMappings on this modem
 */

export function useGetPortMappings<TData = Awaited<ReturnType<typeof getPortMappings>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPortMappings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPortMappingsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a port mapping
 */
export const addPortMapping = (
    serviceName: string,
    xdslModemPortMappingsPostOVH: XdslModemPortMappingsPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslPortMappingOVH>(
      {url: `/xdsl/${serviceName}/modem/portMappings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemPortMappingsPostOVH, signal
    },
      options);
    }
  


export const getAddPortMappingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPortMapping>>, TError,{serviceName: string;data: XdslModemPortMappingsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof addPortMapping>>, TError,{serviceName: string;data: XdslModemPortMappingsPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPortMapping>>, {serviceName: string;data: XdslModemPortMappingsPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  addPortMapping(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddPortMappingMutationResult = NonNullable<Awaited<ReturnType<typeof addPortMapping>>>
    export type AddPortMappingMutationBody = XdslModemPortMappingsPostOVH
    export type AddPortMappingMutationError = unknown

    /**
 * @summary Add a port mapping
 */
export const useAddPortMapping = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPortMapping>>, TError,{serviceName: string;data: XdslModemPortMappingsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof addPortMapping>>,
        TError,
        {serviceName: string;data: XdslModemPortMappingsPostOVH},
        TContext
      > => {

      const mutationOptions = getAddPortMappingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this port mapping
 */
export const removePortMapping = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/portMappings/${name}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemovePortMappingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removePortMapping>>, TError,{serviceName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof removePortMapping>>, TError,{serviceName: string;name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removePortMapping>>, {serviceName: string;name: string}> = (props) => {
          const {serviceName,name} = props ?? {};

          return  removePortMapping(serviceName,name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemovePortMappingMutationResult = NonNullable<Awaited<ReturnType<typeof removePortMapping>>>
    
    export type RemovePortMappingMutationError = unknown

    /**
 * @summary Delete this port mapping
 */
export const useRemovePortMapping = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removePortMapping>>, TError,{serviceName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof removePortMapping>>,
        TError,
        {serviceName: string;name: string},
        TContext
      > => {

      const mutationOptions = getRemovePortMappingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getPortMapping = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslPortMappingOVH>(
      {url: `/xdsl/${serviceName}/modem/portMappings/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPortMappingQueryKey = (serviceName: string,
    name: string,) => {
    return [`/xdsl/${serviceName}/modem/portMappings/${name}`] as const;
    }

    
export const getGetPortMappingQueryOptions = <TData = Awaited<ReturnType<typeof getPortMapping>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPortMapping>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPortMappingQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPortMapping>>> = ({ signal }) => getPortMapping(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPortMapping>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPortMappingQueryResult = NonNullable<Awaited<ReturnType<typeof getPortMapping>>>
export type GetPortMappingQueryError = unknown


export function useGetPortMapping<TData = Awaited<ReturnType<typeof getPortMapping>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPortMapping>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPortMapping>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPortMapping<TData = Awaited<ReturnType<typeof getPortMapping>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPortMapping>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPortMapping>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPortMapping<TData = Awaited<ReturnType<typeof getPortMapping>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPortMapping>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetPortMapping<TData = Awaited<ReturnType<typeof getPortMapping>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPortMapping>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPortMappingQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const updatePortMapping = (
    serviceName: string,
    name: string,
    xdslPortMappingOVH: NonReadonly<XdslPortMappingOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/modem/portMappings/${name}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: xdslPortMappingOVH
    },
      options);
    }
  


export const getUpdatePortMappingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePortMapping>>, TError,{serviceName: string;name: string;data: NonReadonly<XdslPortMappingOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePortMapping>>, TError,{serviceName: string;name: string;data: NonReadonly<XdslPortMappingOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePortMapping>>, {serviceName: string;name: string;data: NonReadonly<XdslPortMappingOVH>}> = (props) => {
          const {serviceName,name,data} = props ?? {};

          return  updatePortMapping(serviceName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePortMappingMutationResult = NonNullable<Awaited<ReturnType<typeof updatePortMapping>>>
    export type UpdatePortMappingMutationBody = NonReadonly<XdslPortMappingOVH>
    export type UpdatePortMappingMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const useUpdatePortMapping = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePortMapping>>, TError,{serviceName: string;name: string;data: NonReadonly<XdslPortMappingOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updatePortMapping>>,
        TError,
        {serviceName: string;name: string;data: NonReadonly<XdslPortMappingOVH>},
        TContext
      > => {

      const mutationOptions = getUpdatePortMappingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reboot the modem
 */
export const rebootModem = (
    serviceName: string,
    xdslModemRebootPostOVH: XdslModemRebootPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/reboot`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemRebootPostOVH, signal
    },
      options);
    }
  


export const getRebootModemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof rebootModem>>, TError,{serviceName: string;data: XdslModemRebootPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof rebootModem>>, TError,{serviceName: string;data: XdslModemRebootPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof rebootModem>>, {serviceName: string;data: XdslModemRebootPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  rebootModem(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RebootModemMutationResult = NonNullable<Awaited<ReturnType<typeof rebootModem>>>
    export type RebootModemMutationBody = XdslModemRebootPostOVH
    export type RebootModemMutationError = unknown

    /**
 * @summary Reboot the modem
 */
export const useRebootModem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof rebootModem>>, TError,{serviceName: string;data: XdslModemRebootPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof rebootModem>>,
        TError,
        {serviceName: string;data: XdslModemRebootPostOVH},
        TContext
      > => {

      const mutationOptions = getRebootModemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reconfigure voip line on modem
 */
export const postXdslServiceNameModemReconfigureVoip = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/modem/reconfigureVoip`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameModemReconfigureVoipMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameModemReconfigureVoip>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameModemReconfigureVoip>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameModemReconfigureVoip>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postXdslServiceNameModemReconfigureVoip(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameModemReconfigureVoipMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameModemReconfigureVoip>>>
    
    export type PostXdslServiceNameModemReconfigureVoipMutationError = unknown

    /**
 * @summary Reconfigure voip line on modem
 */
export const usePostXdslServiceNameModemReconfigureVoip = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameModemReconfigureVoip>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameModemReconfigureVoip>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameModemReconfigureVoipMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Refresh the list of connected devices on the modem
 */
export const postXdslServiceNameModemRefreshConnectedDevices = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/refreshConnectedDevices`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameModemRefreshConnectedDevicesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameModemRefreshConnectedDevices>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameModemRefreshConnectedDevices>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameModemRefreshConnectedDevices>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postXdslServiceNameModemRefreshConnectedDevices(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameModemRefreshConnectedDevicesMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameModemRefreshConnectedDevices>>>
    
    export type PostXdslServiceNameModemRefreshConnectedDevicesMutationError = unknown

    /**
 * @summary Refresh the list of connected devices on the modem
 */
export const usePostXdslServiceNameModemRefreshConnectedDevices = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameModemRefreshConnectedDevices>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameModemRefreshConnectedDevices>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameModemRefreshConnectedDevicesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reset the modem to its default configuration
 */
export const resetModemConfiguration = (
    serviceName: string,
    xdslModemResetPostOVH: XdslModemResetPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/reset`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemResetPostOVH, signal
    },
      options);
    }
  


export const getResetModemConfigurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetModemConfiguration>>, TError,{serviceName: string;data: XdslModemResetPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof resetModemConfiguration>>, TError,{serviceName: string;data: XdslModemResetPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetModemConfiguration>>, {serviceName: string;data: XdslModemResetPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  resetModemConfiguration(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetModemConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof resetModemConfiguration>>>
    export type ResetModemConfigurationMutationBody = XdslModemResetPostOVH
    export type ResetModemConfigurationMutationError = unknown

    /**
 * @summary Reset the modem to its default configuration
 */
export const useResetModemConfiguration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetModemConfiguration>>, TError,{serviceName: string;data: XdslModemResetPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof resetModemConfiguration>>,
        TError,
        {serviceName: string;data: XdslModemResetPostOVH},
        TContext
      > => {

      const mutationOptions = getResetModemConfigurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove all the current port mapping rules
 */
export const postXdslServiceNameModemResetPortMappingConfig = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/modem/resetPortMappingConfig`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameModemResetPortMappingConfigMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameModemResetPortMappingConfig>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameModemResetPortMappingConfig>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameModemResetPortMappingConfig>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postXdslServiceNameModemResetPortMappingConfig(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameModemResetPortMappingConfigMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameModemResetPortMappingConfig>>>
    
    export type PostXdslServiceNameModemResetPortMappingConfigMutationError = unknown

    /**
 * @summary Remove all the current port mapping rules
 */
export const usePostXdslServiceNameModemResetPortMappingConfig = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameModemResetPortMappingConfig>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameModemResetPortMappingConfig>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameModemResetPortMappingConfigMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary get general Modem information
 */
export const postXdslServiceNameModemRetrieveInfo = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskXdslModemInfoOVH>(
      {url: `/xdsl/${serviceName}/modem/retrieveInfo`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameModemRetrieveInfoMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameModemRetrieveInfo>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameModemRetrieveInfo>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameModemRetrieveInfo>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postXdslServiceNameModemRetrieveInfo(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameModemRetrieveInfoMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameModemRetrieveInfo>>>
    
    export type PostXdslServiceNameModemRetrieveInfoMutationError = unknown

    /**
 * @summary get general Modem information
 */
export const usePostXdslServiceNameModemRetrieveInfo = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameModemRetrieveInfo>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameModemRetrieveInfo>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameModemRetrieveInfoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the status of sip alg service on modem
 */
export const getSipAlgStatus = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslServiceStatusEnumOVH>(
      {url: `/xdsl/${serviceName}/modem/sipAlg`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSipAlgStatusQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/sipAlg`] as const;
    }

    
export const getGetSipAlgStatusQueryOptions = <TData = Awaited<ReturnType<typeof getSipAlgStatus>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSipAlgStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSipAlgStatusQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSipAlgStatus>>> = ({ signal }) => getSipAlgStatus(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSipAlgStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSipAlgStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getSipAlgStatus>>>
export type GetSipAlgStatusQueryError = unknown


export function useGetSipAlgStatus<TData = Awaited<ReturnType<typeof getSipAlgStatus>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSipAlgStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSipAlgStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSipAlgStatus<TData = Awaited<ReturnType<typeof getSipAlgStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSipAlgStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSipAlgStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSipAlgStatus<TData = Awaited<ReturnType<typeof getSipAlgStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSipAlgStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the status of sip alg service on modem
 */

export function useGetSipAlgStatus<TData = Awaited<ReturnType<typeof getSipAlgStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSipAlgStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSipAlgStatusQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the status of the sip alg service on modem
 */
export const updateSipAlgStatus = (
    serviceName: string,
    xdslModemSipAlgPostOVH: XdslModemSipAlgPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/sipAlg`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemSipAlgPostOVH, signal
    },
      options);
    }
  


export const getUpdateSipAlgStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSipAlgStatus>>, TError,{serviceName: string;data: XdslModemSipAlgPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateSipAlgStatus>>, TError,{serviceName: string;data: XdslModemSipAlgPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSipAlgStatus>>, {serviceName: string;data: XdslModemSipAlgPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  updateSipAlgStatus(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateSipAlgStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateSipAlgStatus>>>
    export type UpdateSipAlgStatusMutationBody = XdslModemSipAlgPostOVH
    export type UpdateSipAlgStatusMutationError = unknown

    /**
 * @summary Change the status of the sip alg service on modem
 */
export const useUpdateSipAlgStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSipAlgStatus>>, TError,{serviceName: string;data: XdslModemSipAlgPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateSipAlgStatus>>,
        TError,
        {serviceName: string;data: XdslModemSipAlgPostOVH},
        TContext
      > => {

      const mutationOptions = getUpdateSipAlgStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the status of the Upnp on modem
 */
export const getUpnpStatus = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslServiceStatusEnumOVH>(
      {url: `/xdsl/${serviceName}/modem/upnp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUpnpStatusQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/upnp`] as const;
    }

    
export const getGetUpnpStatusQueryOptions = <TData = Awaited<ReturnType<typeof getUpnpStatus>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpnpStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUpnpStatusQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUpnpStatus>>> = ({ signal }) => getUpnpStatus(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUpnpStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUpnpStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getUpnpStatus>>>
export type GetUpnpStatusQueryError = unknown


export function useGetUpnpStatus<TData = Awaited<ReturnType<typeof getUpnpStatus>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpnpStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUpnpStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUpnpStatus<TData = Awaited<ReturnType<typeof getUpnpStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpnpStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUpnpStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUpnpStatus<TData = Awaited<ReturnType<typeof getUpnpStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpnpStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the status of the Upnp on modem
 */

export function useGetUpnpStatus<TData = Awaited<ReturnType<typeof getUpnpStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpnpStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUpnpStatusQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the status of the Upnp on modem
 */
export const updateUpnpStatus = (
    serviceName: string,
    xdslModemUpnpPostOVH: XdslModemUpnpPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/modem/upnp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslModemUpnpPostOVH, signal
    },
      options);
    }
  


export const getUpdateUpnpStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUpnpStatus>>, TError,{serviceName: string;data: XdslModemUpnpPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateUpnpStatus>>, TError,{serviceName: string;data: XdslModemUpnpPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUpnpStatus>>, {serviceName: string;data: XdslModemUpnpPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  updateUpnpStatus(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUpnpStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateUpnpStatus>>>
    export type UpdateUpnpStatusMutationBody = XdslModemUpnpPostOVH
    export type UpdateUpnpStatusMutationError = unknown

    /**
 * @summary Change the status of the Upnp on modem
 */
export const useUpdateUpnpStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUpnpStatus>>, TError,{serviceName: string;data: XdslModemUpnpPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateUpnpStatus>>,
        TError,
        {serviceName: string;data: XdslModemUpnpPostOVH},
        TContext
      > => {

      const mutationOptions = getUpdateUpnpStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of WLANs on this modem
 */
export const getXdslServiceNameModemWifi = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/${serviceName}/modem/wifi`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemWifiQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/modem/wifi`] as const;
    }

    
export const getGetXdslServiceNameModemWifiQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemWifiQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>> = ({ signal }) => getXdslServiceNameModemWifi(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemWifiQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>>
export type GetXdslServiceNameModemWifiQueryError = unknown


export function useGetXdslServiceNameModemWifi<TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemWifi<TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemWifi<TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of WLANs on this modem
 */

export function useGetXdslServiceNameModemWifi<TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemWifiQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getXdslServiceNameModemWifiWifiName = (
    serviceName: string,
    wifiName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslWLANOVH>(
      {url: `/xdsl/${serviceName}/modem/wifi/${wifiName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemWifiWifiNameQueryKey = (serviceName: string,
    wifiName: string,) => {
    return [`/xdsl/${serviceName}/modem/wifi/${wifiName}`] as const;
    }

    
export const getGetXdslServiceNameModemWifiWifiNameQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>, TError = unknown>(serviceName: string,
    wifiName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemWifiWifiNameQueryKey(serviceName,wifiName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>> = ({ signal }) => getXdslServiceNameModemWifiWifiName(serviceName,wifiName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && wifiName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemWifiWifiNameQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>>
export type GetXdslServiceNameModemWifiWifiNameQueryError = unknown


export function useGetXdslServiceNameModemWifiWifiName<TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>, TError = unknown>(
 serviceName: string,
    wifiName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemWifiWifiName<TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>, TError = unknown>(
 serviceName: string,
    wifiName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemWifiWifiName<TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>, TError = unknown>(
 serviceName: string,
    wifiName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameModemWifiWifiName<TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>, TError = unknown>(
 serviceName: string,
    wifiName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemWifiWifiNameQueryOptions(serviceName,wifiName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putXdslServiceNameModemWifiWifiName = (
    serviceName: string,
    wifiName: string,
    xdslWLANOVH: NonReadonly<XdslWLANOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/modem/wifi/${wifiName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: xdslWLANOVH
    },
      options);
    }
  


export const getPutXdslServiceNameModemWifiWifiNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameModemWifiWifiName>>, TError,{serviceName: string;wifiName: string;data: NonReadonly<XdslWLANOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameModemWifiWifiName>>, TError,{serviceName: string;wifiName: string;data: NonReadonly<XdslWLANOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putXdslServiceNameModemWifiWifiName>>, {serviceName: string;wifiName: string;data: NonReadonly<XdslWLANOVH>}> = (props) => {
          const {serviceName,wifiName,data} = props ?? {};

          return  putXdslServiceNameModemWifiWifiName(serviceName,wifiName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutXdslServiceNameModemWifiWifiNameMutationResult = NonNullable<Awaited<ReturnType<typeof putXdslServiceNameModemWifiWifiName>>>
    export type PutXdslServiceNameModemWifiWifiNameMutationBody = NonReadonly<XdslWLANOVH>
    export type PutXdslServiceNameModemWifiWifiNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutXdslServiceNameModemWifiWifiName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameModemWifiWifiName>>, TError,{serviceName: string;wifiName: string;data: NonReadonly<XdslWLANOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putXdslServiceNameModemWifiWifiName>>,
        TError,
        {serviceName: string;wifiName: string;data: NonReadonly<XdslWLANOVH>},
        TContext
      > => {

      const mutationOptions = getPutXdslServiceNameModemWifiWifiNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the WiFi configuration QR code as base64, if applicable
 */
export const getXdslServiceNameModemWifiWifiNameQrCode = (
    serviceName: string,
    wifiName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/xdsl/${serviceName}/modem/wifi/${wifiName}/qrCode`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameModemWifiWifiNameQrCodeQueryKey = (serviceName: string,
    wifiName: string,) => {
    return [`/xdsl/${serviceName}/modem/wifi/${wifiName}/qrCode`] as const;
    }

    
export const getGetXdslServiceNameModemWifiWifiNameQrCodeQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>, TError = unknown>(serviceName: string,
    wifiName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameModemWifiWifiNameQrCodeQueryKey(serviceName,wifiName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>> = ({ signal }) => getXdslServiceNameModemWifiWifiNameQrCode(serviceName,wifiName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && wifiName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameModemWifiWifiNameQrCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>>
export type GetXdslServiceNameModemWifiWifiNameQrCodeQueryError = unknown


export function useGetXdslServiceNameModemWifiWifiNameQrCode<TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>, TError = unknown>(
 serviceName: string,
    wifiName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemWifiWifiNameQrCode<TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>, TError = unknown>(
 serviceName: string,
    wifiName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameModemWifiWifiNameQrCode<TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>, TError = unknown>(
 serviceName: string,
    wifiName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the WiFi configuration QR code as base64, if applicable
 */

export function useGetXdslServiceNameModemWifiWifiNameQrCode<TData = Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>, TError = unknown>(
 serviceName: string,
    wifiName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameModemWifiWifiNameQrCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameModemWifiWifiNameQrCodeQueryOptions(serviceName,wifiName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List the notifications for this access
 */
export const getMonitoringNotifications = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/xdsl/${serviceName}/monitoringNotifications`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMonitoringNotificationsQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/monitoringNotifications`] as const;
    }

    
export const getGetMonitoringNotificationsQueryOptions = <TData = Awaited<ReturnType<typeof getMonitoringNotifications>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonitoringNotifications>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMonitoringNotificationsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMonitoringNotifications>>> = ({ signal }) => getMonitoringNotifications(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMonitoringNotifications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMonitoringNotificationsQueryResult = NonNullable<Awaited<ReturnType<typeof getMonitoringNotifications>>>
export type GetMonitoringNotificationsQueryError = unknown


export function useGetMonitoringNotifications<TData = Awaited<ReturnType<typeof getMonitoringNotifications>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonitoringNotifications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMonitoringNotifications>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMonitoringNotifications<TData = Awaited<ReturnType<typeof getMonitoringNotifications>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonitoringNotifications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMonitoringNotifications>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMonitoringNotifications<TData = Awaited<ReturnType<typeof getMonitoringNotifications>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonitoringNotifications>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the notifications for this access
 */

export function useGetMonitoringNotifications<TData = Awaited<ReturnType<typeof getMonitoringNotifications>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonitoringNotifications>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMonitoringNotificationsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a notification
 */
export const addMonitoringNotification = (
    serviceName: string,
    xdslMonitoringNotificationsPostOVH: XdslMonitoringNotificationsPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslMonitoringNotificationOVH>(
      {url: `/xdsl/${serviceName}/monitoringNotifications`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslMonitoringNotificationsPostOVH, signal
    },
      options);
    }
  


export const getAddMonitoringNotificationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addMonitoringNotification>>, TError,{serviceName: string;data: XdslMonitoringNotificationsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof addMonitoringNotification>>, TError,{serviceName: string;data: XdslMonitoringNotificationsPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addMonitoringNotification>>, {serviceName: string;data: XdslMonitoringNotificationsPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  addMonitoringNotification(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddMonitoringNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof addMonitoringNotification>>>
    export type AddMonitoringNotificationMutationBody = XdslMonitoringNotificationsPostOVH
    export type AddMonitoringNotificationMutationError = unknown

    /**
 * @summary Add a notification
 */
export const useAddMonitoringNotification = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addMonitoringNotification>>, TError,{serviceName: string;data: XdslMonitoringNotificationsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof addMonitoringNotification>>,
        TError,
        {serviceName: string;data: XdslMonitoringNotificationsPostOVH},
        TContext
      > => {

      const mutationOptions = getAddMonitoringNotificationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this notification
 */
export const removeMonitoringNotification = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/monitoringNotifications/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveMonitoringNotificationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeMonitoringNotification>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof removeMonitoringNotification>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeMonitoringNotification>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  removeMonitoringNotification(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveMonitoringNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof removeMonitoringNotification>>>
    
    export type RemoveMonitoringNotificationMutationError = unknown

    /**
 * @summary Delete this notification
 */
export const useRemoveMonitoringNotification = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeMonitoringNotification>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof removeMonitoringNotification>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getRemoveMonitoringNotificationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMonitoringNotification = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslMonitoringNotificationOVH>(
      {url: `/xdsl/${serviceName}/monitoringNotifications/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMonitoringNotificationQueryKey = (serviceName: string,
    id: number,) => {
    return [`/xdsl/${serviceName}/monitoringNotifications/${id}`] as const;
    }

    
export const getGetMonitoringNotificationQueryOptions = <TData = Awaited<ReturnType<typeof getMonitoringNotification>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonitoringNotification>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMonitoringNotificationQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMonitoringNotification>>> = ({ signal }) => getMonitoringNotification(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMonitoringNotification>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMonitoringNotificationQueryResult = NonNullable<Awaited<ReturnType<typeof getMonitoringNotification>>>
export type GetMonitoringNotificationQueryError = unknown


export function useGetMonitoringNotification<TData = Awaited<ReturnType<typeof getMonitoringNotification>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonitoringNotification>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMonitoringNotification>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMonitoringNotification<TData = Awaited<ReturnType<typeof getMonitoringNotification>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonitoringNotification>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMonitoringNotification>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMonitoringNotification<TData = Awaited<ReturnType<typeof getMonitoringNotification>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonitoringNotification>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMonitoringNotification<TData = Awaited<ReturnType<typeof getMonitoringNotification>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonitoringNotification>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMonitoringNotificationQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const updateMonitoringNotification = (
    serviceName: string,
    id: number,
    xdslMonitoringNotificationOVH: NonReadonly<XdslMonitoringNotificationOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/monitoringNotifications/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: xdslMonitoringNotificationOVH
    },
      options);
    }
  


export const getUpdateMonitoringNotificationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMonitoringNotification>>, TError,{serviceName: string;id: number;data: NonReadonly<XdslMonitoringNotificationOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateMonitoringNotification>>, TError,{serviceName: string;id: number;data: NonReadonly<XdslMonitoringNotificationOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMonitoringNotification>>, {serviceName: string;id: number;data: NonReadonly<XdslMonitoringNotificationOVH>}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  updateMonitoringNotification(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMonitoringNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof updateMonitoringNotification>>>
    export type UpdateMonitoringNotificationMutationBody = NonReadonly<XdslMonitoringNotificationOVH>
    export type UpdateMonitoringNotificationMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const useUpdateMonitoringNotification = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMonitoringNotification>>, TError,{serviceName: string;id: number;data: NonReadonly<XdslMonitoringNotificationOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateMonitoringNotification>>,
        TError,
        {serviceName: string;id: number;data: NonReadonly<XdslMonitoringNotificationOVH>},
        TContext
      > => {

      const mutationOptions = getUpdateMonitoringNotificationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getXdslServiceNameOnt = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslOntOVH>(
      {url: `/xdsl/${serviceName}/ont`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameOntQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/ont`] as const;
    }

    
export const getGetXdslServiceNameOntQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameOnt>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameOnt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameOntQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameOnt>>> = ({ signal }) => getXdslServiceNameOnt(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameOnt>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameOntQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameOnt>>>
export type GetXdslServiceNameOntQueryError = unknown


export function useGetXdslServiceNameOnt<TData = Awaited<ReturnType<typeof getXdslServiceNameOnt>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameOnt>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameOnt>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameOnt<TData = Awaited<ReturnType<typeof getXdslServiceNameOnt>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameOnt>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameOnt>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameOnt<TData = Awaited<ReturnType<typeof getXdslServiceNameOnt>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameOnt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameOnt<TData = Awaited<ReturnType<typeof getXdslServiceNameOnt>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameOnt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameOntQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the status of the order
 */
export const getXdslServiceNameOrderFollowup = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslOrderFollowupStepOVH[]>(
      {url: `/xdsl/${serviceName}/orderFollowup`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameOrderFollowupQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/orderFollowup`] as const;
    }

    
export const getGetXdslServiceNameOrderFollowupQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameOrderFollowupQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>> = ({ signal }) => getXdslServiceNameOrderFollowup(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameOrderFollowupQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>>
export type GetXdslServiceNameOrderFollowupQueryError = unknown


export function useGetXdslServiceNameOrderFollowup<TData = Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameOrderFollowup<TData = Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameOrderFollowup<TData = Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the status of the order
 */

export function useGetXdslServiceNameOrderFollowup<TData = Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameOrderFollowup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameOrderFollowupQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Book a meeting and relaunch order
 */
export const bookMeeting = (
    serviceName: string,
    xdslOrderMeetingPostOVH: XdslOrderMeetingPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/orderMeeting`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslOrderMeetingPostOVH, signal
    },
      options);
    }
  


export const getBookMeetingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bookMeeting>>, TError,{serviceName: string;data: XdslOrderMeetingPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof bookMeeting>>, TError,{serviceName: string;data: XdslOrderMeetingPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bookMeeting>>, {serviceName: string;data: XdslOrderMeetingPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  bookMeeting(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BookMeetingMutationResult = NonNullable<Awaited<ReturnType<typeof bookMeeting>>>
    export type BookMeetingMutationBody = XdslOrderMeetingPostOVH
    export type BookMeetingMutationError = unknown

    /**
 * @summary Book a meeting and relaunch order
 */
export const useBookMeeting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bookMeeting>>, TError,{serviceName: string;data: XdslOrderMeetingPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof bookMeeting>>,
        TError,
        {serviceName: string;data: XdslOrderMeetingPostOVH},
        TContext
      > => {

      const mutationOptions = getBookMeetingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getXdslServiceNamePendingAction = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslPendingActionOVH>(
      {url: `/xdsl/${serviceName}/pendingAction`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNamePendingActionQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/pendingAction`] as const;
    }

    
export const getGetXdslServiceNamePendingActionQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNamePendingActionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>> = ({ signal }) => getXdslServiceNamePendingAction(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNamePendingActionQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>>
export type GetXdslServiceNamePendingActionQueryError = unknown


export function useGetXdslServiceNamePendingAction<TData = Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNamePendingAction<TData = Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNamePendingAction<TData = Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNamePendingAction<TData = Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNamePendingAction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNamePendingActionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List the radius connection logs
 */
export const getXdslServiceNameRadiusConnectionLogs = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslRadiusConnectionLogOVH[]>(
      {url: `/xdsl/${serviceName}/radiusConnectionLogs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameRadiusConnectionLogsQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/radiusConnectionLogs`] as const;
    }

    
export const getGetXdslServiceNameRadiusConnectionLogsQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameRadiusConnectionLogsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>> = ({ signal }) => getXdslServiceNameRadiusConnectionLogs(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameRadiusConnectionLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>>
export type GetXdslServiceNameRadiusConnectionLogsQueryError = unknown


export function useGetXdslServiceNameRadiusConnectionLogs<TData = Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameRadiusConnectionLogs<TData = Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameRadiusConnectionLogs<TData = Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the radius connection logs
 */

export function useGetXdslServiceNameRadiusConnectionLogs<TData = Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRadiusConnectionLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameRadiusConnectionLogsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Renew PPP password and send the PPP login information to the e-mail of the nicAdmin
 */
export const postXdslServiceNameRequestPPPLoginMail = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/requestPPPLoginMail`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameRequestPPPLoginMailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameRequestPPPLoginMail>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameRequestPPPLoginMail>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameRequestPPPLoginMail>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postXdslServiceNameRequestPPPLoginMail(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameRequestPPPLoginMailMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameRequestPPPLoginMail>>>
    
    export type PostXdslServiceNameRequestPPPLoginMailMutationError = unknown

    /**
 * @summary Renew PPP password and send the PPP login information to the e-mail of the nicAdmin
 */
export const usePostXdslServiceNameRequestPPPLoginMail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameRequestPPPLoginMail>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameRequestPPPLoginMail>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameRequestPPPLoginMailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Switch this access to total deconsolidation
 */
export const requestTotalDeconsolidation = (
    serviceName: string,
    xdslRequestTotalDeconsolidationPostOVH: XdslRequestTotalDeconsolidationPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/requestTotalDeconsolidation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslRequestTotalDeconsolidationPostOVH, signal
    },
      options);
    }
  


export const getRequestTotalDeconsolidationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestTotalDeconsolidation>>, TError,{serviceName: string;data: XdslRequestTotalDeconsolidationPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof requestTotalDeconsolidation>>, TError,{serviceName: string;data: XdslRequestTotalDeconsolidationPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof requestTotalDeconsolidation>>, {serviceName: string;data: XdslRequestTotalDeconsolidationPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  requestTotalDeconsolidation(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RequestTotalDeconsolidationMutationResult = NonNullable<Awaited<ReturnType<typeof requestTotalDeconsolidation>>>
    export type RequestTotalDeconsolidationMutationBody = XdslRequestTotalDeconsolidationPostOVH
    export type RequestTotalDeconsolidationMutationError = unknown

    /**
 * @summary Switch this access to total deconsolidation
 */
export const useRequestTotalDeconsolidation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestTotalDeconsolidation>>, TError,{serviceName: string;data: XdslRequestTotalDeconsolidationPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof requestTotalDeconsolidation>>,
        TError,
        {serviceName: string;data: XdslRequestTotalDeconsolidationPostOVH},
        TContext
      > => {

      const mutationOptions = getRequestTotalDeconsolidationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Resiliate the access
 */
export const resiliateAccess = (
    serviceName: string,
    xdslResiliatePostOVH: XdslResiliatePostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslResiliationFollowUpDetailOVH>(
      {url: `/xdsl/${serviceName}/resiliate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslResiliatePostOVH, signal
    },
      options);
    }
  


export const getResiliateAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resiliateAccess>>, TError,{serviceName: string;data: XdslResiliatePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof resiliateAccess>>, TError,{serviceName: string;data: XdslResiliatePostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resiliateAccess>>, {serviceName: string;data: XdslResiliatePostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  resiliateAccess(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResiliateAccessMutationResult = NonNullable<Awaited<ReturnType<typeof resiliateAccess>>>
    export type ResiliateAccessMutationBody = XdslResiliatePostOVH
    export type ResiliateAccessMutationError = unknown

    /**
 * @summary Resiliate the access
 */
export const useResiliateAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resiliateAccess>>, TError,{serviceName: string;data: XdslResiliatePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof resiliateAccess>>,
        TError,
        {serviceName: string;data: XdslResiliatePostOVH},
        TContext
      > => {

      const mutationOptions = getResiliateAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about the ongoing resiliation
 */
export const getXdslServiceNameResiliationFollowup = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslResiliationFollowUpDetailOVH>(
      {url: `/xdsl/${serviceName}/resiliationFollowup`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameResiliationFollowupQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/resiliationFollowup`] as const;
    }

    
export const getGetXdslServiceNameResiliationFollowupQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameResiliationFollowupQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>> = ({ signal }) => getXdslServiceNameResiliationFollowup(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameResiliationFollowupQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>>
export type GetXdslServiceNameResiliationFollowupQueryError = unknown


export function useGetXdslServiceNameResiliationFollowup<TData = Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameResiliationFollowup<TData = Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameResiliationFollowup<TData = Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about the ongoing resiliation
 */

export function useGetXdslServiceNameResiliationFollowup<TData = Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameResiliationFollowup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameResiliationFollowupQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get resiliation terms
 */
export const getXdslServiceNameResiliationTerms = (
    serviceName: string,
    params?: GetXdslServiceNameResiliationTermsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslResiliationTermsOVH>(
      {url: `/xdsl/${serviceName}/resiliationTerms`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetXdslServiceNameResiliationTermsQueryKey = (serviceName: string,
    params?: GetXdslServiceNameResiliationTermsParams,) => {
    return [`/xdsl/${serviceName}/resiliationTerms`, ...(params ? [params]: [])] as const;
    }

    
export const getGetXdslServiceNameResiliationTermsQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>, TError = unknown>(serviceName: string,
    params?: GetXdslServiceNameResiliationTermsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameResiliationTermsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>> = ({ signal }) => getXdslServiceNameResiliationTerms(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameResiliationTermsQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>>
export type GetXdslServiceNameResiliationTermsQueryError = unknown


export function useGetXdslServiceNameResiliationTerms<TData = Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetXdslServiceNameResiliationTermsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameResiliationTerms<TData = Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>, TError = unknown>(
 serviceName: string,
    params?: GetXdslServiceNameResiliationTermsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameResiliationTerms<TData = Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>, TError = unknown>(
 serviceName: string,
    params?: GetXdslServiceNameResiliationTermsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get resiliation terms
 */

export function useGetXdslServiceNameResiliationTerms<TData = Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>, TError = unknown>(
 serviceName: string,
    params?: GetXdslServiceNameResiliationTermsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameResiliationTerms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameResiliationTermsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return Merchandise Authorisation associated
 */
export const getXdslServiceNameRma = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/xdsl/${serviceName}/rma`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameRmaQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/rma`] as const;
    }

    
export const getGetXdslServiceNameRmaQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameRma>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRma>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameRmaQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameRma>>> = ({ signal }) => getXdslServiceNameRma(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRma>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameRmaQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameRma>>>
export type GetXdslServiceNameRmaQueryError = unknown


export function useGetXdslServiceNameRma<TData = Awaited<ReturnType<typeof getXdslServiceNameRma>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRma>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameRma>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameRma<TData = Awaited<ReturnType<typeof getXdslServiceNameRma>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRma>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameRma>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameRma<TData = Awaited<ReturnType<typeof getXdslServiceNameRma>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRma>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return Merchandise Authorisation associated
 */

export function useGetXdslServiceNameRma<TData = Awaited<ReturnType<typeof getXdslServiceNameRma>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRma>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameRmaQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Cancel the rma
 */
export const deleteXdslServiceNameRmaId = (
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/rma/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteXdslServiceNameRmaIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteXdslServiceNameRmaId>>, TError,{serviceName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteXdslServiceNameRmaId>>, TError,{serviceName: string;id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteXdslServiceNameRmaId>>, {serviceName: string;id: string}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteXdslServiceNameRmaId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteXdslServiceNameRmaIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteXdslServiceNameRmaId>>>
    
    export type DeleteXdslServiceNameRmaIdMutationError = unknown

    /**
 * @summary Cancel the rma
 */
export const useDeleteXdslServiceNameRmaId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteXdslServiceNameRmaId>>, TError,{serviceName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteXdslServiceNameRmaId>>,
        TError,
        {serviceName: string;id: string},
        TContext
      > => {

      const mutationOptions = getDeleteXdslServiceNameRmaIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getXdslServiceNameRmaId = (
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyRmaOVH>(
      {url: `/xdsl/${serviceName}/rma/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameRmaIdQueryKey = (serviceName: string,
    id: string,) => {
    return [`/xdsl/${serviceName}/rma/${id}`] as const;
    }

    
export const getGetXdslServiceNameRmaIdQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameRmaId>>, TError = unknown>(serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRmaId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameRmaIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameRmaId>>> = ({ signal }) => getXdslServiceNameRmaId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRmaId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameRmaIdQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameRmaId>>>
export type GetXdslServiceNameRmaIdQueryError = unknown


export function useGetXdslServiceNameRmaId<TData = Awaited<ReturnType<typeof getXdslServiceNameRmaId>>, TError = unknown>(
 serviceName: string,
    id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRmaId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameRmaId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameRmaId<TData = Awaited<ReturnType<typeof getXdslServiceNameRmaId>>, TError = unknown>(
 serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRmaId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameRmaId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameRmaId<TData = Awaited<ReturnType<typeof getXdslServiceNameRmaId>>, TError = unknown>(
 serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRmaId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameRmaId<TData = Awaited<ReturnType<typeof getXdslServiceNameRmaId>>, TError = unknown>(
 serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameRmaId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameRmaIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putXdslServiceNameRmaId = (
    serviceName: string,
    id: string,
    telephonyRmaOVH: NonReadonly<TelephonyRmaOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/rma/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: telephonyRmaOVH
    },
      options);
    }
  


export const getPutXdslServiceNameRmaIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameRmaId>>, TError,{serviceName: string;id: string;data: NonReadonly<TelephonyRmaOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameRmaId>>, TError,{serviceName: string;id: string;data: NonReadonly<TelephonyRmaOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putXdslServiceNameRmaId>>, {serviceName: string;id: string;data: NonReadonly<TelephonyRmaOVH>}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  putXdslServiceNameRmaId(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutXdslServiceNameRmaIdMutationResult = NonNullable<Awaited<ReturnType<typeof putXdslServiceNameRmaId>>>
    export type PutXdslServiceNameRmaIdMutationBody = NonReadonly<TelephonyRmaOVH>
    export type PutXdslServiceNameRmaIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutXdslServiceNameRmaId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameRmaId>>, TError,{serviceName: string;id: string;data: NonReadonly<TelephonyRmaOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putXdslServiceNameRmaId>>,
        TError,
        {serviceName: string;id: string;data: NonReadonly<TelephonyRmaOVH>},
        TContext
      > => {

      const mutationOptions = getPutXdslServiceNameRmaIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change RMA type
 */
export const updateRMAType = (
    serviceName: string,
    id: string,
    xdslRmaChangeTypePostOVH: XdslRmaChangeTypePostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/rma/${id}/changeType`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslRmaChangeTypePostOVH, signal
    },
      options);
    }
  


export const getUpdateRMATypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRMAType>>, TError,{serviceName: string;id: string;data: XdslRmaChangeTypePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateRMAType>>, TError,{serviceName: string;id: string;data: XdslRmaChangeTypePostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRMAType>>, {serviceName: string;id: string;data: XdslRmaChangeTypePostOVH}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  updateRMAType(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateRMATypeMutationResult = NonNullable<Awaited<ReturnType<typeof updateRMAType>>>
    export type UpdateRMATypeMutationBody = XdslRmaChangeTypePostOVH
    export type UpdateRMATypeMutationError = unknown

    /**
 * @summary Change RMA type
 */
export const useUpdateRMAType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRMAType>>, TError,{serviceName: string;id: string;data: XdslRmaChangeTypePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateRMAType>>,
        TError,
        {serviceName: string;id: string;data: XdslRmaChangeTypePostOVH},
        TContext
      > => {

      const mutationOptions = getUpdateRMATypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Search for available line creation meeting time slots, for order only
 */
export const postXdslServiceNameSearchOrderMeetings = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskConnectivityEligibilityMeetingsOVH>(
      {url: `/xdsl/${serviceName}/searchOrderMeetings`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameSearchOrderMeetingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameSearchOrderMeetings>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameSearchOrderMeetings>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameSearchOrderMeetings>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postXdslServiceNameSearchOrderMeetings(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameSearchOrderMeetingsMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameSearchOrderMeetings>>>
    
    export type PostXdslServiceNameSearchOrderMeetingsMutationError = unknown

    /**
 * @summary Search for available line creation meeting time slots, for order only
 */
export const usePostXdslServiceNameSearchOrderMeetings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameSearchOrderMeetings>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameSearchOrderMeetings>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameSearchOrderMeetingsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Unlock order in "waitingCustomer" status
 */
export const postXdslServiceNameSendOrderToProvider = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/sendOrderToProvider`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameSendOrderToProviderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameSendOrderToProvider>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameSendOrderToProvider>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameSendOrderToProvider>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postXdslServiceNameSendOrderToProvider(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameSendOrderToProviderMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameSendOrderToProvider>>>
    
    export type PostXdslServiceNameSendOrderToProviderMutationError = unknown

    /**
 * @summary Unlock order in "waitingCustomer" status
 */
export const usePostXdslServiceNameSendOrderToProvider = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameSendOrderToProvider>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameSendOrderToProvider>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameSendOrderToProviderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getXdslServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/xdsl/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetXdslServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>> = ({ signal }) => getXdslServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>>
export type GetXdslServiceNameServiceInfosQueryError = unknown


export function useGetXdslServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetXdslServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putXdslServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutXdslServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putXdslServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putXdslServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutXdslServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putXdslServiceNameServiceInfos>>>
    export type PutXdslServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutXdslServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutXdslServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putXdslServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putXdslServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutXdslServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get various statistics about this access
 */
export const getXdslServiceNameStatistics = (
    serviceName: string,
    params: GetXdslServiceNameStatisticsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ComplexTypeUnitAndValuesXdslAccessLatencyOVH>(
      {url: `/xdsl/${serviceName}/statistics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetXdslServiceNameStatisticsQueryKey = (serviceName: string,
    params: GetXdslServiceNameStatisticsParams,) => {
    return [`/xdsl/${serviceName}/statistics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetXdslServiceNameStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameStatistics>>, TError = unknown>(serviceName: string,
    params: GetXdslServiceNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameStatisticsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameStatistics>>> = ({ signal }) => getXdslServiceNameStatistics(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameStatistics>>>
export type GetXdslServiceNameStatisticsQueryError = unknown


export function useGetXdslServiceNameStatistics<TData = Awaited<ReturnType<typeof getXdslServiceNameStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetXdslServiceNameStatisticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameStatistics<TData = Awaited<ReturnType<typeof getXdslServiceNameStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetXdslServiceNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameStatistics<TData = Awaited<ReturnType<typeof getXdslServiceNameStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetXdslServiceNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get various statistics about this access
 */

export function useGetXdslServiceNameStatistics<TData = Awaited<ReturnType<typeof getXdslServiceNameStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetXdslServiceNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameStatisticsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Tasks scheduled for this access
 */
export const getXdslServiceNameTasks = (
    serviceName: string,
    params?: GetXdslServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/xdsl/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetXdslServiceNameTasksQueryKey = (serviceName: string,
    params?: GetXdslServiceNameTasksParams,) => {
    return [`/xdsl/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetXdslServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetXdslServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameTasks>>> = ({ signal }) => getXdslServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameTasks>>>
export type GetXdslServiceNameTasksQueryError = unknown


export function useGetXdslServiceNameTasks<TData = Awaited<ReturnType<typeof getXdslServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetXdslServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameTasks<TData = Awaited<ReturnType<typeof getXdslServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetXdslServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameTasks<TData = Awaited<ReturnType<typeof getXdslServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetXdslServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Tasks scheduled for this access
 */

export function useGetXdslServiceNameTasks<TData = Awaited<ReturnType<typeof getXdslServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetXdslServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getXdslServiceNameTasksId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslTaskOVH>(
      {url: `/xdsl/${serviceName}/tasks/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameTasksIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/xdsl/${serviceName}/tasks/${id}`] as const;
    }

    
export const getGetXdslServiceNameTasksIdQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameTasksId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameTasksIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameTasksId>>> = ({ signal }) => getXdslServiceNameTasksId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTasksId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameTasksIdQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameTasksId>>>
export type GetXdslServiceNameTasksIdQueryError = unknown


export function useGetXdslServiceNameTasksId<TData = Awaited<ReturnType<typeof getXdslServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTasksId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameTasksId<TData = Awaited<ReturnType<typeof getXdslServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTasksId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameTasksId<TData = Awaited<ReturnType<typeof getXdslServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetXdslServiceNameTasksId<TData = Awaited<ReturnType<typeof getXdslServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameTasksIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the task in problem from the results
 */
export const postXdslServiceNameTasksIdArchive = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/tasks/${id}/archive`, method: 'POST', signal
    },
      options);
    }
  


export const getPostXdslServiceNameTasksIdArchiveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameTasksIdArchive>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameTasksIdArchive>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postXdslServiceNameTasksIdArchive>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  postXdslServiceNameTasksIdArchive(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostXdslServiceNameTasksIdArchiveMutationResult = NonNullable<Awaited<ReturnType<typeof postXdslServiceNameTasksIdArchive>>>
    
    export type PostXdslServiceNameTasksIdArchiveMutationError = unknown

    /**
 * @summary Delete the task in problem from the results
 */
export const usePostXdslServiceNameTasksIdArchive = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postXdslServiceNameTasksIdArchive>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postXdslServiceNameTasksIdArchive>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostXdslServiceNameTasksIdArchiveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Give the price to requestTotalDeconsolidation on the access
 */
export const getXdslServiceNameTotalDeconsolidationTerms = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslDeconsolidationTermsOVH>(
      {url: `/xdsl/${serviceName}/totalDeconsolidationTerms`, method: 'GET', signal
    },
      options);
    }
  

export const getGetXdslServiceNameTotalDeconsolidationTermsQueryKey = (serviceName: string,) => {
    return [`/xdsl/${serviceName}/totalDeconsolidationTerms`] as const;
    }

    
export const getGetXdslServiceNameTotalDeconsolidationTermsQueryOptions = <TData = Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetXdslServiceNameTotalDeconsolidationTermsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>> = ({ signal }) => getXdslServiceNameTotalDeconsolidationTerms(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetXdslServiceNameTotalDeconsolidationTermsQueryResult = NonNullable<Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>>
export type GetXdslServiceNameTotalDeconsolidationTermsQueryError = unknown


export function useGetXdslServiceNameTotalDeconsolidationTerms<TData = Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameTotalDeconsolidationTerms<TData = Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetXdslServiceNameTotalDeconsolidationTerms<TData = Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Give the price to requestTotalDeconsolidation on the access
 */

export function useGetXdslServiceNameTotalDeconsolidationTerms<TData = Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getXdslServiceNameTotalDeconsolidationTerms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetXdslServiceNameTotalDeconsolidationTermsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update RIO, or disable portability, for order in error because of missing or invalid RIO
 */
export const updateRIO = (
    serviceName: string,
    xdslUpdateInvalidOrMissingRioPostOVH: XdslUpdateInvalidOrMissingRioPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/xdsl/${serviceName}/updateInvalidOrMissingRio`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: xdslUpdateInvalidOrMissingRioPostOVH, signal
    },
      options);
    }
  


export const getUpdateRIOMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRIO>>, TError,{serviceName: string;data: XdslUpdateInvalidOrMissingRioPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof updateRIO>>, TError,{serviceName: string;data: XdslUpdateInvalidOrMissingRioPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRIO>>, {serviceName: string;data: XdslUpdateInvalidOrMissingRioPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  updateRIO(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateRIOMutationResult = NonNullable<Awaited<ReturnType<typeof updateRIO>>>
    export type UpdateRIOMutationBody = XdslUpdateInvalidOrMissingRioPostOVH
    export type UpdateRIOMutationError = unknown

    /**
 * @summary Update RIO, or disable portability, for order in error because of missing or invalid RIO
 */
export const useUpdateRIO = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRIO>>, TError,{serviceName: string;data: XdslUpdateInvalidOrMissingRioPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateRIO>>,
        TError,
        {serviceName: string;data: XdslUpdateInvalidOrMissingRioPostOVH},
        TContext
      > => {

      const mutationOptions = getUpdateRIOMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

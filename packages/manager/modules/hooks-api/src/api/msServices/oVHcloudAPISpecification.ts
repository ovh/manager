/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetMsServicesParams,
  GetMsServicesServiceNameAccountParams,
  GetMsServicesServiceNameTaskParams,
  MsServicesAccountOVH,
  MsServicesActiveDirectoryOrganizationalUnitOVH,
  MsServicesActiveDirectoryOrganizationalUnitWithIAMOVH,
  MsServicesExchangeInformationOVH,
  MsServicesExchangeServiceOVH,
  MsServicesExchangeTaskOVH,
  MsServicesMfaInformationOVH,
  MsServicesTaskOVH,
  MsServicesUpnSuffixOVH,
  PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordBody,
  PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableBody,
  PostMsServicesServiceNameChangeContactBody,
  PostMsServicesServiceNameUpnSuffixBody
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getMsServices = (
    params?: GetMsServicesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/msServices`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMsServicesQueryKey = (params?: GetMsServicesParams,) => {
    return [`/msServices`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMsServicesQueryOptions = <TData = Awaited<ReturnType<typeof getMsServices>>, TError = unknown>(params?: GetMsServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServices>>> = ({ signal }) => getMsServices(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServices>>>
export type GetMsServicesQueryError = unknown


export function useGetMsServices<TData = Awaited<ReturnType<typeof getMsServices>>, TError = unknown>(
 params: undefined |  GetMsServicesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServices<TData = Awaited<ReturnType<typeof getMsServices>>, TError = unknown>(
 params?: GetMsServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServices<TData = Awaited<ReturnType<typeof getMsServices>>, TError = unknown>(
 params?: GetMsServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetMsServices<TData = Awaited<ReturnType<typeof getMsServices>>, TError = unknown>(
 params?: GetMsServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMsServicesServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesActiveDirectoryOrganizationalUnitWithIAMOVH>(
      {url: `/msServices/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameQueryKey = (serviceName: string,) => {
    return [`/msServices/${serviceName}`] as const;
    }

    
export const getGetMsServicesServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceName>>> = ({ signal }) => getMsServicesServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceName>>>
export type GetMsServicesServiceNameQueryError = unknown


export function useGetMsServicesServiceName<TData = Awaited<ReturnType<typeof getMsServicesServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceName<TData = Awaited<ReturnType<typeof getMsServicesServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceName<TData = Awaited<ReturnType<typeof getMsServicesServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMsServicesServiceName<TData = Awaited<ReturnType<typeof getMsServicesServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMsServicesServiceName = (
    serviceName: string,
    msServicesActiveDirectoryOrganizationalUnitOVH: NonReadonly<MsServicesActiveDirectoryOrganizationalUnitOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/msServices/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: msServicesActiveDirectoryOrganizationalUnitOVH
    },
      options);
    }
  


export const getPutMsServicesServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMsServicesServiceName>>, TError,{serviceName: string;data: NonReadonly<MsServicesActiveDirectoryOrganizationalUnitOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMsServicesServiceName>>, TError,{serviceName: string;data: NonReadonly<MsServicesActiveDirectoryOrganizationalUnitOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMsServicesServiceName>>, {serviceName: string;data: NonReadonly<MsServicesActiveDirectoryOrganizationalUnitOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putMsServicesServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMsServicesServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putMsServicesServiceName>>>
    export type PutMsServicesServiceNameMutationBody = NonReadonly<MsServicesActiveDirectoryOrganizationalUnitOVH>
    export type PutMsServicesServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMsServicesServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMsServicesServiceName>>, TError,{serviceName: string;data: NonReadonly<MsServicesActiveDirectoryOrganizationalUnitOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMsServicesServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<MsServicesActiveDirectoryOrganizationalUnitOVH>},
        TContext
      > => {

      const mutationOptions = getPutMsServicesServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Accounts associated to this Active Directory service
 */
export const getMsServicesServiceNameAccount = (
    serviceName: string,
    params?: GetMsServicesServiceNameAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/msServices/${serviceName}/account`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameAccountQueryKey = (serviceName: string,
    params?: GetMsServicesServiceNameAccountParams,) => {
    return [`/msServices/${serviceName}/account`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMsServicesServiceNameAccountQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>, TError = unknown>(serviceName: string,
    params?: GetMsServicesServiceNameAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameAccountQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>> = ({ signal }) => getMsServicesServiceNameAccount(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>>
export type GetMsServicesServiceNameAccountQueryError = unknown


export function useGetMsServicesServiceNameAccount<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetMsServicesServiceNameAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameAccount<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>, TError = unknown>(
 serviceName: string,
    params?: GetMsServicesServiceNameAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameAccount<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>, TError = unknown>(
 serviceName: string,
    params?: GetMsServicesServiceNameAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Accounts associated to this Active Directory service
 */

export function useGetMsServicesServiceNameAccount<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>, TError = unknown>(
 serviceName: string,
    params?: GetMsServicesServiceNameAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameAccountQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMsServicesServiceNameAccountUserPrincipalName = (
    serviceName: string,
    userPrincipalName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesAccountOVH>(
      {url: `/msServices/${serviceName}/account/${userPrincipalName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameAccountUserPrincipalNameQueryKey = (serviceName: string,
    userPrincipalName: string,) => {
    return [`/msServices/${serviceName}/account/${userPrincipalName}`] as const;
    }

    
export const getGetMsServicesServiceNameAccountUserPrincipalNameQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>, TError = unknown>(serviceName: string,
    userPrincipalName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameAccountUserPrincipalNameQueryKey(serviceName,userPrincipalName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>> = ({ signal }) => getMsServicesServiceNameAccountUserPrincipalName(serviceName,userPrincipalName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userPrincipalName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameAccountUserPrincipalNameQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>>
export type GetMsServicesServiceNameAccountUserPrincipalNameQueryError = unknown


export function useGetMsServicesServiceNameAccountUserPrincipalName<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>, TError = unknown>(
 serviceName: string,
    userPrincipalName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameAccountUserPrincipalName<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>, TError = unknown>(
 serviceName: string,
    userPrincipalName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameAccountUserPrincipalName<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>, TError = unknown>(
 serviceName: string,
    userPrincipalName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMsServicesServiceNameAccountUserPrincipalName<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>, TError = unknown>(
 serviceName: string,
    userPrincipalName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameAccountUserPrincipalNameQueryOptions(serviceName,userPrincipalName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMsServicesServiceNameAccountUserPrincipalName = (
    serviceName: string,
    userPrincipalName: string,
    msServicesAccountOVH: NonReadonly<MsServicesAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/msServices/${serviceName}/account/${userPrincipalName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: msServicesAccountOVH
    },
      options);
    }
  


export const getPutMsServicesServiceNameAccountUserPrincipalNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMsServicesServiceNameAccountUserPrincipalName>>, TError,{serviceName: string;userPrincipalName: string;data: NonReadonly<MsServicesAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMsServicesServiceNameAccountUserPrincipalName>>, TError,{serviceName: string;userPrincipalName: string;data: NonReadonly<MsServicesAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMsServicesServiceNameAccountUserPrincipalName>>, {serviceName: string;userPrincipalName: string;data: NonReadonly<MsServicesAccountOVH>}> = (props) => {
          const {serviceName,userPrincipalName,data} = props ?? {};

          return  putMsServicesServiceNameAccountUserPrincipalName(serviceName,userPrincipalName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMsServicesServiceNameAccountUserPrincipalNameMutationResult = NonNullable<Awaited<ReturnType<typeof putMsServicesServiceNameAccountUserPrincipalName>>>
    export type PutMsServicesServiceNameAccountUserPrincipalNameMutationBody = NonReadonly<MsServicesAccountOVH>
    export type PutMsServicesServiceNameAccountUserPrincipalNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMsServicesServiceNameAccountUserPrincipalName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMsServicesServiceNameAccountUserPrincipalName>>, TError,{serviceName: string;userPrincipalName: string;data: NonReadonly<MsServicesAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMsServicesServiceNameAccountUserPrincipalName>>,
        TError,
        {serviceName: string;userPrincipalName: string;data: NonReadonly<MsServicesAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutMsServicesServiceNameAccountUserPrincipalNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change account password
 */
export const postMsServicesServiceNameAccountUserPrincipalNameChangePassword = (
    serviceName: string,
    userPrincipalName: string,
    postMsServicesServiceNameAccountUserPrincipalNameChangePasswordBody: PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesTaskOVH>(
      {url: `/msServices/${serviceName}/account/${userPrincipalName}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMsServicesServiceNameAccountUserPrincipalNameChangePasswordBody, signal
    },
      options);
    }
  


export const getPostMsServicesServiceNameAccountUserPrincipalNameChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameChangePassword>>, TError,{serviceName: string;userPrincipalName: string;data: PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameChangePassword>>, TError,{serviceName: string;userPrincipalName: string;data: PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameChangePassword>>, {serviceName: string;userPrincipalName: string;data: PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordBody}> = (props) => {
          const {serviceName,userPrincipalName,data} = props ?? {};

          return  postMsServicesServiceNameAccountUserPrincipalNameChangePassword(serviceName,userPrincipalName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameChangePassword>>>
    export type PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordMutationBody = PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordBody
    export type PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordMutationError = unknown

    /**
 * @summary Change account password
 */
export const usePostMsServicesServiceNameAccountUserPrincipalNameChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameChangePassword>>, TError,{serviceName: string;userPrincipalName: string;data: PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameChangePassword>>,
        TError,
        {serviceName: string;userPrincipalName: string;data: PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostMsServicesServiceNameAccountUserPrincipalNameChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMsServicesServiceNameAccountUserPrincipalNameExchange = (
    serviceName: string,
    userPrincipalName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesExchangeInformationOVH>(
      {url: `/msServices/${serviceName}/account/${userPrincipalName}/exchange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameAccountUserPrincipalNameExchangeQueryKey = (serviceName: string,
    userPrincipalName: string,) => {
    return [`/msServices/${serviceName}/account/${userPrincipalName}/exchange`] as const;
    }

    
export const getGetMsServicesServiceNameAccountUserPrincipalNameExchangeQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError = unknown>(serviceName: string,
    userPrincipalName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameAccountUserPrincipalNameExchangeQueryKey(serviceName,userPrincipalName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>> = ({ signal }) => getMsServicesServiceNameAccountUserPrincipalNameExchange(serviceName,userPrincipalName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userPrincipalName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameAccountUserPrincipalNameExchangeQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>>
export type GetMsServicesServiceNameAccountUserPrincipalNameExchangeQueryError = unknown


export function useGetMsServicesServiceNameAccountUserPrincipalNameExchange<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError = unknown>(
 serviceName: string,
    userPrincipalName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameAccountUserPrincipalNameExchange<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError = unknown>(
 serviceName: string,
    userPrincipalName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameAccountUserPrincipalNameExchange<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError = unknown>(
 serviceName: string,
    userPrincipalName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMsServicesServiceNameAccountUserPrincipalNameExchange<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError = unknown>(
 serviceName: string,
    userPrincipalName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameAccountUserPrincipalNameExchangeQueryOptions(serviceName,userPrincipalName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMsServicesServiceNameAccountUserPrincipalNameExchange = (
    serviceName: string,
    userPrincipalName: string,
    msServicesExchangeInformationOVH: NonReadonly<MsServicesExchangeInformationOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/msServices/${serviceName}/account/${userPrincipalName}/exchange`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: msServicesExchangeInformationOVH
    },
      options);
    }
  


export const getPutMsServicesServiceNameAccountUserPrincipalNameExchangeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError,{serviceName: string;userPrincipalName: string;data: NonReadonly<MsServicesExchangeInformationOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError,{serviceName: string;userPrincipalName: string;data: NonReadonly<MsServicesExchangeInformationOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMsServicesServiceNameAccountUserPrincipalNameExchange>>, {serviceName: string;userPrincipalName: string;data: NonReadonly<MsServicesExchangeInformationOVH>}> = (props) => {
          const {serviceName,userPrincipalName,data} = props ?? {};

          return  putMsServicesServiceNameAccountUserPrincipalNameExchange(serviceName,userPrincipalName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMsServicesServiceNameAccountUserPrincipalNameExchangeMutationResult = NonNullable<Awaited<ReturnType<typeof putMsServicesServiceNameAccountUserPrincipalNameExchange>>>
    export type PutMsServicesServiceNameAccountUserPrincipalNameExchangeMutationBody = NonReadonly<MsServicesExchangeInformationOVH>
    export type PutMsServicesServiceNameAccountUserPrincipalNameExchangeMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMsServicesServiceNameAccountUserPrincipalNameExchange = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMsServicesServiceNameAccountUserPrincipalNameExchange>>, TError,{serviceName: string;userPrincipalName: string;data: NonReadonly<MsServicesExchangeInformationOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMsServicesServiceNameAccountUserPrincipalNameExchange>>,
        TError,
        {serviceName: string;userPrincipalName: string;data: NonReadonly<MsServicesExchangeInformationOVH>},
        TContext
      > => {

      const mutationOptions = getPutMsServicesServiceNameAccountUserPrincipalNameExchangeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete Multi Factor Authentication feature for this account
 */
export const deleteMsServicesServiceNameAccountUserPrincipalNameMfa = (
    serviceName: string,
    userPrincipalName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<MsServicesTaskOVH>(
      {url: `/msServices/${serviceName}/account/${userPrincipalName}/mfa`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMsServicesServiceNameAccountUserPrincipalNameMfaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError,{serviceName: string;userPrincipalName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError,{serviceName: string;userPrincipalName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMsServicesServiceNameAccountUserPrincipalNameMfa>>, {serviceName: string;userPrincipalName: string}> = (props) => {
          const {serviceName,userPrincipalName} = props ?? {};

          return  deleteMsServicesServiceNameAccountUserPrincipalNameMfa(serviceName,userPrincipalName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMsServicesServiceNameAccountUserPrincipalNameMfaMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMsServicesServiceNameAccountUserPrincipalNameMfa>>>
    
    export type DeleteMsServicesServiceNameAccountUserPrincipalNameMfaMutationError = unknown

    /**
 * @summary Delete Multi Factor Authentication feature for this account
 */
export const useDeleteMsServicesServiceNameAccountUserPrincipalNameMfa = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError,{serviceName: string;userPrincipalName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMsServicesServiceNameAccountUserPrincipalNameMfa>>,
        TError,
        {serviceName: string;userPrincipalName: string},
        TContext
      > => {

      const mutationOptions = getDeleteMsServicesServiceNameAccountUserPrincipalNameMfaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMsServicesServiceNameAccountUserPrincipalNameMfa = (
    serviceName: string,
    userPrincipalName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesMfaInformationOVH>(
      {url: `/msServices/${serviceName}/account/${userPrincipalName}/mfa`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameAccountUserPrincipalNameMfaQueryKey = (serviceName: string,
    userPrincipalName: string,) => {
    return [`/msServices/${serviceName}/account/${userPrincipalName}/mfa`] as const;
    }

    
export const getGetMsServicesServiceNameAccountUserPrincipalNameMfaQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError = unknown>(serviceName: string,
    userPrincipalName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameAccountUserPrincipalNameMfaQueryKey(serviceName,userPrincipalName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>> = ({ signal }) => getMsServicesServiceNameAccountUserPrincipalNameMfa(serviceName,userPrincipalName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userPrincipalName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameAccountUserPrincipalNameMfaQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>>
export type GetMsServicesServiceNameAccountUserPrincipalNameMfaQueryError = unknown


export function useGetMsServicesServiceNameAccountUserPrincipalNameMfa<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError = unknown>(
 serviceName: string,
    userPrincipalName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameAccountUserPrincipalNameMfa<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError = unknown>(
 serviceName: string,
    userPrincipalName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameAccountUserPrincipalNameMfa<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError = unknown>(
 serviceName: string,
    userPrincipalName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMsServicesServiceNameAccountUserPrincipalNameMfa<TData = Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError = unknown>(
 serviceName: string,
    userPrincipalName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameAccountUserPrincipalNameMfaQueryOptions(serviceName,userPrincipalName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create Multi Factor Authentication for this account
 */
export const postMsServicesServiceNameAccountUserPrincipalNameMfa = (
    serviceName: string,
    userPrincipalName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesTaskOVH>(
      {url: `/msServices/${serviceName}/account/${userPrincipalName}/mfa`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMsServicesServiceNameAccountUserPrincipalNameMfaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError,{serviceName: string;userPrincipalName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError,{serviceName: string;userPrincipalName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfa>>, {serviceName: string;userPrincipalName: string}> = (props) => {
          const {serviceName,userPrincipalName} = props ?? {};

          return  postMsServicesServiceNameAccountUserPrincipalNameMfa(serviceName,userPrincipalName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMsServicesServiceNameAccountUserPrincipalNameMfaMutationResult = NonNullable<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfa>>>
    
    export type PostMsServicesServiceNameAccountUserPrincipalNameMfaMutationError = unknown

    /**
 * @summary Create Multi Factor Authentication for this account
 */
export const usePostMsServicesServiceNameAccountUserPrincipalNameMfa = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfa>>, TError,{serviceName: string;userPrincipalName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfa>>,
        TError,
        {serviceName: string;userPrincipalName: string},
        TContext
      > => {

      const mutationOptions = getPostMsServicesServiceNameAccountUserPrincipalNameMfaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable Multi Factor Authentication for a period of time
 */
export const postMsServicesServiceNameAccountUserPrincipalNameMfaDisable = (
    serviceName: string,
    userPrincipalName: string,
    postMsServicesServiceNameAccountUserPrincipalNameMfaDisableBody: PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesTaskOVH>(
      {url: `/msServices/${serviceName}/account/${userPrincipalName}/mfa/disable`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMsServicesServiceNameAccountUserPrincipalNameMfaDisableBody, signal
    },
      options);
    }
  


export const getPostMsServicesServiceNameAccountUserPrincipalNameMfaDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaDisable>>, TError,{serviceName: string;userPrincipalName: string;data: PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaDisable>>, TError,{serviceName: string;userPrincipalName: string;data: PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaDisable>>, {serviceName: string;userPrincipalName: string;data: PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableBody}> = (props) => {
          const {serviceName,userPrincipalName,data} = props ?? {};

          return  postMsServicesServiceNameAccountUserPrincipalNameMfaDisable(serviceName,userPrincipalName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaDisable>>>
    export type PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableMutationBody = PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableBody
    export type PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableMutationError = unknown

    /**
 * @summary Disable Multi Factor Authentication for a period of time
 */
export const usePostMsServicesServiceNameAccountUserPrincipalNameMfaDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaDisable>>, TError,{serviceName: string;userPrincipalName: string;data: PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaDisable>>,
        TError,
        {serviceName: string;userPrincipalName: string;data: PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableBody},
        TContext
      > => {

      const mutationOptions = getPostMsServicesServiceNameAccountUserPrincipalNameMfaDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable Mfa (enabled by default when created)
 */
export const postMsServicesServiceNameAccountUserPrincipalNameMfaEnable = (
    serviceName: string,
    userPrincipalName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesTaskOVH>(
      {url: `/msServices/${serviceName}/account/${userPrincipalName}/mfa/enable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMsServicesServiceNameAccountUserPrincipalNameMfaEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaEnable>>, TError,{serviceName: string;userPrincipalName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaEnable>>, TError,{serviceName: string;userPrincipalName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaEnable>>, {serviceName: string;userPrincipalName: string}> = (props) => {
          const {serviceName,userPrincipalName} = props ?? {};

          return  postMsServicesServiceNameAccountUserPrincipalNameMfaEnable(serviceName,userPrincipalName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMsServicesServiceNameAccountUserPrincipalNameMfaEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaEnable>>>
    
    export type PostMsServicesServiceNameAccountUserPrincipalNameMfaEnableMutationError = unknown

    /**
 * @summary Enable Mfa (enabled by default when created)
 */
export const usePostMsServicesServiceNameAccountUserPrincipalNameMfaEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaEnable>>, TError,{serviceName: string;userPrincipalName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaEnable>>,
        TError,
        {serviceName: string;userPrincipalName: string},
        TContext
      > => {

      const mutationOptions = getPostMsServicesServiceNameAccountUserPrincipalNameMfaEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reset Multi Factor Authentication status for this account
 */
export const postMsServicesServiceNameAccountUserPrincipalNameMfaReset = (
    serviceName: string,
    userPrincipalName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesTaskOVH>(
      {url: `/msServices/${serviceName}/account/${userPrincipalName}/mfa/reset`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMsServicesServiceNameAccountUserPrincipalNameMfaResetMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaReset>>, TError,{serviceName: string;userPrincipalName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaReset>>, TError,{serviceName: string;userPrincipalName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaReset>>, {serviceName: string;userPrincipalName: string}> = (props) => {
          const {serviceName,userPrincipalName} = props ?? {};

          return  postMsServicesServiceNameAccountUserPrincipalNameMfaReset(serviceName,userPrincipalName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMsServicesServiceNameAccountUserPrincipalNameMfaResetMutationResult = NonNullable<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaReset>>>
    
    export type PostMsServicesServiceNameAccountUserPrincipalNameMfaResetMutationError = unknown

    /**
 * @summary Reset Multi Factor Authentication status for this account
 */
export const usePostMsServicesServiceNameAccountUserPrincipalNameMfaReset = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaReset>>, TError,{serviceName: string;userPrincipalName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMsServicesServiceNameAccountUserPrincipalNameMfaReset>>,
        TError,
        {serviceName: string;userPrincipalName: string},
        TContext
      > => {

      const mutationOptions = getPostMsServicesServiceNameAccountUserPrincipalNameMfaResetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postMsServicesServiceNameChangeContact = (
    serviceName: string,
    postMsServicesServiceNameChangeContactBody: PostMsServicesServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/msServices/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMsServicesServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostMsServicesServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameChangeContact>>, TError,{serviceName: string;data: PostMsServicesServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameChangeContact>>, TError,{serviceName: string;data: PostMsServicesServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMsServicesServiceNameChangeContact>>, {serviceName: string;data: PostMsServicesServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postMsServicesServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMsServicesServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postMsServicesServiceNameChangeContact>>>
    export type PostMsServicesServiceNameChangeContactMutationBody = PostMsServicesServiceNameChangeContactBody
    export type PostMsServicesServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostMsServicesServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameChangeContact>>, TError,{serviceName: string;data: PostMsServicesServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMsServicesServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostMsServicesServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostMsServicesServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create Mfa on all accounts.
 */
export const postMsServicesServiceNameCreateMfaOnAllUsers = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesTaskOVH>(
      {url: `/msServices/${serviceName}/createMfaOnAllUsers`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMsServicesServiceNameCreateMfaOnAllUsersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameCreateMfaOnAllUsers>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameCreateMfaOnAllUsers>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMsServicesServiceNameCreateMfaOnAllUsers>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postMsServicesServiceNameCreateMfaOnAllUsers(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMsServicesServiceNameCreateMfaOnAllUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postMsServicesServiceNameCreateMfaOnAllUsers>>>
    
    export type PostMsServicesServiceNameCreateMfaOnAllUsersMutationError = unknown

    /**
 * @summary Create Mfa on all accounts.
 */
export const usePostMsServicesServiceNameCreateMfaOnAllUsers = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameCreateMfaOnAllUsers>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMsServicesServiceNameCreateMfaOnAllUsers>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostMsServicesServiceNameCreateMfaOnAllUsersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMsServicesServiceNameExchange = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesExchangeServiceOVH>(
      {url: `/msServices/${serviceName}/exchange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameExchangeQueryKey = (serviceName: string,) => {
    return [`/msServices/${serviceName}/exchange`] as const;
    }

    
export const getGetMsServicesServiceNameExchangeQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameExchangeQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>> = ({ signal }) => getMsServicesServiceNameExchange(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameExchangeQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>>
export type GetMsServicesServiceNameExchangeQueryError = unknown


export function useGetMsServicesServiceNameExchange<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameExchange<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameExchange<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMsServicesServiceNameExchange<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameExchangeQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMsServicesServiceNameExchange = (
    serviceName: string,
    msServicesExchangeServiceOVH: NonReadonly<MsServicesExchangeServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/msServices/${serviceName}/exchange`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: msServicesExchangeServiceOVH
    },
      options);
    }
  


export const getPutMsServicesServiceNameExchangeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMsServicesServiceNameExchange>>, TError,{serviceName: string;data: NonReadonly<MsServicesExchangeServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMsServicesServiceNameExchange>>, TError,{serviceName: string;data: NonReadonly<MsServicesExchangeServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMsServicesServiceNameExchange>>, {serviceName: string;data: NonReadonly<MsServicesExchangeServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putMsServicesServiceNameExchange(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMsServicesServiceNameExchangeMutationResult = NonNullable<Awaited<ReturnType<typeof putMsServicesServiceNameExchange>>>
    export type PutMsServicesServiceNameExchangeMutationBody = NonReadonly<MsServicesExchangeServiceOVH>
    export type PutMsServicesServiceNameExchangeMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMsServicesServiceNameExchange = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMsServicesServiceNameExchange>>, TError,{serviceName: string;data: NonReadonly<MsServicesExchangeServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMsServicesServiceNameExchange>>,
        TError,
        {serviceName: string;data: NonReadonly<MsServicesExchangeServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutMsServicesServiceNameExchangeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Detects billing transition status for the service
 */
export const getMsServicesServiceNameExchangeBillingMigrated = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/msServices/${serviceName}/exchange/billingMigrated`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameExchangeBillingMigratedQueryKey = (serviceName: string,) => {
    return [`/msServices/${serviceName}/exchange/billingMigrated`] as const;
    }

    
export const getGetMsServicesServiceNameExchangeBillingMigratedQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameExchangeBillingMigratedQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>> = ({ signal }) => getMsServicesServiceNameExchangeBillingMigrated(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameExchangeBillingMigratedQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>>
export type GetMsServicesServiceNameExchangeBillingMigratedQueryError = unknown


export function useGetMsServicesServiceNameExchangeBillingMigrated<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameExchangeBillingMigrated<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameExchangeBillingMigrated<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Detects billing transition status for the service
 */

export function useGetMsServicesServiceNameExchangeBillingMigrated<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeBillingMigrated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameExchangeBillingMigratedQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Pending actions
 */
export const getMsServicesServiceNameExchangeTask = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/msServices/${serviceName}/exchange/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameExchangeTaskQueryKey = (serviceName: string,) => {
    return [`/msServices/${serviceName}/exchange/task`] as const;
    }

    
export const getGetMsServicesServiceNameExchangeTaskQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameExchangeTaskQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>> = ({ signal }) => getMsServicesServiceNameExchangeTask(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameExchangeTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>>
export type GetMsServicesServiceNameExchangeTaskQueryError = unknown


export function useGetMsServicesServiceNameExchangeTask<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameExchangeTask<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameExchangeTask<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Pending actions
 */

export function useGetMsServicesServiceNameExchangeTask<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameExchangeTaskQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMsServicesServiceNameExchangeTaskId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesExchangeTaskOVH>(
      {url: `/msServices/${serviceName}/exchange/task/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameExchangeTaskIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/msServices/${serviceName}/exchange/task/${id}`] as const;
    }

    
export const getGetMsServicesServiceNameExchangeTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameExchangeTaskIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>> = ({ signal }) => getMsServicesServiceNameExchangeTaskId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameExchangeTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>>
export type GetMsServicesServiceNameExchangeTaskIdQueryError = unknown


export function useGetMsServicesServiceNameExchangeTaskId<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameExchangeTaskId<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameExchangeTaskId<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMsServicesServiceNameExchangeTaskId<TData = Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameExchangeTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameExchangeTaskIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Remove Mfa on all accounts.
 */
export const postMsServicesServiceNameRemoveMfaOnAllUsers = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesTaskOVH>(
      {url: `/msServices/${serviceName}/removeMfaOnAllUsers`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMsServicesServiceNameRemoveMfaOnAllUsersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameRemoveMfaOnAllUsers>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameRemoveMfaOnAllUsers>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMsServicesServiceNameRemoveMfaOnAllUsers>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postMsServicesServiceNameRemoveMfaOnAllUsers(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMsServicesServiceNameRemoveMfaOnAllUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postMsServicesServiceNameRemoveMfaOnAllUsers>>>
    
    export type PostMsServicesServiceNameRemoveMfaOnAllUsersMutationError = unknown

    /**
 * @summary Remove Mfa on all accounts.
 */
export const usePostMsServicesServiceNameRemoveMfaOnAllUsers = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameRemoveMfaOnAllUsers>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMsServicesServiceNameRemoveMfaOnAllUsers>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostMsServicesServiceNameRemoveMfaOnAllUsersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Pending actions
 */
export const getMsServicesServiceNameTask = (
    serviceName: string,
    params?: GetMsServicesServiceNameTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/msServices/${serviceName}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameTaskQueryKey = (serviceName: string,
    params?: GetMsServicesServiceNameTaskParams,) => {
    return [`/msServices/${serviceName}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMsServicesServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceNameTask>>, TError = unknown>(serviceName: string,
    params?: GetMsServicesServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameTaskQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceNameTask>>> = ({ signal }) => getMsServicesServiceNameTask(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceNameTask>>>
export type GetMsServicesServiceNameTaskQueryError = unknown


export function useGetMsServicesServiceNameTask<TData = Awaited<ReturnType<typeof getMsServicesServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetMsServicesServiceNameTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameTask<TData = Awaited<ReturnType<typeof getMsServicesServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetMsServicesServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameTask<TData = Awaited<ReturnType<typeof getMsServicesServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetMsServicesServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Pending actions
 */

export function useGetMsServicesServiceNameTask<TData = Awaited<ReturnType<typeof getMsServicesServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetMsServicesServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameTaskQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMsServicesServiceNameTaskId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesTaskOVH>(
      {url: `/msServices/${serviceName}/task/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameTaskIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/msServices/${serviceName}/task/${id}`] as const;
    }

    
export const getGetMsServicesServiceNameTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameTaskIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>> = ({ signal }) => getMsServicesServiceNameTaskId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>>
export type GetMsServicesServiceNameTaskIdQueryError = unknown


export function useGetMsServicesServiceNameTaskId<TData = Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameTaskId<TData = Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameTaskId<TData = Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMsServicesServiceNameTaskId<TData = Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameTaskIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary active directory UPN suffix
 */
export const getMsServicesServiceNameUpnSuffix = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/msServices/${serviceName}/upnSuffix`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameUpnSuffixQueryKey = (serviceName: string,) => {
    return [`/msServices/${serviceName}/upnSuffix`] as const;
    }

    
export const getGetMsServicesServiceNameUpnSuffixQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameUpnSuffixQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>> = ({ signal }) => getMsServicesServiceNameUpnSuffix(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameUpnSuffixQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>>
export type GetMsServicesServiceNameUpnSuffixQueryError = unknown


export function useGetMsServicesServiceNameUpnSuffix<TData = Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameUpnSuffix<TData = Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameUpnSuffix<TData = Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary active directory UPN suffix
 */

export function useGetMsServicesServiceNameUpnSuffix<TData = Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameUpnSuffixQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new UPN suffix
 */
export const postMsServicesServiceNameUpnSuffix = (
    serviceName: string,
    postMsServicesServiceNameUpnSuffixBody: PostMsServicesServiceNameUpnSuffixBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesTaskOVH>(
      {url: `/msServices/${serviceName}/upnSuffix`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMsServicesServiceNameUpnSuffixBody, signal
    },
      options);
    }
  


export const getPostMsServicesServiceNameUpnSuffixMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameUpnSuffix>>, TError,{serviceName: string;data: PostMsServicesServiceNameUpnSuffixBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameUpnSuffix>>, TError,{serviceName: string;data: PostMsServicesServiceNameUpnSuffixBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMsServicesServiceNameUpnSuffix>>, {serviceName: string;data: PostMsServicesServiceNameUpnSuffixBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postMsServicesServiceNameUpnSuffix(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMsServicesServiceNameUpnSuffixMutationResult = NonNullable<Awaited<ReturnType<typeof postMsServicesServiceNameUpnSuffix>>>
    export type PostMsServicesServiceNameUpnSuffixMutationBody = PostMsServicesServiceNameUpnSuffixBody
    export type PostMsServicesServiceNameUpnSuffixMutationError = unknown

    /**
 * @summary Create new UPN suffix
 */
export const usePostMsServicesServiceNameUpnSuffix = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMsServicesServiceNameUpnSuffix>>, TError,{serviceName: string;data: PostMsServicesServiceNameUpnSuffixBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMsServicesServiceNameUpnSuffix>>,
        TError,
        {serviceName: string;data: PostMsServicesServiceNameUpnSuffixBody},
        TContext
      > => {

      const mutationOptions = getPostMsServicesServiceNameUpnSuffixMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing UPN suffix
 */
export const deleteMsServicesServiceNameUpnSuffixSuffix = (
    serviceName: string,
    suffix: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<MsServicesTaskOVH>(
      {url: `/msServices/${serviceName}/upnSuffix/${suffix}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMsServicesServiceNameUpnSuffixSuffixMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMsServicesServiceNameUpnSuffixSuffix>>, TError,{serviceName: string;suffix: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMsServicesServiceNameUpnSuffixSuffix>>, TError,{serviceName: string;suffix: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMsServicesServiceNameUpnSuffixSuffix>>, {serviceName: string;suffix: string}> = (props) => {
          const {serviceName,suffix} = props ?? {};

          return  deleteMsServicesServiceNameUpnSuffixSuffix(serviceName,suffix,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMsServicesServiceNameUpnSuffixSuffixMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMsServicesServiceNameUpnSuffixSuffix>>>
    
    export type DeleteMsServicesServiceNameUpnSuffixSuffixMutationError = unknown

    /**
 * @summary Delete existing UPN suffix
 */
export const useDeleteMsServicesServiceNameUpnSuffixSuffix = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMsServicesServiceNameUpnSuffixSuffix>>, TError,{serviceName: string;suffix: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMsServicesServiceNameUpnSuffixSuffix>>,
        TError,
        {serviceName: string;suffix: string},
        TContext
      > => {

      const mutationOptions = getDeleteMsServicesServiceNameUpnSuffixSuffixMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMsServicesServiceNameUpnSuffixSuffix = (
    serviceName: string,
    suffix: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MsServicesUpnSuffixOVH>(
      {url: `/msServices/${serviceName}/upnSuffix/${suffix}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMsServicesServiceNameUpnSuffixSuffixQueryKey = (serviceName: string,
    suffix: string,) => {
    return [`/msServices/${serviceName}/upnSuffix/${suffix}`] as const;
    }

    
export const getGetMsServicesServiceNameUpnSuffixSuffixQueryOptions = <TData = Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>, TError = unknown>(serviceName: string,
    suffix: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMsServicesServiceNameUpnSuffixSuffixQueryKey(serviceName,suffix);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>> = ({ signal }) => getMsServicesServiceNameUpnSuffixSuffix(serviceName,suffix, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && suffix), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMsServicesServiceNameUpnSuffixSuffixQueryResult = NonNullable<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>>
export type GetMsServicesServiceNameUpnSuffixSuffixQueryError = unknown


export function useGetMsServicesServiceNameUpnSuffixSuffix<TData = Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>, TError = unknown>(
 serviceName: string,
    suffix: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameUpnSuffixSuffix<TData = Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>, TError = unknown>(
 serviceName: string,
    suffix: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMsServicesServiceNameUpnSuffixSuffix<TData = Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>, TError = unknown>(
 serviceName: string,
    suffix: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMsServicesServiceNameUpnSuffixSuffix<TData = Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>, TError = unknown>(
 serviceName: string,
    suffix: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMsServicesServiceNameUpnSuffixSuffix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMsServicesServiceNameUpnSuffixSuffixQueryOptions(serviceName,suffix,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





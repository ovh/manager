/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type PostMsServicesServiceNameUpnSuffixBody = {
  /** UPN suffix to create */
  suffix: string;
};

export type PostMsServicesServiceNameChangeContactBody = {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
};

export type PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableBody = {
  /** Multi Factor Authentication disable period in hours */
  period: number;
};

export type PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordBody = {
  /** new password */
  password: string;
};

export type GetMsServicesServiceNameAccountParams = {
/**
 * Filter the value of company property (like)
 */
company?: string;
/**
 * Filter the value of id property (like)
 */
id?: number;
/**
 * Filter the value of userPrincipalName property (like)
 */
userPrincipalName?: string;
};

export type GetMsServicesParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  automaticV2024: 'automaticV2024',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * Active Directory UPN Suffix State
 */
export type MsServicesUPNStateEnumOVH = typeof MsServicesUPNStateEnumOVH[keyof typeof MsServicesUPNStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesUPNStateEnumOVH = {
  creating: 'creating',
  deleting: 'deleting',
  ok: 'ok',
} as const;

/**
 * Active Directory UPN Suffix
 */
export interface MsServicesUpnSuffixOVH {
  /**
   * Cname record used for UPN suffix verification
   * @nullable
   */
  readonly cnameToCheck?: string | null;
  /** Ownership for upn suffix confirmed */
  readonly ownershipValidated?: boolean;
  /** UPN suffix state */
  readonly state?: MsServicesUPNStateEnumOVH;
  /** UPN suffix */
  readonly suffix?: string;
  /** Pending task for this upnSuffix */
  readonly taskPendingId?: number;
}

/**
 * ActiveDirectory task status
 */
export type MsServicesTaskStatusEnumOVH = typeof MsServicesTaskStatusEnumOVH[keyof typeof MsServicesTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesTaskStatusEnumOVH = {
  cancelled: 'cancelled',
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * Sharepoint task details
 */
export interface MsServicesSharepointTaskOVH {
  /**
   * Completion date
   * @nullable
   */
  readonly finishDate?: string | null;
  /** Function name */
  readonly function?: string;
  /** Task id */
  readonly id?: number;
  /** Task status */
  readonly status?: MsServicesTaskStatusEnumOVH;
  /** Creation date */
  readonly todoDate?: string;
}

/**
 * Exchange task details
 */
export interface MsServicesExchangeTaskOVH {
  /**
   * Completion date
   * @nullable
   */
  readonly finishDate?: string | null;
  /** Function name */
  readonly function?: string;
  /** Task id */
  readonly id?: number;
  /** Task status */
  readonly status?: MsServicesTaskStatusEnumOVH;
  /** Creation date */
  readonly todoDate?: string;
}

/**
 * function enumeration for Active Directory task
 */
export type MsServicesTaskFunctionEnumOVH = typeof MsServicesTaskFunctionEnumOVH[keyof typeof MsServicesTaskFunctionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesTaskFunctionEnumOVH = {
  activateADSync: 'activateADSync',
  activateSharepoint: 'activateSharepoint',
  addADAccount: 'addADAccount',
  addADOU: 'addADOU',
  addADSyncAccount: 'addADSyncAccount',
  addADUPNSuffix: 'addADUPNSuffix',
  alterMfaOnAllUsers: 'alterMfaOnAllUsers',
  changeADPassword: 'changeADPassword',
  changeADSyncPassword: 'changeADSyncPassword',
  deactivateADSync: 'deactivateADSync',
  delADOU: 'delADOU',
  deleteADAccount: 'deleteADAccount',
  deleteADSyncAccount: 'deleteADSyncAccount',
  deleteADUPNSuffix: 'deleteADUPNSuffix',
  disableADAccountMfa: 'disableADAccountMfa',
  disableADAccountMfaTemporary: 'disableADAccountMfaTemporary',
  enableADAccountMfa: 'enableADAccountMfa',
  enableADSyncAccount: 'enableADSyncAccount',
  generateADSyncClientUrl: 'generateADSyncClientUrl',
  resetADAccountMfa: 'resetADAccountMfa',
  setADAccount: 'setADAccount',
  setPasswordPolicy: 'setPasswordPolicy',
} as const;

export type GetMsServicesServiceNameTaskParams = {
/**
 * Filter the value of function property (=)
 */
function?: MsServicesTaskFunctionEnumOVH;
/**
 * Filter the value of status property (=)
 */
status?: MsServicesTaskStatusEnumOVH;
};

/**
 * Active Directory task details
 */
export interface MsServicesTaskOVH {
  /**
   * Completion date
   * @nullable
   */
  readonly finishDate?: string | null;
  /** Function name */
  readonly function?: MsServicesTaskFunctionEnumOVH;
  /** Task id */
  readonly id?: number;
  /** Task status */
  readonly status?: MsServicesTaskStatusEnumOVH;
  /** Creation date */
  readonly todoDate?: string;
}

/**
 * Sync service
 */
export interface MsServicesSyncServiceOVH {
  /** Exchange service state */
  readonly state?: MsServicesServiceStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
}

/**
 * Sync account license
 */
export type MsServicesSyncLicenseEnumOVH = typeof MsServicesSyncLicenseEnumOVH[keyof typeof MsServicesSyncLicenseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesSyncLicenseEnumOVH = {
  standard: 'standard',
  standardFree: 'standardFree',
} as const;

/**
 * Sync account information
 */
export interface MsServicesSyncInformationOVH {
  /** Indicates if the account is configured */
  readonly configured?: boolean;
  /** Sync account license */
  readonly license?: MsServicesSyncLicenseEnumOVH;
  /** Sync account state */
  readonly state?: MsServicesObjectStateEnumOVH;
  /** Pending task for this sync account */
  readonly taskPendingId?: number;
}

/**
 * Sync account license
 */
export interface MsServicesSyncAccountLicenseOVH {
  /** the kind of license under which sync account is contracted */
  license?: MsServicesSyncLicenseEnumOVH;
  /** number of license instances */
  licenseQuantity?: number;
}

/**
 * Sync account license per day
 */
export interface MsServicesSyncDailyLicenseOVH {
  /** sync account license usage */
  accountLicense?: MsServicesSyncAccountLicenseOVH[];
  /** the date used to determine sync account license usage */
  date?: string;
}

/**
 * Spam and Antivirus configuration
 */
export interface MsServicesSpamAndVirusConfigurationOVH {
  /** Check DKIM of message */
  checkDKIM?: boolean;
  /** Check SPF of message */
  checkSPF?: boolean;
  /** If message is a spam delete it */
  deleteSpam?: boolean;
  /** If message is a virus delete it */
  deleteVirus?: boolean;
  /** If message is a spam or virus put in junk. Overridden by deleteSpam or deleteVirus */
  putInJunk?: boolean;
  /** If message is a spam change its subject */
  tagSpam?: boolean;
  /** If message is a virus change its subject */
  tagVirus?: boolean;
}

/**
 * Sharepoint service offer name
 */
export type MsServicesSharepointServiceOfferEnumOVH = typeof MsServicesSharepointServiceOfferEnumOVH[keyof typeof MsServicesSharepointServiceOfferEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesSharepointServiceOfferEnumOVH = {
  hosted: 'hosted',
  provider: 'provider',
} as const;

/**
 * IAM resource metadata
 * @nullable
 */
export type MsServicesSharepointServiceInfoWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Sharepoint service
 */
export interface MsServicesSharepointServiceInfoWithIAMOVH {
  /** Internal service name */
  readonly domain?: string;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: MsServicesSharepointServiceInfoWithIAMOVHIam;
}

/**
 * Sharepoint service
 */
export interface MsServicesSharepointServiceInfoOVH {
  /** Internal service name */
  readonly domain?: string;
}

/**
 * Sharepoint service
 */
export interface MsServicesSharepointServiceOVH {
  /**
   * Shared space usage in byte
   * @nullable
   */
  readonly currentUsage?: number | null;
  /**
   * Service family name displayed
   * @nullable
   */
  displayName?: string | null;
  /** Internal service name */
  readonly domain?: string;
  /** Sharepoint farm url */
  readonly farmUrl?: string;
  /** Sharepoint offer */
  readonly offer?: MsServicesSharepointServiceOfferEnumOVH;
  /** Shared space maximum size in byte */
  readonly quota?: number;
  /** Sharepoint service state */
  readonly state?: MsServicesServiceStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
  /**
   * Sharepoint url
   * @nullable
   */
  url?: string | null;
}

/**
 * Sharepoint account license
 */
export type MsServicesSharepointLicenseEnumOVH = typeof MsServicesSharepointLicenseEnumOVH[keyof typeof MsServicesSharepointLicenseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesSharepointLicenseEnumOVH = {
  foundation: 'foundation',
  standard: 'standard',
} as const;

/**
 * Sharepoint account information
 */
export interface MsServicesSharepointInformationOVH {
  /** The rights assigned to the sharepoint account */
  accessRights?: MsServicesSharepointAccountAccessRightsEnumOVH;
  /** Active Directory Account id */
  readonly activeDirectoryAccountId?: number;
  /** Indicates if the account is configured */
  readonly configured?: boolean;
  /**
   * OneDrive usage in byte
   * @nullable
   */
  readonly currentUsage?: number | null;
  /**
   * delete at expiration
   * @nullable
   */
  deleteAtExpiration?: boolean | null;
  /** Sharepoint account id */
  readonly id?: number;
  /** Sharepoint account license */
  readonly license?: MsServicesSharepointLicenseEnumOVH;
  /** office license is available */
  officeLicense?: boolean;
  /** OneDrive maximum size in byte */
  readonly quota?: number;
  /** Sharepoint account state */
  readonly state?: MsServicesObjectStateEnumOVH;
  /** Pending task for this sharepoint account */
  readonly taskPendingId?: number;
}

/**
 * Sharepoint account license
 */
export interface MsServicesSharepointAccountLicenseOVH {
  license?: MsServicesSharepointLicenseEnumOVH;
  licenseQuantity?: number;
}

/**
 * Sharepoint account license per day
 */
export interface MsServicesSharepointDailyLicenseOVH {
  accountLicense?: MsServicesSharepointAccountLicenseOVH[];
  date?: string;
}

/**
 * Account access rights to the service
 */
export type MsServicesSharepointAccountAccessRightsEnumOVH = typeof MsServicesSharepointAccountAccessRightsEnumOVH[keyof typeof MsServicesSharepointAccountAccessRightsEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesSharepointAccountAccessRightsEnumOVH = {
  administrator: 'administrator',
  user: 'user',
} as const;

/**
 * Service State
 */
export type MsServicesServiceStateEnumOVH = typeof MsServicesServiceStateEnumOVH[keyof typeof MsServicesServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesServiceStateEnumOVH = {
  creating: 'creating',
  deleting: 'deleting',
  inMaintenance: 'inMaintenance',
  ok: 'ok',
  reopening: 'reopening',
  suspended: 'suspended',
  suspending: 'suspending',
} as const;

/**
 * Service Offer name
 */
export type MsServicesServiceOfferEnumOVH = typeof MsServicesServiceOfferEnumOVH[keyof typeof MsServicesServiceOfferEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesServiceOfferEnumOVH = {
  dedicated: 'dedicated',
  dedicatedCluster: 'dedicatedCluster',
  hosted: 'hosted',
  provider: 'provider',
} as const;

/**
 * Renew period
 */
export type MsServicesRenewPeriodEnumOVH = typeof MsServicesRenewPeriodEnumOVH[keyof typeof MsServicesRenewPeriodEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesRenewPeriodEnumOVH = {
  monthly: 'monthly',
  yearly: 'yearly',
} as const;

/**
 * Current object state
 */
export type MsServicesObjectStateEnumOVH = typeof MsServicesObjectStateEnumOVH[keyof typeof MsServicesObjectStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesObjectStateEnumOVH = {
  creating: 'creating',
  deleting: 'deleting',
  disabled: 'disabled',
  modifying: 'modifying',
  ok: 'ok',
  reopening: 'reopening',
  suspended: 'suspended',
  suspending: 'suspending',
} as const;

/**
 * Multi Factor Authentication informations
 */
export interface MsServicesMfaInformationOVH {
  /** Indicates if Multi Factor Authentication is activated on this account */
  readonly activated?: boolean;
  /** Current status of Multi Factor Authentication feature */
  readonly state?: MsServicesObjectStateEnumOVH;
  /** Pending task for Multi Factor Authentication */
  readonly taskPendingId?: number;
}

/**
 * Mailing filter options availlable
 */
export type MsServicesMailingFilterEnumOVH = typeof MsServicesMailingFilterEnumOVH[keyof typeof MsServicesMailingFilterEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesMailingFilterEnumOVH = {
  vaderetro: 'vaderetro',
} as const;

/**
 * Period of time used to determine license statistics
 */
export type MsServicesLicensePeriodEnumOVH = typeof MsServicesLicensePeriodEnumOVH[keyof typeof MsServicesLicensePeriodEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesLicensePeriodEnumOVH = {
  lastMonth: 'lastMonth',
  lastQuarter: 'lastQuarter',
  lastWeek: 'lastWeek',
  lastYear: 'lastYear',
} as const;

/**
 * Exchange service
 */
export interface MsServicesExchangeServiceOVH {
  /**
   * Service family name displayed
   * @nullable
   */
  displayName?: string | null;
  /** Exchange service name */
  readonly domain?: string;
  /**
   * Exchange service URL
   * @nullable
   */
  readonly hostname?: string | null;
  /** Maximum allowable size for received messages in MB */
  maxReceiveSize?: number;
  /** Maximum allowable size of sent messages in MB */
  maxSendSize?: number;
  /** Exchange service offer */
  readonly offer?: MsServicesServiceOfferEnumOVH;
  /** Spam and Antivirus configuration */
  spamAndVirusConfiguration?: MsServicesSpamAndVirusConfigurationOVH;
  /**
   * Expiration date of SSL certificate
   * @nullable
   */
  readonly sslExpirationDate?: string | null;
  /** Exchange service state */
  readonly state?: MsServicesServiceStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
}

/**
 * Exchange account licence
 */
export type MsServicesExchangeLicenceEnumOVH = typeof MsServicesExchangeLicenceEnumOVH[keyof typeof MsServicesExchangeLicenceEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MsServicesExchangeLicenceEnumOVH = {
  basic: 'basic',
  enterprise: 'enterprise',
  standard: 'standard',
} as const;

/**
 * Frequency of mailbox license renewals
 * @nullable
 */
export type MsServicesExchangeInformationOVHRenewPeriod = MsServicesRenewPeriodEnumOVH | null;

/**
 * Frequency of Outlook license renewals
 * @nullable
 */
export type MsServicesExchangeInformationOVHRenewOutlookPeriod = MsServicesRenewPeriodEnumOVH | null;

/**
 * Exchange mailbox information
 */
export interface MsServicesExchangeInformationOVH {
  /** Exchange account license */
  accountLicense?: MsServicesExchangeLicenceEnumOVH;
  /** Indicates if the account is configured */
  readonly configured?: boolean;
  /**
   * Creation date
   * @nullable
   */
  readonly creationDate?: string | null;
  /**
   * Mailbox usage in KB
   * @nullable
   */
  readonly currentUsage?: number | null;
  /**
   * Delete mailbox at expiration date
   * @nullable
   */
  deleteAtExpiration?: boolean | null;
  /**
   * Delete Outlook license at expiration date
   * @nullable
   */
  deleteOutlookAtExpiration?: boolean | null;
  /**
   * Property needed for mailbox manual configuration (GUID)
   * @nullable
   */
  readonly exchangeGuid?: string | null;
  /**
   * Expiration date
   * @nullable
   */
  readonly expirationDate?: string | null;
  /**
   * Expiration date of Outlook license
   * @nullable
   */
  readonly expirationOutlookDate?: string | null;
  /** Visibility in Global Address List */
  hiddenFromGAL?: boolean;
  /** Account id */
  readonly id?: number;
  /** Litigation hold feature enabled on this mailbox */
  litigation?: boolean;
  /**
   * Litigation hold period in days (0 means unlimited). This setting covers all items in the mailbox.
   * @nullable
   */
  litigationPeriod?: number | null;
  /**
   * Enable or disable anti-virus and anti-spam
   * @nullable
   */
  mailingFilter?: MsServicesMailingFilterEnumOVH[] | null;
  /** Count the number of related aliases attached to this account */
  readonly numberOfAliases?: number;
  /** Outlook licence attached */
  outlookLicense?: boolean;
  /** OWA policy restriction is applied */
  readonly owaLimited?: boolean;
  /** Primary address of the mailbox */
  readonly primaryEmailAddress?: string;
  /** Maximum mailbox usage in GB (overall size) */
  quota?: number;
  /**
   * Frequency of Outlook license renewals
   * @nullable
   */
  renewOutlookPeriod?: MsServicesExchangeInformationOVHRenewOutlookPeriod;
  /**
   * Frequency of mailbox license renewals
   * @nullable
   */
  renewPeriod?: MsServicesExchangeInformationOVHRenewPeriod;
  /** Spam and Antivirus configuration */
  spamAndVirusConfiguration?: MsServicesSpamAndVirusConfigurationOVH;
  /** Spam activity detected on this mailbox */
  readonly spamDetected?: boolean;
  /**
   * Ticket number of spam detection
   * @nullable
   */
  readonly spamTicketNumber?: number | null;
  /** Mailbox state */
  readonly state?: MsServicesObjectStateEnumOVH;
  /** Pending task id for this account */
  readonly taskPendingId?: number;
}

/**
 * Temporary link to ADSync software executable
 */
export interface MsServicesActiveDirectorySyncClientUrlOVH {
  /** Link expiration date */
  readonly expiration?: string;
  /** ADSync software executable link */
  readonly url?: string;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type MsServicesActiveDirectoryOrganizationalUnitWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Active Directory organizational unit
 */
export interface MsServicesActiveDirectoryOrganizationalUnitWithIAMOVH {
  /** Flag indicating if passwords should be forced to follow Microsoft's password guidelines */
  complexityEnabled?: boolean;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: MsServicesActiveDirectoryOrganizationalUnitWithIAMOVHIam;
  /** Account lock time (in minutes) when too much passwords have been tried */
  lockoutDuration?: number;
  /** Time (in minutes) before the password attempts counter is reset */
  lockoutObservationWindow?: number;
  /**
   * Maximum number of password tries before account locking
   * @nullable
   */
  lockoutThreshold?: number | null;
  /**
   * Maximum lifespan of passwords, in days
   * @nullable
   */
  maxPasswordAge?: number | null;
  /**
   * Minimum lifespan of passwords, in days (0 = unlimited)
   * @nullable
   */
  minPasswordAge?: number | null;
  /**
   * Minimum number of characters passwords must contain
   * @nullable
   */
  minPasswordLength?: number | null;
  /** Name of the Active Directory organizational unit */
  readonly name?: string;
  /**
   * Service name of the office tenant (/licence/office/{serviceName}) linked to this AD service
   * @nullable
   */
  readonly officeTenantServiceName?: string | null;
  /** Current state of the Active Directory organizational unit */
  readonly state?: MsServicesServiceStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
}

/**
 * Active Directory organizational unit
 */
export interface MsServicesActiveDirectoryOrganizationalUnitOVH {
  /** Flag indicating if passwords should be forced to follow Microsoft's password guidelines */
  complexityEnabled?: boolean;
  /** Account lock time (in minutes) when too much passwords have been tried */
  lockoutDuration?: number;
  /** Time (in minutes) before the password attempts counter is reset */
  lockoutObservationWindow?: number;
  /**
   * Maximum number of password tries before account locking
   * @nullable
   */
  lockoutThreshold?: number | null;
  /**
   * Maximum lifespan of passwords, in days
   * @nullable
   */
  maxPasswordAge?: number | null;
  /**
   * Minimum lifespan of passwords, in days (0 = unlimited)
   * @nullable
   */
  minPasswordAge?: number | null;
  /**
   * Minimum number of characters passwords must contain
   * @nullable
   */
  minPasswordLength?: number | null;
  /** Name of the Active Directory organizational unit */
  readonly name?: string;
  /**
   * Service name of the office tenant (/licence/office/{serviceName}) linked to this AD service
   * @nullable
   */
  readonly officeTenantServiceName?: string | null;
  /** Current state of the Active Directory organizational unit */
  readonly state?: MsServicesServiceStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
}

/**
 * Phone number
 * @nullable
 */
export type MsServicesAccountOVHPhone = PhoneNumberOVH | null;

/**
 * Mobile phone
 * @nullable
 */
export type MsServicesAccountOVHMobile = PhoneNumberOVH | null;

/**
 * Fax number
 * @nullable
 */
export type MsServicesAccountOVHFax = PhoneNumberOVH | null;

/**
 * Country code
 * @nullable
 */
export type MsServicesAccountOVHCountryCode = EmailExchangeCountryCodeEnumOVH | null;

/**
 * Active Directory Account
 */
export interface MsServicesAccountOVH {
  /**
   * city
   * @nullable
   */
  city?: string | null;
  /**
   * Company name
   * @nullable
   */
  company?: string | null;
  /**
   * Country code
   * @nullable
   */
  countryCode?: MsServicesAccountOVHCountryCode;
  /**
   * Creation date
   * @nullable
   */
  readonly creationDate?: string | null;
  /**
   * Description
   * @nullable
   */
  description?: string | null;
  /**
   * Account display name
   * @nullable
   */
  displayName?: string | null;
  /**
   * Fax number
   * @nullable
   */
  fax?: MsServicesAccountOVHFax;
  /**
   * Account first name
   * @nullable
   */
  firstName?: string | null;
  /**
   * GUID for user in active directory
   * @nullable
   */
  readonly guid?: string | null;
  /** Account id */
  readonly id?: number;
  /**
   * Account initials
   * @nullable
   */
  initials?: string | null;
  /**
   * Job Department
   * @nullable
   */
  jobDepartment?: string | null;
  /**
   * Job title
   * @nullable
   */
  jobTitle?: string | null;
  /**
   * Last logoff
   * @nullable
   */
  readonly lastLogoffDate?: string | null;
  /**
   * Last logon
   * @nullable
   */
  readonly lastLogonDate?: string | null;
  /**
   * Account last name
   * @nullable
   */
  lastName?: string | null;
  /**
   * Last update
   * @nullable
   */
  readonly lastUpdateDate?: string | null;
  /**
   * Mobile phone
   * @nullable
   */
  mobile?: MsServicesAccountOVHMobile;
  /**
   * Job office
   * @nullable
   */
  office?: string | null;
  /**
   * Time of account's password last update
   * @nullable
   */
  readonly passwordLastUpdate?: string | null;
  /**
   * Phone number
   * @nullable
   */
  phone?: MsServicesAccountOVHPhone;
  /**
   * Postal code
   * @nullable
   */
  postalCode?: string | null;
  /**
   * region
   * @nullable
   */
  region?: string | null;
  /**
   * SAM account name
   * @nullable
   */
  readonly SAMAccountName?: string | null;
  /** Account state */
  readonly state?: MsServicesObjectStateEnumOVH;
  /**
   * Street address
   * @nullable
   */
  streetAddress?: string | null;
  /** Pending task for this account */
  readonly taskPendingId?: number;
  /** User Principal Name */
  userPrincipalName?: string;
}

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Country Code iso
 */
export type EmailExchangeCountryCodeEnumOVH = typeof EmailExchangeCountryCodeEnumOVH[keyof typeof EmailExchangeCountryCodeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailExchangeCountryCodeEnumOVH = {
  AC: 'AC',
  AD: 'AD',
  AE: 'AE',
  AF: 'AF',
  AG: 'AG',
  AI: 'AI',
  AL: 'AL',
  AM: 'AM',
  AO: 'AO',
  AQ: 'AQ',
  AR: 'AR',
  AS: 'AS',
  AT: 'AT',
  AU: 'AU',
  AW: 'AW',
  AX: 'AX',
  AZ: 'AZ',
  BA: 'BA',
  BB: 'BB',
  BD: 'BD',
  BE: 'BE',
  BF: 'BF',
  BG: 'BG',
  BH: 'BH',
  BI: 'BI',
  BJ: 'BJ',
  BL: 'BL',
  BM: 'BM',
  BN: 'BN',
  BO: 'BO',
  BQ: 'BQ',
  BR: 'BR',
  BS: 'BS',
  BT: 'BT',
  BW: 'BW',
  BY: 'BY',
  BZ: 'BZ',
  CA: 'CA',
  CC: 'CC',
  CD: 'CD',
  CF: 'CF',
  CG: 'CG',
  CH: 'CH',
  CI: 'CI',
  CK: 'CK',
  CL: 'CL',
  CM: 'CM',
  CN: 'CN',
  CO: 'CO',
  CR: 'CR',
  CU: 'CU',
  CV: 'CV',
  CW: 'CW',
  CX: 'CX',
  CY: 'CY',
  CZ: 'CZ',
  DE: 'DE',
  DG: 'DG',
  DJ: 'DJ',
  DK: 'DK',
  DM: 'DM',
  DO: 'DO',
  DZ: 'DZ',
  EA: 'EA',
  EC: 'EC',
  EE: 'EE',
  EG: 'EG',
  EH: 'EH',
  ER: 'ER',
  ES: 'ES',
  ET: 'ET',
  FI: 'FI',
  FJ: 'FJ',
  FK: 'FK',
  FM: 'FM',
  FO: 'FO',
  FR: 'FR',
  GA: 'GA',
  GB: 'GB',
  GD: 'GD',
  GE: 'GE',
  GF: 'GF',
  GG: 'GG',
  GH: 'GH',
  GI: 'GI',
  GL: 'GL',
  GM: 'GM',
  GN: 'GN',
  GP: 'GP',
  GQ: 'GQ',
  GR: 'GR',
  GS: 'GS',
  GT: 'GT',
  GU: 'GU',
  GW: 'GW',
  GY: 'GY',
  HK: 'HK',
  HN: 'HN',
  HR: 'HR',
  HT: 'HT',
  HU: 'HU',
  IC: 'IC',
  ID: 'ID',
  IE: 'IE',
  IL: 'IL',
  IM: 'IM',
  IN: 'IN',
  IO: 'IO',
  IQ: 'IQ',
  IR: 'IR',
  IS: 'IS',
  IT: 'IT',
  JE: 'JE',
  JM: 'JM',
  JO: 'JO',
  JP: 'JP',
  KE: 'KE',
  KG: 'KG',
  KH: 'KH',
  KI: 'KI',
  KM: 'KM',
  KN: 'KN',
  KP: 'KP',
  KR: 'KR',
  KW: 'KW',
  KY: 'KY',
  KZ: 'KZ',
  LA: 'LA',
  LB: 'LB',
  LC: 'LC',
  LI: 'LI',
  LK: 'LK',
  LR: 'LR',
  LS: 'LS',
  LT: 'LT',
  LU: 'LU',
  LV: 'LV',
  LY: 'LY',
  MA: 'MA',
  MC: 'MC',
  MD: 'MD',
  ME: 'ME',
  MF: 'MF',
  MG: 'MG',
  MH: 'MH',
  MK: 'MK',
  ML: 'ML',
  MM: 'MM',
  MN: 'MN',
  MO: 'MO',
  MP: 'MP',
  MQ: 'MQ',
  MR: 'MR',
  MS: 'MS',
  MT: 'MT',
  MU: 'MU',
  MV: 'MV',
  MW: 'MW',
  MX: 'MX',
  MY: 'MY',
  MZ: 'MZ',
  NA: 'NA',
  NC: 'NC',
  NE: 'NE',
  NF: 'NF',
  NG: 'NG',
  NI: 'NI',
  NL: 'NL',
  NO: 'NO',
  NP: 'NP',
  NR: 'NR',
  NU: 'NU',
  NZ: 'NZ',
  OM: 'OM',
  PA: 'PA',
  PE: 'PE',
  PF: 'PF',
  PG: 'PG',
  PH: 'PH',
  PK: 'PK',
  PL: 'PL',
  PM: 'PM',
  PN: 'PN',
  PR: 'PR',
  PS: 'PS',
  PT: 'PT',
  PW: 'PW',
  PY: 'PY',
  QA: 'QA',
  RE: 'RE',
  RO: 'RO',
  RS: 'RS',
  RU: 'RU',
  RW: 'RW',
  SA: 'SA',
  SB: 'SB',
  SC: 'SC',
  SD: 'SD',
  SE: 'SE',
  SG: 'SG',
  SH: 'SH',
  SI: 'SI',
  SJ: 'SJ',
  SK: 'SK',
  SL: 'SL',
  SM: 'SM',
  SN: 'SN',
  SO: 'SO',
  SR: 'SR',
  SS: 'SS',
  ST: 'ST',
  SV: 'SV',
  SX: 'SX',
  SY: 'SY',
  SZ: 'SZ',
  TA: 'TA',
  TC: 'TC',
  TD: 'TD',
  TF: 'TF',
  TG: 'TG',
  TH: 'TH',
  TJ: 'TJ',
  TK: 'TK',
  TL: 'TL',
  TM: 'TM',
  TN: 'TN',
  TO: 'TO',
  TR: 'TR',
  TT: 'TT',
  TV: 'TV',
  TW: 'TW',
  TZ: 'TZ',
  UA: 'UA',
  UG: 'UG',
  UM: 'UM',
  US: 'US',
  UY: 'UY',
  UZ: 'UZ',
  VA: 'VA',
  VC: 'VC',
  VE: 'VE',
  VG: 'VG',
  VI: 'VI',
  VN: 'VN',
  VU: 'VU',
  WF: 'WF',
  WS: 'WS',
  XK: 'XK',
  YE: 'YE',
  YT: 'YT',
  ZA: 'ZA',
  ZM: 'ZM',
  ZW: 'ZW',
} as const;

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;


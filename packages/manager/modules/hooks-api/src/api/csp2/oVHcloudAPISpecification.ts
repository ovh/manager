/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetSaasCsp2Params,
  GetSaasCsp2ServiceNameUsageStatisticsParams,
  SaasCsp2BillingStatisticsOVH,
  SaasCsp2OfficeLicenceOVH,
  SaasCsp2OfficeSubscriptionOVH,
  SaasCsp2OfficeTaskOVH,
  SaasCsp2OfficeTenantOVH,
  SaasCsp2OfficeTenantWithIAMOVH,
  SaasCsp2StatisticsOVH,
  SaasCsp2SubscriptionChangeQuantityCreationOVH,
  SaasCsp2SubscriptionCreationOVH,
  SaasCsp2SubscriptionOrderAddonCreationOVH,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getSaasCsp2 = (
    params?: GetSaasCsp2Params,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/saas/csp2`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSaasCsp2QueryKey = (params?: GetSaasCsp2Params,) => {
    return [`/saas/csp2`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSaasCsp2QueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2>>, TError = unknown>(params?: GetSaasCsp2Params, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2QueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2>>> = ({ signal }) => getSaasCsp2(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2QueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2>>>
export type GetSaasCsp2QueryError = unknown


export function useGetSaasCsp2<TData = Awaited<ReturnType<typeof getSaasCsp2>>, TError = unknown>(
 params: undefined |  GetSaasCsp2Params, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2<TData = Awaited<ReturnType<typeof getSaasCsp2>>, TError = unknown>(
 params?: GetSaasCsp2Params, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2<TData = Awaited<ReturnType<typeof getSaasCsp2>>, TError = unknown>(
 params?: GetSaasCsp2Params, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetSaasCsp2<TData = Awaited<ReturnType<typeof getSaasCsp2>>, TError = unknown>(
 params?: GetSaasCsp2Params, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2QueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getSaasCsp2ServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SaasCsp2OfficeTenantWithIAMOVH>(
      {url: `/saas/csp2/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSaasCsp2ServiceNameQueryKey = (serviceName: string,) => {
    return [`/saas/csp2/${serviceName}`] as const;
    }

    
export const getGetSaasCsp2ServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2ServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2ServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2ServiceName>>> = ({ signal }) => getSaasCsp2ServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2ServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2ServiceName>>>
export type GetSaasCsp2ServiceNameQueryError = unknown


export function useGetSaasCsp2ServiceName<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceName<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceName<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSaasCsp2ServiceName<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2ServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putSaasCsp2ServiceName = (
    serviceName: string,
    saasCsp2OfficeTenantOVH: NonReadonly<SaasCsp2OfficeTenantOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/saas/csp2/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: saasCsp2OfficeTenantOVH
    },
      options);
    }
  


export const getPutSaasCsp2ServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSaasCsp2ServiceName>>, TError,{serviceName: string;data: NonReadonly<SaasCsp2OfficeTenantOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSaasCsp2ServiceName>>, TError,{serviceName: string;data: NonReadonly<SaasCsp2OfficeTenantOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSaasCsp2ServiceName>>, {serviceName: string;data: NonReadonly<SaasCsp2OfficeTenantOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putSaasCsp2ServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSaasCsp2ServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putSaasCsp2ServiceName>>>
    export type PutSaasCsp2ServiceNameMutationBody = NonReadonly<SaasCsp2OfficeTenantOVH>
    export type PutSaasCsp2ServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutSaasCsp2ServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSaasCsp2ServiceName>>, TError,{serviceName: string;data: NonReadonly<SaasCsp2OfficeTenantOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSaasCsp2ServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<SaasCsp2OfficeTenantOVH>},
        TContext
      > => {

      const mutationOptions = getPutSaasCsp2ServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the current billing period's usage peak for each subscription
 */
export const getSaasCsp2ServiceNameBillingPeriodPeaks = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SaasCsp2BillingStatisticsOVH>(
      {url: `/saas/csp2/${serviceName}/billingPeriodPeaks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSaasCsp2ServiceNameBillingPeriodPeaksQueryKey = (serviceName: string,) => {
    return [`/saas/csp2/${serviceName}/billingPeriodPeaks`] as const;
    }

    
export const getGetSaasCsp2ServiceNameBillingPeriodPeaksQueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2ServiceNameBillingPeriodPeaksQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>> = ({ signal }) => getSaasCsp2ServiceNameBillingPeriodPeaks(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2ServiceNameBillingPeriodPeaksQueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>>
export type GetSaasCsp2ServiceNameBillingPeriodPeaksQueryError = unknown


export function useGetSaasCsp2ServiceNameBillingPeriodPeaks<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameBillingPeriodPeaks<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameBillingPeriodPeaks<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the current billing period's usage peak for each subscription
 */

export function useGetSaasCsp2ServiceNameBillingPeriodPeaks<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameBillingPeriodPeaks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2ServiceNameBillingPeriodPeaksQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Licenses available for order
 */
export const getSaasCsp2ServiceNameOrderableLicenses = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/saas/csp2/${serviceName}/orderableLicenses`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSaasCsp2ServiceNameOrderableLicensesQueryKey = (serviceName: string,) => {
    return [`/saas/csp2/${serviceName}/orderableLicenses`] as const;
    }

    
export const getGetSaasCsp2ServiceNameOrderableLicensesQueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2ServiceNameOrderableLicensesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>> = ({ signal }) => getSaasCsp2ServiceNameOrderableLicenses(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2ServiceNameOrderableLicensesQueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>>
export type GetSaasCsp2ServiceNameOrderableLicensesQueryError = unknown


export function useGetSaasCsp2ServiceNameOrderableLicenses<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameOrderableLicenses<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameOrderableLicenses<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Licenses available for order
 */

export function useGetSaasCsp2ServiceNameOrderableLicenses<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicenses>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2ServiceNameOrderableLicensesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getSaasCsp2ServiceNameOrderableLicensesId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SaasCsp2OfficeLicenceOVH>(
      {url: `/saas/csp2/${serviceName}/orderableLicenses/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSaasCsp2ServiceNameOrderableLicensesIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/saas/csp2/${serviceName}/orderableLicenses/${id}`] as const;
    }

    
export const getGetSaasCsp2ServiceNameOrderableLicensesIdQueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2ServiceNameOrderableLicensesIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>> = ({ signal }) => getSaasCsp2ServiceNameOrderableLicensesId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2ServiceNameOrderableLicensesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>>
export type GetSaasCsp2ServiceNameOrderableLicensesIdQueryError = unknown


export function useGetSaasCsp2ServiceNameOrderableLicensesId<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameOrderableLicensesId<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameOrderableLicensesId<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSaasCsp2ServiceNameOrderableLicensesId<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameOrderableLicensesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2ServiceNameOrderableLicensesIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getSaasCsp2ServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/saas/csp2/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSaasCsp2ServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/saas/csp2/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetSaasCsp2ServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2ServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>> = ({ signal }) => getSaasCsp2ServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2ServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>>
export type GetSaasCsp2ServiceNameServiceInfosQueryError = unknown


export function useGetSaasCsp2ServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetSaasCsp2ServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2ServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putSaasCsp2ServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/saas/csp2/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutSaasCsp2ServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSaasCsp2ServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSaasCsp2ServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSaasCsp2ServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putSaasCsp2ServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSaasCsp2ServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putSaasCsp2ServiceNameServiceInfos>>>
    export type PutSaasCsp2ServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutSaasCsp2ServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutSaasCsp2ServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSaasCsp2ServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSaasCsp2ServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutSaasCsp2ServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Subscriptions associated to this office tenant
 */
export const getSaasCsp2ServiceNameSubscription = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/saas/csp2/${serviceName}/subscription`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSaasCsp2ServiceNameSubscriptionQueryKey = (serviceName: string,) => {
    return [`/saas/csp2/${serviceName}/subscription`] as const;
    }

    
export const getGetSaasCsp2ServiceNameSubscriptionQueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2ServiceNameSubscriptionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>> = ({ signal }) => getSaasCsp2ServiceNameSubscription(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2ServiceNameSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>>
export type GetSaasCsp2ServiceNameSubscriptionQueryError = unknown


export function useGetSaasCsp2ServiceNameSubscription<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameSubscription<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameSubscription<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Subscriptions associated to this office tenant
 */

export function useGetSaasCsp2ServiceNameSubscription<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2ServiceNameSubscriptionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a subscription to this tenant
 */
export const postSaasCsp2ServiceNameSubscription = (
    serviceName: string,
    saasCsp2SubscriptionCreationOVH: SaasCsp2SubscriptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SaasCsp2OfficeTaskOVH>(
      {url: `/saas/csp2/${serviceName}/subscription`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: saasCsp2SubscriptionCreationOVH, signal
    },
      options);
    }
  


export const getPostSaasCsp2ServiceNameSubscriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscription>>, TError,{serviceName: string;data: SaasCsp2SubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscription>>, TError,{serviceName: string;data: SaasCsp2SubscriptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscription>>, {serviceName: string;data: SaasCsp2SubscriptionCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSaasCsp2ServiceNameSubscription(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSaasCsp2ServiceNameSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscription>>>
    export type PostSaasCsp2ServiceNameSubscriptionMutationBody = SaasCsp2SubscriptionCreationOVH
    export type PostSaasCsp2ServiceNameSubscriptionMutationError = unknown

    /**
 * @summary Add a subscription to this tenant
 */
export const usePostSaasCsp2ServiceNameSubscription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscription>>, TError,{serviceName: string;data: SaasCsp2SubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscription>>,
        TError,
        {serviceName: string;data: SaasCsp2SubscriptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostSaasCsp2ServiceNameSubscriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a subscription from this tenant
 */
export const deleteSaasCsp2ServiceNameSubscriptionId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<SaasCsp2OfficeTaskOVH>(
      {url: `/saas/csp2/${serviceName}/subscription/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSaasCsp2ServiceNameSubscriptionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSaasCsp2ServiceNameSubscriptionId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSaasCsp2ServiceNameSubscriptionId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSaasCsp2ServiceNameSubscriptionId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteSaasCsp2ServiceNameSubscriptionId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSaasCsp2ServiceNameSubscriptionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSaasCsp2ServiceNameSubscriptionId>>>
    
    export type DeleteSaasCsp2ServiceNameSubscriptionIdMutationError = unknown

    /**
 * @summary Delete a subscription from this tenant
 */
export const useDeleteSaasCsp2ServiceNameSubscriptionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSaasCsp2ServiceNameSubscriptionId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSaasCsp2ServiceNameSubscriptionId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSaasCsp2ServiceNameSubscriptionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSaasCsp2ServiceNameSubscriptionId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SaasCsp2OfficeSubscriptionOVH>(
      {url: `/saas/csp2/${serviceName}/subscription/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSaasCsp2ServiceNameSubscriptionIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/saas/csp2/${serviceName}/subscription/${id}`] as const;
    }

    
export const getGetSaasCsp2ServiceNameSubscriptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2ServiceNameSubscriptionIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>> = ({ signal }) => getSaasCsp2ServiceNameSubscriptionId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2ServiceNameSubscriptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>>
export type GetSaasCsp2ServiceNameSubscriptionIdQueryError = unknown


export function useGetSaasCsp2ServiceNameSubscriptionId<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameSubscriptionId<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameSubscriptionId<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSaasCsp2ServiceNameSubscriptionId<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2ServiceNameSubscriptionIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Addon subscriptions associated to this office subscription
 */
export const getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/saas/csp2/${serviceName}/subscription/${id}/addonsSubscriptionIds`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIdsQueryKey = (serviceName: string,
    id: number,) => {
    return [`/saas/csp2/${serviceName}/subscription/${id}/addonsSubscriptionIds`] as const;
    }

    
export const getGetSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIdsQueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIdsQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>> = ({ signal }) => getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIdsQueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>>
export type GetSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIdsQueryError = unknown


export function useGetSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Addon subscriptions associated to this office subscription
 */

export function useGetSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIds>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIdsQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Gives a list of licenses ids that can be ordered as an addon for this subscription
 */
export const getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/saas/csp2/${serviceName}/subscription/${id}/availableAddonLicenses`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicensesQueryKey = (serviceName: string,
    id: number,) => {
    return [`/saas/csp2/${serviceName}/subscription/${id}/availableAddonLicenses`] as const;
    }

    
export const getGetSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicensesQueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicensesQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>> = ({ signal }) => getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicensesQueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>>
export type GetSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicensesQueryError = unknown


export function useGetSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Gives a list of licenses ids that can be ordered as an addon for this subscription
 */

export function useGetSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicenses>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicensesQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the quantity of seats in the subscription
 */
export const postSaasCsp2ServiceNameSubscriptionIdChangeQuantity = (
    serviceName: string,
    id: number,
    saasCsp2SubscriptionChangeQuantityCreationOVH: SaasCsp2SubscriptionChangeQuantityCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SaasCsp2OfficeTaskOVH>(
      {url: `/saas/csp2/${serviceName}/subscription/${id}/changeQuantity`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: saasCsp2SubscriptionChangeQuantityCreationOVH, signal
    },
      options);
    }
  


export const getPostSaasCsp2ServiceNameSubscriptionIdChangeQuantityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscriptionIdChangeQuantity>>, TError,{serviceName: string;id: number;data: SaasCsp2SubscriptionChangeQuantityCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscriptionIdChangeQuantity>>, TError,{serviceName: string;id: number;data: SaasCsp2SubscriptionChangeQuantityCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscriptionIdChangeQuantity>>, {serviceName: string;id: number;data: SaasCsp2SubscriptionChangeQuantityCreationOVH}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  postSaasCsp2ServiceNameSubscriptionIdChangeQuantity(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSaasCsp2ServiceNameSubscriptionIdChangeQuantityMutationResult = NonNullable<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscriptionIdChangeQuantity>>>
    export type PostSaasCsp2ServiceNameSubscriptionIdChangeQuantityMutationBody = SaasCsp2SubscriptionChangeQuantityCreationOVH
    export type PostSaasCsp2ServiceNameSubscriptionIdChangeQuantityMutationError = unknown

    /**
 * @summary Change the quantity of seats in the subscription
 */
export const usePostSaasCsp2ServiceNameSubscriptionIdChangeQuantity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscriptionIdChangeQuantity>>, TError,{serviceName: string;id: number;data: SaasCsp2SubscriptionChangeQuantityCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscriptionIdChangeQuantity>>,
        TError,
        {serviceName: string;id: number;data: SaasCsp2SubscriptionChangeQuantityCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostSaasCsp2ServiceNameSubscriptionIdChangeQuantityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Creates a new subscription as an addon for this subscription
 */
export const postSaasCsp2ServiceNameSubscriptionIdOrderAddon = (
    serviceName: string,
    id: number,
    saasCsp2SubscriptionOrderAddonCreationOVH: SaasCsp2SubscriptionOrderAddonCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SaasCsp2OfficeTaskOVH>(
      {url: `/saas/csp2/${serviceName}/subscription/${id}/orderAddon`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: saasCsp2SubscriptionOrderAddonCreationOVH, signal
    },
      options);
    }
  


export const getPostSaasCsp2ServiceNameSubscriptionIdOrderAddonMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscriptionIdOrderAddon>>, TError,{serviceName: string;id: number;data: SaasCsp2SubscriptionOrderAddonCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscriptionIdOrderAddon>>, TError,{serviceName: string;id: number;data: SaasCsp2SubscriptionOrderAddonCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscriptionIdOrderAddon>>, {serviceName: string;id: number;data: SaasCsp2SubscriptionOrderAddonCreationOVH}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  postSaasCsp2ServiceNameSubscriptionIdOrderAddon(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSaasCsp2ServiceNameSubscriptionIdOrderAddonMutationResult = NonNullable<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscriptionIdOrderAddon>>>
    export type PostSaasCsp2ServiceNameSubscriptionIdOrderAddonMutationBody = SaasCsp2SubscriptionOrderAddonCreationOVH
    export type PostSaasCsp2ServiceNameSubscriptionIdOrderAddonMutationError = unknown

    /**
 * @summary Creates a new subscription as an addon for this subscription
 */
export const usePostSaasCsp2ServiceNameSubscriptionIdOrderAddon = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscriptionIdOrderAddon>>, TError,{serviceName: string;id: number;data: SaasCsp2SubscriptionOrderAddonCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSaasCsp2ServiceNameSubscriptionIdOrderAddon>>,
        TError,
        {serviceName: string;id: number;data: SaasCsp2SubscriptionOrderAddonCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostSaasCsp2ServiceNameSubscriptionIdOrderAddonMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Pending tasks of this tenant
 */
export const getSaasCsp2ServiceNameTask = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/saas/csp2/${serviceName}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSaasCsp2ServiceNameTaskQueryKey = (serviceName: string,) => {
    return [`/saas/csp2/${serviceName}/task`] as const;
    }

    
export const getGetSaasCsp2ServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2ServiceNameTaskQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>> = ({ signal }) => getSaasCsp2ServiceNameTask(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2ServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>>
export type GetSaasCsp2ServiceNameTaskQueryError = unknown


export function useGetSaasCsp2ServiceNameTask<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameTask<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameTask<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Pending tasks of this tenant
 */

export function useGetSaasCsp2ServiceNameTask<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2ServiceNameTaskQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getSaasCsp2ServiceNameTaskId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SaasCsp2OfficeTaskOVH>(
      {url: `/saas/csp2/${serviceName}/task/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSaasCsp2ServiceNameTaskIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/saas/csp2/${serviceName}/task/${id}`] as const;
    }

    
export const getGetSaasCsp2ServiceNameTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2ServiceNameTaskIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>> = ({ signal }) => getSaasCsp2ServiceNameTaskId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2ServiceNameTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>>
export type GetSaasCsp2ServiceNameTaskIdQueryError = unknown


export function useGetSaasCsp2ServiceNameTaskId<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameTaskId<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameTaskId<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSaasCsp2ServiceNameTaskId<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2ServiceNameTaskIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the usage statistics over the chosen period
 */
export const getSaasCsp2ServiceNameUsageStatistics = (
    serviceName: string,
    params: GetSaasCsp2ServiceNameUsageStatisticsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SaasCsp2StatisticsOVH[]>(
      {url: `/saas/csp2/${serviceName}/usageStatistics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSaasCsp2ServiceNameUsageStatisticsQueryKey = (serviceName: string,
    params: GetSaasCsp2ServiceNameUsageStatisticsParams,) => {
    return [`/saas/csp2/${serviceName}/usageStatistics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSaasCsp2ServiceNameUsageStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>, TError = unknown>(serviceName: string,
    params: GetSaasCsp2ServiceNameUsageStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSaasCsp2ServiceNameUsageStatisticsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>> = ({ signal }) => getSaasCsp2ServiceNameUsageStatistics(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSaasCsp2ServiceNameUsageStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>>
export type GetSaasCsp2ServiceNameUsageStatisticsQueryError = unknown


export function useGetSaasCsp2ServiceNameUsageStatistics<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetSaasCsp2ServiceNameUsageStatisticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameUsageStatistics<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetSaasCsp2ServiceNameUsageStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSaasCsp2ServiceNameUsageStatistics<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetSaasCsp2ServiceNameUsageStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the usage statistics over the chosen period
 */

export function useGetSaasCsp2ServiceNameUsageStatistics<TData = Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetSaasCsp2ServiceNameUsageStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSaasCsp2ServiceNameUsageStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSaasCsp2ServiceNameUsageStatisticsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





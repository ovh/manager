/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetPackSiptrunkParams,
  PackSiptrunkPackSipTrunkWithIAMOVH,
  PostPackSiptrunkPackNameChangeContactBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getPackSiptrunk = (
    params?: GetPackSiptrunkParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/pack/siptrunk`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetPackSiptrunkQueryKey = (params?: GetPackSiptrunkParams,) => {
    return [`/pack/siptrunk`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPackSiptrunkQueryOptions = <TData = Awaited<ReturnType<typeof getPackSiptrunk>>, TError = unknown>(params?: GetPackSiptrunkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPackSiptrunkQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPackSiptrunk>>> = ({ signal }) => getPackSiptrunk(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPackSiptrunkQueryResult = NonNullable<Awaited<ReturnType<typeof getPackSiptrunk>>>
export type GetPackSiptrunkQueryError = unknown


export function useGetPackSiptrunk<TData = Awaited<ReturnType<typeof getPackSiptrunk>>, TError = unknown>(
 params: undefined |  GetPackSiptrunkParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPackSiptrunk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPackSiptrunk<TData = Awaited<ReturnType<typeof getPackSiptrunk>>, TError = unknown>(
 params?: GetPackSiptrunkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPackSiptrunk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPackSiptrunk<TData = Awaited<ReturnType<typeof getPackSiptrunk>>, TError = unknown>(
 params?: GetPackSiptrunkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetPackSiptrunk<TData = Awaited<ReturnType<typeof getPackSiptrunk>>, TError = unknown>(
 params?: GetPackSiptrunkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPackSiptrunkQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getPackSiptrunkPackName = (
    packName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<PackSiptrunkPackSipTrunkWithIAMOVH>(
      {url: `/pack/siptrunk/${packName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPackSiptrunkPackNameQueryKey = (packName: string,) => {
    return [`/pack/siptrunk/${packName}`] as const;
    }

    
export const getGetPackSiptrunkPackNameQueryOptions = <TData = Awaited<ReturnType<typeof getPackSiptrunkPackName>>, TError = unknown>(packName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunkPackName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPackSiptrunkPackNameQueryKey(packName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPackSiptrunkPackName>>> = ({ signal }) => getPackSiptrunkPackName(packName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(packName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunkPackName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPackSiptrunkPackNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPackSiptrunkPackName>>>
export type GetPackSiptrunkPackNameQueryError = unknown


export function useGetPackSiptrunkPackName<TData = Awaited<ReturnType<typeof getPackSiptrunkPackName>>, TError = unknown>(
 packName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunkPackName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPackSiptrunkPackName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPackSiptrunkPackName<TData = Awaited<ReturnType<typeof getPackSiptrunkPackName>>, TError = unknown>(
 packName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunkPackName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPackSiptrunkPackName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPackSiptrunkPackName<TData = Awaited<ReturnType<typeof getPackSiptrunkPackName>>, TError = unknown>(
 packName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunkPackName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetPackSiptrunkPackName<TData = Awaited<ReturnType<typeof getPackSiptrunkPackName>>, TError = unknown>(
 packName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunkPackName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPackSiptrunkPackNameQueryOptions(packName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a contact change procedure
 */
export const postPackSiptrunkPackNameChangeContact = (
    packName: string,
    postPackSiptrunkPackNameChangeContactBody: PostPackSiptrunkPackNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/pack/siptrunk/${packName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postPackSiptrunkPackNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostPackSiptrunkPackNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPackSiptrunkPackNameChangeContact>>, TError,{packName: string;data: PostPackSiptrunkPackNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postPackSiptrunkPackNameChangeContact>>, TError,{packName: string;data: PostPackSiptrunkPackNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPackSiptrunkPackNameChangeContact>>, {packName: string;data: PostPackSiptrunkPackNameChangeContactBody}> = (props) => {
          const {packName,data} = props ?? {};

          return  postPackSiptrunkPackNameChangeContact(packName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostPackSiptrunkPackNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postPackSiptrunkPackNameChangeContact>>>
    export type PostPackSiptrunkPackNameChangeContactMutationBody = PostPackSiptrunkPackNameChangeContactBody
    export type PostPackSiptrunkPackNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostPackSiptrunkPackNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPackSiptrunkPackNameChangeContact>>, TError,{packName: string;data: PostPackSiptrunkPackNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postPackSiptrunkPackNameChangeContact>>,
        TError,
        {packName: string;data: PostPackSiptrunkPackNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostPackSiptrunkPackNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getPackSiptrunkPackNameServiceInfos = (
    packName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/pack/siptrunk/${packName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPackSiptrunkPackNameServiceInfosQueryKey = (packName: string,) => {
    return [`/pack/siptrunk/${packName}/serviceInfos`] as const;
    }

    
export const getGetPackSiptrunkPackNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>, TError = unknown>(packName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPackSiptrunkPackNameServiceInfosQueryKey(packName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>> = ({ signal }) => getPackSiptrunkPackNameServiceInfos(packName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(packName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPackSiptrunkPackNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>>
export type GetPackSiptrunkPackNameServiceInfosQueryError = unknown


export function useGetPackSiptrunkPackNameServiceInfos<TData = Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>, TError = unknown>(
 packName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPackSiptrunkPackNameServiceInfos<TData = Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>, TError = unknown>(
 packName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPackSiptrunkPackNameServiceInfos<TData = Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>, TError = unknown>(
 packName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetPackSiptrunkPackNameServiceInfos<TData = Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>, TError = unknown>(
 packName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPackSiptrunkPackNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPackSiptrunkPackNameServiceInfosQueryOptions(packName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putPackSiptrunkPackNameServiceInfos = (
    packName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/pack/siptrunk/${packName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutPackSiptrunkPackNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPackSiptrunkPackNameServiceInfos>>, TError,{packName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putPackSiptrunkPackNameServiceInfos>>, TError,{packName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putPackSiptrunkPackNameServiceInfos>>, {packName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {packName,data} = props ?? {};

          return  putPackSiptrunkPackNameServiceInfos(packName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutPackSiptrunkPackNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putPackSiptrunkPackNameServiceInfos>>>
    export type PutPackSiptrunkPackNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutPackSiptrunkPackNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutPackSiptrunkPackNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPackSiptrunkPackNameServiceInfos>>, TError,{packName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putPackSiptrunkPackNameServiceInfos>>,
        TError,
        {packName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutPackSiptrunkPackNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

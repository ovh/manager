/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CommonEventOVH,
  CommonTaskOVH,
  DeletePublicCloudProjectProjectIdRancherRancherId500,
  GetPublicCloudProjectParams,
  GetPublicCloudProjectProjectIdRancher500,
  GetPublicCloudProjectProjectIdRancherRancherId500,
  GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan500,
  GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion500,
  GetPublicCloudProjectProjectIdRancherRancherIdEvent500,
  GetPublicCloudProjectProjectIdRancherRancherIdTask500,
  GetPublicCloudProjectProjectIdRancherRancherIdTaskTaskId500,
  PostPublicCloudProjectProjectIdRancher500,
  PostPublicCloudProjectProjectIdRancherRancherIdAdminCredentials500,
  PublicCloudProjectWithIAMOVH,
  PublicCloudRancherCredentialsOVH,
  PublicCloudRancherPlanCapabilityOVH,
  PublicCloudRancherPlanReferenceOVH,
  PublicCloudRancherRancherCreationOVH,
  PublicCloudRancherRancherOVH,
  PublicCloudRancherRancherUpdateOVH,
  PublicCloudRancherVersionCapabilityOVH,
  PublicCloudRancherVersionReferenceOVH,
  PutPublicCloudProjectProjectIdRancherRancherId500
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV2 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List all Public Cloud projects
 */
export const getPublicCloudProject = (
    params?: GetPublicCloudProjectParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<PublicCloudProjectWithIAMOVH[]>(
      {url: `/publicCloud/project`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetPublicCloudProjectQueryKey = (params?: GetPublicCloudProjectParams,) => {
    return [`/publicCloud/project`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPublicCloudProjectQueryOptions = <TData = Awaited<ReturnType<typeof getPublicCloudProject>>, TError = unknown>(params?: GetPublicCloudProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPublicCloudProjectQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicCloudProject>>> = ({ signal }) => getPublicCloudProject(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPublicCloudProjectQueryResult = NonNullable<Awaited<ReturnType<typeof getPublicCloudProject>>>
export type GetPublicCloudProjectQueryError = unknown


export function useGetPublicCloudProject<TData = Awaited<ReturnType<typeof getPublicCloudProject>>, TError = unknown>(
 params: undefined |  GetPublicCloudProjectParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProject<TData = Awaited<ReturnType<typeof getPublicCloudProject>>, TError = unknown>(
 params?: GetPublicCloudProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProject<TData = Awaited<ReturnType<typeof getPublicCloudProject>>, TError = unknown>(
 params?: GetPublicCloudProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all Public Cloud projects
 */

export function useGetPublicCloudProject<TData = Awaited<ReturnType<typeof getPublicCloudProject>>, TError = unknown>(
 params?: GetPublicCloudProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPublicCloudProjectQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get details on a Public Cloud project
 */
export const getPublicCloudProjectProjectId = (
    projectId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<PublicCloudProjectWithIAMOVH>(
      {url: `/publicCloud/project/${projectId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPublicCloudProjectProjectIdQueryKey = (projectId: string,) => {
    return [`/publicCloud/project/${projectId}`] as const;
    }

    
export const getGetPublicCloudProjectProjectIdQueryOptions = <TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>, TError = unknown>(projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPublicCloudProjectProjectIdQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>> = ({ signal }) => getPublicCloudProjectProjectId(projectId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPublicCloudProjectProjectIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>>
export type GetPublicCloudProjectProjectIdQueryError = unknown


export function useGetPublicCloudProjectProjectId<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>, TError = unknown>(
 projectId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectId<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>, TError = unknown>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectId<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>, TError = unknown>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details on a Public Cloud project
 */

export function useGetPublicCloudProjectProjectId<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>, TError = unknown>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPublicCloudProjectProjectIdQueryOptions(projectId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List managed Rancher services
 */
export const getPublicCloudProjectProjectIdRancher = (
    projectId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<PublicCloudRancherRancherOVH[]>(
      {url: `/publicCloud/project/${projectId}/rancher`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPublicCloudProjectProjectIdRancherQueryKey = (projectId: string,) => {
    return [`/publicCloud/project/${projectId}/rancher`] as const;
    }

    
export const getGetPublicCloudProjectProjectIdRancherQueryOptions = <TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>, TError = GetPublicCloudProjectProjectIdRancher500>(projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPublicCloudProjectProjectIdRancherQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>> = ({ signal }) => getPublicCloudProjectProjectIdRancher(projectId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPublicCloudProjectProjectIdRancherQueryResult = NonNullable<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>>
export type GetPublicCloudProjectProjectIdRancherQueryError = GetPublicCloudProjectProjectIdRancher500


export function useGetPublicCloudProjectProjectIdRancher<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>, TError = GetPublicCloudProjectProjectIdRancher500>(
 projectId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancher<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>, TError = GetPublicCloudProjectProjectIdRancher500>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancher<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>, TError = GetPublicCloudProjectProjectIdRancher500>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List managed Rancher services
 */

export function useGetPublicCloudProjectProjectIdRancher<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>, TError = GetPublicCloudProjectProjectIdRancher500>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancher>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPublicCloudProjectProjectIdRancherQueryOptions(projectId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new managed Rancher service
 */
export const postPublicCloudProjectProjectIdRancher = (
    projectId: string,
    publicCloudRancherRancherCreationOVH: PublicCloudRancherRancherCreationOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<PublicCloudRancherRancherOVH>(
      {url: `/publicCloud/project/${projectId}/rancher`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: publicCloudRancherRancherCreationOVH, signal
    },
      options);
    }
  


export const getPostPublicCloudProjectProjectIdRancherMutationOptions = <TError = PostPublicCloudProjectProjectIdRancher500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPublicCloudProjectProjectIdRancher>>, TError,{projectId: string;data: PublicCloudRancherRancherCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postPublicCloudProjectProjectIdRancher>>, TError,{projectId: string;data: PublicCloudRancherRancherCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPublicCloudProjectProjectIdRancher>>, {projectId: string;data: PublicCloudRancherRancherCreationOVH}> = (props) => {
          const {projectId,data} = props ?? {};

          return  postPublicCloudProjectProjectIdRancher(projectId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostPublicCloudProjectProjectIdRancherMutationResult = NonNullable<Awaited<ReturnType<typeof postPublicCloudProjectProjectIdRancher>>>
    export type PostPublicCloudProjectProjectIdRancherMutationBody = PublicCloudRancherRancherCreationOVH
    export type PostPublicCloudProjectProjectIdRancherMutationError = PostPublicCloudProjectProjectIdRancher500

    /**
 * @summary Create a new managed Rancher service
 */
export const usePostPublicCloudProjectProjectIdRancher = <TError = PostPublicCloudProjectProjectIdRancher500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPublicCloudProjectProjectIdRancher>>, TError,{projectId: string;data: PublicCloudRancherRancherCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postPublicCloudProjectProjectIdRancher>>,
        TError,
        {projectId: string;data: PublicCloudRancherRancherCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostPublicCloudProjectProjectIdRancherMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a managed Rancher service
 */
export const deletePublicCloudProjectProjectIdRancherRancherId = (
    projectId: string,
    rancherId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<PublicCloudRancherRancherOVH>(
      {url: `/publicCloud/project/${projectId}/rancher/${rancherId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletePublicCloudProjectProjectIdRancherRancherIdMutationOptions = <TError = DeletePublicCloudProjectProjectIdRancherRancherId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePublicCloudProjectProjectIdRancherRancherId>>, TError,{projectId: string;rancherId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePublicCloudProjectProjectIdRancherRancherId>>, TError,{projectId: string;rancherId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePublicCloudProjectProjectIdRancherRancherId>>, {projectId: string;rancherId: string}> = (props) => {
          const {projectId,rancherId} = props ?? {};

          return  deletePublicCloudProjectProjectIdRancherRancherId(projectId,rancherId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePublicCloudProjectProjectIdRancherRancherIdMutationResult = NonNullable<Awaited<ReturnType<typeof deletePublicCloudProjectProjectIdRancherRancherId>>>
    
    export type DeletePublicCloudProjectProjectIdRancherRancherIdMutationError = DeletePublicCloudProjectProjectIdRancherRancherId500

    /**
 * @summary Delete a managed Rancher service
 */
export const useDeletePublicCloudProjectProjectIdRancherRancherId = <TError = DeletePublicCloudProjectProjectIdRancherRancherId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePublicCloudProjectProjectIdRancherRancherId>>, TError,{projectId: string;rancherId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deletePublicCloudProjectProjectIdRancherRancherId>>,
        TError,
        {projectId: string;rancherId: string},
        TContext
      > => {

      const mutationOptions = getDeletePublicCloudProjectProjectIdRancherRancherIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a managed Rancher service
 */
export const getPublicCloudProjectProjectIdRancherRancherId = (
    projectId: string,
    rancherId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<PublicCloudRancherRancherOVH>(
      {url: `/publicCloud/project/${projectId}/rancher/${rancherId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPublicCloudProjectProjectIdRancherRancherIdQueryKey = (projectId: string,
    rancherId: string,) => {
    return [`/publicCloud/project/${projectId}/rancher/${rancherId}`] as const;
    }

    
export const getGetPublicCloudProjectProjectIdRancherRancherIdQueryOptions = <TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>, TError = GetPublicCloudProjectProjectIdRancherRancherId500>(projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPublicCloudProjectProjectIdRancherRancherIdQueryKey(projectId,rancherId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>> = ({ signal }) => getPublicCloudProjectProjectIdRancherRancherId(projectId,rancherId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId && rancherId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPublicCloudProjectProjectIdRancherRancherIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>>
export type GetPublicCloudProjectProjectIdRancherRancherIdQueryError = GetPublicCloudProjectProjectIdRancherRancherId500


export function useGetPublicCloudProjectProjectIdRancherRancherId<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>, TError = GetPublicCloudProjectProjectIdRancherRancherId500>(
 projectId: string,
    rancherId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancherRancherId<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>, TError = GetPublicCloudProjectProjectIdRancherRancherId500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancherRancherId<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>, TError = GetPublicCloudProjectProjectIdRancherRancherId500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a managed Rancher service
 */

export function useGetPublicCloudProjectProjectIdRancherRancherId<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>, TError = GetPublicCloudProjectProjectIdRancherRancherId500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPublicCloudProjectProjectIdRancherRancherIdQueryOptions(projectId,rancherId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update an existing managed Rancher service
 */
export const putPublicCloudProjectProjectIdRancherRancherId = (
    projectId: string,
    rancherId: string,
    publicCloudRancherRancherUpdateOVH: PublicCloudRancherRancherUpdateOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<PublicCloudRancherRancherOVH>(
      {url: `/publicCloud/project/${projectId}/rancher/${rancherId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: publicCloudRancherRancherUpdateOVH
    },
      options);
    }
  


export const getPutPublicCloudProjectProjectIdRancherRancherIdMutationOptions = <TError = PutPublicCloudProjectProjectIdRancherRancherId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPublicCloudProjectProjectIdRancherRancherId>>, TError,{projectId: string;rancherId: string;data: PublicCloudRancherRancherUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putPublicCloudProjectProjectIdRancherRancherId>>, TError,{projectId: string;rancherId: string;data: PublicCloudRancherRancherUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putPublicCloudProjectProjectIdRancherRancherId>>, {projectId: string;rancherId: string;data: PublicCloudRancherRancherUpdateOVH}> = (props) => {
          const {projectId,rancherId,data} = props ?? {};

          return  putPublicCloudProjectProjectIdRancherRancherId(projectId,rancherId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutPublicCloudProjectProjectIdRancherRancherIdMutationResult = NonNullable<Awaited<ReturnType<typeof putPublicCloudProjectProjectIdRancherRancherId>>>
    export type PutPublicCloudProjectProjectIdRancherRancherIdMutationBody = PublicCloudRancherRancherUpdateOVH
    export type PutPublicCloudProjectProjectIdRancherRancherIdMutationError = PutPublicCloudProjectProjectIdRancherRancherId500

    /**
 * @summary Update an existing managed Rancher service
 */
export const usePutPublicCloudProjectProjectIdRancherRancherId = <TError = PutPublicCloudProjectProjectIdRancherRancherId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPublicCloudProjectProjectIdRancherRancherId>>, TError,{projectId: string;rancherId: string;data: PublicCloudRancherRancherUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putPublicCloudProjectProjectIdRancherRancherId>>,
        TError,
        {projectId: string;rancherId: string;data: PublicCloudRancherRancherUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutPublicCloudProjectProjectIdRancherRancherIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reset the admin password
 */
export const postPublicCloudProjectProjectIdRancherRancherIdAdminCredentials = (
    projectId: string,
    rancherId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<PublicCloudRancherCredentialsOVH>(
      {url: `/publicCloud/project/${projectId}/rancher/${rancherId}/adminCredentials`, method: 'POST', signal
    },
      options);
    }
  


export const getPostPublicCloudProjectProjectIdRancherRancherIdAdminCredentialsMutationOptions = <TError = PostPublicCloudProjectProjectIdRancherRancherIdAdminCredentials500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPublicCloudProjectProjectIdRancherRancherIdAdminCredentials>>, TError,{projectId: string;rancherId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postPublicCloudProjectProjectIdRancherRancherIdAdminCredentials>>, TError,{projectId: string;rancherId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPublicCloudProjectProjectIdRancherRancherIdAdminCredentials>>, {projectId: string;rancherId: string}> = (props) => {
          const {projectId,rancherId} = props ?? {};

          return  postPublicCloudProjectProjectIdRancherRancherIdAdminCredentials(projectId,rancherId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostPublicCloudProjectProjectIdRancherRancherIdAdminCredentialsMutationResult = NonNullable<Awaited<ReturnType<typeof postPublicCloudProjectProjectIdRancherRancherIdAdminCredentials>>>
    
    export type PostPublicCloudProjectProjectIdRancherRancherIdAdminCredentialsMutationError = PostPublicCloudProjectProjectIdRancherRancherIdAdminCredentials500

    /**
 * @summary Reset the admin password
 */
export const usePostPublicCloudProjectProjectIdRancherRancherIdAdminCredentials = <TError = PostPublicCloudProjectProjectIdRancherRancherIdAdminCredentials500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPublicCloudProjectProjectIdRancherRancherIdAdminCredentials>>, TError,{projectId: string;rancherId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postPublicCloudProjectProjectIdRancherRancherIdAdminCredentials>>,
        TError,
        {projectId: string;rancherId: string},
        TContext
      > => {

      const mutationOptions = getPostPublicCloudProjectProjectIdRancherRancherIdAdminCredentialsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available and current plans for the given managed Rancher service
 */
export const getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan = (
    projectId: string,
    rancherId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<PublicCloudRancherPlanCapabilityOVH[]>(
      {url: `/publicCloud/project/${projectId}/rancher/${rancherId}/capabilities/plan`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlanQueryKey = (projectId: string,
    rancherId: string,) => {
    return [`/publicCloud/project/${projectId}/rancher/${rancherId}/capabilities/plan`] as const;
    }

    
export const getGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlanQueryOptions = <TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan500>(projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlanQueryKey(projectId,rancherId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>> = ({ signal }) => getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan(projectId,rancherId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId && rancherId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlanQueryResult = NonNullable<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>>
export type GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlanQueryError = GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan500


export function useGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan500>(
 projectId: string,
    rancherId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available and current plans for the given managed Rancher service
 */

export function useGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlanQueryOptions(projectId,rancherId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available and current versions for the given managed Rancher service
 */
export const getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion = (
    projectId: string,
    rancherId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<PublicCloudRancherVersionCapabilityOVH[]>(
      {url: `/publicCloud/project/${projectId}/rancher/${rancherId}/capabilities/version`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersionQueryKey = (projectId: string,
    rancherId: string,) => {
    return [`/publicCloud/project/${projectId}/rancher/${rancherId}/capabilities/version`] as const;
    }

    
export const getGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersionQueryOptions = <TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion500>(projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersionQueryKey(projectId,rancherId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>> = ({ signal }) => getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion(projectId,rancherId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId && rancherId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersionQueryResult = NonNullable<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>>
export type GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersionQueryError = GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion500


export function useGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion500>(
 projectId: string,
    rancherId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available and current versions for the given managed Rancher service
 */

export function useGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersionQueryOptions(projectId,rancherId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all events related to the managed Rancher service
 */
export const getPublicCloudProjectProjectIdRancherRancherIdEvent = (
    projectId: string,
    rancherId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonEventOVH[]>(
      {url: `/publicCloud/project/${projectId}/rancher/${rancherId}/event`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPublicCloudProjectProjectIdRancherRancherIdEventQueryKey = (projectId: string,
    rancherId: string,) => {
    return [`/publicCloud/project/${projectId}/rancher/${rancherId}/event`] as const;
    }

    
export const getGetPublicCloudProjectProjectIdRancherRancherIdEventQueryOptions = <TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdEvent500>(projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPublicCloudProjectProjectIdRancherRancherIdEventQueryKey(projectId,rancherId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>> = ({ signal }) => getPublicCloudProjectProjectIdRancherRancherIdEvent(projectId,rancherId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId && rancherId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPublicCloudProjectProjectIdRancherRancherIdEventQueryResult = NonNullable<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>>
export type GetPublicCloudProjectProjectIdRancherRancherIdEventQueryError = GetPublicCloudProjectProjectIdRancherRancherIdEvent500


export function useGetPublicCloudProjectProjectIdRancherRancherIdEvent<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdEvent500>(
 projectId: string,
    rancherId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancherRancherIdEvent<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdEvent500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancherRancherIdEvent<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdEvent500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all events related to the managed Rancher service
 */

export function useGetPublicCloudProjectProjectIdRancherRancherIdEvent<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdEvent500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPublicCloudProjectProjectIdRancherRancherIdEventQueryOptions(projectId,rancherId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all asynchronous operations related to the managed Rancher service
 */
export const getPublicCloudProjectProjectIdRancherRancherIdTask = (
    projectId: string,
    rancherId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH[]>(
      {url: `/publicCloud/project/${projectId}/rancher/${rancherId}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPublicCloudProjectProjectIdRancherRancherIdTaskQueryKey = (projectId: string,
    rancherId: string,) => {
    return [`/publicCloud/project/${projectId}/rancher/${rancherId}/task`] as const;
    }

    
export const getGetPublicCloudProjectProjectIdRancherRancherIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdTask500>(projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPublicCloudProjectProjectIdRancherRancherIdTaskQueryKey(projectId,rancherId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>> = ({ signal }) => getPublicCloudProjectProjectIdRancherRancherIdTask(projectId,rancherId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId && rancherId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPublicCloudProjectProjectIdRancherRancherIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>>
export type GetPublicCloudProjectProjectIdRancherRancherIdTaskQueryError = GetPublicCloudProjectProjectIdRancherRancherIdTask500


export function useGetPublicCloudProjectProjectIdRancherRancherIdTask<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdTask500>(
 projectId: string,
    rancherId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancherRancherIdTask<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdTask500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancherRancherIdTask<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdTask500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all asynchronous operations related to the managed Rancher service
 */

export function useGetPublicCloudProjectProjectIdRancherRancherIdTask<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdTask500>(
 projectId: string,
    rancherId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPublicCloudProjectProjectIdRancherRancherIdTaskQueryOptions(projectId,rancherId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a specific task related to the managed Rancher service
 */
export const getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId = (
    projectId: string,
    rancherId: string,
    taskId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH>(
      {url: `/publicCloud/project/${projectId}/rancher/${rancherId}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPublicCloudProjectProjectIdRancherRancherIdTaskTaskIdQueryKey = (projectId: string,
    rancherId: string,
    taskId: string,) => {
    return [`/publicCloud/project/${projectId}/rancher/${rancherId}/task/${taskId}`] as const;
    }

    
export const getGetPublicCloudProjectProjectIdRancherRancherIdTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdTaskTaskId500>(projectId: string,
    rancherId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPublicCloudProjectProjectIdRancherRancherIdTaskTaskIdQueryKey(projectId,rancherId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>> = ({ signal }) => getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId(projectId,rancherId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId && rancherId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPublicCloudProjectProjectIdRancherRancherIdTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>>
export type GetPublicCloudProjectProjectIdRancherRancherIdTaskTaskIdQueryError = GetPublicCloudProjectProjectIdRancherRancherIdTaskTaskId500


export function useGetPublicCloudProjectProjectIdRancherRancherIdTaskTaskId<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdTaskTaskId500>(
 projectId: string,
    rancherId: string,
    taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancherRancherIdTaskTaskId<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdTaskTaskId500>(
 projectId: string,
    rancherId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdRancherRancherIdTaskTaskId<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdTaskTaskId500>(
 projectId: string,
    rancherId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a specific task related to the managed Rancher service
 */

export function useGetPublicCloudProjectProjectIdRancherRancherIdTaskTaskId<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>, TError = GetPublicCloudProjectProjectIdRancherRancherIdTaskTaskId500>(
 projectId: string,
    rancherId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdRancherRancherIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPublicCloudProjectProjectIdRancherRancherIdTaskTaskIdQueryOptions(projectId,rancherId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available plans for creating a managed Rancher service
 */
export const getPublicCloudProjectProjectIdReferenceRancherPlan = (
    projectId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<PublicCloudRancherPlanReferenceOVH[]>(
      {url: `/publicCloud/project/${projectId}/reference/rancher/plan`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPublicCloudProjectProjectIdReferenceRancherPlanQueryKey = (projectId: string,) => {
    return [`/publicCloud/project/${projectId}/reference/rancher/plan`] as const;
    }

    
export const getGetPublicCloudProjectProjectIdReferenceRancherPlanQueryOptions = <TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>, TError = unknown>(projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPublicCloudProjectProjectIdReferenceRancherPlanQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>> = ({ signal }) => getPublicCloudProjectProjectIdReferenceRancherPlan(projectId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPublicCloudProjectProjectIdReferenceRancherPlanQueryResult = NonNullable<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>>
export type GetPublicCloudProjectProjectIdReferenceRancherPlanQueryError = unknown


export function useGetPublicCloudProjectProjectIdReferenceRancherPlan<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>, TError = unknown>(
 projectId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdReferenceRancherPlan<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>, TError = unknown>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdReferenceRancherPlan<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>, TError = unknown>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available plans for creating a managed Rancher service
 */

export function useGetPublicCloudProjectProjectIdReferenceRancherPlan<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>, TError = unknown>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherPlan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPublicCloudProjectProjectIdReferenceRancherPlanQueryOptions(projectId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available versions for creating a managed Rancher service
 */
export const getPublicCloudProjectProjectIdReferenceRancherVersion = (
    projectId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<PublicCloudRancherVersionReferenceOVH[]>(
      {url: `/publicCloud/project/${projectId}/reference/rancher/version`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPublicCloudProjectProjectIdReferenceRancherVersionQueryKey = (projectId: string,) => {
    return [`/publicCloud/project/${projectId}/reference/rancher/version`] as const;
    }

    
export const getGetPublicCloudProjectProjectIdReferenceRancherVersionQueryOptions = <TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>, TError = unknown>(projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPublicCloudProjectProjectIdReferenceRancherVersionQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>> = ({ signal }) => getPublicCloudProjectProjectIdReferenceRancherVersion(projectId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPublicCloudProjectProjectIdReferenceRancherVersionQueryResult = NonNullable<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>>
export type GetPublicCloudProjectProjectIdReferenceRancherVersionQueryError = unknown


export function useGetPublicCloudProjectProjectIdReferenceRancherVersion<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>, TError = unknown>(
 projectId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdReferenceRancherVersion<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>, TError = unknown>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPublicCloudProjectProjectIdReferenceRancherVersion<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>, TError = unknown>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available versions for creating a managed Rancher service
 */

export function useGetPublicCloudProjectProjectIdReferenceRancherVersion<TData = Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>, TError = unknown>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicCloudProjectProjectIdReferenceRancherVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPublicCloudProjectProjectIdReferenceRancherVersionQueryOptions(projectId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





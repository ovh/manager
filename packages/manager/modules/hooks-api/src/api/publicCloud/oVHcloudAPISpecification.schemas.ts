/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
/**
 * Common error model
 */
export type GetPublicCloudProjectProjectIdRancherRancherIdTaskTaskId500 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type GetPublicCloudProjectProjectIdRancherRancherIdTask500 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type GetPublicCloudProjectProjectIdRancherRancherIdEvent500 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersion500 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type GetPublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlan500 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type PostPublicCloudProjectProjectIdRancherRancherIdAdminCredentials500 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type PutPublicCloudProjectProjectIdRancherRancherId500 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type GetPublicCloudProjectProjectIdRancherRancherId500 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type DeletePublicCloudProjectProjectIdRancherRancherId500 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type PostPublicCloudProjectProjectIdRancher500 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type GetPublicCloudProjectProjectIdRancher500 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

export type GetPublicCloudProjectParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Possible causes for a managed Rancher version being unavailable
 */
export type PublicCloudRancherVersionUnavailabilityCauseEnumOVH = typeof PublicCloudRancherVersionUnavailabilityCauseEnumOVH[keyof typeof PublicCloudRancherVersionUnavailabilityCauseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PublicCloudRancherVersionUnavailabilityCauseEnumOVH = {
  CANNOT_UPGRADE_FROM_ALPHA: 'CANNOT_UPGRADE_FROM_ALPHA',
  CANNOT_UPGRADE_MULTIPLE_VERSIONS: 'CANNOT_UPGRADE_MULTIPLE_VERSIONS',
  DEPRECATED: 'DEPRECATED',
  DISABLED: 'DISABLED',
} as const;

/**
 * Possible statuses for a managed Rancher version reference
 */
export type PublicCloudRancherVersionReferenceStatusEnumOVH = typeof PublicCloudRancherVersionReferenceStatusEnumOVH[keyof typeof PublicCloudRancherVersionReferenceStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PublicCloudRancherVersionReferenceStatusEnumOVH = {
  AVAILABLE: 'AVAILABLE',
  UNAVAILABLE: 'UNAVAILABLE',
} as const;

/**
 * Cause for an unavailability
 * @nullable
 */
export type PublicCloudRancherVersionReferenceOVHCause = PublicCloudRancherVersionUnavailabilityCauseEnumOVH | null;

/**
 * A managed Rancher service version reference, applicable to service creations
 */
export interface PublicCloudRancherVersionReferenceOVH {
  /**
   * Cause for an unavailability
   * @nullable
   */
  readonly cause?: PublicCloudRancherVersionReferenceOVHCause;
  /** Changelog URL of the version */
  readonly changelogUrl?: string;
  /**
   * Human-readable description of the unavailability cause
   * @nullable
   */
  readonly message?: string | null;
  /** Name of the version */
  readonly name?: string;
  /** Status of the version */
  readonly status?: PublicCloudRancherVersionReferenceStatusEnumOVH;
}

/**
 * Possible statuses for a managed Rancher version capability, applicable to an existing managed Rancher
 */
export type PublicCloudRancherVersionCapabilityStatusEnumOVH = typeof PublicCloudRancherVersionCapabilityStatusEnumOVH[keyof typeof PublicCloudRancherVersionCapabilityStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PublicCloudRancherVersionCapabilityStatusEnumOVH = {
  AVAILABLE: 'AVAILABLE',
  UNAVAILABLE: 'UNAVAILABLE',
} as const;

/**
 * Cause for an unavailability
 * @nullable
 */
export type PublicCloudRancherVersionCapabilityOVHCause = PublicCloudRancherVersionUnavailabilityCauseEnumOVH | null;

/**
 * A managed Rancher service version capability, applicable to an existing managed Rancher
 */
export interface PublicCloudRancherVersionCapabilityOVH {
  /**
   * Cause for an unavailability
   * @nullable
   */
  readonly cause?: PublicCloudRancherVersionCapabilityOVHCause;
  /** Changelog URL of the version */
  readonly changelogUrl?: string;
  /**
   * Human-readable description of the unavailability cause
   * @nullable
   */
  readonly message?: string | null;
  /** Name of the version */
  readonly name?: string;
  /** Status of the version */
  readonly status?: PublicCloudRancherVersionCapabilityStatusEnumOVH;
}

/**
 * A metric sample about a managed Rancher usage
 */
export interface PublicCloudRancherUsageOVH {
  /** Date of the sample */
  readonly datetime?: string;
  /** Total number of vCPUs orchestrated by the managed Rancher service through the downstream clusters */
  readonly orchestratedVcpus?: number;
}

/**
 * Possible values for managed Rancher regions
 */
export type PublicCloudRancherRegionEnumOVH = typeof PublicCloudRancherRegionEnumOVH[keyof typeof PublicCloudRancherRegionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PublicCloudRancherRegionEnumOVH = {
  EU_WEST_GRA: 'EU_WEST_GRA',
  EU_WEST_RBX: 'EU_WEST_RBX',
  EU_WEST_SBG: 'EU_WEST_SBG',
} as const;

/**
 * Target specification of the managed Rancher service
 */
export interface PublicCloudRancherRancherTargetSpecOVH {
  /** List of allowed CIDR blocks for a managed Rancher service's IP restrictions. When empty, any IP is allowed */
  ipRestrictions?: PublicCloudRancherIpRestrictionOVH[];
  /** Name of the managed Rancher service */
  name: string;
  /** Plan of the managed Rancher service. Available plans for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/plan */
  plan: PublicCloudRancherPlanEnumOVH;
  /** Version of the managed Rancher service. Available versions for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/version */
  version: string;
}

/**
 * Input for managed Rancher service update.
 */
export interface PublicCloudRancherRancherUpdateOVH {
  /** New target specification for the managed Rancher service */
  targetSpec: PublicCloudRancherRancherTargetSpecOVH;
}

/**
 * Latest metrics regarding the usage of the managed Rancher service
 * @nullable
 */
export type PublicCloudRancherRancherCurrentStateOVHUsage = PublicCloudRancherUsageOVH | null;

/**
 * Networking properties of a managed Rancher service
 * @nullable
 */
export type PublicCloudRancherRancherCurrentStateOVHNetworking = PublicCloudRancherNetworkingOVH | null;

/**
 * Current state of the managed Rancher service
 */
export interface PublicCloudRancherRancherCurrentStateOVH {
  /**
   * Bootstrap password of the managed Rancher service, returned only on creation
   * @nullable
   */
  readonly bootstrapPassword?: string | null;
  /**
   * List of allowed CIDR blocks for a managed Rancher service's IP restrictions. When empty, any IP is allowed
   * @nullable
   */
  readonly ipRestrictions?: readonly PublicCloudRancherIpRestrictionOVH[] | null;
  /** Name of the managed Rancher service */
  readonly name?: string;
  /**
   * Networking properties of a managed Rancher service
   * @nullable
   */
  readonly networking?: PublicCloudRancherRancherCurrentStateOVHNetworking;
  /** Plan of the managed Rancher service */
  readonly plan?: PublicCloudRancherPlanEnumOVH;
  /** Region of the managed Rancher service */
  readonly region?: PublicCloudRancherRegionEnumOVH;
  /**
   * URL of the managed Rancher service
   * @nullable
   */
  readonly url?: string | null;
  /**
   * Latest metrics regarding the usage of the managed Rancher service
   * @nullable
   */
  readonly usage?: PublicCloudRancherRancherCurrentStateOVHUsage;
  /** Version of the managed Rancher service */
  readonly version?: string;
}

/**
 * Target specification of the managed Rancher service
 */
export interface PublicCloudRancherRancherCreationTargetSpecOVH {
  /** Name of the managed Rancher service */
  name: string;
  /** Plan of the managed Rancher service. Available plans for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/plan */
  plan: PublicCloudRancherPlanEnumOVH;
  /** Version of the managed Rancher service. Available versions for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/version. Default is the latest version. */
  version?: string;
}

/**
 * Input parameters for creating a managed Rancher service.
 */
export interface PublicCloudRancherRancherCreationOVH {
  /** Target specification for the managed Rancher service */
  targetSpec: PublicCloudRancherRancherCreationTargetSpecOVH;
}

/**
 * A managed Rancher service object
 */
export interface PublicCloudRancherRancherOVH {
  /** Date of the managed Rancher service creation */
  readonly createdAt?: string;
  /** Current configuration applied to the managed Rancher service */
  readonly currentState?: PublicCloudRancherRancherCurrentStateOVH;
  /**
   * Asynchronous operations ongoing on the managed Rancher service
   * @nullable
   */
  readonly currentTasks?: readonly CommonCurrentTaskOVH[] | null;
  /** Unique identifier */
  readonly id?: string;
  /** Reflects the readiness of the managed Rancher service. A new target specification request will be accepted only in `READY` status */
  readonly resourceStatus?: CommonResourceStatusEnumOVH;
  /** Last target specification of the managed Rancher service */
  readonly targetSpec?: PublicCloudRancherRancherTargetSpecOVH;
  /** Date of the last managed Rancher service update */
  readonly updatedAt?: string;
}

/**
 * Possible causes for a managed Rancher plan being unavailable
 */
export type PublicCloudRancherPlanUnavailabilityCauseEnumOVH = typeof PublicCloudRancherPlanUnavailabilityCauseEnumOVH[keyof typeof PublicCloudRancherPlanUnavailabilityCauseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PublicCloudRancherPlanUnavailabilityCauseEnumOVH = {
  CANNOT_DOWNGRADE_USING_HIGHER_FEATURES: 'CANNOT_DOWNGRADE_USING_HIGHER_FEATURES',
  CANNOT_SWITCH_PLAN_FOR_ALPHA: 'CANNOT_SWITCH_PLAN_FOR_ALPHA',
  NOT_IMPLEMENTED: 'NOT_IMPLEMENTED',
} as const;

/**
 * Possible statuses for a managed Rancher plan reference
 */
export type PublicCloudRancherPlanReferenceStatusEnumOVH = typeof PublicCloudRancherPlanReferenceStatusEnumOVH[keyof typeof PublicCloudRancherPlanReferenceStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PublicCloudRancherPlanReferenceStatusEnumOVH = {
  AVAILABLE: 'AVAILABLE',
  UNAVAILABLE: 'UNAVAILABLE',
} as const;

/**
 * Cause for an unavailability
 * @nullable
 */
export type PublicCloudRancherPlanReferenceOVHCause = PublicCloudRancherPlanUnavailabilityCauseEnumOVH | null;

/**
 * Possible values for managed Rancher plans
 */
export type PublicCloudRancherPlanEnumOVH = typeof PublicCloudRancherPlanEnumOVH[keyof typeof PublicCloudRancherPlanEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PublicCloudRancherPlanEnumOVH = {
  OVHCLOUD_EDITION: 'OVHCLOUD_EDITION',
  STANDARD: 'STANDARD',
} as const;

/**
 * A managed Rancher service plan reference, applicable to service creations
 */
export interface PublicCloudRancherPlanReferenceOVH {
  /**
   * Cause for an unavailability
   * @nullable
   */
  readonly cause?: PublicCloudRancherPlanReferenceOVHCause;
  /**
   * Human-readable description of the unavailability cause
   * @nullable
   */
  readonly message?: string | null;
  /** Name of the plan */
  readonly name?: PublicCloudRancherPlanEnumOVH;
  /** Status of the plan */
  readonly status?: PublicCloudRancherPlanReferenceStatusEnumOVH;
}

/**
 * Possible statuses for a managed Rancher plan capability, applicable to an existing managed Rancher
 */
export type PublicCloudRancherPlanCapabilityStatusEnumOVH = typeof PublicCloudRancherPlanCapabilityStatusEnumOVH[keyof typeof PublicCloudRancherPlanCapabilityStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PublicCloudRancherPlanCapabilityStatusEnumOVH = {
  AVAILABLE: 'AVAILABLE',
  CURRENT: 'CURRENT',
  UNAVAILABLE: 'UNAVAILABLE',
} as const;

/**
 * Cause for an unavailability
 * @nullable
 */
export type PublicCloudRancherPlanCapabilityOVHCause = PublicCloudRancherPlanUnavailabilityCauseEnumOVH | null;

/**
 * A managed Rancher service plan capability, applicable to an existing managed Rancher
 */
export interface PublicCloudRancherPlanCapabilityOVH {
  /**
   * Cause for an unavailability
   * @nullable
   */
  readonly cause?: PublicCloudRancherPlanCapabilityOVHCause;
  /**
   * Human-readable description of the unavailability cause
   * @nullable
   */
  readonly message?: string | null;
  /** Name of the plan */
  readonly name?: PublicCloudRancherPlanEnumOVH;
  /** Status of the plan */
  readonly status?: PublicCloudRancherPlanCapabilityStatusEnumOVH;
}

/**
 * Networking properties of a managed Rancher service
 */
export interface PublicCloudRancherNetworkingOVH {
  /** Specifies the CIDR ranges for egress IP addresses used by Rancher. Ensure these ranges are allowed in any IP restrictions for services that Rancher will access. */
  readonly egressCidrBlocks?: readonly IpBlockOVH[];
}

/**
 * Allowed CIDR block for a managed Rancher service's IP restrictions
 */
export interface PublicCloudRancherIpRestrictionOVH {
  /** Allowed CIDR block (/subnet is optional, if unspecified then /32 will be used) */
  cidrBlock: IpBlockOVH;
  /** Description of the allowed CIDR block */
  description: string;
}

/**
 * Represents a username/password couple for a managed Rancher user
 */
export interface PublicCloudRancherCredentialsOVH {
  /** Password of the user */
  readonly password?: string;
  /** Name of the user */
  readonly username?: string;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type PublicCloudProjectWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * A Public Cloud project
 */
export interface PublicCloudProjectWithIAMOVH {
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: PublicCloudProjectWithIAMOVHIam;
  /** Project ID */
  readonly id?: string;
  /**
   * Project name
   * @nullable
   */
  readonly name?: string | null;
}

/**
 * A Public Cloud project
 */
export interface PublicCloudProjectOVH {
  /** Project ID */
  readonly id?: string;
  /**
   * Project name
   * @nullable
   */
  readonly name?: string | null;
}

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;

/**
 * TaskStatusEnum
 */
export type CommonTaskStatusEnumOVH = typeof CommonTaskStatusEnumOVH[keyof typeof CommonTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommonTaskStatusEnumOVH = {
  DONE: 'DONE',
  ERROR: 'ERROR',
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  SCHEDULED: 'SCHEDULED',
} as const;

/**
 * Detailed information about an asynchronous operation progress steps
 */
export interface CommonTaskProgressOVH {
  /** Progress step name */
  readonly name?: string;
  /** Current status of the progress step */
  readonly status?: CommonTaskStatusEnumOVH;
}

/**
 * Errors that occured on the task
 */
export interface CommonTaskErrorOVH {
  /** Error description */
  readonly message?: string;
}

/**
 * Asynchronous operation
 */
export interface CommonTaskOVH {
  /** Creation date of the task */
  readonly createdAt?: string;
  /**
   * Errors that occured on the task
   * @nullable
   */
  readonly errors?: readonly CommonTaskErrorOVH[] | null;
  /**
   * Ending date of the task
   * @nullable
   */
  readonly finishedAt?: string | null;
  /** Identifier of the task */
  readonly id?: string;
  /** Link to the related resource */
  readonly link?: string;
  /** Description of the task */
  readonly message?: string;
  /** Progress steps of the asynchronous operation */
  readonly progress?: readonly CommonTaskProgressOVH[];
  /**
   * Starting date of the task
   * @nullable
   */
  readonly startedAt?: string | null;
  /** Current global status of the task */
  readonly status?: CommonTaskStatusEnumOVH;
  /** Type of the task */
  readonly type?: string;
  /** Last update of the task */
  readonly updatedAt?: string;
}

/**
 * ResourceStatusEnum
 */
export type CommonResourceStatusEnumOVH = typeof CommonResourceStatusEnumOVH[keyof typeof CommonResourceStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommonResourceStatusEnumOVH = {
  CREATING: 'CREATING',
  DELETING: 'DELETING',
  ERROR: 'ERROR',
  READY: 'READY',
  UPDATING: 'UPDATING',
} as const;

/**
 * List all defined values for an event type field
 */
export type CommonEventTypeEnumOVH = typeof CommonEventTypeEnumOVH[keyof typeof CommonEventTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommonEventTypeEnumOVH = {
  TARGET_SPEC_UPDATE: 'TARGET_SPEC_UPDATE',
  TASK_ERROR: 'TASK_ERROR',
  TASK_START: 'TASK_START',
  TASK_SUCCESS: 'TASK_SUCCESS',
} as const;

/**
 * Represents an event for an async envelope
 */
export interface CommonEventOVH {
  /** Creation date of the event */
  readonly createdAt?: string;
  /** Nature of the event */
  readonly kind?: string;
  /**
   * Link to the event related resource
   * @nullable
   */
  readonly link?: string | null;
  /** Description of what happened on the event */
  readonly message?: string;
  /** Type of the event */
  readonly type?: CommonEventTypeEnumOVH;
}

/**
 * Current status of a task. A task in ERROR cannot be retried without your inputs. PENDING tasks will be executed as soon as possible. A RUNNING task is currently executing your original request. SCHEDULED is used for tasks that will be executed in the future
 */
export type CommonCurrentTaskStatusEnumOVH = typeof CommonCurrentTaskStatusEnumOVH[keyof typeof CommonCurrentTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommonCurrentTaskStatusEnumOVH = {
  ERROR: 'ERROR',
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  SCHEDULED: 'SCHEDULED',
} as const;

/**
 * Current global status of the current task
 * @nullable
 */
export type CommonCurrentTaskOVHStatus = CommonCurrentTaskStatusEnumOVH | null;

/**
 * Asynchronous operation currently running
 */
export interface CommonCurrentTaskOVH {
  /** Identifier of the current task */
  readonly id?: string;
  /** Link to the task details */
  readonly link?: string;
  /**
   * Current global status of the current task
   * @nullable
   */
  readonly status?: CommonCurrentTaskOVHStatus;
  /** Type of the current task */
  readonly type?: string;
}


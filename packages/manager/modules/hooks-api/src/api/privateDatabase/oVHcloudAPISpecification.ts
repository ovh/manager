/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DbaasLogsLogKindOVH,
  DbaasLogsLogSubscriptionCreationOVH,
  DbaasLogsLogSubscriptionOVH,
  DbaasLogsLogSubscriptionResponseOVH,
  DbaasLogsLogUrlCreationOVH,
  DbaasLogsTemporaryLogsLinkOVH,
  GetHostingPrivateDatabaseAvailableOrderCapacitiesParams,
  GetHostingPrivateDatabaseParams,
  GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionParams,
  GetHostingPrivateDatabaseServiceNameDumpParams,
  GetHostingPrivateDatabaseServiceNameLogSubscriptionParams,
  GetHostingPrivateDatabaseServiceNameTasksParams,
  GetHostingPrivateDatabaseServiceNameWhitelistParams,
  HostingPrivateDatabaseAvailableOrderCapacitiesOVH,
  HostingPrivateDatabaseAvailableVersionEnumOVH,
  HostingPrivateDatabaseChangeFtpPasswordPayloadOVH,
  HostingPrivateDatabaseChangeVersionPayloadOVH,
  HostingPrivateDatabaseConfigUpdatePayloadOVH,
  HostingPrivateDatabaseConfigsOVH,
  HostingPrivateDatabaseCpuThrottleOVH,
  HostingPrivateDatabaseDatabaseCopyOVH,
  HostingPrivateDatabaseDatabaseCopyRestorePayloadOVH,
  HostingPrivateDatabaseDatabaseCreateDumpOVH,
  HostingPrivateDatabaseDatabaseCreatePayloadOVH,
  HostingPrivateDatabaseDatabaseDumpOVH,
  HostingPrivateDatabaseDatabaseImportPayloadOVH,
  HostingPrivateDatabaseDatabaseOVH,
  HostingPrivateDatabaseDatabaseWizardPayloadOVH,
  HostingPrivateDatabaseDumpOVH,
  HostingPrivateDatabaseDumpRestoreOVH,
  HostingPrivateDatabaseExtensionOVH,
  HostingPrivateDatabaseMetricsTokenOVH,
  HostingPrivateDatabaseOomOVH,
  HostingPrivateDatabaseServiceOVH,
  HostingPrivateDatabaseServiceWithIAMOVH,
  HostingPrivateDatabaseTaskOVH,
  HostingPrivateDatabaseTemporaryUrlInformationsOVH,
  HostingPrivateDatabaseUserChangePasswordPayloadOVH,
  HostingPrivateDatabaseUserCreatePayloadOVH,
  HostingPrivateDatabaseUserGrantCreateOVH,
  HostingPrivateDatabaseUserGrantOVH,
  HostingPrivateDatabaseUserGrantUpdateOVH,
  HostingPrivateDatabaseUserOVH,
  HostingPrivateDatabaseWebhostingNetworkOVH,
  HostingPrivateDatabaseWhitelistCreatePayloadOVH,
  HostingPrivateDatabaseWhitelistOVH,
  Ipv4BlockOVH,
  ServicesChangeContactOVH,
  ServicesConfirmTerminationOVH,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available Web Cloud Databases
 */
export const getHostingPrivateDatabase = (
    params?: GetHostingPrivateDatabaseParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/privateDatabase`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseQueryKey = (params?: GetHostingPrivateDatabaseParams,) => {
    return [`/hosting/privateDatabase`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingPrivateDatabaseQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabase>>, TError = unknown>(params?: GetHostingPrivateDatabaseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabase>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabase>>> = ({ signal }) => getHostingPrivateDatabase(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabase>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabase>>>
export type GetHostingPrivateDatabaseQueryError = unknown


export function useGetHostingPrivateDatabase<TData = Awaited<ReturnType<typeof getHostingPrivateDatabase>>, TError = unknown>(
 params: undefined |  GetHostingPrivateDatabaseParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabase>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabase>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabase<TData = Awaited<ReturnType<typeof getHostingPrivateDatabase>>, TError = unknown>(
 params?: GetHostingPrivateDatabaseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabase>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabase>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabase<TData = Awaited<ReturnType<typeof getHostingPrivateDatabase>>, TError = unknown>(
 params?: GetHostingPrivateDatabaseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabase>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available Web Cloud Databases
 */

export function useGetHostingPrivateDatabase<TData = Awaited<ReturnType<typeof getHostingPrivateDatabase>>, TError = unknown>(
 params?: GetHostingPrivateDatabaseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabase>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get available order capacities
 */
export const getHostingPrivateDatabaseAvailableOrderCapacities = (
    params: GetHostingPrivateDatabaseAvailableOrderCapacitiesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseAvailableOrderCapacitiesOVH>(
      {url: `/hosting/privateDatabase/availableOrderCapacities`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseAvailableOrderCapacitiesQueryKey = (params: GetHostingPrivateDatabaseAvailableOrderCapacitiesParams,) => {
    return [`/hosting/privateDatabase/availableOrderCapacities`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingPrivateDatabaseAvailableOrderCapacitiesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>, TError = unknown>(params: GetHostingPrivateDatabaseAvailableOrderCapacitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseAvailableOrderCapacitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>> = ({ signal }) => getHostingPrivateDatabaseAvailableOrderCapacities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseAvailableOrderCapacitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>>
export type GetHostingPrivateDatabaseAvailableOrderCapacitiesQueryError = unknown


export function useGetHostingPrivateDatabaseAvailableOrderCapacities<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>, TError = unknown>(
 params: GetHostingPrivateDatabaseAvailableOrderCapacitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseAvailableOrderCapacities<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>, TError = unknown>(
 params: GetHostingPrivateDatabaseAvailableOrderCapacitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseAvailableOrderCapacities<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>, TError = unknown>(
 params: GetHostingPrivateDatabaseAvailableOrderCapacitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get available order capacities
 */

export function useGetHostingPrivateDatabaseAvailableOrderCapacities<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>, TError = unknown>(
 params: GetHostingPrivateDatabaseAvailableOrderCapacitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseAvailableOrderCapacities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseAvailableOrderCapacitiesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a Web Cloud Database properties
 */
export const getHostingPrivateDatabaseServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseServiceWithIAMOVH>(
      {url: `/hosting/privateDatabase/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameQueryKey = (serviceName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>> = ({ signal }) => getHostingPrivateDatabaseServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>>
export type GetHostingPrivateDatabaseServiceNameQueryError = unknown


export function useGetHostingPrivateDatabaseServiceName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a Web Cloud Database properties
 */

export function useGetHostingPrivateDatabaseServiceName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter a Web Cloud Database properties
 */
export const putHostingPrivateDatabaseServiceName = (
    serviceName: string,
    hostingPrivateDatabaseServiceOVH: NonReadonly<HostingPrivateDatabaseServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/privateDatabase/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseServiceOVH
    },
      options);
    }
  


export const getPutHostingPrivateDatabaseServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceName>>, TError,{serviceName: string;data: NonReadonly<HostingPrivateDatabaseServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceName>>, TError,{serviceName: string;data: NonReadonly<HostingPrivateDatabaseServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceName>>, {serviceName: string;data: NonReadonly<HostingPrivateDatabaseServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putHostingPrivateDatabaseServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingPrivateDatabaseServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceName>>>
    export type PutHostingPrivateDatabaseServiceNameMutationBody = NonReadonly<HostingPrivateDatabaseServiceOVH>
    export type PutHostingPrivateDatabaseServiceNameMutationError = unknown

    /**
 * @summary Alter a Web Cloud Database properties
 */
export const usePutHostingPrivateDatabaseServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceName>>, TError,{serviceName: string;data: NonReadonly<HostingPrivateDatabaseServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<HostingPrivateDatabaseServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingPrivateDatabaseServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the availables versions for this private database
 */
export const getHostingPrivateDatabaseServiceNameAvailableVersions = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseAvailableVersionEnumOVH[]>(
      {url: `/hosting/privateDatabase/${serviceName}/availableVersions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameAvailableVersionsQueryKey = (serviceName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/availableVersions`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameAvailableVersionsQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameAvailableVersionsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameAvailableVersions(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameAvailableVersionsQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>>
export type GetHostingPrivateDatabaseServiceNameAvailableVersionsQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameAvailableVersions<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameAvailableVersions<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameAvailableVersions<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the availables versions for this private database
 */

export function useGetHostingPrivateDatabaseServiceNameAvailableVersions<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameAvailableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameAvailableVersionsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a contact change procedure
 */
export const postHostingPrivateDatabaseServiceNameChangeContact = (
    serviceName: string,
    servicesChangeContactOVH: ServicesChangeContactOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/privateDatabase/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesChangeContactOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeContact>>, {serviceName: string;data: ServicesChangeContactOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeContact>>>
    export type PostHostingPrivateDatabaseServiceNameChangeContactMutationBody = ServicesChangeContactOVH
    export type PostHostingPrivateDatabaseServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostHostingPrivateDatabaseServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: ServicesChangeContactOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change FTP password of your Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameChangeFtpPassword = (
    serviceName: string,
    hostingPrivateDatabaseChangeFtpPasswordPayloadOVH: HostingPrivateDatabaseChangeFtpPasswordPayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/changeFtpPassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseChangeFtpPasswordPayloadOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameChangeFtpPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeFtpPassword>>, TError,{serviceName: string;data: HostingPrivateDatabaseChangeFtpPasswordPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeFtpPassword>>, TError,{serviceName: string;data: HostingPrivateDatabaseChangeFtpPasswordPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeFtpPassword>>, {serviceName: string;data: HostingPrivateDatabaseChangeFtpPasswordPayloadOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameChangeFtpPassword(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameChangeFtpPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeFtpPassword>>>
    export type PostHostingPrivateDatabaseServiceNameChangeFtpPasswordMutationBody = HostingPrivateDatabaseChangeFtpPasswordPayloadOVH
    export type PostHostingPrivateDatabaseServiceNameChangeFtpPasswordMutationError = unknown

    /**
 * @summary Change FTP password of your Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameChangeFtpPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeFtpPassword>>, TError,{serviceName: string;data: HostingPrivateDatabaseChangeFtpPasswordPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeFtpPassword>>,
        TError,
        {serviceName: string;data: HostingPrivateDatabaseChangeFtpPasswordPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameChangeFtpPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change DBMS version of your Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameChangeVersion = (
    serviceName: string,
    hostingPrivateDatabaseChangeVersionPayloadOVH: HostingPrivateDatabaseChangeVersionPayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/changeVersion`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseChangeVersionPayloadOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameChangeVersionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeVersion>>, TError,{serviceName: string;data: HostingPrivateDatabaseChangeVersionPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeVersion>>, TError,{serviceName: string;data: HostingPrivateDatabaseChangeVersionPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeVersion>>, {serviceName: string;data: HostingPrivateDatabaseChangeVersionPayloadOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameChangeVersion(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameChangeVersionMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeVersion>>>
    export type PostHostingPrivateDatabaseServiceNameChangeVersionMutationBody = HostingPrivateDatabaseChangeVersionPayloadOVH
    export type PostHostingPrivateDatabaseServiceNameChangeVersionMutationError = unknown

    /**
 * @summary Change DBMS version of your Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameChangeVersion = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeVersion>>, TError,{serviceName: string;data: HostingPrivateDatabaseChangeVersionPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameChangeVersion>>,
        TError,
        {serviceName: string;data: HostingPrivateDatabaseChangeVersionPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameChangeVersionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the current configuration for this Web Cloud Database
 */
export const getHostingPrivateDatabaseServiceNameConfig = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseConfigsOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/config`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameConfigQueryKey = (serviceName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/config`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameConfigQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameConfigQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameConfig(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameConfigQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>>
export type GetHostingPrivateDatabaseServiceNameConfigQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameConfig<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameConfig<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameConfig<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the current configuration for this Web Cloud Database
 */

export function useGetHostingPrivateDatabaseServiceNameConfig<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameConfig>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameConfigQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update the configuration of this Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameConfigUpdate = (
    serviceName: string,
    hostingPrivateDatabaseConfigUpdatePayloadOVH: HostingPrivateDatabaseConfigUpdatePayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseConfigsOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/config/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseConfigUpdatePayloadOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameConfigUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameConfigUpdate>>, TError,{serviceName: string;data: HostingPrivateDatabaseConfigUpdatePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameConfigUpdate>>, TError,{serviceName: string;data: HostingPrivateDatabaseConfigUpdatePayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameConfigUpdate>>, {serviceName: string;data: HostingPrivateDatabaseConfigUpdatePayloadOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameConfigUpdate(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameConfigUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameConfigUpdate>>>
    export type PostHostingPrivateDatabaseServiceNameConfigUpdateMutationBody = HostingPrivateDatabaseConfigUpdatePayloadOVH
    export type PostHostingPrivateDatabaseServiceNameConfigUpdateMutationError = unknown

    /**
 * @summary Update the configuration of this Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameConfigUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameConfigUpdate>>, TError,{serviceName: string;data: HostingPrivateDatabaseConfigUpdatePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameConfigUpdate>>,
        TError,
        {serviceName: string;data: HostingPrivateDatabaseConfigUpdatePayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameConfigUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postHostingPrivateDatabaseServiceNameConfirmTermination = (
    serviceName: string,
    servicesConfirmTerminationOVH: ServicesConfirmTerminationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/privateDatabase/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesConfirmTerminationOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameConfirmTermination>>, {serviceName: string;data: ServicesConfirmTerminationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameConfirmTermination>>>
    export type PostHostingPrivateDatabaseServiceNameConfirmTerminationMutationBody = ServicesConfirmTerminationOVH
    export type PostHostingPrivateDatabaseServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostHostingPrivateDatabaseServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: ServicesConfirmTerminationOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of privatesql CPU throttle
 */
export const getHostingPrivateDatabaseServiceNameCpuThrottle = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseCpuThrottleOVH[]>(
      {url: `/hosting/privateDatabase/${serviceName}/cpuThrottle`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameCpuThrottleQueryKey = (serviceName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/cpuThrottle`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameCpuThrottleQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameCpuThrottleQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameCpuThrottle(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameCpuThrottleQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>>
export type GetHostingPrivateDatabaseServiceNameCpuThrottleQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameCpuThrottle<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameCpuThrottle<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameCpuThrottle<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of privatesql CPU throttle
 */

export function useGetHostingPrivateDatabaseServiceNameCpuThrottle<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameCpuThrottle>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameCpuThrottleQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List databases on a privateDatabase
 */
export const getHostingPrivateDatabaseServiceNameDatabase = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/privateDatabase/${serviceName}/database`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameDatabaseQueryKey = (serviceName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/database`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameDatabaseQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameDatabaseQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameDatabase(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameDatabaseQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>>
export type GetHostingPrivateDatabaseServiceNameDatabaseQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameDatabase<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabase<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabase<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List databases on a privateDatabase
 */

export function useGetHostingPrivateDatabaseServiceNameDatabase<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabase>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameDatabaseQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new database in a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameDatabase = (
    serviceName: string,
    hostingPrivateDatabaseDatabaseCreatePayloadOVH: HostingPrivateDatabaseDatabaseCreatePayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseDatabaseCreatePayloadOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameDatabaseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabase>>, TError,{serviceName: string;data: HostingPrivateDatabaseDatabaseCreatePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabase>>, TError,{serviceName: string;data: HostingPrivateDatabaseDatabaseCreatePayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabase>>, {serviceName: string;data: HostingPrivateDatabaseDatabaseCreatePayloadOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameDatabase(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameDatabaseMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabase>>>
    export type PostHostingPrivateDatabaseServiceNameDatabaseMutationBody = HostingPrivateDatabaseDatabaseCreatePayloadOVH
    export type PostHostingPrivateDatabaseServiceNameDatabaseMutationError = unknown

    /**
 * @summary Create a new database in a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameDatabase = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabase>>, TError,{serviceName: string;data: HostingPrivateDatabaseDatabaseCreatePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabase>>,
        TError,
        {serviceName: string;data: HostingPrivateDatabaseDatabaseCreatePayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameDatabaseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a database from a Web Cloud Database
 */
export const deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseName = (
    serviceName: string,
    databaseName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError,{serviceName: string;databaseName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError,{serviceName: string;databaseName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, {serviceName: string;databaseName: string}> = (props) => {
          const {serviceName,databaseName} = props ?? {};

          return  deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseName(serviceName,databaseName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>>
    
    export type DeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameMutationError = unknown

    /**
 * @summary Delete a database from a Web Cloud Database
 */
export const useDeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError,{serviceName: string;databaseName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>,
        TError,
        {serviceName: string;databaseName: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get database properties
 */
export const getHostingPrivateDatabaseServiceNameDatabaseDatabaseName = (
    serviceName: string,
    databaseName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseDatabaseOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameQueryKey = (serviceName: string,
    databaseName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/database/${databaseName}`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError = unknown>(serviceName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameQueryKey(serviceName,databaseName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameDatabaseDatabaseName(serviceName,databaseName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && databaseName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>>
export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError = unknown>(
 serviceName: string,
    databaseName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError = unknown>(
 serviceName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError = unknown>(
 serviceName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get database properties
 */

export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError = unknown>(
 serviceName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameQueryOptions(serviceName,databaseName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List database copy of a privateDatabase
 */
export const getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy = (
    serviceName: string,
    databaseName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/copy`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyQueryKey = (serviceName: string,
    databaseName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/database/${databaseName}/copy`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError = unknown>(serviceName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyQueryKey(serviceName,databaseName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy(serviceName,databaseName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && databaseName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>>
export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError = unknown>(
 serviceName: string,
    databaseName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError = unknown>(
 serviceName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError = unknown>(
 serviceName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List database copy of a privateDatabase
 */

export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError = unknown>(
 serviceName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyQueryOptions(serviceName,databaseName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new database copy in a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy = (
    serviceName: string,
    databaseName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseDatabaseCopyOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/copy`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError,{serviceName: string;databaseName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError,{serviceName: string;databaseName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, {serviceName: string;databaseName: string}> = (props) => {
          const {serviceName,databaseName} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy(serviceName,databaseName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>>
    
    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyMutationError = unknown

    /**
 * @summary Create a new database copy in a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>, TError,{serviceName: string;databaseName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopy>>,
        TError,
        {serviceName: string;databaseName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the database copy of a Web Cloud Database
 */
export const deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId = (
    serviceName: string,
    databaseName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/copy/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError,{serviceName: string;databaseName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError,{serviceName: string;databaseName: string;id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, {serviceName: string;databaseName: string;id: string}> = (props) => {
          const {serviceName,databaseName,id} = props ?? {};

          return  deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId(serviceName,databaseName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>>
    
    export type DeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdMutationError = unknown

    /**
 * @summary Delete the database copy of a Web Cloud Database
 */
export const useDeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError,{serviceName: string;databaseName: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>,
        TError,
        {serviceName: string;databaseName: string;id: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get database copy properties
 */
export const getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId = (
    serviceName: string,
    databaseName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseDatabaseCopyOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/copy/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdQueryKey = (serviceName: string,
    databaseName: string,
    id: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/database/${databaseName}/copy/${id}`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError = unknown>(serviceName: string,
    databaseName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdQueryKey(serviceName,databaseName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId(serviceName,databaseName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && databaseName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>>
export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get database copy properties
 */

export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdQueryOptions(serviceName,databaseName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request the copy into a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestore = (
    serviceName: string,
    databaseName: string,
    hostingPrivateDatabaseDatabaseCopyRestorePayloadOVH: HostingPrivateDatabaseDatabaseCopyRestorePayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/copyRestore`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseDatabaseCopyRestorePayloadOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestoreMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestore>>, TError,{serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseCopyRestorePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestore>>, TError,{serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseCopyRestorePayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestore>>, {serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseCopyRestorePayloadOVH}> = (props) => {
          const {serviceName,databaseName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestore(serviceName,databaseName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestoreMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestore>>>
    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestoreMutationBody = HostingPrivateDatabaseDatabaseCopyRestorePayloadOVH
    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestoreMutationError = unknown

    /**
 * @summary Request the copy into a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestore = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestore>>, TError,{serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseCopyRestorePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestore>>,
        TError,
        {serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseCopyRestorePayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestoreMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all database dump from a Web Cloud Database
 */
export const getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump = (
    serviceName: string,
    databaseName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/dump`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpQueryKey = (serviceName: string,
    databaseName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/database/${databaseName}/dump`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError = unknown>(serviceName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpQueryKey(serviceName,databaseName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump(serviceName,databaseName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && databaseName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>>
export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError = unknown>(
 serviceName: string,
    databaseName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError = unknown>(
 serviceName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError = unknown>(
 serviceName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all database dump from a Web Cloud Database
 */

export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError = unknown>(
 serviceName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpQueryOptions(serviceName,databaseName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request the dump of this database (an email will be sent with a link available 30 days)
 */
export const postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump = (
    serviceName: string,
    databaseName: string,
    hostingPrivateDatabaseDatabaseCreateDumpOVH: HostingPrivateDatabaseDatabaseCreateDumpOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/dump`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseDatabaseCreateDumpOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError,{serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseCreateDumpOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError,{serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseCreateDumpOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, {serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseCreateDumpOVH}> = (props) => {
          const {serviceName,databaseName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump(serviceName,databaseName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>>
    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpMutationBody = HostingPrivateDatabaseDatabaseCreateDumpOVH
    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpMutationError = unknown

    /**
 * @summary Request the dump of this database (an email will be sent with a link available 30 days)
 */
export const usePostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>, TError,{serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseCreateDumpOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDump>>,
        TError,
        {serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseCreateDumpOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete dump before expiration date
 */
export const deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId = (
    serviceName: string,
    databaseName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/dump/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError,{serviceName: string;databaseName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError,{serviceName: string;databaseName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, {serviceName: string;databaseName: string;id: number}> = (props) => {
          const {serviceName,databaseName,id} = props ?? {};

          return  deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId(serviceName,databaseName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>>
    
    export type DeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdMutationError = unknown

    /**
 * @summary Delete dump before expiration date
 */
export const useDeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError,{serviceName: string;databaseName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>,
        TError,
        {serviceName: string;databaseName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a database dump from a Web Cloud Database
 */
export const getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId = (
    serviceName: string,
    databaseName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseDatabaseDumpOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/dump/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdQueryKey = (serviceName: string,
    databaseName: string,
    id: number,) => {
    return [`/hosting/privateDatabase/${serviceName}/database/${databaseName}/dump/${id}`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError = unknown>(serviceName: string,
    databaseName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdQueryKey(serviceName,databaseName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId(serviceName,databaseName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && databaseName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>>
export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a database dump from a Web Cloud Database
 */

export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdQueryOptions(serviceName,databaseName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request the restore from this dump
 */
export const postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestore = (
    serviceName: string,
    databaseName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/dump/${id}/restore`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestoreMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestore>>, TError,{serviceName: string;databaseName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestore>>, TError,{serviceName: string;databaseName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestore>>, {serviceName: string;databaseName: string;id: number}> = (props) => {
          const {serviceName,databaseName,id} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestore(serviceName,databaseName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestoreMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestore>>>
    
    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestoreMutationError = unknown

    /**
 * @summary Request the restore from this dump
 */
export const usePostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestore = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestore>>, TError,{serviceName: string;databaseName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestore>>,
        TError,
        {serviceName: string;databaseName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestoreMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List extensions available for a Webcloud Database
 */
export const getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension = (
    serviceName: string,
    databaseName: string,
    params?: GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/extension`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionQueryKey = (serviceName: string,
    databaseName: string,
    params?: GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionParams,) => {
    return [`/hosting/privateDatabase/${serviceName}/database/${databaseName}/extension`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>, TError = unknown>(serviceName: string,
    databaseName: string,
    params?: GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionQueryKey(serviceName,databaseName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension(serviceName,databaseName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && databaseName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>>
export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    params: undefined |  GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    params?: GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    params?: GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List extensions available for a Webcloud Database
 */

export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    params?: GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtension>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionQueryOptions(serviceName,databaseName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get properties of a Webcloud Database extension
 */
export const getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName = (
    serviceName: string,
    databaseName: string,
    extensionName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseExtensionOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/extension/${extensionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameQueryKey = (serviceName: string,
    databaseName: string,
    extensionName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/database/${databaseName}/extension/${extensionName}`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>, TError = unknown>(serviceName: string,
    databaseName: string,
    extensionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameQueryKey(serviceName,databaseName,extensionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName(serviceName,databaseName,extensionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && databaseName && extensionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>>
export type GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    extensionName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    extensionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    extensionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get properties of a Webcloud Database extension
 */

export function useGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>, TError = unknown>(
 serviceName: string,
    databaseName: string,
    extensionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameQueryOptions(serviceName,databaseName,extensionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Disable an extension on a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisable = (
    serviceName: string,
    databaseName: string,
    extensionName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/extension/${extensionName}/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisable>>, TError,{serviceName: string;databaseName: string;extensionName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisable>>, TError,{serviceName: string;databaseName: string;extensionName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisable>>, {serviceName: string;databaseName: string;extensionName: string}> = (props) => {
          const {serviceName,databaseName,extensionName} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisable(serviceName,databaseName,extensionName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisable>>>
    
    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisableMutationError = unknown

    /**
 * @summary Disable an extension on a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisable>>, TError,{serviceName: string;databaseName: string;extensionName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisable>>,
        TError,
        {serviceName: string;databaseName: string;extensionName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable an extension on a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnable = (
    serviceName: string,
    databaseName: string,
    extensionName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/extension/${extensionName}/enable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnable>>, TError,{serviceName: string;databaseName: string;extensionName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnable>>, TError,{serviceName: string;databaseName: string;extensionName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnable>>, {serviceName: string;databaseName: string;extensionName: string}> = (props) => {
          const {serviceName,databaseName,extensionName} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnable(serviceName,databaseName,extensionName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnable>>>
    
    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnableMutationError = unknown

    /**
 * @summary Enable an extension on a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnable>>, TError,{serviceName: string;databaseName: string;extensionName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnable>>,
        TError,
        {serviceName: string;databaseName: string;extensionName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Import a database into a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImport = (
    serviceName: string,
    databaseName: string,
    hostingPrivateDatabaseDatabaseImportPayloadOVH: HostingPrivateDatabaseDatabaseImportPayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/database/${databaseName}/import`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseDatabaseImportPayloadOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImport>>, TError,{serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseImportPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImport>>, TError,{serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseImportPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImport>>, {serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseImportPayloadOVH}> = (props) => {
          const {serviceName,databaseName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImport(serviceName,databaseName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImportMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImport>>>
    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImportMutationBody = HostingPrivateDatabaseDatabaseImportPayloadOVH
    export type PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImportMutationError = unknown

    /**
 * @summary Import a database into a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImport>>, TError,{serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseImportPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImport>>,
        TError,
        {serviceName: string;databaseName: string;data: HostingPrivateDatabaseDatabaseImportPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create a new database/user and grant it
 */
export const postHostingPrivateDatabaseServiceNameDatabaseWizard = (
    serviceName: string,
    hostingPrivateDatabaseDatabaseWizardPayloadOVH: HostingPrivateDatabaseDatabaseWizardPayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/databaseWizard`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseDatabaseWizardPayloadOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameDatabaseWizardMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseWizard>>, TError,{serviceName: string;data: HostingPrivateDatabaseDatabaseWizardPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseWizard>>, TError,{serviceName: string;data: HostingPrivateDatabaseDatabaseWizardPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseWizard>>, {serviceName: string;data: HostingPrivateDatabaseDatabaseWizardPayloadOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameDatabaseWizard(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameDatabaseWizardMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseWizard>>>
    export type PostHostingPrivateDatabaseServiceNameDatabaseWizardMutationBody = HostingPrivateDatabaseDatabaseWizardPayloadOVH
    export type PostHostingPrivateDatabaseServiceNameDatabaseWizardMutationError = unknown

    /**
 * @summary Create a new database/user and grant it
 */
export const usePostHostingPrivateDatabaseServiceNameDatabaseWizard = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseWizard>>, TError,{serviceName: string;data: HostingPrivateDatabaseDatabaseWizardPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDatabaseWizard>>,
        TError,
        {serviceName: string;data: HostingPrivateDatabaseDatabaseWizardPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameDatabaseWizardMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all database dump from a Web Cloud Database
 */
export const getHostingPrivateDatabaseServiceNameDump = (
    serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameDumpParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/privateDatabase/${serviceName}/dump`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameDumpQueryKey = (serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameDumpParams,) => {
    return [`/hosting/privateDatabase/${serviceName}/dump`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameDumpQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>, TError = unknown>(serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameDumpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameDumpQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameDump(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameDumpQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>>
export type GetHostingPrivateDatabaseServiceNameDumpQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameDump<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingPrivateDatabaseServiceNameDumpParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDump<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameDumpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDump<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameDumpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all database dump from a Web Cloud Database
 */

export function useGetHostingPrivateDatabaseServiceNameDump<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameDumpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDump>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameDumpQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete a database dump from a Web Cloud Database
 */
export const deleteHostingPrivateDatabaseServiceNameDumpDumpId = (
    serviceName: string,
    dumpId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/dump/${dumpId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingPrivateDatabaseServiceNameDumpDumpIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDumpDumpId>>, TError,{serviceName: string;dumpId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDumpDumpId>>, TError,{serviceName: string;dumpId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDumpDumpId>>, {serviceName: string;dumpId: number}> = (props) => {
          const {serviceName,dumpId} = props ?? {};

          return  deleteHostingPrivateDatabaseServiceNameDumpDumpId(serviceName,dumpId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingPrivateDatabaseServiceNameDumpDumpIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDumpDumpId>>>
    
    export type DeleteHostingPrivateDatabaseServiceNameDumpDumpIdMutationError = unknown

    /**
 * @summary Delete a database dump from a Web Cloud Database
 */
export const useDeleteHostingPrivateDatabaseServiceNameDumpDumpId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDumpDumpId>>, TError,{serviceName: string;dumpId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameDumpDumpId>>,
        TError,
        {serviceName: string;dumpId: number},
        TContext
      > => {

      const mutationOptions = getDeleteHostingPrivateDatabaseServiceNameDumpDumpIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a database dump from a Web Cloud Database
 */
export const getHostingPrivateDatabaseServiceNameDumpDumpId = (
    serviceName: string,
    dumpId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseDumpOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/dump/${dumpId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameDumpDumpIdQueryKey = (serviceName: string,
    dumpId: number,) => {
    return [`/hosting/privateDatabase/${serviceName}/dump/${dumpId}`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameDumpDumpIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>, TError = unknown>(serviceName: string,
    dumpId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameDumpDumpIdQueryKey(serviceName,dumpId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameDumpDumpId(serviceName,dumpId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && dumpId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameDumpDumpIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>>
export type GetHostingPrivateDatabaseServiceNameDumpDumpIdQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameDumpDumpId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>, TError = unknown>(
 serviceName: string,
    dumpId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDumpDumpId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>, TError = unknown>(
 serviceName: string,
    dumpId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameDumpDumpId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>, TError = unknown>(
 serviceName: string,
    dumpId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a database dump from a Web Cloud Database
 */

export function useGetHostingPrivateDatabaseServiceNameDumpDumpId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>, TError = unknown>(
 serviceName: string,
    dumpId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameDumpDumpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameDumpDumpIdQueryOptions(serviceName,dumpId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Restore a database dump into a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameDumpDumpIdRestore = (
    serviceName: string,
    dumpId: number,
    hostingPrivateDatabaseDumpRestoreOVH: HostingPrivateDatabaseDumpRestoreOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/dump/${dumpId}/restore`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseDumpRestoreOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameDumpDumpIdRestoreMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDumpDumpIdRestore>>, TError,{serviceName: string;dumpId: number;data: HostingPrivateDatabaseDumpRestoreOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDumpDumpIdRestore>>, TError,{serviceName: string;dumpId: number;data: HostingPrivateDatabaseDumpRestoreOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDumpDumpIdRestore>>, {serviceName: string;dumpId: number;data: HostingPrivateDatabaseDumpRestoreOVH}> = (props) => {
          const {serviceName,dumpId,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameDumpDumpIdRestore(serviceName,dumpId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameDumpDumpIdRestoreMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDumpDumpIdRestore>>>
    export type PostHostingPrivateDatabaseServiceNameDumpDumpIdRestoreMutationBody = HostingPrivateDatabaseDumpRestoreOVH
    export type PostHostingPrivateDatabaseServiceNameDumpDumpIdRestoreMutationError = unknown

    /**
 * @summary Restore a database dump into a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameDumpDumpIdRestore = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDumpDumpIdRestore>>, TError,{serviceName: string;dumpId: number;data: HostingPrivateDatabaseDumpRestoreOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameDumpDumpIdRestore>>,
        TError,
        {serviceName: string;dumpId: number;data: HostingPrivateDatabaseDumpRestoreOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameDumpDumpIdRestoreMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate a temporary link to access logs for a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLink = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTemporaryUrlInformationsOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/generateTemporaryLogsLink`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLinkMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLink>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLink>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLink>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLink(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLinkMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLink>>>
    
    export type PostHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLinkMutationError = unknown

    /**
 * @summary Generate a temporary link to access logs for a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLink = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLink>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLink>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLinkMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available log kinds
 */
export const getHostingPrivateDatabaseServiceNameLogKind = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/privateDatabase/${serviceName}/log/kind`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameLogKindQueryKey = (serviceName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/log/kind`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameLogKindQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameLogKindQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameLogKind(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameLogKindQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>>
export type GetHostingPrivateDatabaseServiceNameLogKindQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameLogKind<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameLogKind<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameLogKind<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available log kinds
 */

export function useGetHostingPrivateDatabaseServiceNameLogKind<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameLogKindQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a log kind
 */
export const getHostingPrivateDatabaseServiceNameLogKindName = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogKindOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/log/kind/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameLogKindNameQueryKey = (serviceName: string,
    name: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/log/kind/${name}`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameLogKindNameQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameLogKindNameQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameLogKindName(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameLogKindNameQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>>
export type GetHostingPrivateDatabaseServiceNameLogKindNameQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameLogKindName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameLogKindName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameLogKindName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a log kind
 */

export function useGetHostingPrivateDatabaseServiceNameLogKindName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameLogKindNameQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List subscription IDs for Web Cloud Database
 */
export const getHostingPrivateDatabaseServiceNameLogSubscription = (
    serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameLogSubscriptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/privateDatabase/${serviceName}/log/subscription`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameLogSubscriptionQueryKey = (serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameLogSubscriptionParams,) => {
    return [`/hosting/privateDatabase/${serviceName}/log/subscription`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameLogSubscriptionQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>, TError = unknown>(serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameLogSubscriptionQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameLogSubscription(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameLogSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>>
export type GetHostingPrivateDatabaseServiceNameLogSubscriptionQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameLogSubscription<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingPrivateDatabaseServiceNameLogSubscriptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameLogSubscription<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameLogSubscription<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List subscription IDs for Web Cloud Database
 */

export function useGetHostingPrivateDatabaseServiceNameLogSubscription<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameLogSubscriptionQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create subscription to log to customer for a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameLogSubscription = (
    serviceName: string,
    dbaasLogsLogSubscriptionCreationOVH: DbaasLogsLogSubscriptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionResponseOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/log/subscription`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsLogSubscriptionCreationOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameLogSubscriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameLogSubscription>>, TError,{serviceName: string;data: DbaasLogsLogSubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameLogSubscription>>, TError,{serviceName: string;data: DbaasLogsLogSubscriptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameLogSubscription>>, {serviceName: string;data: DbaasLogsLogSubscriptionCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameLogSubscription(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameLogSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameLogSubscription>>>
    export type PostHostingPrivateDatabaseServiceNameLogSubscriptionMutationBody = DbaasLogsLogSubscriptionCreationOVH
    export type PostHostingPrivateDatabaseServiceNameLogSubscriptionMutationError = unknown

    /**
 * @summary Create subscription to log to customer for a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameLogSubscription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameLogSubscription>>, TError,{serviceName: string;data: DbaasLogsLogSubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameLogSubscription>>,
        TError,
        {serviceName: string;data: DbaasLogsLogSubscriptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameLogSubscriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a subscription
 */
export const deleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId = (
    serviceName: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionResponseOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/log/subscription/${subscriptionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError,{serviceName: string;subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError,{serviceName: string;subscriptionId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, {serviceName: string;subscriptionId: string}> = (props) => {
          const {serviceName,subscriptionId} = props ?? {};

          return  deleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId(serviceName,subscriptionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>>
    
    export type DeleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdMutationError = unknown

    /**
 * @summary Delete a subscription
 */
export const useDeleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError,{serviceName: string;subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>,
        TError,
        {serviceName: string;subscriptionId: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get subscription details
 */
export const getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId = (
    serviceName: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/log/subscription/${subscriptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdQueryKey = (serviceName: string,
    subscriptionId: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/log/subscription/${subscriptionId}`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError = unknown>(serviceName: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdQueryKey(serviceName,subscriptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId(serviceName,subscriptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>>
export type GetHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError = unknown>(
 serviceName: string,
    subscriptionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError = unknown>(
 serviceName: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError = unknown>(
 serviceName: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get subscription details
 */

export function useGetHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError = unknown>(
 serviceName: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdQueryOptions(serviceName,subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate a temporary URL to retrieve logs
 */
export const postHostingPrivateDatabaseServiceNameLogUrl = (
    serviceName: string,
    dbaasLogsLogUrlCreationOVH: DbaasLogsLogUrlCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsTemporaryLogsLinkOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/log/url`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsLogUrlCreationOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameLogUrlMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameLogUrl>>, TError,{serviceName: string;data: DbaasLogsLogUrlCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameLogUrl>>, TError,{serviceName: string;data: DbaasLogsLogUrlCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameLogUrl>>, {serviceName: string;data: DbaasLogsLogUrlCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameLogUrl(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameLogUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameLogUrl>>>
    export type PostHostingPrivateDatabaseServiceNameLogUrlMutationBody = DbaasLogsLogUrlCreationOVH
    export type PostHostingPrivateDatabaseServiceNameLogUrlMutationError = unknown

    /**
 * @summary Generate a temporary URL to retrieve logs
 */
export const usePostHostingPrivateDatabaseServiceNameLogUrl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameLogUrl>>, TError,{serviceName: string;data: DbaasLogsLogUrlCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameLogUrl>>,
        TError,
        {serviceName: string;data: DbaasLogsLogUrlCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameLogUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate a metrics token
 */
export const getHostingPrivateDatabaseServiceNameMetricsToken = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseMetricsTokenOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/metricsToken`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameMetricsTokenQueryKey = (serviceName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/metricsToken`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameMetricsTokenQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameMetricsTokenQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameMetricsToken(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameMetricsTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>>
export type GetHostingPrivateDatabaseServiceNameMetricsTokenQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Generate a metrics token
 */

export function useGetHostingPrivateDatabaseServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameMetricsTokenQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of privatesql OOM kill
 */
export const getHostingPrivateDatabaseServiceNameOom = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseOomOVH[]>(
      {url: `/hosting/privateDatabase/${serviceName}/oom`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameOomQueryKey = (serviceName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/oom`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameOomQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameOomQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameOom(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameOomQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>>
export type GetHostingPrivateDatabaseServiceNameOomQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameOom<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameOom<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameOom<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of privatesql OOM kill
 */

export function useGetHostingPrivateDatabaseServiceNameOom<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameOom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameOomQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Refresh the quota of your Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameQuotaRefresh = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/quotaRefresh`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameQuotaRefreshMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameQuotaRefresh>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameQuotaRefresh>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameQuotaRefresh>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameQuotaRefresh(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameQuotaRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameQuotaRefresh>>>
    
    export type PostHostingPrivateDatabaseServiceNameQuotaRefreshMutationError = unknown

    /**
 * @summary Refresh the quota of your Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameQuotaRefresh = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameQuotaRefresh>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameQuotaRefresh>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameQuotaRefreshMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Restart the Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameRestart = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/restart`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameRestartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameRestart>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameRestart>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameRestart>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameRestart(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameRestartMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameRestart>>>
    
    export type PostHostingPrivateDatabaseServiceNameRestartMutationError = unknown

    /**
 * @summary Restart the Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameRestart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameRestart>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameRestart>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameRestartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getHostingPrivateDatabaseServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>>
export type GetHostingPrivateDatabaseServiceNameServiceInfosQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetHostingPrivateDatabaseServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putHostingPrivateDatabaseServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/privateDatabase/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutHostingPrivateDatabaseServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putHostingPrivateDatabaseServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingPrivateDatabaseServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceNameServiceInfos>>>
    export type PutHostingPrivateDatabaseServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutHostingPrivateDatabaseServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutHostingPrivateDatabaseServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingPrivateDatabaseServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List tasks for a Webcloud Database
 */
export const getHostingPrivateDatabaseServiceNameTasks = (
    serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/privateDatabase/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameTasksQueryKey = (serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameTasksParams,) => {
    return [`/hosting/privateDatabase/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>>
export type GetHostingPrivateDatabaseServiceNameTasksQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameTasks<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingPrivateDatabaseServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameTasks<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameTasks<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List tasks for a Webcloud Database
 */

export function useGetHostingPrivateDatabaseServiceNameTasks<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get task details
 */
export const getHostingPrivateDatabaseServiceNameTasksId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/tasks/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameTasksIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/privateDatabase/${serviceName}/tasks/${id}`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameTasksIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameTasksIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameTasksId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameTasksIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>>
export type GetHostingPrivateDatabaseServiceNameTasksIdQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameTasksId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameTasksId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameTasksId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get task details
 */

export function useGetHostingPrivateDatabaseServiceNameTasksId<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameTasksIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ask for the termination of your service
 */
export const postHostingPrivateDatabaseServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/privateDatabase/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameTerminate>>>
    
    export type PostHostingPrivateDatabaseServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostHostingPrivateDatabaseServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List users on a Web Cloud Database
 */
export const getHostingPrivateDatabaseServiceNameUser = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/privateDatabase/${serviceName}/user`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameUserQueryKey = (serviceName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/user`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameUserQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameUserQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameUser(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameUserQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>>
export type GetHostingPrivateDatabaseServiceNameUserQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameUser<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameUser<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameUser<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List users on a Web Cloud Database
 */

export function useGetHostingPrivateDatabaseServiceNameUser<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameUserQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a user on a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameUser = (
    serviceName: string,
    hostingPrivateDatabaseUserCreatePayloadOVH: HostingPrivateDatabaseUserCreatePayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseUserCreatePayloadOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUser>>, TError,{serviceName: string;data: HostingPrivateDatabaseUserCreatePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUser>>, TError,{serviceName: string;data: HostingPrivateDatabaseUserCreatePayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUser>>, {serviceName: string;data: HostingPrivateDatabaseUserCreatePayloadOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameUser(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameUserMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUser>>>
    export type PostHostingPrivateDatabaseServiceNameUserMutationBody = HostingPrivateDatabaseUserCreatePayloadOVH
    export type PostHostingPrivateDatabaseServiceNameUserMutationError = unknown

    /**
 * @summary Create a user on a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUser>>, TError,{serviceName: string;data: HostingPrivateDatabaseUserCreatePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUser>>,
        TError,
        {serviceName: string;data: HostingPrivateDatabaseUserCreatePayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a user on a Web Cloud Database
 */
export const deleteHostingPrivateDatabaseServiceNameUserUserName = (
    serviceName: string,
    userName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/user/${userName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingPrivateDatabaseServiceNameUserUserNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameUserUserName>>, TError,{serviceName: string;userName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameUserUserName>>, TError,{serviceName: string;userName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameUserUserName>>, {serviceName: string;userName: string}> = (props) => {
          const {serviceName,userName} = props ?? {};

          return  deleteHostingPrivateDatabaseServiceNameUserUserName(serviceName,userName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingPrivateDatabaseServiceNameUserUserNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameUserUserName>>>
    
    export type DeleteHostingPrivateDatabaseServiceNameUserUserNameMutationError = unknown

    /**
 * @summary Delete a user on a Web Cloud Database
 */
export const useDeleteHostingPrivateDatabaseServiceNameUserUserName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameUserUserName>>, TError,{serviceName: string;userName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameUserUserName>>,
        TError,
        {serviceName: string;userName: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingPrivateDatabaseServiceNameUserUserNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get user properties
 */
export const getHostingPrivateDatabaseServiceNameUserUserName = (
    serviceName: string,
    userName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseUserOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/user/${userName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameUserUserNameQueryKey = (serviceName: string,
    userName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/user/${userName}`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameUserUserNameQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>, TError = unknown>(serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameUserUserNameQueryKey(serviceName,userName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameUserUserName(serviceName,userName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameUserUserNameQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>>
export type GetHostingPrivateDatabaseServiceNameUserUserNameQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameUserUserName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>, TError = unknown>(
 serviceName: string,
    userName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameUserUserName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>, TError = unknown>(
 serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameUserUserName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>, TError = unknown>(
 serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get user properties
 */

export function useGetHostingPrivateDatabaseServiceNameUserUserName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>, TError = unknown>(
 serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameUserUserNameQueryOptions(serviceName,userName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the password of a user on a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameUserUserNameChangePassword = (
    serviceName: string,
    userName: string,
    hostingPrivateDatabaseUserChangePasswordPayloadOVH: HostingPrivateDatabaseUserChangePasswordPayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/user/${userName}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseUserChangePasswordPayloadOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameUserUserNameChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameChangePassword>>, TError,{serviceName: string;userName: string;data: HostingPrivateDatabaseUserChangePasswordPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameChangePassword>>, TError,{serviceName: string;userName: string;data: HostingPrivateDatabaseUserChangePasswordPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameChangePassword>>, {serviceName: string;userName: string;data: HostingPrivateDatabaseUserChangePasswordPayloadOVH}> = (props) => {
          const {serviceName,userName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameUserUserNameChangePassword(serviceName,userName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameUserUserNameChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameChangePassword>>>
    export type PostHostingPrivateDatabaseServiceNameUserUserNameChangePasswordMutationBody = HostingPrivateDatabaseUserChangePasswordPayloadOVH
    export type PostHostingPrivateDatabaseServiceNameUserUserNameChangePasswordMutationError = unknown

    /**
 * @summary Change the password of a user on a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameUserUserNameChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameChangePassword>>, TError,{serviceName: string;userName: string;data: HostingPrivateDatabaseUserChangePasswordPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameChangePassword>>,
        TError,
        {serviceName: string;userName: string;data: HostingPrivateDatabaseUserChangePasswordPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameUserUserNameChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all information about the grants for a user in a Web Cloud Database
 */
export const getHostingPrivateDatabaseServiceNameUserUserNameGrant = (
    serviceName: string,
    userName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/privateDatabase/${serviceName}/user/${userName}/grant`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameUserUserNameGrantQueryKey = (serviceName: string,
    userName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/user/${userName}/grant`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameUserUserNameGrantQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError = unknown>(serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameUserUserNameGrantQueryKey(serviceName,userName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameUserUserNameGrant(serviceName,userName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameUserUserNameGrantQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>>
export type GetHostingPrivateDatabaseServiceNameUserUserNameGrantQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameUserUserNameGrant<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError = unknown>(
 serviceName: string,
    userName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameUserUserNameGrant<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError = unknown>(
 serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameUserUserNameGrant<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError = unknown>(
 serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all information about the grants for a user in a Web Cloud Database
 */

export function useGetHostingPrivateDatabaseServiceNameUserUserNameGrant<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError = unknown>(
 serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameUserUserNameGrantQueryOptions(serviceName,userName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add grant on a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameUserUserNameGrant = (
    serviceName: string,
    userName: string,
    hostingPrivateDatabaseUserGrantCreateOVH: HostingPrivateDatabaseUserGrantCreateOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/user/${userName}/grant`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseUserGrantCreateOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameUserUserNameGrantMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError,{serviceName: string;userName: string;data: HostingPrivateDatabaseUserGrantCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError,{serviceName: string;userName: string;data: HostingPrivateDatabaseUserGrantCreateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameGrant>>, {serviceName: string;userName: string;data: HostingPrivateDatabaseUserGrantCreateOVH}> = (props) => {
          const {serviceName,userName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameUserUserNameGrant(serviceName,userName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameUserUserNameGrantMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameGrant>>>
    export type PostHostingPrivateDatabaseServiceNameUserUserNameGrantMutationBody = HostingPrivateDatabaseUserGrantCreateOVH
    export type PostHostingPrivateDatabaseServiceNameUserUserNameGrantMutationError = unknown

    /**
 * @summary Add grant on a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameUserUserNameGrant = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameGrant>>, TError,{serviceName: string;userName: string;data: HostingPrivateDatabaseUserGrantCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameGrant>>,
        TError,
        {serviceName: string;userName: string;data: HostingPrivateDatabaseUserGrantCreateOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameUserUserNameGrantMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a grant from a Web Cloud Database
 */
export const deleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName = (
    serviceName: string,
    userName: string,
    databaseName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/user/${userName}/grant/${databaseName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError,{serviceName: string;userName: string;databaseName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError,{serviceName: string;userName: string;databaseName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, {serviceName: string;userName: string;databaseName: string}> = (props) => {
          const {serviceName,userName,databaseName} = props ?? {};

          return  deleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName(serviceName,userName,databaseName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>>
    
    export type DeleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameMutationError = unknown

    /**
 * @summary Delete a grant from a Web Cloud Database
 */
export const useDeleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError,{serviceName: string;userName: string;databaseName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>,
        TError,
        {serviceName: string;userName: string;databaseName: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about the grants for a user in a Web Cloud Database
 */
export const getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName = (
    serviceName: string,
    userName: string,
    databaseName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseUserGrantOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/user/${userName}/grant/${databaseName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameQueryKey = (serviceName: string,
    userName: string,
    databaseName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/user/${userName}/grant/${databaseName}`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError = unknown>(serviceName: string,
    userName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameQueryKey(serviceName,userName,databaseName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName(serviceName,userName,databaseName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userName && databaseName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>>
export type GetHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError = unknown>(
 serviceName: string,
    userName: string,
    databaseName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError = unknown>(
 serviceName: string,
    userName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError = unknown>(
 serviceName: string,
    userName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about the grants for a user in a Web Cloud Database
 */

export function useGetHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError = unknown>(
 serviceName: string,
    userName: string,
    databaseName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameQueryOptions(serviceName,userName,databaseName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update the permissions of a grant for a user on a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdate = (
    serviceName: string,
    userName: string,
    databaseName: string,
    hostingPrivateDatabaseUserGrantUpdateOVH: HostingPrivateDatabaseUserGrantUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/user/${userName}/grant/${databaseName}/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseUserGrantUpdateOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdate>>, TError,{serviceName: string;userName: string;databaseName: string;data: HostingPrivateDatabaseUserGrantUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdate>>, TError,{serviceName: string;userName: string;databaseName: string;data: HostingPrivateDatabaseUserGrantUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdate>>, {serviceName: string;userName: string;databaseName: string;data: HostingPrivateDatabaseUserGrantUpdateOVH}> = (props) => {
          const {serviceName,userName,databaseName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdate(serviceName,userName,databaseName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdate>>>
    export type PostHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdateMutationBody = HostingPrivateDatabaseUserGrantUpdateOVH
    export type PostHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdateMutationError = unknown

    /**
 * @summary Update the permissions of a grant for a user on a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdate>>, TError,{serviceName: string;userName: string;databaseName: string;data: HostingPrivateDatabaseUserGrantUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdate>>,
        TError,
        {serviceName: string;userName: string;databaseName: string;data: HostingPrivateDatabaseUserGrantUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete access from the web hosting network on a Web Cloud Database
 */
export const deleteHostingPrivateDatabaseServiceNameWebhostingNetwork = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/webhostingNetwork`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingPrivateDatabaseServiceNameWebhostingNetworkMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameWebhostingNetwork>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteHostingPrivateDatabaseServiceNameWebhostingNetwork(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingPrivateDatabaseServiceNameWebhostingNetworkMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameWebhostingNetwork>>>
    
    export type DeleteHostingPrivateDatabaseServiceNameWebhostingNetworkMutationError = unknown

    /**
 * @summary Delete access from the web hosting network on a Web Cloud Database
 */
export const useDeleteHostingPrivateDatabaseServiceNameWebhostingNetwork = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameWebhostingNetwork>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingPrivateDatabaseServiceNameWebhostingNetworkMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Webhosting network status
 */
export const getHostingPrivateDatabaseServiceNameWebhostingNetwork = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseWebhostingNetworkOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/webhostingNetwork`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameWebhostingNetworkQueryKey = (serviceName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/webhostingNetwork`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameWebhostingNetworkQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameWebhostingNetworkQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameWebhostingNetwork(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameWebhostingNetworkQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>>
export type GetHostingPrivateDatabaseServiceNameWebhostingNetworkQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameWebhostingNetwork<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameWebhostingNetwork<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameWebhostingNetwork<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Webhosting network status
 */

export function useGetHostingPrivateDatabaseServiceNameWebhostingNetwork<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameWebhostingNetworkQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Permit access from the web hosting network on a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameWebhostingNetwork = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/webhostingNetwork`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameWebhostingNetworkMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameWebhostingNetwork>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameWebhostingNetwork(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameWebhostingNetworkMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameWebhostingNetwork>>>
    
    export type PostHostingPrivateDatabaseServiceNameWebhostingNetworkMutationError = unknown

    /**
 * @summary Permit access from the web hosting network on a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameWebhostingNetwork = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameWebhostingNetwork>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameWebhostingNetwork>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameWebhostingNetworkMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List linked webs
 */
export const getHostingPrivateDatabaseServiceNameWebs = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/privateDatabase/${serviceName}/webs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameWebsQueryKey = (serviceName: string,) => {
    return [`/hosting/privateDatabase/${serviceName}/webs`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameWebsQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameWebsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameWebs(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameWebsQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>>
export type GetHostingPrivateDatabaseServiceNameWebsQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameWebs<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameWebs<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameWebs<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List linked webs
 */

export function useGetHostingPrivateDatabaseServiceNameWebs<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWebs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameWebsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List whitelists on a Web Cloud Database
 */
export const getHostingPrivateDatabaseServiceNameWhitelist = (
    serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameWhitelistParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4BlockOVH[]>(
      {url: `/hosting/privateDatabase/${serviceName}/whitelist`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameWhitelistQueryKey = (serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameWhitelistParams,) => {
    return [`/hosting/privateDatabase/${serviceName}/whitelist`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameWhitelistQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>, TError = unknown>(serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameWhitelistParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameWhitelistQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameWhitelist(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameWhitelistQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>>
export type GetHostingPrivateDatabaseServiceNameWhitelistQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameWhitelist<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingPrivateDatabaseServiceNameWhitelistParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameWhitelist<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameWhitelistParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameWhitelist<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameWhitelistParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List whitelists on a Web Cloud Database
 */

export function useGetHostingPrivateDatabaseServiceNameWhitelist<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingPrivateDatabaseServiceNameWhitelistParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelist>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameWhitelistQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new IP whitelist in a Web Cloud Database
 */
export const postHostingPrivateDatabaseServiceNameWhitelist = (
    serviceName: string,
    hostingPrivateDatabaseWhitelistCreatePayloadOVH: HostingPrivateDatabaseWhitelistCreatePayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/whitelist`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseWhitelistCreatePayloadOVH, signal
    },
      options);
    }
  


export const getPostHostingPrivateDatabaseServiceNameWhitelistMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameWhitelist>>, TError,{serviceName: string;data: HostingPrivateDatabaseWhitelistCreatePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameWhitelist>>, TError,{serviceName: string;data: HostingPrivateDatabaseWhitelistCreatePayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameWhitelist>>, {serviceName: string;data: HostingPrivateDatabaseWhitelistCreatePayloadOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingPrivateDatabaseServiceNameWhitelist(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingPrivateDatabaseServiceNameWhitelistMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameWhitelist>>>
    export type PostHostingPrivateDatabaseServiceNameWhitelistMutationBody = HostingPrivateDatabaseWhitelistCreatePayloadOVH
    export type PostHostingPrivateDatabaseServiceNameWhitelistMutationError = unknown

    /**
 * @summary Create a new IP whitelist in a Web Cloud Database
 */
export const usePostHostingPrivateDatabaseServiceNameWhitelist = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameWhitelist>>, TError,{serviceName: string;data: HostingPrivateDatabaseWhitelistCreatePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingPrivateDatabaseServiceNameWhitelist>>,
        TError,
        {serviceName: string;data: HostingPrivateDatabaseWhitelistCreatePayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingPrivateDatabaseServiceNameWhitelistMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an IP whitelist from a Web Cloud Database
 */
export const deleteHostingPrivateDatabaseServiceNameWhitelistIp = (
    serviceName: string,
    ip: Ipv4BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseTaskOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/whitelist/${ip}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingPrivateDatabaseServiceNameWhitelistIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameWhitelistIp>>, TError,{serviceName: string;ip: Ipv4BlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameWhitelistIp>>, TError,{serviceName: string;ip: Ipv4BlockOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameWhitelistIp>>, {serviceName: string;ip: Ipv4BlockOVH}> = (props) => {
          const {serviceName,ip} = props ?? {};

          return  deleteHostingPrivateDatabaseServiceNameWhitelistIp(serviceName,ip,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingPrivateDatabaseServiceNameWhitelistIpMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameWhitelistIp>>>
    
    export type DeleteHostingPrivateDatabaseServiceNameWhitelistIpMutationError = unknown

    /**
 * @summary Delete an IP whitelist from a Web Cloud Database
 */
export const useDeleteHostingPrivateDatabaseServiceNameWhitelistIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameWhitelistIp>>, TError,{serviceName: string;ip: Ipv4BlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingPrivateDatabaseServiceNameWhitelistIp>>,
        TError,
        {serviceName: string;ip: Ipv4BlockOVH},
        TContext
      > => {

      const mutationOptions = getDeleteHostingPrivateDatabaseServiceNameWhitelistIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get whitelist properties
 */
export const getHostingPrivateDatabaseServiceNameWhitelistIp = (
    serviceName: string,
    ip: Ipv4BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingPrivateDatabaseWhitelistOVH>(
      {url: `/hosting/privateDatabase/${serviceName}/whitelist/${ip}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingPrivateDatabaseServiceNameWhitelistIpQueryKey = (serviceName: string,
    ip: Ipv4BlockOVH,) => {
    return [`/hosting/privateDatabase/${serviceName}/whitelist/${ip}`] as const;
    }

    
export const getGetHostingPrivateDatabaseServiceNameWhitelistIpQueryOptions = <TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>, TError = unknown>(serviceName: string,
    ip: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingPrivateDatabaseServiceNameWhitelistIpQueryKey(serviceName,ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>> = ({ signal }) => getHostingPrivateDatabaseServiceNameWhitelistIp(serviceName,ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingPrivateDatabaseServiceNameWhitelistIpQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>>
export type GetHostingPrivateDatabaseServiceNameWhitelistIpQueryError = unknown


export function useGetHostingPrivateDatabaseServiceNameWhitelistIp<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>, TError = unknown>(
 serviceName: string,
    ip: Ipv4BlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameWhitelistIp<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>, TError = unknown>(
 serviceName: string,
    ip: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingPrivateDatabaseServiceNameWhitelistIp<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>, TError = unknown>(
 serviceName: string,
    ip: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get whitelist properties
 */

export function useGetHostingPrivateDatabaseServiceNameWhitelistIp<TData = Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>, TError = unknown>(
 serviceName: string,
    ip: Ipv4BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingPrivateDatabaseServiceNameWhitelistIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingPrivateDatabaseServiceNameWhitelistIpQueryOptions(serviceName,ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update an IP whitelist in a Web Cloud Database
 */
export const putHostingPrivateDatabaseServiceNameWhitelistIp = (
    serviceName: string,
    ip: Ipv4BlockOVH,
    hostingPrivateDatabaseWhitelistOVH: NonReadonly<HostingPrivateDatabaseWhitelistOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/privateDatabase/${serviceName}/whitelist/${ip}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hostingPrivateDatabaseWhitelistOVH
    },
      options);
    }
  


export const getPutHostingPrivateDatabaseServiceNameWhitelistIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceNameWhitelistIp>>, TError,{serviceName: string;ip: Ipv4BlockOVH;data: NonReadonly<HostingPrivateDatabaseWhitelistOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceNameWhitelistIp>>, TError,{serviceName: string;ip: Ipv4BlockOVH;data: NonReadonly<HostingPrivateDatabaseWhitelistOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceNameWhitelistIp>>, {serviceName: string;ip: Ipv4BlockOVH;data: NonReadonly<HostingPrivateDatabaseWhitelistOVH>}> = (props) => {
          const {serviceName,ip,data} = props ?? {};

          return  putHostingPrivateDatabaseServiceNameWhitelistIp(serviceName,ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingPrivateDatabaseServiceNameWhitelistIpMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceNameWhitelistIp>>>
    export type PutHostingPrivateDatabaseServiceNameWhitelistIpMutationBody = NonReadonly<HostingPrivateDatabaseWhitelistOVH>
    export type PutHostingPrivateDatabaseServiceNameWhitelistIpMutationError = unknown

    /**
 * @summary Update an IP whitelist in a Web Cloud Database
 */
export const usePutHostingPrivateDatabaseServiceNameWhitelistIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceNameWhitelistIp>>, TError,{serviceName: string;ip: Ipv4BlockOVH;data: NonReadonly<HostingPrivateDatabaseWhitelistOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingPrivateDatabaseServiceNameWhitelistIp>>,
        TError,
        {serviceName: string;ip: Ipv4BlockOVH;data: NonReadonly<HostingPrivateDatabaseWhitelistOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingPrivateDatabaseServiceNameWhitelistIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLicensePleskOrderableVersionsParams,
  GetLicensePleskParams,
  GetLicensePleskServiceNameCanLicenseBeMovedToParams,
  GetLicensePleskServiceNameTasksParams,
  IpBlockOVH,
  LicenseChangeIpStatusOVH,
  LicenseOptionLabelOVH,
  LicenseOptionOVH,
  LicensePleskOrderConfigurationOVH,
  LicensePleskPleskOVH,
  LicensePleskPleskWithIAMOVH,
  LicenseTaskOVH,
  PostLicensePleskServiceNameChangeIpBody,
  PostLicensePleskServiceNameConfirmTerminationBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getLicensePlesk = (
    params?: GetLicensePleskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/plesk`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicensePleskQueryKey = (params?: GetLicensePleskParams,) => {
    return [`/license/plesk`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicensePleskQueryOptions = <TData = Awaited<ReturnType<typeof getLicensePlesk>>, TError = unknown>(params?: GetLicensePleskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicensePleskQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicensePlesk>>> = ({ signal }) => getLicensePlesk(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicensePlesk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicensePleskQueryResult = NonNullable<Awaited<ReturnType<typeof getLicensePlesk>>>
export type GetLicensePleskQueryError = unknown


export function useGetLicensePlesk<TData = Awaited<ReturnType<typeof getLicensePlesk>>, TError = unknown>(
 params: undefined |  GetLicensePleskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePlesk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePlesk<TData = Awaited<ReturnType<typeof getLicensePlesk>>, TError = unknown>(
 params?: GetLicensePleskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePlesk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePlesk<TData = Awaited<ReturnType<typeof getLicensePlesk>>, TError = unknown>(
 params?: GetLicensePleskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetLicensePlesk<TData = Awaited<ReturnType<typeof getLicensePlesk>>, TError = unknown>(
 params?: GetLicensePleskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicensePleskQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the orderable Plesk versions and their associated compatibilities
 */
export const getLicensePleskOrderableVersions = (
    params: GetLicensePleskOrderableVersionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicensePleskOrderConfigurationOVH[]>(
      {url: `/license/plesk/orderableVersions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicensePleskOrderableVersionsQueryKey = (params: GetLicensePleskOrderableVersionsParams,) => {
    return [`/license/plesk/orderableVersions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicensePleskOrderableVersionsQueryOptions = <TData = Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>, TError = unknown>(params: GetLicensePleskOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicensePleskOrderableVersionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>> = ({ signal }) => getLicensePleskOrderableVersions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicensePleskOrderableVersionsQueryResult = NonNullable<Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>>
export type GetLicensePleskOrderableVersionsQueryError = unknown


export function useGetLicensePleskOrderableVersions<TData = Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>, TError = unknown>(
 params: GetLicensePleskOrderableVersionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskOrderableVersions<TData = Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>, TError = unknown>(
 params: GetLicensePleskOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskOrderableVersions<TData = Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>, TError = unknown>(
 params: GetLicensePleskOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the orderable Plesk versions and their associated compatibilities
 */

export function useGetLicensePleskOrderableVersions<TData = Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>, TError = unknown>(
 params: GetLicensePleskOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicensePleskOrderableVersionsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicensePleskServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicensePleskPleskWithIAMOVH>(
      {url: `/license/plesk/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicensePleskServiceNameQueryKey = (serviceName: string,) => {
    return [`/license/plesk/${serviceName}`] as const;
    }

    
export const getGetLicensePleskServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicensePleskServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicensePleskServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicensePleskServiceName>>> = ({ signal }) => getLicensePleskServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicensePleskServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicensePleskServiceName>>>
export type GetLicensePleskServiceNameQueryError = unknown


export function useGetLicensePleskServiceName<TData = Awaited<ReturnType<typeof getLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceName<TData = Awaited<ReturnType<typeof getLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceName<TData = Awaited<ReturnType<typeof getLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicensePleskServiceName<TData = Awaited<ReturnType<typeof getLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicensePleskServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putLicensePleskServiceName = (
    serviceName: string,
    licensePleskPleskOVH: NonReadonly<LicensePleskPleskOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/plesk/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: licensePleskPleskOVH
    },
      options);
    }
  


export const getPutLicensePleskServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicensePleskServiceName>>, TError,{serviceName: string;data: NonReadonly<LicensePleskPleskOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicensePleskServiceName>>, TError,{serviceName: string;data: NonReadonly<LicensePleskPleskOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicensePleskServiceName>>, {serviceName: string;data: NonReadonly<LicensePleskPleskOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicensePleskServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicensePleskServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putLicensePleskServiceName>>>
    export type PutLicensePleskServiceNameMutationBody = NonReadonly<LicensePleskPleskOVH>
    export type PutLicensePleskServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutLicensePleskServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicensePleskServiceName>>, TError,{serviceName: string;data: NonReadonly<LicensePleskPleskOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicensePleskServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<LicensePleskPleskOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicensePleskServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns an array of ips where the license can be moved to
 */
export const getLicensePleskServiceNameAllowedDestinationIp = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/license/plesk/${serviceName}/allowedDestinationIp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicensePleskServiceNameAllowedDestinationIpQueryKey = (serviceName: string,) => {
    return [`/license/plesk/${serviceName}/allowedDestinationIp`] as const;
    }

    
export const getGetLicensePleskServiceNameAllowedDestinationIpQueryOptions = <TData = Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicensePleskServiceNameAllowedDestinationIpQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>> = ({ signal }) => getLicensePleskServiceNameAllowedDestinationIp(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicensePleskServiceNameAllowedDestinationIpQueryResult = NonNullable<Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>>
export type GetLicensePleskServiceNameAllowedDestinationIpQueryError = unknown


export function useGetLicensePleskServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns an array of ips where the license can be moved to
 */

export function useGetLicensePleskServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicensePleskServiceNameAllowedDestinationIpQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Will tell if the ip can accept the license
 */
export const getLicensePleskServiceNameCanLicenseBeMovedTo = (
    serviceName: string,
    params: GetLicensePleskServiceNameCanLicenseBeMovedToParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseChangeIpStatusOVH>(
      {url: `/license/plesk/${serviceName}/canLicenseBeMovedTo`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicensePleskServiceNameCanLicenseBeMovedToQueryKey = (serviceName: string,
    params: GetLicensePleskServiceNameCanLicenseBeMovedToParams,) => {
    return [`/license/plesk/${serviceName}/canLicenseBeMovedTo`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicensePleskServiceNameCanLicenseBeMovedToQueryOptions = <TData = Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>, TError = unknown>(serviceName: string,
    params: GetLicensePleskServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicensePleskServiceNameCanLicenseBeMovedToQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>> = ({ signal }) => getLicensePleskServiceNameCanLicenseBeMovedTo(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicensePleskServiceNameCanLicenseBeMovedToQueryResult = NonNullable<Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>>
export type GetLicensePleskServiceNameCanLicenseBeMovedToQueryError = unknown


export function useGetLicensePleskServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicensePleskServiceNameCanLicenseBeMovedToParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicensePleskServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicensePleskServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Will tell if the ip can accept the license
 */

export function useGetLicensePleskServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicensePleskServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicensePleskServiceNameCanLicenseBeMovedToQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Move this license to another Ip
 */
export const postLicensePleskServiceNameChangeIp = (
    serviceName: string,
    postLicensePleskServiceNameChangeIpBody: PostLicensePleskServiceNameChangeIpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/plesk/${serviceName}/changeIp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicensePleskServiceNameChangeIpBody, signal
    },
      options);
    }
  


export const getPostLicensePleskServiceNameChangeIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicensePleskServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicensePleskServiceNameChangeIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicensePleskServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicensePleskServiceNameChangeIpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicensePleskServiceNameChangeIp>>, {serviceName: string;data: PostLicensePleskServiceNameChangeIpBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicensePleskServiceNameChangeIp(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicensePleskServiceNameChangeIpMutationResult = NonNullable<Awaited<ReturnType<typeof postLicensePleskServiceNameChangeIp>>>
    export type PostLicensePleskServiceNameChangeIpMutationBody = PostLicensePleskServiceNameChangeIpBody
    export type PostLicensePleskServiceNameChangeIpMutationError = unknown

    /**
 * @summary Move this license to another Ip
 */
export const usePostLicensePleskServiceNameChangeIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicensePleskServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicensePleskServiceNameChangeIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicensePleskServiceNameChangeIp>>,
        TError,
        {serviceName: string;data: PostLicensePleskServiceNameChangeIpBody},
        TContext
      > => {

      const mutationOptions = getPostLicensePleskServiceNameChangeIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postLicensePleskServiceNameConfirmTermination = (
    serviceName: string,
    postLicensePleskServiceNameConfirmTerminationBody: PostLicensePleskServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/plesk/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicensePleskServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostLicensePleskServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicensePleskServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicensePleskServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicensePleskServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicensePleskServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicensePleskServiceNameConfirmTermination>>, {serviceName: string;data: PostLicensePleskServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicensePleskServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicensePleskServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postLicensePleskServiceNameConfirmTermination>>>
    export type PostLicensePleskServiceNameConfirmTerminationMutationBody = PostLicensePleskServiceNameConfirmTerminationBody
    export type PostLicensePleskServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostLicensePleskServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicensePleskServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicensePleskServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicensePleskServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostLicensePleskServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostLicensePleskServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Creates a task to install the license on it's ip
 */
export const postLicensePleskServiceNameInstallLicense = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/plesk/${serviceName}/installLicense`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicensePleskServiceNameInstallLicenseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicensePleskServiceNameInstallLicense>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicensePleskServiceNameInstallLicense>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicensePleskServiceNameInstallLicense>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicensePleskServiceNameInstallLicense(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicensePleskServiceNameInstallLicenseMutationResult = NonNullable<Awaited<ReturnType<typeof postLicensePleskServiceNameInstallLicense>>>
    
    export type PostLicensePleskServiceNameInstallLicenseMutationError = unknown

    /**
 * @summary Creates a task to install the license on it's ip
 */
export const usePostLicensePleskServiceNameInstallLicense = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicensePleskServiceNameInstallLicense>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicensePleskServiceNameInstallLicense>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicensePleskServiceNameInstallLicenseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary options attached to this license
 */
export const getLicensePleskServiceNameOption = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOptionLabelOVH[]>(
      {url: `/license/plesk/${serviceName}/option`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicensePleskServiceNameOptionQueryKey = (serviceName: string,) => {
    return [`/license/plesk/${serviceName}/option`] as const;
    }

    
export const getGetLicensePleskServiceNameOptionQueryOptions = <TData = Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicensePleskServiceNameOptionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>> = ({ signal }) => getLicensePleskServiceNameOption(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicensePleskServiceNameOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>>
export type GetLicensePleskServiceNameOptionQueryError = unknown


export function useGetLicensePleskServiceNameOption<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameOption<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameOption<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary options attached to this license
 */

export function useGetLicensePleskServiceNameOption<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicensePleskServiceNameOptionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary release this Option
 */
export const deleteLicensePleskServiceNameOptionLabel = (
    serviceName: string,
    label: LicenseOptionLabelOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/plesk/${serviceName}/option/${label}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteLicensePleskServiceNameOptionLabelMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLicensePleskServiceNameOptionLabel>>, TError,{serviceName: string;label: LicenseOptionLabelOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteLicensePleskServiceNameOptionLabel>>, TError,{serviceName: string;label: LicenseOptionLabelOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLicensePleskServiceNameOptionLabel>>, {serviceName: string;label: LicenseOptionLabelOVH}> = (props) => {
          const {serviceName,label} = props ?? {};

          return  deleteLicensePleskServiceNameOptionLabel(serviceName,label,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLicensePleskServiceNameOptionLabelMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLicensePleskServiceNameOptionLabel>>>
    
    export type DeleteLicensePleskServiceNameOptionLabelMutationError = unknown

    /**
 * @summary release this Option
 */
export const useDeleteLicensePleskServiceNameOptionLabel = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLicensePleskServiceNameOptionLabel>>, TError,{serviceName: string;label: LicenseOptionLabelOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteLicensePleskServiceNameOptionLabel>>,
        TError,
        {serviceName: string;label: LicenseOptionLabelOVH},
        TContext
      > => {

      const mutationOptions = getDeleteLicensePleskServiceNameOptionLabelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getLicensePleskServiceNameOptionLabel = (
    serviceName: string,
    label: LicenseOptionLabelOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOptionOVH>(
      {url: `/license/plesk/${serviceName}/option/${label}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicensePleskServiceNameOptionLabelQueryKey = (serviceName: string,
    label: LicenseOptionLabelOVH,) => {
    return [`/license/plesk/${serviceName}/option/${label}`] as const;
    }

    
export const getGetLicensePleskServiceNameOptionLabelQueryOptions = <TData = Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>, TError = unknown>(serviceName: string,
    label: LicenseOptionLabelOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicensePleskServiceNameOptionLabelQueryKey(serviceName,label);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>> = ({ signal }) => getLicensePleskServiceNameOptionLabel(serviceName,label, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && label), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicensePleskServiceNameOptionLabelQueryResult = NonNullable<Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>>
export type GetLicensePleskServiceNameOptionLabelQueryError = unknown


export function useGetLicensePleskServiceNameOptionLabel<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>, TError = unknown>(
 serviceName: string,
    label: LicenseOptionLabelOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameOptionLabel<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>, TError = unknown>(
 serviceName: string,
    label: LicenseOptionLabelOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameOptionLabel<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>, TError = unknown>(
 serviceName: string,
    label: LicenseOptionLabelOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicensePleskServiceNameOptionLabel<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>, TError = unknown>(
 serviceName: string,
    label: LicenseOptionLabelOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameOptionLabel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicensePleskServiceNameOptionLabelQueryOptions(serviceName,label,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getLicensePleskServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/license/plesk/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicensePleskServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/license/plesk/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetLicensePleskServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicensePleskServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>> = ({ signal }) => getLicensePleskServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicensePleskServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>>
export type GetLicensePleskServiceNameServiceInfosQueryError = unknown


export function useGetLicensePleskServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetLicensePleskServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicensePleskServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putLicensePleskServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/plesk/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutLicensePleskServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicensePleskServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicensePleskServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicensePleskServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicensePleskServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicensePleskServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putLicensePleskServiceNameServiceInfos>>>
    export type PutLicensePleskServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutLicensePleskServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutLicensePleskServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicensePleskServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicensePleskServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicensePleskServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary tasks linked to this license
 */
export const getLicensePleskServiceNameTasks = (
    serviceName: string,
    params?: GetLicensePleskServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/license/plesk/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicensePleskServiceNameTasksQueryKey = (serviceName: string,
    params?: GetLicensePleskServiceNameTasksParams,) => {
    return [`/license/plesk/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicensePleskServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetLicensePleskServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicensePleskServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>> = ({ signal }) => getLicensePleskServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicensePleskServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>>
export type GetLicensePleskServiceNameTasksQueryError = unknown


export function useGetLicensePleskServiceNameTasks<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicensePleskServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameTasks<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicensePleskServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameTasks<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicensePleskServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary tasks linked to this license
 */

export function useGetLicensePleskServiceNameTasks<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicensePleskServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicensePleskServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicensePleskServiceNameTasksTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/plesk/${serviceName}/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicensePleskServiceNameTasksTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/license/plesk/${serviceName}/tasks/${taskId}`] as const;
    }

    
export const getGetLicensePleskServiceNameTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicensePleskServiceNameTasksTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>> = ({ signal }) => getLicensePleskServiceNameTasksTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicensePleskServiceNameTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>>
export type GetLicensePleskServiceNameTasksTaskIdQueryError = unknown


export function useGetLicensePleskServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicensePleskServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicensePleskServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicensePleskServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicensePleskServiceNameTasksTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postLicensePleskServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/plesk/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicensePleskServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicensePleskServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicensePleskServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicensePleskServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicensePleskServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicensePleskServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postLicensePleskServiceNameTerminate>>>
    
    export type PostLicensePleskServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostLicensePleskServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicensePleskServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicensePleskServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicensePleskServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLicenseSqlserverOrderableVersionsParams,
  GetLicenseSqlserverParams,
  GetLicenseSqlserverServiceNameTasksParams,
  LicenseSqlServerOrderConfigurationOVH,
  LicenseSqlserverSqlServerWithIAMOVH,
  LicenseTaskOVH,
  PostLicenseSqlserverServiceNameConfirmTerminationBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getLicenseSqlserver = (
    params?: GetLicenseSqlserverParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/sqlserver`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseSqlserverQueryKey = (params?: GetLicenseSqlserverParams,) => {
    return [`/license/sqlserver`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseSqlserverQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseSqlserver>>, TError = unknown>(params?: GetLicenseSqlserverParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserver>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseSqlserverQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseSqlserver>>> = ({ signal }) => getLicenseSqlserver(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserver>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseSqlserverQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseSqlserver>>>
export type GetLicenseSqlserverQueryError = unknown


export function useGetLicenseSqlserver<TData = Awaited<ReturnType<typeof getLicenseSqlserver>>, TError = unknown>(
 params: undefined |  GetLicenseSqlserverParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserver>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseSqlserver>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseSqlserver<TData = Awaited<ReturnType<typeof getLicenseSqlserver>>, TError = unknown>(
 params?: GetLicenseSqlserverParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserver>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseSqlserver>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseSqlserver<TData = Awaited<ReturnType<typeof getLicenseSqlserver>>, TError = unknown>(
 params?: GetLicenseSqlserverParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserver>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetLicenseSqlserver<TData = Awaited<ReturnType<typeof getLicenseSqlserver>>, TError = unknown>(
 params?: GetLicenseSqlserverParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserver>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseSqlserverQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the orderable Sql Server versions
 */
export const getLicenseSqlserverOrderableVersions = (
    params: GetLicenseSqlserverOrderableVersionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseSqlServerOrderConfigurationOVH[]>(
      {url: `/license/sqlserver/orderableVersions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseSqlserverOrderableVersionsQueryKey = (params: GetLicenseSqlserverOrderableVersionsParams,) => {
    return [`/license/sqlserver/orderableVersions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseSqlserverOrderableVersionsQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>, TError = unknown>(params: GetLicenseSqlserverOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseSqlserverOrderableVersionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>> = ({ signal }) => getLicenseSqlserverOrderableVersions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseSqlserverOrderableVersionsQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>>
export type GetLicenseSqlserverOrderableVersionsQueryError = unknown


export function useGetLicenseSqlserverOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>, TError = unknown>(
 params: GetLicenseSqlserverOrderableVersionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseSqlserverOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>, TError = unknown>(
 params: GetLicenseSqlserverOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseSqlserverOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>, TError = unknown>(
 params: GetLicenseSqlserverOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the orderable Sql Server versions
 */

export function useGetLicenseSqlserverOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>, TError = unknown>(
 params: GetLicenseSqlserverOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseSqlserverOrderableVersionsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseSqlserverServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseSqlserverSqlServerWithIAMOVH>(
      {url: `/license/sqlserver/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseSqlserverServiceNameQueryKey = (serviceName: string,) => {
    return [`/license/sqlserver/${serviceName}`] as const;
    }

    
export const getGetLicenseSqlserverServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseSqlserverServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>> = ({ signal }) => getLicenseSqlserverServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseSqlserverServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>>
export type GetLicenseSqlserverServiceNameQueryError = unknown


export function useGetLicenseSqlserverServiceName<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseSqlserverServiceName<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseSqlserverServiceName<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseSqlserverServiceName<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseSqlserverServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Confirm service termination
 */
export const postLicenseSqlserverServiceNameConfirmTermination = (
    serviceName: string,
    postLicenseSqlserverServiceNameConfirmTerminationBody: PostLicenseSqlserverServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/sqlserver/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseSqlserverServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostLicenseSqlserverServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseSqlserverServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseSqlserverServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseSqlserverServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseSqlserverServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseSqlserverServiceNameConfirmTermination>>, {serviceName: string;data: PostLicenseSqlserverServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseSqlserverServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseSqlserverServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseSqlserverServiceNameConfirmTermination>>>
    export type PostLicenseSqlserverServiceNameConfirmTerminationMutationBody = PostLicenseSqlserverServiceNameConfirmTerminationBody
    export type PostLicenseSqlserverServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostLicenseSqlserverServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseSqlserverServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseSqlserverServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseSqlserverServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostLicenseSqlserverServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseSqlserverServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getLicenseSqlserverServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/license/sqlserver/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseSqlserverServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/license/sqlserver/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetLicenseSqlserverServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseSqlserverServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>> = ({ signal }) => getLicenseSqlserverServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseSqlserverServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>>
export type GetLicenseSqlserverServiceNameServiceInfosQueryError = unknown


export function useGetLicenseSqlserverServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseSqlserverServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseSqlserverServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetLicenseSqlserverServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseSqlserverServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putLicenseSqlserverServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/sqlserver/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutLicenseSqlserverServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseSqlserverServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseSqlserverServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseSqlserverServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseSqlserverServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseSqlserverServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseSqlserverServiceNameServiceInfos>>>
    export type PutLicenseSqlserverServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutLicenseSqlserverServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutLicenseSqlserverServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseSqlserverServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseSqlserverServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseSqlserverServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Tasks linked to this license
 */
export const getLicenseSqlserverServiceNameTasks = (
    serviceName: string,
    params?: GetLicenseSqlserverServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/license/sqlserver/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseSqlserverServiceNameTasksQueryKey = (serviceName: string,
    params?: GetLicenseSqlserverServiceNameTasksParams,) => {
    return [`/license/sqlserver/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseSqlserverServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetLicenseSqlserverServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseSqlserverServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>> = ({ signal }) => getLicenseSqlserverServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseSqlserverServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>>
export type GetLicenseSqlserverServiceNameTasksQueryError = unknown


export function useGetLicenseSqlserverServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicenseSqlserverServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseSqlserverServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseSqlserverServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseSqlserverServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseSqlserverServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Tasks linked to this license
 */

export function useGetLicenseSqlserverServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseSqlserverServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseSqlserverServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseSqlserverServiceNameTasksTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/sqlserver/${serviceName}/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseSqlserverServiceNameTasksTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/license/sqlserver/${serviceName}/tasks/${taskId}`] as const;
    }

    
export const getGetLicenseSqlserverServiceNameTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseSqlserverServiceNameTasksTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>> = ({ signal }) => getLicenseSqlserverServiceNameTasksTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseSqlserverServiceNameTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>>
export type GetLicenseSqlserverServiceNameTasksTaskIdQueryError = unknown


export function useGetLicenseSqlserverServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseSqlserverServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseSqlserverServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseSqlserverServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseSqlserverServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseSqlserverServiceNameTasksTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postLicenseSqlserverServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/sqlserver/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicenseSqlserverServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseSqlserverServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseSqlserverServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseSqlserverServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicenseSqlserverServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseSqlserverServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseSqlserverServiceNameTerminate>>>
    
    export type PostLicenseSqlserverServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostLicenseSqlserverServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseSqlserverServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseSqlserverServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicenseSqlserverServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

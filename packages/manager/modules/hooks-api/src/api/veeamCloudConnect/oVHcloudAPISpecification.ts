/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetVeeamCloudConnectParams,
  GetVeeamCloudConnectServiceNameTaskParams,
  PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaBody,
  ServicesServiceOVH,
  VeeamCloudConnectAccountWithIAMOVH,
  VeeamCloudConnectBackupRepositoryOVH,
  VeeamCloudConnectOfferCapabilitiesOVH,
  VeeamCloudConnectOfferOVH,
  VeeamCloudConnectTaskOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List Veeam Cloud Connect services
 */
export const getVeeamCloudConnect = (
    params?: GetVeeamCloudConnectParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/veeamCloudConnect`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVeeamCloudConnectQueryKey = (params?: GetVeeamCloudConnectParams,) => {
    return [`/veeamCloudConnect`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVeeamCloudConnectQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamCloudConnect>>, TError = unknown>(params?: GetVeeamCloudConnectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamCloudConnectQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamCloudConnect>>> = ({ signal }) => getVeeamCloudConnect(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnect>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamCloudConnectQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamCloudConnect>>>
export type GetVeeamCloudConnectQueryError = unknown


export function useGetVeeamCloudConnect<TData = Awaited<ReturnType<typeof getVeeamCloudConnect>>, TError = unknown>(
 params: undefined |  GetVeeamCloudConnectParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnect>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnect<TData = Awaited<ReturnType<typeof getVeeamCloudConnect>>, TError = unknown>(
 params?: GetVeeamCloudConnectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnect>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnect<TData = Awaited<ReturnType<typeof getVeeamCloudConnect>>, TError = unknown>(
 params?: GetVeeamCloudConnectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List Veeam Cloud Connect services
 */

export function useGetVeeamCloudConnect<TData = Awaited<ReturnType<typeof getVeeamCloudConnect>>, TError = unknown>(
 params?: GetVeeamCloudConnectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamCloudConnectQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Veeam Cloud Connect
 */
export const getVeeamCloudConnectServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VeeamCloudConnectAccountWithIAMOVH>(
      {url: `/veeamCloudConnect/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVeeamCloudConnectServiceNameQueryKey = (serviceName: string,) => {
    return [`/veeamCloudConnect/${serviceName}`] as const;
    }

    
export const getGetVeeamCloudConnectServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamCloudConnectServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>> = ({ signal }) => getVeeamCloudConnectServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamCloudConnectServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>>
export type GetVeeamCloudConnectServiceNameQueryError = unknown


export function useGetVeeamCloudConnectServiceName<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceName<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceName<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Veeam Cloud Connect
 */

export function useGetVeeamCloudConnectServiceName<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamCloudConnectServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List Veeam backup repositories
 */
export const getVeeamCloudConnectServiceNameBackupRepository = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/veeamCloudConnect/${serviceName}/backupRepository`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVeeamCloudConnectServiceNameBackupRepositoryQueryKey = (serviceName: string,) => {
    return [`/veeamCloudConnect/${serviceName}/backupRepository`] as const;
    }

    
export const getGetVeeamCloudConnectServiceNameBackupRepositoryQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamCloudConnectServiceNameBackupRepositoryQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>> = ({ signal }) => getVeeamCloudConnectServiceNameBackupRepository(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamCloudConnectServiceNameBackupRepositoryQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>>
export type GetVeeamCloudConnectServiceNameBackupRepositoryQueryError = unknown


export function useGetVeeamCloudConnectServiceNameBackupRepository<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameBackupRepository<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameBackupRepository<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List Veeam backup repositories
 */

export function useGetVeeamCloudConnectServiceNameBackupRepository<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepository>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamCloudConnectServiceNameBackupRepositoryQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create backup repository
 */
export const postVeeamCloudConnectServiceNameBackupRepository = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VeeamCloudConnectTaskOVH[]>(
      {url: `/veeamCloudConnect/${serviceName}/backupRepository`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVeeamCloudConnectServiceNameBackupRepositoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameBackupRepository>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameBackupRepository>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameBackupRepository>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVeeamCloudConnectServiceNameBackupRepository(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVeeamCloudConnectServiceNameBackupRepositoryMutationResult = NonNullable<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameBackupRepository>>>
    
    export type PostVeeamCloudConnectServiceNameBackupRepositoryMutationError = unknown

    /**
 * @summary Create backup repository
 */
export const usePostVeeamCloudConnectServiceNameBackupRepository = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameBackupRepository>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameBackupRepository>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVeeamCloudConnectServiceNameBackupRepositoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete backup repository
 */
export const deleteVeeamCloudConnectServiceNameBackupRepositoryInventoryName = (
    serviceName: string,
    inventoryName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VeeamCloudConnectTaskOVH[]>(
      {url: `/veeamCloudConnect/${serviceName}/backupRepository/${inventoryName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVeeamCloudConnectServiceNameBackupRepositoryInventoryNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError,{serviceName: string;inventoryName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError,{serviceName: string;inventoryName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, {serviceName: string;inventoryName: string}> = (props) => {
          const {serviceName,inventoryName} = props ?? {};

          return  deleteVeeamCloudConnectServiceNameBackupRepositoryInventoryName(serviceName,inventoryName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVeeamCloudConnectServiceNameBackupRepositoryInventoryNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>>
    
    export type DeleteVeeamCloudConnectServiceNameBackupRepositoryInventoryNameMutationError = unknown

    /**
 * @summary Delete backup repository
 */
export const useDeleteVeeamCloudConnectServiceNameBackupRepositoryInventoryName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError,{serviceName: string;inventoryName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>,
        TError,
        {serviceName: string;inventoryName: string},
        TContext
      > => {

      const mutationOptions = getDeleteVeeamCloudConnectServiceNameBackupRepositoryInventoryNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Veeam backup repository
 */
export const getVeeamCloudConnectServiceNameBackupRepositoryInventoryName = (
    serviceName: string,
    inventoryName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VeeamCloudConnectBackupRepositoryOVH>(
      {url: `/veeamCloudConnect/${serviceName}/backupRepository/${inventoryName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVeeamCloudConnectServiceNameBackupRepositoryInventoryNameQueryKey = (serviceName: string,
    inventoryName: string,) => {
    return [`/veeamCloudConnect/${serviceName}/backupRepository/${inventoryName}`] as const;
    }

    
export const getGetVeeamCloudConnectServiceNameBackupRepositoryInventoryNameQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError = unknown>(serviceName: string,
    inventoryName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamCloudConnectServiceNameBackupRepositoryInventoryNameQueryKey(serviceName,inventoryName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>> = ({ signal }) => getVeeamCloudConnectServiceNameBackupRepositoryInventoryName(serviceName,inventoryName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && inventoryName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamCloudConnectServiceNameBackupRepositoryInventoryNameQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>>
export type GetVeeamCloudConnectServiceNameBackupRepositoryInventoryNameQueryError = unknown


export function useGetVeeamCloudConnectServiceNameBackupRepositoryInventoryName<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError = unknown>(
 serviceName: string,
    inventoryName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameBackupRepositoryInventoryName<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError = unknown>(
 serviceName: string,
    inventoryName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameBackupRepositoryInventoryName<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError = unknown>(
 serviceName: string,
    inventoryName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Veeam backup repository
 */

export function useGetVeeamCloudConnectServiceNameBackupRepositoryInventoryName<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError = unknown>(
 serviceName: string,
    inventoryName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameBackupRepositoryInventoryName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamCloudConnectServiceNameBackupRepositoryInventoryNameQueryOptions(serviceName,inventoryName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change quota
 */
export const postVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuota = (
    serviceName: string,
    inventoryName: string,
    postVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaBody: PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VeeamCloudConnectTaskOVH[]>(
      {url: `/veeamCloudConnect/${serviceName}/backupRepository/${inventoryName}/upgradeQuota`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaBody, signal
    },
      options);
    }
  


export const getPostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuota>>, TError,{serviceName: string;inventoryName: string;data: PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuota>>, TError,{serviceName: string;inventoryName: string;data: PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuota>>, {serviceName: string;inventoryName: string;data: PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaBody}> = (props) => {
          const {serviceName,inventoryName,data} = props ?? {};

          return  postVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuota(serviceName,inventoryName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaMutationResult = NonNullable<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuota>>>
    export type PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaMutationBody = PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaBody
    export type PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaMutationError = unknown

    /**
 * @summary Change quota
 */
export const usePostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuota = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuota>>, TError,{serviceName: string;inventoryName: string;data: PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuota>>,
        TError,
        {serviceName: string;inventoryName: string;data: PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaBody},
        TContext
      > => {

      const mutationOptions = getPostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get capabilities
 */
export const getVeeamCloudConnectServiceNameCapabilities = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VeeamCloudConnectOfferCapabilitiesOVH>(
      {url: `/veeamCloudConnect/${serviceName}/capabilities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVeeamCloudConnectServiceNameCapabilitiesQueryKey = (serviceName: string,) => {
    return [`/veeamCloudConnect/${serviceName}/capabilities`] as const;
    }

    
export const getGetVeeamCloudConnectServiceNameCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamCloudConnectServiceNameCapabilitiesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>> = ({ signal }) => getVeeamCloudConnectServiceNameCapabilities(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamCloudConnectServiceNameCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>>
export type GetVeeamCloudConnectServiceNameCapabilitiesQueryError = unknown


export function useGetVeeamCloudConnectServiceNameCapabilities<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameCapabilities<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameCapabilities<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get capabilities
 */

export function useGetVeeamCloudConnectServiceNameCapabilities<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamCloudConnectServiceNameCapabilitiesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get available offer upgrades
 */
export const getVeeamCloudConnectServiceNameOrderableUpgrade = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VeeamCloudConnectOfferOVH[]>(
      {url: `/veeamCloudConnect/${serviceName}/orderableUpgrade`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVeeamCloudConnectServiceNameOrderableUpgradeQueryKey = (serviceName: string,) => {
    return [`/veeamCloudConnect/${serviceName}/orderableUpgrade`] as const;
    }

    
export const getGetVeeamCloudConnectServiceNameOrderableUpgradeQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamCloudConnectServiceNameOrderableUpgradeQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>> = ({ signal }) => getVeeamCloudConnectServiceNameOrderableUpgrade(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamCloudConnectServiceNameOrderableUpgradeQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>>
export type GetVeeamCloudConnectServiceNameOrderableUpgradeQueryError = unknown


export function useGetVeeamCloudConnectServiceNameOrderableUpgrade<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameOrderableUpgrade<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameOrderableUpgrade<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get available offer upgrades
 */

export function useGetVeeamCloudConnectServiceNameOrderableUpgrade<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameOrderableUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamCloudConnectServiceNameOrderableUpgradeQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Reset password
 */
export const postVeeamCloudConnectServiceNameResetPassword = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VeeamCloudConnectTaskOVH>(
      {url: `/veeamCloudConnect/${serviceName}/resetPassword`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVeeamCloudConnectServiceNameResetPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameResetPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameResetPassword>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameResetPassword>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVeeamCloudConnectServiceNameResetPassword(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVeeamCloudConnectServiceNameResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameResetPassword>>>
    
    export type PostVeeamCloudConnectServiceNameResetPasswordMutationError = unknown

    /**
 * @summary Reset password
 */
export const usePostVeeamCloudConnectServiceNameResetPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameResetPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVeeamCloudConnectServiceNameResetPassword>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVeeamCloudConnectServiceNameResetPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getVeeamCloudConnectServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/veeamCloudConnect/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVeeamCloudConnectServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/veeamCloudConnect/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetVeeamCloudConnectServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamCloudConnectServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>> = ({ signal }) => getVeeamCloudConnectServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamCloudConnectServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>>
export type GetVeeamCloudConnectServiceNameServiceInfosQueryError = unknown


export function useGetVeeamCloudConnectServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetVeeamCloudConnectServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamCloudConnectServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putVeeamCloudConnectServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/veeamCloudConnect/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutVeeamCloudConnectServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVeeamCloudConnectServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putVeeamCloudConnectServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVeeamCloudConnectServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putVeeamCloudConnectServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVeeamCloudConnectServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putVeeamCloudConnectServiceNameServiceInfos>>>
    export type PutVeeamCloudConnectServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutVeeamCloudConnectServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutVeeamCloudConnectServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVeeamCloudConnectServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVeeamCloudConnectServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutVeeamCloudConnectServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List operations
 */
export const getVeeamCloudConnectServiceNameTask = (
    serviceName: string,
    params?: GetVeeamCloudConnectServiceNameTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/veeamCloudConnect/${serviceName}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVeeamCloudConnectServiceNameTaskQueryKey = (serviceName: string,
    params?: GetVeeamCloudConnectServiceNameTaskParams,) => {
    return [`/veeamCloudConnect/${serviceName}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVeeamCloudConnectServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>, TError = unknown>(serviceName: string,
    params?: GetVeeamCloudConnectServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamCloudConnectServiceNameTaskQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>> = ({ signal }) => getVeeamCloudConnectServiceNameTask(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamCloudConnectServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>>
export type GetVeeamCloudConnectServiceNameTaskQueryError = unknown


export function useGetVeeamCloudConnectServiceNameTask<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetVeeamCloudConnectServiceNameTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameTask<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetVeeamCloudConnectServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameTask<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetVeeamCloudConnectServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List operations
 */

export function useGetVeeamCloudConnectServiceNameTask<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetVeeamCloudConnectServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamCloudConnectServiceNameTaskQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get operation
 */
export const getVeeamCloudConnectServiceNameTaskTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VeeamCloudConnectTaskOVH>(
      {url: `/veeamCloudConnect/${serviceName}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVeeamCloudConnectServiceNameTaskTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/veeamCloudConnect/${serviceName}/task/${taskId}`] as const;
    }

    
export const getGetVeeamCloudConnectServiceNameTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamCloudConnectServiceNameTaskTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>> = ({ signal }) => getVeeamCloudConnectServiceNameTaskTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamCloudConnectServiceNameTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>>
export type GetVeeamCloudConnectServiceNameTaskTaskIdQueryError = unknown


export function useGetVeeamCloudConnectServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamCloudConnectServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get operation
 */

export function useGetVeeamCloudConnectServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamCloudConnectServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamCloudConnectServiceNameTaskTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





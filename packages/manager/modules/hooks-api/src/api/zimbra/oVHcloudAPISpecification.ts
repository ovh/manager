/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CommonEventOVH,
  CommonTaskOVH,
  GetZimbraPlatformParams,
  GetZimbraPlatformPlatformId404,
  GetZimbraPlatformPlatformIdAccount404,
  GetZimbraPlatformPlatformIdAccountAccountId404,
  GetZimbraPlatformPlatformIdAccountAccountIdEvent404,
  GetZimbraPlatformPlatformIdAccountAccountIdTask404,
  GetZimbraPlatformPlatformIdAccountParams,
  GetZimbraPlatformPlatformIdAlias404,
  GetZimbraPlatformPlatformIdAliasAliasId404,
  GetZimbraPlatformPlatformIdAliasParams,
  GetZimbraPlatformPlatformIdDomain404,
  GetZimbraPlatformPlatformIdDomainDomainId404,
  GetZimbraPlatformPlatformIdDomainDomainIdEvent404,
  GetZimbraPlatformPlatformIdDomainDomainIdTask404,
  GetZimbraPlatformPlatformIdDomainParams,
  GetZimbraPlatformPlatformIdEvent404,
  GetZimbraPlatformPlatformIdEventParams,
  GetZimbraPlatformPlatformIdMailingList404,
  GetZimbraPlatformPlatformIdMailingListMailingListId404,
  GetZimbraPlatformPlatformIdMailingListMailingListIdEvent404,
  GetZimbraPlatformPlatformIdMailingListMailingListIdTask404,
  GetZimbraPlatformPlatformIdMailingListParams,
  GetZimbraPlatformPlatformIdOrganization404,
  GetZimbraPlatformPlatformIdOrganizationOrganizationId404,
  GetZimbraPlatformPlatformIdOrganizationOrganizationIdEvent404,
  GetZimbraPlatformPlatformIdOrganizationOrganizationIdTask404,
  GetZimbraPlatformPlatformIdRedirection404,
  GetZimbraPlatformPlatformIdRedirectionParams,
  GetZimbraPlatformPlatformIdRedirectionRedirectionId404,
  GetZimbraPlatformPlatformIdTask404,
  GetZimbraPlatformPlatformIdTaskParams,
  GetZimbraPlatformPlatformIdTaskTaskId404,
  GetZimbraProjectParams,
  GetZimbraProjectProjectId404,
  PostZimbraPlatformPlatformIdAccount400,
  PostZimbraPlatformPlatformIdAccount404,
  PostZimbraPlatformPlatformIdAccount409,
  PostZimbraPlatformPlatformIdDomain400,
  PostZimbraPlatformPlatformIdDomain404,
  PostZimbraPlatformPlatformIdOrganization404,
  PostZimbraProjectProjectIdPlatform404,
  PutZimbraPlatformPlatformId412,
  PutZimbraPlatformPlatformIdAccountAccountId404,
  PutZimbraPlatformPlatformIdAccountAccountId412,
  PutZimbraPlatformPlatformIdDomainDomainId404,
  PutZimbraPlatformPlatformIdDomainDomainId412,
  PutZimbraPlatformPlatformIdOrganizationOrganizationId404,
  PutZimbraPlatformPlatformIdOrganizationOrganizationId412,
  ZimbraAccountPostPayloadOVH,
  ZimbraAccountPutPayloadOVH,
  ZimbraAccountResponseOVH,
  ZimbraAliasPostPayloadOVH,
  ZimbraAliasResponseOVH,
  ZimbraDiagnosticResponseOVH,
  ZimbraDomainPostPayloadOVH,
  ZimbraDomainPutPayloadOVH,
  ZimbraDomainResponseOVH,
  ZimbraMailingListPostPayloadOVH,
  ZimbraMailingListPutPayloadOVH,
  ZimbraMailingListResponseOVH,
  ZimbraOrganizationPostPayloadOVH,
  ZimbraOrganizationPutPayloadOVH,
  ZimbraOrganizationResponseOVH,
  ZimbraPlatformPostPayloadOVH,
  ZimbraPlatformPutPayloadOVH,
  ZimbraPlatformResponseOVH,
  ZimbraPlatformResponseWithIAMOVH,
  ZimbraProjectResponseWithIAMOVH,
  ZimbraRedirectionPostPayloadOVH,
  ZimbraRedirectionResponseOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV2 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get a list of Zimbra Platforms
 */
export const getZimbraPlatform = (
    params?: GetZimbraPlatformParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraPlatformResponseWithIAMOVH[]>(
      {url: `/zimbra/platform`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetZimbraPlatformQueryKey = (params?: GetZimbraPlatformParams,) => {
    return [`/zimbra/platform`, ...(params ? [params]: [])] as const;
    }

    
export const getGetZimbraPlatformQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatform>>, TError = unknown>(params?: GetZimbraPlatformParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatform>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatform>>> = ({ signal }) => getZimbraPlatform(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatform>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatform>>>
export type GetZimbraPlatformQueryError = unknown


export function useGetZimbraPlatform<TData = Awaited<ReturnType<typeof getZimbraPlatform>>, TError = unknown>(
 params: undefined |  GetZimbraPlatformParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatform>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatform>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatform<TData = Awaited<ReturnType<typeof getZimbraPlatform>>, TError = unknown>(
 params?: GetZimbraPlatformParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatform>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatform>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatform<TData = Awaited<ReturnType<typeof getZimbraPlatform>>, TError = unknown>(
 params?: GetZimbraPlatformParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatform>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of Zimbra Platforms
 */

export function useGetZimbraPlatform<TData = Awaited<ReturnType<typeof getZimbraPlatform>>, TError = unknown>(
 params?: GetZimbraPlatformParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatform>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a Zimbra Platform
 */
export const getZimbraPlatformPlatformId = (
    platformId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraPlatformResponseWithIAMOVH>(
      {url: `/zimbra/platform/${platformId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdQueryKey = (platformId: string,) => {
    return [`/zimbra/platform/${platformId}`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>, TError = GetZimbraPlatformPlatformId404>(platformId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdQueryKey(platformId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>> = ({ signal }) => getZimbraPlatformPlatformId(platformId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>>
export type GetZimbraPlatformPlatformIdQueryError = GetZimbraPlatformPlatformId404


export function useGetZimbraPlatformPlatformId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>, TError = GetZimbraPlatformPlatformId404>(
 platformId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>, TError = GetZimbraPlatformPlatformId404>(
 platformId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>, TError = GetZimbraPlatformPlatformId404>(
 platformId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a Zimbra Platform
 */

export function useGetZimbraPlatformPlatformId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>, TError = GetZimbraPlatformPlatformId404>(
 platformId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdQueryOptions(platformId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify a platform
 */
export const putZimbraPlatformPlatformId = (
    platformId: string,
    zimbraPlatformPutPayloadOVH: ZimbraPlatformPutPayloadOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<ZimbraPlatformResponseOVH>(
      {url: `/zimbra/platform/${platformId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: zimbraPlatformPutPayloadOVH
    },
      options);
    }
  


export const getPutZimbraPlatformPlatformIdMutationOptions = <TError = PutZimbraPlatformPlatformId412,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformId>>, TError,{platformId: string;data: ZimbraPlatformPutPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformId>>, TError,{platformId: string;data: ZimbraPlatformPutPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putZimbraPlatformPlatformId>>, {platformId: string;data: ZimbraPlatformPutPayloadOVH}> = (props) => {
          const {platformId,data} = props ?? {};

          return  putZimbraPlatformPlatformId(platformId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutZimbraPlatformPlatformIdMutationResult = NonNullable<Awaited<ReturnType<typeof putZimbraPlatformPlatformId>>>
    export type PutZimbraPlatformPlatformIdMutationBody = ZimbraPlatformPutPayloadOVH
    export type PutZimbraPlatformPlatformIdMutationError = PutZimbraPlatformPlatformId412

    /**
 * @summary Modify a platform
 */
export const usePutZimbraPlatformPlatformId = <TError = PutZimbraPlatformPlatformId412,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformId>>, TError,{platformId: string;data: ZimbraPlatformPutPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putZimbraPlatformPlatformId>>,
        TError,
        {platformId: string;data: ZimbraPlatformPutPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPutZimbraPlatformPlatformIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get list of accounts
 */
export const getZimbraPlatformPlatformIdAccount = (
    platformId: string,
    params?: GetZimbraPlatformPlatformIdAccountParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraAccountResponseOVH[]>(
      {url: `/zimbra/platform/${platformId}/account`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdAccountQueryKey = (platformId: string,
    params?: GetZimbraPlatformPlatformIdAccountParams,) => {
    return [`/zimbra/platform/${platformId}/account`, ...(params ? [params]: [])] as const;
    }

    
export const getGetZimbraPlatformPlatformIdAccountQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>, TError = GetZimbraPlatformPlatformIdAccount404>(platformId: string,
    params?: GetZimbraPlatformPlatformIdAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdAccountQueryKey(platformId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>> = ({ signal }) => getZimbraPlatformPlatformIdAccount(platformId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>>
export type GetZimbraPlatformPlatformIdAccountQueryError = GetZimbraPlatformPlatformIdAccount404


export function useGetZimbraPlatformPlatformIdAccount<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>, TError = GetZimbraPlatformPlatformIdAccount404>(
 platformId: string,
    params: undefined |  GetZimbraPlatformPlatformIdAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdAccount<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>, TError = GetZimbraPlatformPlatformIdAccount404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdAccount<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>, TError = GetZimbraPlatformPlatformIdAccount404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of accounts
 */

export function useGetZimbraPlatformPlatformIdAccount<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>, TError = GetZimbraPlatformPlatformIdAccount404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdAccountQueryOptions(platformId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create an account
 */
export const postZimbraPlatformPlatformIdAccount = (
    platformId: string,
    zimbraAccountPostPayloadOVH: ZimbraAccountPostPayloadOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraAccountResponseOVH>(
      {url: `/zimbra/platform/${platformId}/account`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: zimbraAccountPostPayloadOVH, signal
    },
      options);
    }
  


export const getPostZimbraPlatformPlatformIdAccountMutationOptions = <TError = PostZimbraPlatformPlatformIdAccount400 | PostZimbraPlatformPlatformIdAccount404 | PostZimbraPlatformPlatformIdAccount409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdAccount>>, TError,{platformId: string;data: ZimbraAccountPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdAccount>>, TError,{platformId: string;data: ZimbraAccountPostPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdAccount>>, {platformId: string;data: ZimbraAccountPostPayloadOVH}> = (props) => {
          const {platformId,data} = props ?? {};

          return  postZimbraPlatformPlatformIdAccount(platformId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostZimbraPlatformPlatformIdAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdAccount>>>
    export type PostZimbraPlatformPlatformIdAccountMutationBody = ZimbraAccountPostPayloadOVH
    export type PostZimbraPlatformPlatformIdAccountMutationError = PostZimbraPlatformPlatformIdAccount400 | PostZimbraPlatformPlatformIdAccount404 | PostZimbraPlatformPlatformIdAccount409

    /**
 * @summary Create an account
 */
export const usePostZimbraPlatformPlatformIdAccount = <TError = PostZimbraPlatformPlatformIdAccount400 | PostZimbraPlatformPlatformIdAccount404 | PostZimbraPlatformPlatformIdAccount409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdAccount>>, TError,{platformId: string;data: ZimbraAccountPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postZimbraPlatformPlatformIdAccount>>,
        TError,
        {platformId: string;data: ZimbraAccountPostPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostZimbraPlatformPlatformIdAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an account
 */
export const deleteZimbraPlatformPlatformIdAccountAccountId = (
    platformId: string,
    accountId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/zimbra/platform/${platformId}/account/${accountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteZimbraPlatformPlatformIdAccountAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdAccountAccountId>>, TError,{platformId: string;accountId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdAccountAccountId>>, TError,{platformId: string;accountId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdAccountAccountId>>, {platformId: string;accountId: string}> = (props) => {
          const {platformId,accountId} = props ?? {};

          return  deleteZimbraPlatformPlatformIdAccountAccountId(platformId,accountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteZimbraPlatformPlatformIdAccountAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdAccountAccountId>>>
    
    export type DeleteZimbraPlatformPlatformIdAccountAccountIdMutationError = unknown

    /**
 * @summary Delete an account
 */
export const useDeleteZimbraPlatformPlatformIdAccountAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdAccountAccountId>>, TError,{platformId: string;accountId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdAccountAccountId>>,
        TError,
        {platformId: string;accountId: string},
        TContext
      > => {

      const mutationOptions = getDeleteZimbraPlatformPlatformIdAccountAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get an account
 */
export const getZimbraPlatformPlatformIdAccountAccountId = (
    platformId: string,
    accountId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraAccountResponseOVH>(
      {url: `/zimbra/platform/${platformId}/account/${accountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdAccountAccountIdQueryKey = (platformId: string,
    accountId: string,) => {
    return [`/zimbra/platform/${platformId}/account/${accountId}`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdAccountAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>, TError = GetZimbraPlatformPlatformIdAccountAccountId404>(platformId: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdAccountAccountIdQueryKey(platformId,accountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>> = ({ signal }) => getZimbraPlatformPlatformIdAccountAccountId(platformId,accountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && accountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdAccountAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>>
export type GetZimbraPlatformPlatformIdAccountAccountIdQueryError = GetZimbraPlatformPlatformIdAccountAccountId404


export function useGetZimbraPlatformPlatformIdAccountAccountId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>, TError = GetZimbraPlatformPlatformIdAccountAccountId404>(
 platformId: string,
    accountId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdAccountAccountId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>, TError = GetZimbraPlatformPlatformIdAccountAccountId404>(
 platformId: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdAccountAccountId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>, TError = GetZimbraPlatformPlatformIdAccountAccountId404>(
 platformId: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an account
 */

export function useGetZimbraPlatformPlatformIdAccountAccountId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>, TError = GetZimbraPlatformPlatformIdAccountAccountId404>(
 platformId: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdAccountAccountIdQueryOptions(platformId,accountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify an account
 */
export const putZimbraPlatformPlatformIdAccountAccountId = (
    platformId: string,
    accountId: string,
    zimbraAccountPutPayloadOVH: ZimbraAccountPutPayloadOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<ZimbraAccountResponseOVH>(
      {url: `/zimbra/platform/${platformId}/account/${accountId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: zimbraAccountPutPayloadOVH
    },
      options);
    }
  


export const getPutZimbraPlatformPlatformIdAccountAccountIdMutationOptions = <TError = PutZimbraPlatformPlatformIdAccountAccountId404 | PutZimbraPlatformPlatformIdAccountAccountId412,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdAccountAccountId>>, TError,{platformId: string;accountId: string;data: ZimbraAccountPutPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdAccountAccountId>>, TError,{platformId: string;accountId: string;data: ZimbraAccountPutPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdAccountAccountId>>, {platformId: string;accountId: string;data: ZimbraAccountPutPayloadOVH}> = (props) => {
          const {platformId,accountId,data} = props ?? {};

          return  putZimbraPlatformPlatformIdAccountAccountId(platformId,accountId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutZimbraPlatformPlatformIdAccountAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdAccountAccountId>>>
    export type PutZimbraPlatformPlatformIdAccountAccountIdMutationBody = ZimbraAccountPutPayloadOVH
    export type PutZimbraPlatformPlatformIdAccountAccountIdMutationError = PutZimbraPlatformPlatformIdAccountAccountId404 | PutZimbraPlatformPlatformIdAccountAccountId412

    /**
 * @summary Modify an account
 */
export const usePutZimbraPlatformPlatformIdAccountAccountId = <TError = PutZimbraPlatformPlatformIdAccountAccountId404 | PutZimbraPlatformPlatformIdAccountAccountId412,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdAccountAccountId>>, TError,{platformId: string;accountId: string;data: ZimbraAccountPutPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putZimbraPlatformPlatformIdAccountAccountId>>,
        TError,
        {platformId: string;accountId: string;data: ZimbraAccountPutPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPutZimbraPlatformPlatformIdAccountAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a list of events
 */
export const getZimbraPlatformPlatformIdAccountAccountIdEvent = (
    platformId: string,
    accountId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonEventOVH[]>(
      {url: `/zimbra/platform/${platformId}/account/${accountId}/event`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdAccountAccountIdEventQueryKey = (platformId: string,
    accountId: string,) => {
    return [`/zimbra/platform/${platformId}/account/${accountId}/event`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdAccountAccountIdEventQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>, TError = GetZimbraPlatformPlatformIdAccountAccountIdEvent404>(platformId: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdAccountAccountIdEventQueryKey(platformId,accountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>> = ({ signal }) => getZimbraPlatformPlatformIdAccountAccountIdEvent(platformId,accountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && accountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdAccountAccountIdEventQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>>
export type GetZimbraPlatformPlatformIdAccountAccountIdEventQueryError = GetZimbraPlatformPlatformIdAccountAccountIdEvent404


export function useGetZimbraPlatformPlatformIdAccountAccountIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>, TError = GetZimbraPlatformPlatformIdAccountAccountIdEvent404>(
 platformId: string,
    accountId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdAccountAccountIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>, TError = GetZimbraPlatformPlatformIdAccountAccountIdEvent404>(
 platformId: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdAccountAccountIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>, TError = GetZimbraPlatformPlatformIdAccountAccountIdEvent404>(
 platformId: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of events
 */

export function useGetZimbraPlatformPlatformIdAccountAccountIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>, TError = GetZimbraPlatformPlatformIdAccountAccountIdEvent404>(
 platformId: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdAccountAccountIdEventQueryOptions(platformId,accountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getZimbraPlatformPlatformIdAccountAccountIdTask = (
    platformId: string,
    accountId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH[]>(
      {url: `/zimbra/platform/${platformId}/account/${accountId}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdAccountAccountIdTaskQueryKey = (platformId: string,
    accountId: string,) => {
    return [`/zimbra/platform/${platformId}/account/${accountId}/task`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdAccountAccountIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>, TError = GetZimbraPlatformPlatformIdAccountAccountIdTask404>(platformId: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdAccountAccountIdTaskQueryKey(platformId,accountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>> = ({ signal }) => getZimbraPlatformPlatformIdAccountAccountIdTask(platformId,accountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && accountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdAccountAccountIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>>
export type GetZimbraPlatformPlatformIdAccountAccountIdTaskQueryError = GetZimbraPlatformPlatformIdAccountAccountIdTask404


export function useGetZimbraPlatformPlatformIdAccountAccountIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>, TError = GetZimbraPlatformPlatformIdAccountAccountIdTask404>(
 platformId: string,
    accountId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdAccountAccountIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>, TError = GetZimbraPlatformPlatformIdAccountAccountIdTask404>(
 platformId: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdAccountAccountIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>, TError = GetZimbraPlatformPlatformIdAccountAccountIdTask404>(
 platformId: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetZimbraPlatformPlatformIdAccountAccountIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>, TError = GetZimbraPlatformPlatformIdAccountAccountIdTask404>(
 platformId: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAccountAccountIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdAccountAccountIdTaskQueryOptions(platformId,accountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a platform alias list
 */
export const getZimbraPlatformPlatformIdAlias = (
    platformId: string,
    params?: GetZimbraPlatformPlatformIdAliasParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraAliasResponseOVH[]>(
      {url: `/zimbra/platform/${platformId}/alias`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdAliasQueryKey = (platformId: string,
    params?: GetZimbraPlatformPlatformIdAliasParams,) => {
    return [`/zimbra/platform/${platformId}/alias`, ...(params ? [params]: [])] as const;
    }

    
export const getGetZimbraPlatformPlatformIdAliasQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>, TError = GetZimbraPlatformPlatformIdAlias404>(platformId: string,
    params?: GetZimbraPlatformPlatformIdAliasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdAliasQueryKey(platformId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>> = ({ signal }) => getZimbraPlatformPlatformIdAlias(platformId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>>
export type GetZimbraPlatformPlatformIdAliasQueryError = GetZimbraPlatformPlatformIdAlias404


export function useGetZimbraPlatformPlatformIdAlias<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>, TError = GetZimbraPlatformPlatformIdAlias404>(
 platformId: string,
    params: undefined |  GetZimbraPlatformPlatformIdAliasParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdAlias<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>, TError = GetZimbraPlatformPlatformIdAlias404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdAliasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdAlias<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>, TError = GetZimbraPlatformPlatformIdAlias404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdAliasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a platform alias list
 */

export function useGetZimbraPlatformPlatformIdAlias<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>, TError = GetZimbraPlatformPlatformIdAlias404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdAliasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdAliasQueryOptions(platformId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create an alias
 */
export const postZimbraPlatformPlatformIdAlias = (
    platformId: string,
    zimbraAliasPostPayloadOVH: ZimbraAliasPostPayloadOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<void>(
      {url: `/zimbra/platform/${platformId}/alias`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: zimbraAliasPostPayloadOVH, signal
    },
      options);
    }
  


export const getPostZimbraPlatformPlatformIdAliasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdAlias>>, TError,{platformId: string;data: ZimbraAliasPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdAlias>>, TError,{platformId: string;data: ZimbraAliasPostPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdAlias>>, {platformId: string;data: ZimbraAliasPostPayloadOVH}> = (props) => {
          const {platformId,data} = props ?? {};

          return  postZimbraPlatformPlatformIdAlias(platformId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostZimbraPlatformPlatformIdAliasMutationResult = NonNullable<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdAlias>>>
    export type PostZimbraPlatformPlatformIdAliasMutationBody = ZimbraAliasPostPayloadOVH
    export type PostZimbraPlatformPlatformIdAliasMutationError = unknown

    /**
 * @summary Create an alias
 */
export const usePostZimbraPlatformPlatformIdAlias = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdAlias>>, TError,{platformId: string;data: ZimbraAliasPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postZimbraPlatformPlatformIdAlias>>,
        TError,
        {platformId: string;data: ZimbraAliasPostPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostZimbraPlatformPlatformIdAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an alias
 */
export const deleteZimbraPlatformPlatformIdAliasAliasId = (
    platformId: string,
    aliasId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/zimbra/platform/${platformId}/alias/${aliasId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteZimbraPlatformPlatformIdAliasAliasIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdAliasAliasId>>, TError,{platformId: string;aliasId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdAliasAliasId>>, TError,{platformId: string;aliasId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdAliasAliasId>>, {platformId: string;aliasId: string}> = (props) => {
          const {platformId,aliasId} = props ?? {};

          return  deleteZimbraPlatformPlatformIdAliasAliasId(platformId,aliasId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteZimbraPlatformPlatformIdAliasAliasIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdAliasAliasId>>>
    
    export type DeleteZimbraPlatformPlatformIdAliasAliasIdMutationError = unknown

    /**
 * @summary Delete an alias
 */
export const useDeleteZimbraPlatformPlatformIdAliasAliasId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdAliasAliasId>>, TError,{platformId: string;aliasId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdAliasAliasId>>,
        TError,
        {platformId: string;aliasId: string},
        TContext
      > => {

      const mutationOptions = getDeleteZimbraPlatformPlatformIdAliasAliasIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a platform alias
 */
export const getZimbraPlatformPlatformIdAliasAliasId = (
    platformId: string,
    aliasId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraAliasResponseOVH>(
      {url: `/zimbra/platform/${platformId}/alias/${aliasId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdAliasAliasIdQueryKey = (platformId: string,
    aliasId: string,) => {
    return [`/zimbra/platform/${platformId}/alias/${aliasId}`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdAliasAliasIdQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>, TError = GetZimbraPlatformPlatformIdAliasAliasId404>(platformId: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdAliasAliasIdQueryKey(platformId,aliasId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>> = ({ signal }) => getZimbraPlatformPlatformIdAliasAliasId(platformId,aliasId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && aliasId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdAliasAliasIdQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>>
export type GetZimbraPlatformPlatformIdAliasAliasIdQueryError = GetZimbraPlatformPlatformIdAliasAliasId404


export function useGetZimbraPlatformPlatformIdAliasAliasId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>, TError = GetZimbraPlatformPlatformIdAliasAliasId404>(
 platformId: string,
    aliasId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdAliasAliasId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>, TError = GetZimbraPlatformPlatformIdAliasAliasId404>(
 platformId: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdAliasAliasId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>, TError = GetZimbraPlatformPlatformIdAliasAliasId404>(
 platformId: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a platform alias
 */

export function useGetZimbraPlatformPlatformIdAliasAliasId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>, TError = GetZimbraPlatformPlatformIdAliasAliasId404>(
 platformId: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdAliasAliasId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdAliasAliasIdQueryOptions(platformId,aliasId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get list of domains
 */
export const getZimbraPlatformPlatformIdDomain = (
    platformId: string,
    params?: GetZimbraPlatformPlatformIdDomainParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraDomainResponseOVH[]>(
      {url: `/zimbra/platform/${platformId}/domain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdDomainQueryKey = (platformId: string,
    params?: GetZimbraPlatformPlatformIdDomainParams,) => {
    return [`/zimbra/platform/${platformId}/domain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetZimbraPlatformPlatformIdDomainQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>, TError = GetZimbraPlatformPlatformIdDomain404>(platformId: string,
    params?: GetZimbraPlatformPlatformIdDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdDomainQueryKey(platformId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>> = ({ signal }) => getZimbraPlatformPlatformIdDomain(platformId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>>
export type GetZimbraPlatformPlatformIdDomainQueryError = GetZimbraPlatformPlatformIdDomain404


export function useGetZimbraPlatformPlatformIdDomain<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>, TError = GetZimbraPlatformPlatformIdDomain404>(
 platformId: string,
    params: undefined |  GetZimbraPlatformPlatformIdDomainParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdDomain<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>, TError = GetZimbraPlatformPlatformIdDomain404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdDomain<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>, TError = GetZimbraPlatformPlatformIdDomain404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of domains
 */

export function useGetZimbraPlatformPlatformIdDomain<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>, TError = GetZimbraPlatformPlatformIdDomain404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdDomainQueryOptions(platformId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a domain
 */
export const postZimbraPlatformPlatformIdDomain = (
    platformId: string,
    zimbraDomainPostPayloadOVH: ZimbraDomainPostPayloadOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraDomainResponseOVH>(
      {url: `/zimbra/platform/${platformId}/domain`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: zimbraDomainPostPayloadOVH, signal
    },
      options);
    }
  


export const getPostZimbraPlatformPlatformIdDomainMutationOptions = <TError = PostZimbraPlatformPlatformIdDomain400 | PostZimbraPlatformPlatformIdDomain404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdDomain>>, TError,{platformId: string;data: ZimbraDomainPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdDomain>>, TError,{platformId: string;data: ZimbraDomainPostPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdDomain>>, {platformId: string;data: ZimbraDomainPostPayloadOVH}> = (props) => {
          const {platformId,data} = props ?? {};

          return  postZimbraPlatformPlatformIdDomain(platformId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostZimbraPlatformPlatformIdDomainMutationResult = NonNullable<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdDomain>>>
    export type PostZimbraPlatformPlatformIdDomainMutationBody = ZimbraDomainPostPayloadOVH
    export type PostZimbraPlatformPlatformIdDomainMutationError = PostZimbraPlatformPlatformIdDomain400 | PostZimbraPlatformPlatformIdDomain404

    /**
 * @summary Create a domain
 */
export const usePostZimbraPlatformPlatformIdDomain = <TError = PostZimbraPlatformPlatformIdDomain400 | PostZimbraPlatformPlatformIdDomain404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdDomain>>, TError,{platformId: string;data: ZimbraDomainPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postZimbraPlatformPlatformIdDomain>>,
        TError,
        {platformId: string;data: ZimbraDomainPostPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostZimbraPlatformPlatformIdDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a domain
 */
export const deleteZimbraPlatformPlatformIdDomainDomainId = (
    platformId: string,
    domainId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/zimbra/platform/${platformId}/domain/${domainId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteZimbraPlatformPlatformIdDomainDomainIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdDomainDomainId>>, TError,{platformId: string;domainId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdDomainDomainId>>, TError,{platformId: string;domainId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdDomainDomainId>>, {platformId: string;domainId: string}> = (props) => {
          const {platformId,domainId} = props ?? {};

          return  deleteZimbraPlatformPlatformIdDomainDomainId(platformId,domainId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteZimbraPlatformPlatformIdDomainDomainIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdDomainDomainId>>>
    
    export type DeleteZimbraPlatformPlatformIdDomainDomainIdMutationError = unknown

    /**
 * @summary Delete a domain
 */
export const useDeleteZimbraPlatformPlatformIdDomainDomainId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdDomainDomainId>>, TError,{platformId: string;domainId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdDomainDomainId>>,
        TError,
        {platformId: string;domainId: string},
        TContext
      > => {

      const mutationOptions = getDeleteZimbraPlatformPlatformIdDomainDomainIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a domain
 */
export const getZimbraPlatformPlatformIdDomainDomainId = (
    platformId: string,
    domainId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraDomainResponseOVH>(
      {url: `/zimbra/platform/${platformId}/domain/${domainId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdDomainDomainIdQueryKey = (platformId: string,
    domainId: string,) => {
    return [`/zimbra/platform/${platformId}/domain/${domainId}`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdDomainDomainIdQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>, TError = GetZimbraPlatformPlatformIdDomainDomainId404>(platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdDomainDomainIdQueryKey(platformId,domainId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>> = ({ signal }) => getZimbraPlatformPlatformIdDomainDomainId(platformId,domainId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && domainId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdDomainDomainIdQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>>
export type GetZimbraPlatformPlatformIdDomainDomainIdQueryError = GetZimbraPlatformPlatformIdDomainDomainId404


export function useGetZimbraPlatformPlatformIdDomainDomainId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>, TError = GetZimbraPlatformPlatformIdDomainDomainId404>(
 platformId: string,
    domainId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdDomainDomainId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>, TError = GetZimbraPlatformPlatformIdDomainDomainId404>(
 platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdDomainDomainId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>, TError = GetZimbraPlatformPlatformIdDomainDomainId404>(
 platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a domain
 */

export function useGetZimbraPlatformPlatformIdDomainDomainId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>, TError = GetZimbraPlatformPlatformIdDomainDomainId404>(
 platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdDomainDomainIdQueryOptions(platformId,domainId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify a domain
 */
export const putZimbraPlatformPlatformIdDomainDomainId = (
    platformId: string,
    domainId: string,
    zimbraDomainPutPayloadOVH: ZimbraDomainPutPayloadOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<ZimbraDomainResponseOVH>(
      {url: `/zimbra/platform/${platformId}/domain/${domainId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: zimbraDomainPutPayloadOVH
    },
      options);
    }
  


export const getPutZimbraPlatformPlatformIdDomainDomainIdMutationOptions = <TError = PutZimbraPlatformPlatformIdDomainDomainId404 | PutZimbraPlatformPlatformIdDomainDomainId412,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdDomainDomainId>>, TError,{platformId: string;domainId: string;data: ZimbraDomainPutPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdDomainDomainId>>, TError,{platformId: string;domainId: string;data: ZimbraDomainPutPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdDomainDomainId>>, {platformId: string;domainId: string;data: ZimbraDomainPutPayloadOVH}> = (props) => {
          const {platformId,domainId,data} = props ?? {};

          return  putZimbraPlatformPlatformIdDomainDomainId(platformId,domainId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutZimbraPlatformPlatformIdDomainDomainIdMutationResult = NonNullable<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdDomainDomainId>>>
    export type PutZimbraPlatformPlatformIdDomainDomainIdMutationBody = ZimbraDomainPutPayloadOVH
    export type PutZimbraPlatformPlatformIdDomainDomainIdMutationError = PutZimbraPlatformPlatformIdDomainDomainId404 | PutZimbraPlatformPlatformIdDomainDomainId412

    /**
 * @summary Modify a domain
 */
export const usePutZimbraPlatformPlatformIdDomainDomainId = <TError = PutZimbraPlatformPlatformIdDomainDomainId404 | PutZimbraPlatformPlatformIdDomainDomainId412,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdDomainDomainId>>, TError,{platformId: string;domainId: string;data: ZimbraDomainPutPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putZimbraPlatformPlatformIdDomainDomainId>>,
        TError,
        {platformId: string;domainId: string;data: ZimbraDomainPutPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPutZimbraPlatformPlatformIdDomainDomainIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get diagnostic of a domain
 */
export const getZimbraPlatformPlatformIdDomainDomainIdDiagnostic = (
    platformId: string,
    domainId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraDiagnosticResponseOVH>(
      {url: `/zimbra/platform/${platformId}/domain/${domainId}/diagnostic`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdDomainDomainIdDiagnosticQueryKey = (platformId: string,
    domainId: string,) => {
    return [`/zimbra/platform/${platformId}/domain/${domainId}/diagnostic`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdDomainDomainIdDiagnosticQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>, TError = unknown>(platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdDomainDomainIdDiagnosticQueryKey(platformId,domainId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>> = ({ signal }) => getZimbraPlatformPlatformIdDomainDomainIdDiagnostic(platformId,domainId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && domainId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdDomainDomainIdDiagnosticQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>>
export type GetZimbraPlatformPlatformIdDomainDomainIdDiagnosticQueryError = unknown


export function useGetZimbraPlatformPlatformIdDomainDomainIdDiagnostic<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>, TError = unknown>(
 platformId: string,
    domainId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdDomainDomainIdDiagnostic<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>, TError = unknown>(
 platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdDomainDomainIdDiagnostic<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>, TError = unknown>(
 platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get diagnostic of a domain
 */

export function useGetZimbraPlatformPlatformIdDomainDomainIdDiagnostic<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>, TError = unknown>(
 platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdDiagnostic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdDomainDomainIdDiagnosticQueryOptions(platformId,domainId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a list of events
 */
export const getZimbraPlatformPlatformIdDomainDomainIdEvent = (
    platformId: string,
    domainId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonEventOVH[]>(
      {url: `/zimbra/platform/${platformId}/domain/${domainId}/event`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdDomainDomainIdEventQueryKey = (platformId: string,
    domainId: string,) => {
    return [`/zimbra/platform/${platformId}/domain/${domainId}/event`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdDomainDomainIdEventQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>, TError = GetZimbraPlatformPlatformIdDomainDomainIdEvent404>(platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdDomainDomainIdEventQueryKey(platformId,domainId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>> = ({ signal }) => getZimbraPlatformPlatformIdDomainDomainIdEvent(platformId,domainId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && domainId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdDomainDomainIdEventQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>>
export type GetZimbraPlatformPlatformIdDomainDomainIdEventQueryError = GetZimbraPlatformPlatformIdDomainDomainIdEvent404


export function useGetZimbraPlatformPlatformIdDomainDomainIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>, TError = GetZimbraPlatformPlatformIdDomainDomainIdEvent404>(
 platformId: string,
    domainId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdDomainDomainIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>, TError = GetZimbraPlatformPlatformIdDomainDomainIdEvent404>(
 platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdDomainDomainIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>, TError = GetZimbraPlatformPlatformIdDomainDomainIdEvent404>(
 platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of events
 */

export function useGetZimbraPlatformPlatformIdDomainDomainIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>, TError = GetZimbraPlatformPlatformIdDomainDomainIdEvent404>(
 platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdDomainDomainIdEventQueryOptions(platformId,domainId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getZimbraPlatformPlatformIdDomainDomainIdTask = (
    platformId: string,
    domainId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH[]>(
      {url: `/zimbra/platform/${platformId}/domain/${domainId}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdDomainDomainIdTaskQueryKey = (platformId: string,
    domainId: string,) => {
    return [`/zimbra/platform/${platformId}/domain/${domainId}/task`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdDomainDomainIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>, TError = GetZimbraPlatformPlatformIdDomainDomainIdTask404>(platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdDomainDomainIdTaskQueryKey(platformId,domainId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>> = ({ signal }) => getZimbraPlatformPlatformIdDomainDomainIdTask(platformId,domainId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && domainId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdDomainDomainIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>>
export type GetZimbraPlatformPlatformIdDomainDomainIdTaskQueryError = GetZimbraPlatformPlatformIdDomainDomainIdTask404


export function useGetZimbraPlatformPlatformIdDomainDomainIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>, TError = GetZimbraPlatformPlatformIdDomainDomainIdTask404>(
 platformId: string,
    domainId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdDomainDomainIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>, TError = GetZimbraPlatformPlatformIdDomainDomainIdTask404>(
 platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdDomainDomainIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>, TError = GetZimbraPlatformPlatformIdDomainDomainIdTask404>(
 platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetZimbraPlatformPlatformIdDomainDomainIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>, TError = GetZimbraPlatformPlatformIdDomainDomainIdTask404>(
 platformId: string,
    domainId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdDomainDomainIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdDomainDomainIdTaskQueryOptions(platformId,domainId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getZimbraPlatformPlatformIdEvent = (
    platformId: string,
    params?: GetZimbraPlatformPlatformIdEventParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonEventOVH[]>(
      {url: `/zimbra/platform/${platformId}/event`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdEventQueryKey = (platformId: string,
    params?: GetZimbraPlatformPlatformIdEventParams,) => {
    return [`/zimbra/platform/${platformId}/event`, ...(params ? [params]: [])] as const;
    }

    
export const getGetZimbraPlatformPlatformIdEventQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>, TError = GetZimbraPlatformPlatformIdEvent404>(platformId: string,
    params?: GetZimbraPlatformPlatformIdEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdEventQueryKey(platformId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>> = ({ signal }) => getZimbraPlatformPlatformIdEvent(platformId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdEventQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>>
export type GetZimbraPlatformPlatformIdEventQueryError = GetZimbraPlatformPlatformIdEvent404


export function useGetZimbraPlatformPlatformIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>, TError = GetZimbraPlatformPlatformIdEvent404>(
 platformId: string,
    params: undefined |  GetZimbraPlatformPlatformIdEventParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>, TError = GetZimbraPlatformPlatformIdEvent404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>, TError = GetZimbraPlatformPlatformIdEvent404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetZimbraPlatformPlatformIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>, TError = GetZimbraPlatformPlatformIdEvent404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdEventQueryOptions(platformId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get list of mailing lists
 */
export const getZimbraPlatformPlatformIdMailingList = (
    platformId: string,
    params?: GetZimbraPlatformPlatformIdMailingListParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraMailingListResponseOVH[]>(
      {url: `/zimbra/platform/${platformId}/mailingList`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdMailingListQueryKey = (platformId: string,
    params?: GetZimbraPlatformPlatformIdMailingListParams,) => {
    return [`/zimbra/platform/${platformId}/mailingList`, ...(params ? [params]: [])] as const;
    }

    
export const getGetZimbraPlatformPlatformIdMailingListQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>, TError = GetZimbraPlatformPlatformIdMailingList404>(platformId: string,
    params?: GetZimbraPlatformPlatformIdMailingListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdMailingListQueryKey(platformId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>> = ({ signal }) => getZimbraPlatformPlatformIdMailingList(platformId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdMailingListQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>>
export type GetZimbraPlatformPlatformIdMailingListQueryError = GetZimbraPlatformPlatformIdMailingList404


export function useGetZimbraPlatformPlatformIdMailingList<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>, TError = GetZimbraPlatformPlatformIdMailingList404>(
 platformId: string,
    params: undefined |  GetZimbraPlatformPlatformIdMailingListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdMailingList<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>, TError = GetZimbraPlatformPlatformIdMailingList404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdMailingListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdMailingList<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>, TError = GetZimbraPlatformPlatformIdMailingList404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdMailingListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of mailing lists
 */

export function useGetZimbraPlatformPlatformIdMailingList<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>, TError = GetZimbraPlatformPlatformIdMailingList404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdMailingListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdMailingListQueryOptions(platformId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create an mailing list
 */
export const postZimbraPlatformPlatformIdMailingList = (
    platformId: string,
    zimbraMailingListPostPayloadOVH: ZimbraMailingListPostPayloadOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<void>(
      {url: `/zimbra/platform/${platformId}/mailingList`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: zimbraMailingListPostPayloadOVH, signal
    },
      options);
    }
  


export const getPostZimbraPlatformPlatformIdMailingListMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdMailingList>>, TError,{platformId: string;data: ZimbraMailingListPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdMailingList>>, TError,{platformId: string;data: ZimbraMailingListPostPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdMailingList>>, {platformId: string;data: ZimbraMailingListPostPayloadOVH}> = (props) => {
          const {platformId,data} = props ?? {};

          return  postZimbraPlatformPlatformIdMailingList(platformId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostZimbraPlatformPlatformIdMailingListMutationResult = NonNullable<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdMailingList>>>
    export type PostZimbraPlatformPlatformIdMailingListMutationBody = ZimbraMailingListPostPayloadOVH
    export type PostZimbraPlatformPlatformIdMailingListMutationError = unknown

    /**
 * @summary Create an mailing list
 */
export const usePostZimbraPlatformPlatformIdMailingList = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdMailingList>>, TError,{platformId: string;data: ZimbraMailingListPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postZimbraPlatformPlatformIdMailingList>>,
        TError,
        {platformId: string;data: ZimbraMailingListPostPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostZimbraPlatformPlatformIdMailingListMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a mailing list
 */
export const deleteZimbraPlatformPlatformIdMailingListMailingListId = (
    platformId: string,
    mailingListId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/zimbra/platform/${platformId}/mailingList/${mailingListId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteZimbraPlatformPlatformIdMailingListMailingListIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdMailingListMailingListId>>, TError,{platformId: string;mailingListId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdMailingListMailingListId>>, TError,{platformId: string;mailingListId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdMailingListMailingListId>>, {platformId: string;mailingListId: string}> = (props) => {
          const {platformId,mailingListId} = props ?? {};

          return  deleteZimbraPlatformPlatformIdMailingListMailingListId(platformId,mailingListId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteZimbraPlatformPlatformIdMailingListMailingListIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdMailingListMailingListId>>>
    
    export type DeleteZimbraPlatformPlatformIdMailingListMailingListIdMutationError = unknown

    /**
 * @summary Delete a mailing list
 */
export const useDeleteZimbraPlatformPlatformIdMailingListMailingListId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdMailingListMailingListId>>, TError,{platformId: string;mailingListId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdMailingListMailingListId>>,
        TError,
        {platformId: string;mailingListId: string},
        TContext
      > => {

      const mutationOptions = getDeleteZimbraPlatformPlatformIdMailingListMailingListIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a mailing list
 */
export const getZimbraPlatformPlatformIdMailingListMailingListId = (
    platformId: string,
    mailingListId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraMailingListResponseOVH>(
      {url: `/zimbra/platform/${platformId}/mailingList/${mailingListId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdMailingListMailingListIdQueryKey = (platformId: string,
    mailingListId: string,) => {
    return [`/zimbra/platform/${platformId}/mailingList/${mailingListId}`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdMailingListMailingListIdQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListId404>(platformId: string,
    mailingListId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdMailingListMailingListIdQueryKey(platformId,mailingListId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>> = ({ signal }) => getZimbraPlatformPlatformIdMailingListMailingListId(platformId,mailingListId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && mailingListId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdMailingListMailingListIdQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>>
export type GetZimbraPlatformPlatformIdMailingListMailingListIdQueryError = GetZimbraPlatformPlatformIdMailingListMailingListId404


export function useGetZimbraPlatformPlatformIdMailingListMailingListId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListId404>(
 platformId: string,
    mailingListId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdMailingListMailingListId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListId404>(
 platformId: string,
    mailingListId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdMailingListMailingListId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListId404>(
 platformId: string,
    mailingListId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a mailing list
 */

export function useGetZimbraPlatformPlatformIdMailingListMailingListId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListId404>(
 platformId: string,
    mailingListId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdMailingListMailingListIdQueryOptions(platformId,mailingListId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify a mailing list
 */
export const putZimbraPlatformPlatformIdMailingListMailingListId = (
    platformId: string,
    mailingListId: string,
    zimbraMailingListPutPayloadOVH: ZimbraMailingListPutPayloadOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/zimbra/platform/${platformId}/mailingList/${mailingListId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: zimbraMailingListPutPayloadOVH
    },
      options);
    }
  


export const getPutZimbraPlatformPlatformIdMailingListMailingListIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdMailingListMailingListId>>, TError,{platformId: string;mailingListId: string;data: ZimbraMailingListPutPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdMailingListMailingListId>>, TError,{platformId: string;mailingListId: string;data: ZimbraMailingListPutPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdMailingListMailingListId>>, {platformId: string;mailingListId: string;data: ZimbraMailingListPutPayloadOVH}> = (props) => {
          const {platformId,mailingListId,data} = props ?? {};

          return  putZimbraPlatformPlatformIdMailingListMailingListId(platformId,mailingListId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutZimbraPlatformPlatformIdMailingListMailingListIdMutationResult = NonNullable<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdMailingListMailingListId>>>
    export type PutZimbraPlatformPlatformIdMailingListMailingListIdMutationBody = ZimbraMailingListPutPayloadOVH
    export type PutZimbraPlatformPlatformIdMailingListMailingListIdMutationError = unknown

    /**
 * @summary Modify a mailing list
 */
export const usePutZimbraPlatformPlatformIdMailingListMailingListId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdMailingListMailingListId>>, TError,{platformId: string;mailingListId: string;data: ZimbraMailingListPutPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putZimbraPlatformPlatformIdMailingListMailingListId>>,
        TError,
        {platformId: string;mailingListId: string;data: ZimbraMailingListPutPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPutZimbraPlatformPlatformIdMailingListMailingListIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a list of events
 */
export const getZimbraPlatformPlatformIdMailingListMailingListIdEvent = (
    platformId: string,
    mailingListId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonEventOVH[]>(
      {url: `/zimbra/platform/${platformId}/mailingList/${mailingListId}/event`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdMailingListMailingListIdEventQueryKey = (platformId: string,
    mailingListId: string,) => {
    return [`/zimbra/platform/${platformId}/mailingList/${mailingListId}/event`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdMailingListMailingListIdEventQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListIdEvent404>(platformId: string,
    mailingListId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdMailingListMailingListIdEventQueryKey(platformId,mailingListId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>> = ({ signal }) => getZimbraPlatformPlatformIdMailingListMailingListIdEvent(platformId,mailingListId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && mailingListId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdMailingListMailingListIdEventQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>>
export type GetZimbraPlatformPlatformIdMailingListMailingListIdEventQueryError = GetZimbraPlatformPlatformIdMailingListMailingListIdEvent404


export function useGetZimbraPlatformPlatformIdMailingListMailingListIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListIdEvent404>(
 platformId: string,
    mailingListId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdMailingListMailingListIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListIdEvent404>(
 platformId: string,
    mailingListId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdMailingListMailingListIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListIdEvent404>(
 platformId: string,
    mailingListId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of events
 */

export function useGetZimbraPlatformPlatformIdMailingListMailingListIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListIdEvent404>(
 platformId: string,
    mailingListId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdMailingListMailingListIdEventQueryOptions(platformId,mailingListId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a list of tasks
 */
export const getZimbraPlatformPlatformIdMailingListMailingListIdTask = (
    platformId: string,
    mailingListId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH[]>(
      {url: `/zimbra/platform/${platformId}/mailingList/${mailingListId}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdMailingListMailingListIdTaskQueryKey = (platformId: string,
    mailingListId: string,) => {
    return [`/zimbra/platform/${platformId}/mailingList/${mailingListId}/task`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdMailingListMailingListIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListIdTask404>(platformId: string,
    mailingListId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdMailingListMailingListIdTaskQueryKey(platformId,mailingListId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>> = ({ signal }) => getZimbraPlatformPlatformIdMailingListMailingListIdTask(platformId,mailingListId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && mailingListId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdMailingListMailingListIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>>
export type GetZimbraPlatformPlatformIdMailingListMailingListIdTaskQueryError = GetZimbraPlatformPlatformIdMailingListMailingListIdTask404


export function useGetZimbraPlatformPlatformIdMailingListMailingListIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListIdTask404>(
 platformId: string,
    mailingListId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdMailingListMailingListIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListIdTask404>(
 platformId: string,
    mailingListId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdMailingListMailingListIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListIdTask404>(
 platformId: string,
    mailingListId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of tasks
 */

export function useGetZimbraPlatformPlatformIdMailingListMailingListIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>, TError = GetZimbraPlatformPlatformIdMailingListMailingListIdTask404>(
 platformId: string,
    mailingListId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdMailingListMailingListIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdMailingListMailingListIdTaskQueryOptions(platformId,mailingListId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get list of organizations
 */
export const getZimbraPlatformPlatformIdOrganization = (
    platformId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraOrganizationResponseOVH[]>(
      {url: `/zimbra/platform/${platformId}/organization`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdOrganizationQueryKey = (platformId: string,) => {
    return [`/zimbra/platform/${platformId}/organization`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdOrganizationQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>, TError = GetZimbraPlatformPlatformIdOrganization404>(platformId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdOrganizationQueryKey(platformId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>> = ({ signal }) => getZimbraPlatformPlatformIdOrganization(platformId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>>
export type GetZimbraPlatformPlatformIdOrganizationQueryError = GetZimbraPlatformPlatformIdOrganization404


export function useGetZimbraPlatformPlatformIdOrganization<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>, TError = GetZimbraPlatformPlatformIdOrganization404>(
 platformId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdOrganization<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>, TError = GetZimbraPlatformPlatformIdOrganization404>(
 platformId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdOrganization<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>, TError = GetZimbraPlatformPlatformIdOrganization404>(
 platformId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of organizations
 */

export function useGetZimbraPlatformPlatformIdOrganization<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>, TError = GetZimbraPlatformPlatformIdOrganization404>(
 platformId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganization>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdOrganizationQueryOptions(platformId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create an organization
 */
export const postZimbraPlatformPlatformIdOrganization = (
    platformId: string,
    zimbraOrganizationPostPayloadOVH: ZimbraOrganizationPostPayloadOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraOrganizationResponseOVH>(
      {url: `/zimbra/platform/${platformId}/organization`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: zimbraOrganizationPostPayloadOVH, signal
    },
      options);
    }
  


export const getPostZimbraPlatformPlatformIdOrganizationMutationOptions = <TError = PostZimbraPlatformPlatformIdOrganization404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdOrganization>>, TError,{platformId: string;data: ZimbraOrganizationPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdOrganization>>, TError,{platformId: string;data: ZimbraOrganizationPostPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdOrganization>>, {platformId: string;data: ZimbraOrganizationPostPayloadOVH}> = (props) => {
          const {platformId,data} = props ?? {};

          return  postZimbraPlatformPlatformIdOrganization(platformId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostZimbraPlatformPlatformIdOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdOrganization>>>
    export type PostZimbraPlatformPlatformIdOrganizationMutationBody = ZimbraOrganizationPostPayloadOVH
    export type PostZimbraPlatformPlatformIdOrganizationMutationError = PostZimbraPlatformPlatformIdOrganization404

    /**
 * @summary Create an organization
 */
export const usePostZimbraPlatformPlatformIdOrganization = <TError = PostZimbraPlatformPlatformIdOrganization404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdOrganization>>, TError,{platformId: string;data: ZimbraOrganizationPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postZimbraPlatformPlatformIdOrganization>>,
        TError,
        {platformId: string;data: ZimbraOrganizationPostPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostZimbraPlatformPlatformIdOrganizationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an organization
 */
export const deleteZimbraPlatformPlatformIdOrganizationOrganizationId = (
    platformId: string,
    organizationId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/zimbra/platform/${platformId}/organization/${organizationId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteZimbraPlatformPlatformIdOrganizationOrganizationIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError,{platformId: string;organizationId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError,{platformId: string;organizationId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdOrganizationOrganizationId>>, {platformId: string;organizationId: string}> = (props) => {
          const {platformId,organizationId} = props ?? {};

          return  deleteZimbraPlatformPlatformIdOrganizationOrganizationId(platformId,organizationId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteZimbraPlatformPlatformIdOrganizationOrganizationIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdOrganizationOrganizationId>>>
    
    export type DeleteZimbraPlatformPlatformIdOrganizationOrganizationIdMutationError = unknown

    /**
 * @summary Delete an organization
 */
export const useDeleteZimbraPlatformPlatformIdOrganizationOrganizationId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError,{platformId: string;organizationId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdOrganizationOrganizationId>>,
        TError,
        {platformId: string;organizationId: string},
        TContext
      > => {

      const mutationOptions = getDeleteZimbraPlatformPlatformIdOrganizationOrganizationIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get an organization
 */
export const getZimbraPlatformPlatformIdOrganizationOrganizationId = (
    platformId: string,
    organizationId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraOrganizationResponseOVH>(
      {url: `/zimbra/platform/${platformId}/organization/${organizationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdOrganizationOrganizationIdQueryKey = (platformId: string,
    organizationId: string,) => {
    return [`/zimbra/platform/${platformId}/organization/${organizationId}`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdOrganizationOrganizationIdQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationId404>(platformId: string,
    organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdOrganizationOrganizationIdQueryKey(platformId,organizationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>> = ({ signal }) => getZimbraPlatformPlatformIdOrganizationOrganizationId(platformId,organizationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && organizationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdOrganizationOrganizationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>>
export type GetZimbraPlatformPlatformIdOrganizationOrganizationIdQueryError = GetZimbraPlatformPlatformIdOrganizationOrganizationId404


export function useGetZimbraPlatformPlatformIdOrganizationOrganizationId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationId404>(
 platformId: string,
    organizationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdOrganizationOrganizationId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationId404>(
 platformId: string,
    organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdOrganizationOrganizationId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationId404>(
 platformId: string,
    organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an organization
 */

export function useGetZimbraPlatformPlatformIdOrganizationOrganizationId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationId404>(
 platformId: string,
    organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdOrganizationOrganizationIdQueryOptions(platformId,organizationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify an organization
 */
export const putZimbraPlatformPlatformIdOrganizationOrganizationId = (
    platformId: string,
    organizationId: string,
    zimbraOrganizationPutPayloadOVH: ZimbraOrganizationPutPayloadOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<ZimbraOrganizationResponseOVH>(
      {url: `/zimbra/platform/${platformId}/organization/${organizationId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: zimbraOrganizationPutPayloadOVH
    },
      options);
    }
  


export const getPutZimbraPlatformPlatformIdOrganizationOrganizationIdMutationOptions = <TError = PutZimbraPlatformPlatformIdOrganizationOrganizationId404 | PutZimbraPlatformPlatformIdOrganizationOrganizationId412,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError,{platformId: string;organizationId: string;data: ZimbraOrganizationPutPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError,{platformId: string;organizationId: string;data: ZimbraOrganizationPutPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdOrganizationOrganizationId>>, {platformId: string;organizationId: string;data: ZimbraOrganizationPutPayloadOVH}> = (props) => {
          const {platformId,organizationId,data} = props ?? {};

          return  putZimbraPlatformPlatformIdOrganizationOrganizationId(platformId,organizationId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutZimbraPlatformPlatformIdOrganizationOrganizationIdMutationResult = NonNullable<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdOrganizationOrganizationId>>>
    export type PutZimbraPlatformPlatformIdOrganizationOrganizationIdMutationBody = ZimbraOrganizationPutPayloadOVH
    export type PutZimbraPlatformPlatformIdOrganizationOrganizationIdMutationError = PutZimbraPlatformPlatformIdOrganizationOrganizationId404 | PutZimbraPlatformPlatformIdOrganizationOrganizationId412

    /**
 * @summary Modify an organization
 */
export const usePutZimbraPlatformPlatformIdOrganizationOrganizationId = <TError = PutZimbraPlatformPlatformIdOrganizationOrganizationId404 | PutZimbraPlatformPlatformIdOrganizationOrganizationId412,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putZimbraPlatformPlatformIdOrganizationOrganizationId>>, TError,{platformId: string;organizationId: string;data: ZimbraOrganizationPutPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putZimbraPlatformPlatformIdOrganizationOrganizationId>>,
        TError,
        {platformId: string;organizationId: string;data: ZimbraOrganizationPutPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPutZimbraPlatformPlatformIdOrganizationOrganizationIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a list of events
 */
export const getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent = (
    platformId: string,
    organizationId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonEventOVH[]>(
      {url: `/zimbra/platform/${platformId}/organization/${organizationId}/event`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdOrganizationOrganizationIdEventQueryKey = (platformId: string,
    organizationId: string,) => {
    return [`/zimbra/platform/${platformId}/organization/${organizationId}/event`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdOrganizationOrganizationIdEventQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationIdEvent404>(platformId: string,
    organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdOrganizationOrganizationIdEventQueryKey(platformId,organizationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>> = ({ signal }) => getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent(platformId,organizationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && organizationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdOrganizationOrganizationIdEventQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>>
export type GetZimbraPlatformPlatformIdOrganizationOrganizationIdEventQueryError = GetZimbraPlatformPlatformIdOrganizationOrganizationIdEvent404


export function useGetZimbraPlatformPlatformIdOrganizationOrganizationIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationIdEvent404>(
 platformId: string,
    organizationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdOrganizationOrganizationIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationIdEvent404>(
 platformId: string,
    organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdOrganizationOrganizationIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationIdEvent404>(
 platformId: string,
    organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of events
 */

export function useGetZimbraPlatformPlatformIdOrganizationOrganizationIdEvent<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationIdEvent404>(
 platformId: string,
    organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdOrganizationOrganizationIdEventQueryOptions(platformId,organizationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get an Organization Tasks
 */
export const getZimbraPlatformPlatformIdOrganizationOrganizationIdTask = (
    platformId: string,
    organizationId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH[]>(
      {url: `/zimbra/platform/${platformId}/organization/${organizationId}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdOrganizationOrganizationIdTaskQueryKey = (platformId: string,
    organizationId: string,) => {
    return [`/zimbra/platform/${platformId}/organization/${organizationId}/task`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdOrganizationOrganizationIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationIdTask404>(platformId: string,
    organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdOrganizationOrganizationIdTaskQueryKey(platformId,organizationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>> = ({ signal }) => getZimbraPlatformPlatformIdOrganizationOrganizationIdTask(platformId,organizationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && organizationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdOrganizationOrganizationIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>>
export type GetZimbraPlatformPlatformIdOrganizationOrganizationIdTaskQueryError = GetZimbraPlatformPlatformIdOrganizationOrganizationIdTask404


export function useGetZimbraPlatformPlatformIdOrganizationOrganizationIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationIdTask404>(
 platformId: string,
    organizationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdOrganizationOrganizationIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationIdTask404>(
 platformId: string,
    organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdOrganizationOrganizationIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationIdTask404>(
 platformId: string,
    organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an Organization Tasks
 */

export function useGetZimbraPlatformPlatformIdOrganizationOrganizationIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>, TError = GetZimbraPlatformPlatformIdOrganizationOrganizationIdTask404>(
 platformId: string,
    organizationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdOrganizationOrganizationIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdOrganizationOrganizationIdTaskQueryOptions(platformId,organizationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a platform redirection list
 */
export const getZimbraPlatformPlatformIdRedirection = (
    platformId: string,
    params?: GetZimbraPlatformPlatformIdRedirectionParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraRedirectionResponseOVH[]>(
      {url: `/zimbra/platform/${platformId}/redirection`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdRedirectionQueryKey = (platformId: string,
    params?: GetZimbraPlatformPlatformIdRedirectionParams,) => {
    return [`/zimbra/platform/${platformId}/redirection`, ...(params ? [params]: [])] as const;
    }

    
export const getGetZimbraPlatformPlatformIdRedirectionQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>, TError = GetZimbraPlatformPlatformIdRedirection404>(platformId: string,
    params?: GetZimbraPlatformPlatformIdRedirectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdRedirectionQueryKey(platformId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>> = ({ signal }) => getZimbraPlatformPlatformIdRedirection(platformId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdRedirectionQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>>
export type GetZimbraPlatformPlatformIdRedirectionQueryError = GetZimbraPlatformPlatformIdRedirection404


export function useGetZimbraPlatformPlatformIdRedirection<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>, TError = GetZimbraPlatformPlatformIdRedirection404>(
 platformId: string,
    params: undefined |  GetZimbraPlatformPlatformIdRedirectionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdRedirection<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>, TError = GetZimbraPlatformPlatformIdRedirection404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdRedirectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdRedirection<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>, TError = GetZimbraPlatformPlatformIdRedirection404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdRedirectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a platform redirection list
 */

export function useGetZimbraPlatformPlatformIdRedirection<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>, TError = GetZimbraPlatformPlatformIdRedirection404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdRedirectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirection>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdRedirectionQueryOptions(platformId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create an redirection
 */
export const postZimbraPlatformPlatformIdRedirection = (
    platformId: string,
    zimbraRedirectionPostPayloadOVH: ZimbraRedirectionPostPayloadOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<void>(
      {url: `/zimbra/platform/${platformId}/redirection`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: zimbraRedirectionPostPayloadOVH, signal
    },
      options);
    }
  


export const getPostZimbraPlatformPlatformIdRedirectionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdRedirection>>, TError,{platformId: string;data: ZimbraRedirectionPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdRedirection>>, TError,{platformId: string;data: ZimbraRedirectionPostPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdRedirection>>, {platformId: string;data: ZimbraRedirectionPostPayloadOVH}> = (props) => {
          const {platformId,data} = props ?? {};

          return  postZimbraPlatformPlatformIdRedirection(platformId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostZimbraPlatformPlatformIdRedirectionMutationResult = NonNullable<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdRedirection>>>
    export type PostZimbraPlatformPlatformIdRedirectionMutationBody = ZimbraRedirectionPostPayloadOVH
    export type PostZimbraPlatformPlatformIdRedirectionMutationError = unknown

    /**
 * @summary Create an redirection
 */
export const usePostZimbraPlatformPlatformIdRedirection = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraPlatformPlatformIdRedirection>>, TError,{platformId: string;data: ZimbraRedirectionPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postZimbraPlatformPlatformIdRedirection>>,
        TError,
        {platformId: string;data: ZimbraRedirectionPostPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostZimbraPlatformPlatformIdRedirectionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an redirection
 */
export const deleteZimbraPlatformPlatformIdRedirectionRedirectionId = (
    platformId: string,
    redirectionId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/zimbra/platform/${platformId}/redirection/${redirectionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteZimbraPlatformPlatformIdRedirectionRedirectionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError,{platformId: string;redirectionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError,{platformId: string;redirectionId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdRedirectionRedirectionId>>, {platformId: string;redirectionId: string}> = (props) => {
          const {platformId,redirectionId} = props ?? {};

          return  deleteZimbraPlatformPlatformIdRedirectionRedirectionId(platformId,redirectionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteZimbraPlatformPlatformIdRedirectionRedirectionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdRedirectionRedirectionId>>>
    
    export type DeleteZimbraPlatformPlatformIdRedirectionRedirectionIdMutationError = unknown

    /**
 * @summary Delete an redirection
 */
export const useDeleteZimbraPlatformPlatformIdRedirectionRedirectionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError,{platformId: string;redirectionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteZimbraPlatformPlatformIdRedirectionRedirectionId>>,
        TError,
        {platformId: string;redirectionId: string},
        TContext
      > => {

      const mutationOptions = getDeleteZimbraPlatformPlatformIdRedirectionRedirectionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a platform redirection
 */
export const getZimbraPlatformPlatformIdRedirectionRedirectionId = (
    platformId: string,
    redirectionId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraRedirectionResponseOVH>(
      {url: `/zimbra/platform/${platformId}/redirection/${redirectionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdRedirectionRedirectionIdQueryKey = (platformId: string,
    redirectionId: string,) => {
    return [`/zimbra/platform/${platformId}/redirection/${redirectionId}`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdRedirectionRedirectionIdQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError = GetZimbraPlatformPlatformIdRedirectionRedirectionId404>(platformId: string,
    redirectionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdRedirectionRedirectionIdQueryKey(platformId,redirectionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>> = ({ signal }) => getZimbraPlatformPlatformIdRedirectionRedirectionId(platformId,redirectionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && redirectionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdRedirectionRedirectionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>>
export type GetZimbraPlatformPlatformIdRedirectionRedirectionIdQueryError = GetZimbraPlatformPlatformIdRedirectionRedirectionId404


export function useGetZimbraPlatformPlatformIdRedirectionRedirectionId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError = GetZimbraPlatformPlatformIdRedirectionRedirectionId404>(
 platformId: string,
    redirectionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdRedirectionRedirectionId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError = GetZimbraPlatformPlatformIdRedirectionRedirectionId404>(
 platformId: string,
    redirectionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdRedirectionRedirectionId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError = GetZimbraPlatformPlatformIdRedirectionRedirectionId404>(
 platformId: string,
    redirectionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a platform redirection
 */

export function useGetZimbraPlatformPlatformIdRedirectionRedirectionId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError = GetZimbraPlatformPlatformIdRedirectionRedirectionId404>(
 platformId: string,
    redirectionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdRedirectionRedirectionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdRedirectionRedirectionIdQueryOptions(platformId,redirectionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a list of platform tasks
 */
export const getZimbraPlatformPlatformIdTask = (
    platformId: string,
    params?: GetZimbraPlatformPlatformIdTaskParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH[]>(
      {url: `/zimbra/platform/${platformId}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdTaskQueryKey = (platformId: string,
    params?: GetZimbraPlatformPlatformIdTaskParams,) => {
    return [`/zimbra/platform/${platformId}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetZimbraPlatformPlatformIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>, TError = GetZimbraPlatformPlatformIdTask404>(platformId: string,
    params?: GetZimbraPlatformPlatformIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdTaskQueryKey(platformId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>> = ({ signal }) => getZimbraPlatformPlatformIdTask(platformId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>>
export type GetZimbraPlatformPlatformIdTaskQueryError = GetZimbraPlatformPlatformIdTask404


export function useGetZimbraPlatformPlatformIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>, TError = GetZimbraPlatformPlatformIdTask404>(
 platformId: string,
    params: undefined |  GetZimbraPlatformPlatformIdTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>, TError = GetZimbraPlatformPlatformIdTask404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>, TError = GetZimbraPlatformPlatformIdTask404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of platform tasks
 */

export function useGetZimbraPlatformPlatformIdTask<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>, TError = GetZimbraPlatformPlatformIdTask404>(
 platformId: string,
    params?: GetZimbraPlatformPlatformIdTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdTaskQueryOptions(platformId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a platform task
 */
export const getZimbraPlatformPlatformIdTaskTaskId = (
    platformId: string,
    taskId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH>(
      {url: `/zimbra/platform/${platformId}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraPlatformPlatformIdTaskTaskIdQueryKey = (platformId: string,
    taskId: string,) => {
    return [`/zimbra/platform/${platformId}/task/${taskId}`] as const;
    }

    
export const getGetZimbraPlatformPlatformIdTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>, TError = GetZimbraPlatformPlatformIdTaskTaskId404>(platformId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraPlatformPlatformIdTaskTaskIdQueryKey(platformId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>> = ({ signal }) => getZimbraPlatformPlatformIdTaskTaskId(platformId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(platformId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraPlatformPlatformIdTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>>
export type GetZimbraPlatformPlatformIdTaskTaskIdQueryError = GetZimbraPlatformPlatformIdTaskTaskId404


export function useGetZimbraPlatformPlatformIdTaskTaskId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>, TError = GetZimbraPlatformPlatformIdTaskTaskId404>(
 platformId: string,
    taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdTaskTaskId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>, TError = GetZimbraPlatformPlatformIdTaskTaskId404>(
 platformId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraPlatformPlatformIdTaskTaskId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>, TError = GetZimbraPlatformPlatformIdTaskTaskId404>(
 platformId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a platform task
 */

export function useGetZimbraPlatformPlatformIdTaskTaskId<TData = Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>, TError = GetZimbraPlatformPlatformIdTaskTaskId404>(
 platformId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraPlatformPlatformIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraPlatformPlatformIdTaskTaskIdQueryOptions(platformId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a list of Zimbra Projects
 */
export const getZimbraProject = (
    params?: GetZimbraProjectParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraProjectResponseWithIAMOVH[]>(
      {url: `/zimbra/project`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetZimbraProjectQueryKey = (params?: GetZimbraProjectParams,) => {
    return [`/zimbra/project`, ...(params ? [params]: [])] as const;
    }

    
export const getGetZimbraProjectQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraProject>>, TError = unknown>(params?: GetZimbraProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraProjectQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraProject>>> = ({ signal }) => getZimbraProject(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraProject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraProjectQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraProject>>>
export type GetZimbraProjectQueryError = unknown


export function useGetZimbraProject<TData = Awaited<ReturnType<typeof getZimbraProject>>, TError = unknown>(
 params: undefined |  GetZimbraProjectParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraProject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraProject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraProject<TData = Awaited<ReturnType<typeof getZimbraProject>>, TError = unknown>(
 params?: GetZimbraProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraProject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraProject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraProject<TData = Awaited<ReturnType<typeof getZimbraProject>>, TError = unknown>(
 params?: GetZimbraProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of Zimbra Projects
 */

export function useGetZimbraProject<TData = Awaited<ReturnType<typeof getZimbraProject>>, TError = unknown>(
 params?: GetZimbraProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraProjectQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a Zimbra Project
 */
export const getZimbraProjectProjectId = (
    projectId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraProjectResponseWithIAMOVH>(
      {url: `/zimbra/project/${projectId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetZimbraProjectProjectIdQueryKey = (projectId: string,) => {
    return [`/zimbra/project/${projectId}`] as const;
    }

    
export const getGetZimbraProjectProjectIdQueryOptions = <TData = Awaited<ReturnType<typeof getZimbraProjectProjectId>>, TError = GetZimbraProjectProjectId404>(projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraProjectProjectId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZimbraProjectProjectIdQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZimbraProjectProjectId>>> = ({ signal }) => getZimbraProjectProjectId(projectId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZimbraProjectProjectId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetZimbraProjectProjectIdQueryResult = NonNullable<Awaited<ReturnType<typeof getZimbraProjectProjectId>>>
export type GetZimbraProjectProjectIdQueryError = GetZimbraProjectProjectId404


export function useGetZimbraProjectProjectId<TData = Awaited<ReturnType<typeof getZimbraProjectProjectId>>, TError = GetZimbraProjectProjectId404>(
 projectId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraProjectProjectId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraProjectProjectId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraProjectProjectId<TData = Awaited<ReturnType<typeof getZimbraProjectProjectId>>, TError = GetZimbraProjectProjectId404>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraProjectProjectId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZimbraProjectProjectId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetZimbraProjectProjectId<TData = Awaited<ReturnType<typeof getZimbraProjectProjectId>>, TError = GetZimbraProjectProjectId404>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraProjectProjectId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a Zimbra Project
 */

export function useGetZimbraProjectProjectId<TData = Awaited<ReturnType<typeof getZimbraProjectProjectId>>, TError = GetZimbraProjectProjectId404>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZimbraProjectProjectId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetZimbraProjectProjectIdQueryOptions(projectId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a Zimbra Platform
 */
export const postZimbraProjectProjectIdPlatform = (
    projectId: string,
    zimbraPlatformPostPayloadOVH: ZimbraPlatformPostPayloadOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<ZimbraPlatformResponseOVH>(
      {url: `/zimbra/project/${projectId}/platform`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: zimbraPlatformPostPayloadOVH, signal
    },
      options);
    }
  


export const getPostZimbraProjectProjectIdPlatformMutationOptions = <TError = PostZimbraProjectProjectIdPlatform404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraProjectProjectIdPlatform>>, TError,{projectId: string;data: ZimbraPlatformPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postZimbraProjectProjectIdPlatform>>, TError,{projectId: string;data: ZimbraPlatformPostPayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postZimbraProjectProjectIdPlatform>>, {projectId: string;data: ZimbraPlatformPostPayloadOVH}> = (props) => {
          const {projectId,data} = props ?? {};

          return  postZimbraProjectProjectIdPlatform(projectId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostZimbraProjectProjectIdPlatformMutationResult = NonNullable<Awaited<ReturnType<typeof postZimbraProjectProjectIdPlatform>>>
    export type PostZimbraProjectProjectIdPlatformMutationBody = ZimbraPlatformPostPayloadOVH
    export type PostZimbraProjectProjectIdPlatformMutationError = PostZimbraProjectProjectIdPlatform404

    /**
 * @summary Create a Zimbra Platform
 */
export const usePostZimbraProjectProjectIdPlatform = <TError = PostZimbraProjectProjectIdPlatform404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postZimbraProjectProjectIdPlatform>>, TError,{projectId: string;data: ZimbraPlatformPostPayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postZimbraProjectProjectIdPlatform>>,
        TError,
        {projectId: string;data: ZimbraPlatformPostPayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostZimbraProjectProjectIdPlatformMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a Zimbra Platform
 */
export const deleteZimbraProjectProjectIdPlatformPlatformId = (
    projectId: string,
    platformId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/zimbra/project/${projectId}/platform/${platformId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteZimbraProjectProjectIdPlatformPlatformIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraProjectProjectIdPlatformPlatformId>>, TError,{projectId: string;platformId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraProjectProjectIdPlatformPlatformId>>, TError,{projectId: string;platformId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteZimbraProjectProjectIdPlatformPlatformId>>, {projectId: string;platformId: string}> = (props) => {
          const {projectId,platformId} = props ?? {};

          return  deleteZimbraProjectProjectIdPlatformPlatformId(projectId,platformId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteZimbraProjectProjectIdPlatformPlatformIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteZimbraProjectProjectIdPlatformPlatformId>>>
    
    export type DeleteZimbraProjectProjectIdPlatformPlatformIdMutationError = unknown

    /**
 * @summary Delete a Zimbra Platform
 */
export const useDeleteZimbraProjectProjectIdPlatformPlatformId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZimbraProjectProjectIdPlatformPlatformId>>, TError,{projectId: string;platformId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteZimbraProjectProjectIdPlatformPlatformId>>,
        TError,
        {projectId: string;platformId: string},
        TContext
      > => {

      const mutationOptions = getDeleteZimbraProjectProjectIdPlatformPlatformIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

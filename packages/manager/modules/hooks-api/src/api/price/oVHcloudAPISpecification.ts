/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  OrderPriceOVH,
  PriceDedicatedServerAntiDDoSProEnumOVH,
  PriceDedicatedServerBackupStorageEnumOVH,
  PriceDedicatedServerFirewallEnumOVH,
  PriceDedicatedServerIpEnumOVH,
  PriceDedicatedServerProfessionalUseEnumOVH,
  PriceDomainZoneOptionEnumOVH,
  PriceEmailExchangeOfferEnumOVH,
  PriceHostingPrivateDatabaseEnumOVH,
  PriceHostingWebCdnEnumOVH,
  PriceHostingWebExtraSqlPersoEnumOVH,
  PriceHostingWebSslEnumOVH,
  PriceLicenseOfficeEnumOVH,
  PriceOverTheBoxOfferEnumOVH,
  PricePackXdslInstallationEnumOVH,
  PricePackXdslOffersEnumOVH,
  PricePackXdslOptionsEnumOVH,
  PriceSaasCsp2LicenseEnumOVH,
  PriceTelephonyOfferEnumOVH,
  PriceVps2013v1ClassicModelEnumOVH,
  PriceVps2013v1CloudModelEnumOVH,
  PriceVps2013v1CloudOptionEnumOVH,
  PriceVps2013v1LowlatModelEnumOVH,
  PriceVps2014v1ClassicModelEnumOVH,
  PriceVps2014v1CloudModelEnumOVH,
  PriceVps2014v1CloudOptionEnumOVH,
  PriceVps2015v1CloudModelEnumOVH,
  PriceVps2015v1CloudOptionEnumOVH,
  PriceVps2015v1CloudramModelEnumOVH,
  PriceVps2015v1CloudramOptionEnumOVH,
  PriceVps2015v1SsdModelEnumOVH,
  PriceVps2015v1SsdOptionEnumOVH,
  PriceVps2017v1SsdModelEnumOVH,
  PriceVps2017v1SsdOptionEnumOVH,
  PriceVps2017v2CloudModelEnumOVH,
  PriceVps2017v2CloudOptionEnumOVH,
  PriceVps2017v2CloudramModelEnumOVH,
  PriceVps2017v2CloudramOptionEnumOVH,
  PriceVps2017v2SsdModelEnumOVH,
  PriceVps2017v2SsdOptionEnumOVH,
  PriceVps2017v3CloudModelEnumOVH,
  PriceVps2017v3CloudOptionEnumOVH,
  PriceVps2017v3CloudramModelEnumOVH,
  PriceVps2017v3CloudramOptionEnumOVH,
  PriceVps2017v3SsdModelEnumOVH,
  PriceVps2017v3SsdOptionEnumOVH,
  PriceVps2018v1CloudModelEnumOVH,
  PriceVps2018v1CloudOptionEnumOVH,
  PriceVps2018v1CloudramModelEnumOVH,
  PriceVps2018v1CloudramOptionEnumOVH,
  PriceVps2018v1SsdModelEnumOVH,
  PriceVps2018v1SsdOptionEnumOVH,
  PriceVps2018v2SsdModelEnumOVH,
  PriceVps2018v2SsdOptionEnumOVH,
  PriceXdslAddressMoveFeeEnumOVH,
  PriceXdslInstallationEnumOVH,
  PriceXdslOffersEnumOVH,
  PriceXdslOptionsInstallationEnumOVH,
  PriceXdslOptionsIpv4EnumOVH,
  PriceXdslOptionsLineEnumOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get price of anti-DDos Pro option
 */
export const getPriceDedicatedServerAntiDDoSProCommercialRange = (
    commercialRange: PriceDedicatedServerAntiDDoSProEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/dedicated/server/antiDDoSPro/${commercialRange}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceDedicatedServerAntiDDoSProCommercialRangeQueryKey = (commercialRange: PriceDedicatedServerAntiDDoSProEnumOVH,) => {
    return [`/price/dedicated/server/antiDDoSPro/${commercialRange}`] as const;
    }

    
export const getGetPriceDedicatedServerAntiDDoSProCommercialRangeQueryOptions = <TData = Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>, TError = unknown>(commercialRange: PriceDedicatedServerAntiDDoSProEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceDedicatedServerAntiDDoSProCommercialRangeQueryKey(commercialRange);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>> = ({ signal }) => getPriceDedicatedServerAntiDDoSProCommercialRange(commercialRange, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(commercialRange), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceDedicatedServerAntiDDoSProCommercialRangeQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>>
export type GetPriceDedicatedServerAntiDDoSProCommercialRangeQueryError = unknown


export function useGetPriceDedicatedServerAntiDDoSProCommercialRange<TData = Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>, TError = unknown>(
 commercialRange: PriceDedicatedServerAntiDDoSProEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceDedicatedServerAntiDDoSProCommercialRange<TData = Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>, TError = unknown>(
 commercialRange: PriceDedicatedServerAntiDDoSProEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceDedicatedServerAntiDDoSProCommercialRange<TData = Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>, TError = unknown>(
 commercialRange: PriceDedicatedServerAntiDDoSProEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of anti-DDos Pro option
 */

export function useGetPriceDedicatedServerAntiDDoSProCommercialRange<TData = Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>, TError = unknown>(
 commercialRange: PriceDedicatedServerAntiDDoSProEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerAntiDDoSProCommercialRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceDedicatedServerAntiDDoSProCommercialRangeQueryOptions(commercialRange,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of backup storage offer
 */
export const getPriceDedicatedServerBackupStorageCapacity = (
    capacity: PriceDedicatedServerBackupStorageEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/dedicated/server/backupStorage/${capacity}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceDedicatedServerBackupStorageCapacityQueryKey = (capacity: PriceDedicatedServerBackupStorageEnumOVH,) => {
    return [`/price/dedicated/server/backupStorage/${capacity}`] as const;
    }

    
export const getGetPriceDedicatedServerBackupStorageCapacityQueryOptions = <TData = Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>, TError = unknown>(capacity: PriceDedicatedServerBackupStorageEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceDedicatedServerBackupStorageCapacityQueryKey(capacity);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>> = ({ signal }) => getPriceDedicatedServerBackupStorageCapacity(capacity, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(capacity), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceDedicatedServerBackupStorageCapacityQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>>
export type GetPriceDedicatedServerBackupStorageCapacityQueryError = unknown


export function useGetPriceDedicatedServerBackupStorageCapacity<TData = Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>, TError = unknown>(
 capacity: PriceDedicatedServerBackupStorageEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceDedicatedServerBackupStorageCapacity<TData = Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>, TError = unknown>(
 capacity: PriceDedicatedServerBackupStorageEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceDedicatedServerBackupStorageCapacity<TData = Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>, TError = unknown>(
 capacity: PriceDedicatedServerBackupStorageEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of backup storage offer
 */

export function useGetPriceDedicatedServerBackupStorageCapacity<TData = Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>, TError = unknown>(
 capacity: PriceDedicatedServerBackupStorageEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerBackupStorageCapacity>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceDedicatedServerBackupStorageCapacityQueryOptions(capacity,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of available firewall models
 */
export const getPriceDedicatedServerFirewallFirewallModel = (
    firewallModel: PriceDedicatedServerFirewallEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/dedicated/server/firewall/${firewallModel}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceDedicatedServerFirewallFirewallModelQueryKey = (firewallModel: PriceDedicatedServerFirewallEnumOVH,) => {
    return [`/price/dedicated/server/firewall/${firewallModel}`] as const;
    }

    
export const getGetPriceDedicatedServerFirewallFirewallModelQueryOptions = <TData = Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>, TError = unknown>(firewallModel: PriceDedicatedServerFirewallEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceDedicatedServerFirewallFirewallModelQueryKey(firewallModel);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>> = ({ signal }) => getPriceDedicatedServerFirewallFirewallModel(firewallModel, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(firewallModel), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceDedicatedServerFirewallFirewallModelQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>>
export type GetPriceDedicatedServerFirewallFirewallModelQueryError = unknown


export function useGetPriceDedicatedServerFirewallFirewallModel<TData = Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>, TError = unknown>(
 firewallModel: PriceDedicatedServerFirewallEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceDedicatedServerFirewallFirewallModel<TData = Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>, TError = unknown>(
 firewallModel: PriceDedicatedServerFirewallEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceDedicatedServerFirewallFirewallModel<TData = Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>, TError = unknown>(
 firewallModel: PriceDedicatedServerFirewallEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of available firewall models
 */

export function useGetPriceDedicatedServerFirewallFirewallModel<TData = Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>, TError = unknown>(
 firewallModel: PriceDedicatedServerFirewallEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerFirewallFirewallModel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceDedicatedServerFirewallFirewallModelQueryOptions(firewallModel,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of IPs
 */
export const getPriceDedicatedServerIpRoutedTo = (
    routedTo: PriceDedicatedServerIpEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/dedicated/server/ip/${routedTo}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceDedicatedServerIpRoutedToQueryKey = (routedTo: PriceDedicatedServerIpEnumOVH,) => {
    return [`/price/dedicated/server/ip/${routedTo}`] as const;
    }

    
export const getGetPriceDedicatedServerIpRoutedToQueryOptions = <TData = Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>, TError = unknown>(routedTo: PriceDedicatedServerIpEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceDedicatedServerIpRoutedToQueryKey(routedTo);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>> = ({ signal }) => getPriceDedicatedServerIpRoutedTo(routedTo, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(routedTo), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceDedicatedServerIpRoutedToQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>>
export type GetPriceDedicatedServerIpRoutedToQueryError = unknown


export function useGetPriceDedicatedServerIpRoutedTo<TData = Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>, TError = unknown>(
 routedTo: PriceDedicatedServerIpEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceDedicatedServerIpRoutedTo<TData = Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>, TError = unknown>(
 routedTo: PriceDedicatedServerIpEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceDedicatedServerIpRoutedTo<TData = Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>, TError = unknown>(
 routedTo: PriceDedicatedServerIpEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of IPs
 */

export function useGetPriceDedicatedServerIpRoutedTo<TData = Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>, TError = unknown>(
 routedTo: PriceDedicatedServerIpEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerIpRoutedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceDedicatedServerIpRoutedToQueryOptions(routedTo,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of professional use option
 */
export const getPriceDedicatedServerProfessionalUseCommercialRange = (
    commercialRange: PriceDedicatedServerProfessionalUseEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/dedicated/server/professionalUse/${commercialRange}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceDedicatedServerProfessionalUseCommercialRangeQueryKey = (commercialRange: PriceDedicatedServerProfessionalUseEnumOVH,) => {
    return [`/price/dedicated/server/professionalUse/${commercialRange}`] as const;
    }

    
export const getGetPriceDedicatedServerProfessionalUseCommercialRangeQueryOptions = <TData = Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>, TError = unknown>(commercialRange: PriceDedicatedServerProfessionalUseEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceDedicatedServerProfessionalUseCommercialRangeQueryKey(commercialRange);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>> = ({ signal }) => getPriceDedicatedServerProfessionalUseCommercialRange(commercialRange, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(commercialRange), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceDedicatedServerProfessionalUseCommercialRangeQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>>
export type GetPriceDedicatedServerProfessionalUseCommercialRangeQueryError = unknown


export function useGetPriceDedicatedServerProfessionalUseCommercialRange<TData = Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>, TError = unknown>(
 commercialRange: PriceDedicatedServerProfessionalUseEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceDedicatedServerProfessionalUseCommercialRange<TData = Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>, TError = unknown>(
 commercialRange: PriceDedicatedServerProfessionalUseEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceDedicatedServerProfessionalUseCommercialRange<TData = Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>, TError = unknown>(
 commercialRange: PriceDedicatedServerProfessionalUseEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of professional use option
 */

export function useGetPriceDedicatedServerProfessionalUseCommercialRange<TData = Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>, TError = unknown>(
 commercialRange: PriceDedicatedServerProfessionalUseEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDedicatedServerProfessionalUseCommercialRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceDedicatedServerProfessionalUseCommercialRangeQueryOptions(commercialRange,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of zone options
 */
export const getPriceDomainZoneOptionOptionName = (
    optionName: PriceDomainZoneOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/domain/zone/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceDomainZoneOptionOptionNameQueryKey = (optionName: PriceDomainZoneOptionEnumOVH,) => {
    return [`/price/domain/zone/option/${optionName}`] as const;
    }

    
export const getGetPriceDomainZoneOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>, TError = unknown>(optionName: PriceDomainZoneOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceDomainZoneOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>> = ({ signal }) => getPriceDomainZoneOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceDomainZoneOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>>
export type GetPriceDomainZoneOptionOptionNameQueryError = unknown


export function useGetPriceDomainZoneOptionOptionName<TData = Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>, TError = unknown>(
 optionName: PriceDomainZoneOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceDomainZoneOptionOptionName<TData = Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>, TError = unknown>(
 optionName: PriceDomainZoneOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceDomainZoneOptionOptionName<TData = Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>, TError = unknown>(
 optionName: PriceDomainZoneOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of zone options
 */

export function useGetPriceDomainZoneOptionOptionName<TData = Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>, TError = unknown>(
 optionName: PriceDomainZoneOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceDomainZoneOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceDomainZoneOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price of exchange offers
 */
export const getPriceEmailExchangeOfferOfferName = (
    offerName: PriceEmailExchangeOfferEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/email/exchange/offer/${offerName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceEmailExchangeOfferOfferNameQueryKey = (offerName: PriceEmailExchangeOfferEnumOVH,) => {
    return [`/price/email/exchange/offer/${offerName}`] as const;
    }

    
export const getGetPriceEmailExchangeOfferOfferNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>, TError = unknown>(offerName: PriceEmailExchangeOfferEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceEmailExchangeOfferOfferNameQueryKey(offerName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>> = ({ signal }) => getPriceEmailExchangeOfferOfferName(offerName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(offerName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceEmailExchangeOfferOfferNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>>
export type GetPriceEmailExchangeOfferOfferNameQueryError = unknown


export function useGetPriceEmailExchangeOfferOfferName<TData = Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>, TError = unknown>(
 offerName: PriceEmailExchangeOfferEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceEmailExchangeOfferOfferName<TData = Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>, TError = unknown>(
 offerName: PriceEmailExchangeOfferEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceEmailExchangeOfferOfferName<TData = Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>, TError = unknown>(
 offerName: PriceEmailExchangeOfferEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price of exchange offers
 */

export function useGetPriceEmailExchangeOfferOfferName<TData = Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>, TError = unknown>(
 offerName: PriceEmailExchangeOfferEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceEmailExchangeOfferOfferName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceEmailExchangeOfferOfferNameQueryOptions(offerName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price for a private database
 */
export const getPriceHostingPrivateDatabasePrivateDatabaseName = (
    privateDatabaseName: PriceHostingPrivateDatabaseEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/hosting/privateDatabase/${privateDatabaseName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceHostingPrivateDatabasePrivateDatabaseNameQueryKey = (privateDatabaseName: PriceHostingPrivateDatabaseEnumOVH,) => {
    return [`/price/hosting/privateDatabase/${privateDatabaseName}`] as const;
    }

    
export const getGetPriceHostingPrivateDatabasePrivateDatabaseNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>, TError = unknown>(privateDatabaseName: PriceHostingPrivateDatabaseEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceHostingPrivateDatabasePrivateDatabaseNameQueryKey(privateDatabaseName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>> = ({ signal }) => getPriceHostingPrivateDatabasePrivateDatabaseName(privateDatabaseName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(privateDatabaseName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceHostingPrivateDatabasePrivateDatabaseNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>>
export type GetPriceHostingPrivateDatabasePrivateDatabaseNameQueryError = unknown


export function useGetPriceHostingPrivateDatabasePrivateDatabaseName<TData = Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>, TError = unknown>(
 privateDatabaseName: PriceHostingPrivateDatabaseEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceHostingPrivateDatabasePrivateDatabaseName<TData = Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>, TError = unknown>(
 privateDatabaseName: PriceHostingPrivateDatabaseEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceHostingPrivateDatabasePrivateDatabaseName<TData = Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>, TError = unknown>(
 privateDatabaseName: PriceHostingPrivateDatabaseEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price for a private database
 */

export function useGetPriceHostingPrivateDatabasePrivateDatabaseName<TData = Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>, TError = unknown>(
 privateDatabaseName: PriceHostingPrivateDatabaseEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingPrivateDatabasePrivateDatabaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceHostingPrivateDatabasePrivateDatabaseNameQueryOptions(privateDatabaseName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price for cdn option
 */
export const getPriceHostingWebCdnCdnName = (
    cdnName: PriceHostingWebCdnEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/hosting/web/cdn/${cdnName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceHostingWebCdnCdnNameQueryKey = (cdnName: PriceHostingWebCdnEnumOVH,) => {
    return [`/price/hosting/web/cdn/${cdnName}`] as const;
    }

    
export const getGetPriceHostingWebCdnCdnNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>, TError = unknown>(cdnName: PriceHostingWebCdnEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceHostingWebCdnCdnNameQueryKey(cdnName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>> = ({ signal }) => getPriceHostingWebCdnCdnName(cdnName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cdnName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceHostingWebCdnCdnNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>>
export type GetPriceHostingWebCdnCdnNameQueryError = unknown


export function useGetPriceHostingWebCdnCdnName<TData = Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>, TError = unknown>(
 cdnName: PriceHostingWebCdnEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceHostingWebCdnCdnName<TData = Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>, TError = unknown>(
 cdnName: PriceHostingWebCdnEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceHostingWebCdnCdnName<TData = Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>, TError = unknown>(
 cdnName: PriceHostingWebCdnEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price for cdn option
 */

export function useGetPriceHostingWebCdnCdnName<TData = Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>, TError = unknown>(
 cdnName: PriceHostingWebCdnEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebCdnCdnName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceHostingWebCdnCdnNameQueryOptions(cdnName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price for extra sql perso option
 */
export const getPriceHostingWebExtraSqlPersoExtraSqlPersoName = (
    extraSqlPersoName: PriceHostingWebExtraSqlPersoEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/hosting/web/extraSqlPerso/${extraSqlPersoName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceHostingWebExtraSqlPersoExtraSqlPersoNameQueryKey = (extraSqlPersoName: PriceHostingWebExtraSqlPersoEnumOVH,) => {
    return [`/price/hosting/web/extraSqlPerso/${extraSqlPersoName}`] as const;
    }

    
export const getGetPriceHostingWebExtraSqlPersoExtraSqlPersoNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>, TError = unknown>(extraSqlPersoName: PriceHostingWebExtraSqlPersoEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceHostingWebExtraSqlPersoExtraSqlPersoNameQueryKey(extraSqlPersoName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>> = ({ signal }) => getPriceHostingWebExtraSqlPersoExtraSqlPersoName(extraSqlPersoName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(extraSqlPersoName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceHostingWebExtraSqlPersoExtraSqlPersoNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>>
export type GetPriceHostingWebExtraSqlPersoExtraSqlPersoNameQueryError = unknown


export function useGetPriceHostingWebExtraSqlPersoExtraSqlPersoName<TData = Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>, TError = unknown>(
 extraSqlPersoName: PriceHostingWebExtraSqlPersoEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceHostingWebExtraSqlPersoExtraSqlPersoName<TData = Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>, TError = unknown>(
 extraSqlPersoName: PriceHostingWebExtraSqlPersoEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceHostingWebExtraSqlPersoExtraSqlPersoName<TData = Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>, TError = unknown>(
 extraSqlPersoName: PriceHostingWebExtraSqlPersoEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price for extra sql perso option
 */

export function useGetPriceHostingWebExtraSqlPersoExtraSqlPersoName<TData = Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>, TError = unknown>(
 extraSqlPersoName: PriceHostingWebExtraSqlPersoEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebExtraSqlPersoExtraSqlPersoName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceHostingWebExtraSqlPersoExtraSqlPersoNameQueryOptions(extraSqlPersoName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price for hosted ssl option
 */
export const getPriceHostingWebSslSslName = (
    sslName: PriceHostingWebSslEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/hosting/web/ssl/${sslName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceHostingWebSslSslNameQueryKey = (sslName: PriceHostingWebSslEnumOVH,) => {
    return [`/price/hosting/web/ssl/${sslName}`] as const;
    }

    
export const getGetPriceHostingWebSslSslNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>, TError = unknown>(sslName: PriceHostingWebSslEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceHostingWebSslSslNameQueryKey(sslName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>> = ({ signal }) => getPriceHostingWebSslSslName(sslName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(sslName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceHostingWebSslSslNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>>
export type GetPriceHostingWebSslSslNameQueryError = unknown


export function useGetPriceHostingWebSslSslName<TData = Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>, TError = unknown>(
 sslName: PriceHostingWebSslEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceHostingWebSslSslName<TData = Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>, TError = unknown>(
 sslName: PriceHostingWebSslEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceHostingWebSslSslName<TData = Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>, TError = unknown>(
 sslName: PriceHostingWebSslEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price for hosted ssl option
 */

export function useGetPriceHostingWebSslSslName<TData = Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>, TError = unknown>(
 sslName: PriceHostingWebSslEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceHostingWebSslSslName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceHostingWebSslSslNameQueryOptions(sslName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the monthly price for an office license
 */
export const getPriceLicenseOfficeOfficeName = (
    officeName: PriceLicenseOfficeEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/license/office/${officeName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceLicenseOfficeOfficeNameQueryKey = (officeName: PriceLicenseOfficeEnumOVH,) => {
    return [`/price/license/office/${officeName}`] as const;
    }

    
export const getGetPriceLicenseOfficeOfficeNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>, TError = unknown>(officeName: PriceLicenseOfficeEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceLicenseOfficeOfficeNameQueryKey(officeName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>> = ({ signal }) => getPriceLicenseOfficeOfficeName(officeName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(officeName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceLicenseOfficeOfficeNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>>
export type GetPriceLicenseOfficeOfficeNameQueryError = unknown


export function useGetPriceLicenseOfficeOfficeName<TData = Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>, TError = unknown>(
 officeName: PriceLicenseOfficeEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceLicenseOfficeOfficeName<TData = Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>, TError = unknown>(
 officeName: PriceLicenseOfficeEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceLicenseOfficeOfficeName<TData = Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>, TError = unknown>(
 officeName: PriceLicenseOfficeEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the monthly price for an office license
 */

export function useGetPriceLicenseOfficeOfficeName<TData = Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>, TError = unknown>(
 officeName: PriceLicenseOfficeEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceLicenseOfficeOfficeName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceLicenseOfficeOfficeNameQueryOptions(officeName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price of overTheBox offers
 */
export const getPriceOverTheBoxOfferOfferName = (
    offerName: PriceOverTheBoxOfferEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/overTheBox/offer/${offerName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceOverTheBoxOfferOfferNameQueryKey = (offerName: PriceOverTheBoxOfferEnumOVH,) => {
    return [`/price/overTheBox/offer/${offerName}`] as const;
    }

    
export const getGetPriceOverTheBoxOfferOfferNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>, TError = unknown>(offerName: PriceOverTheBoxOfferEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceOverTheBoxOfferOfferNameQueryKey(offerName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>> = ({ signal }) => getPriceOverTheBoxOfferOfferName(offerName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(offerName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceOverTheBoxOfferOfferNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>>
export type GetPriceOverTheBoxOfferOfferNameQueryError = unknown


export function useGetPriceOverTheBoxOfferOfferName<TData = Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>, TError = unknown>(
 offerName: PriceOverTheBoxOfferEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceOverTheBoxOfferOfferName<TData = Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>, TError = unknown>(
 offerName: PriceOverTheBoxOfferEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceOverTheBoxOfferOfferName<TData = Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>, TError = unknown>(
 offerName: PriceOverTheBoxOfferEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price of overTheBox offers
 */

export function useGetPriceOverTheBoxOfferOfferName<TData = Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>, TError = unknown>(
 offerName: PriceOverTheBoxOfferEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceOverTheBoxOfferOfferName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceOverTheBoxOfferOfferNameQueryOptions(offerName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price of pack xdsl installation fee
 */
export const getPricePackXdslInstallationOffer = (
    offer: PricePackXdslInstallationEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/pack/xdsl/installation/${offer}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPricePackXdslInstallationOfferQueryKey = (offer: PricePackXdslInstallationEnumOVH,) => {
    return [`/price/pack/xdsl/installation/${offer}`] as const;
    }

    
export const getGetPricePackXdslInstallationOfferQueryOptions = <TData = Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>, TError = unknown>(offer: PricePackXdslInstallationEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPricePackXdslInstallationOfferQueryKey(offer);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>> = ({ signal }) => getPricePackXdslInstallationOffer(offer, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(offer), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPricePackXdslInstallationOfferQueryResult = NonNullable<Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>>
export type GetPricePackXdslInstallationOfferQueryError = unknown


export function useGetPricePackXdslInstallationOffer<TData = Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>, TError = unknown>(
 offer: PricePackXdslInstallationEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPricePackXdslInstallationOffer<TData = Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>, TError = unknown>(
 offer: PricePackXdslInstallationEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPricePackXdslInstallationOffer<TData = Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>, TError = unknown>(
 offer: PricePackXdslInstallationEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price of pack xdsl installation fee
 */

export function useGetPricePackXdslInstallationOffer<TData = Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>, TError = unknown>(
 offer: PricePackXdslInstallationEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslInstallationOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPricePackXdslInstallationOfferQueryOptions(offer,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price of pack xdsl offers
 */
export const getPricePackXdslOffersOffer = (
    offer: PricePackXdslOffersEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/pack/xdsl/offers/${offer}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPricePackXdslOffersOfferQueryKey = (offer: PricePackXdslOffersEnumOVH,) => {
    return [`/price/pack/xdsl/offers/${offer}`] as const;
    }

    
export const getGetPricePackXdslOffersOfferQueryOptions = <TData = Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>, TError = unknown>(offer: PricePackXdslOffersEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPricePackXdslOffersOfferQueryKey(offer);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>> = ({ signal }) => getPricePackXdslOffersOffer(offer, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(offer), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPricePackXdslOffersOfferQueryResult = NonNullable<Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>>
export type GetPricePackXdslOffersOfferQueryError = unknown


export function useGetPricePackXdslOffersOffer<TData = Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>, TError = unknown>(
 offer: PricePackXdslOffersEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPricePackXdslOffersOffer<TData = Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>, TError = unknown>(
 offer: PricePackXdslOffersEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPricePackXdslOffersOffer<TData = Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>, TError = unknown>(
 offer: PricePackXdslOffersEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price of pack xdsl offers
 */

export function useGetPricePackXdslOffersOffer<TData = Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>, TError = unknown>(
 offer: PricePackXdslOffersEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslOffersOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPricePackXdslOffersOfferQueryOptions(offer,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price of pack xdsl options
 */
export const getPricePackXdslOptionsOption = (
    option: PricePackXdslOptionsEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/pack/xdsl/options/${option}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPricePackXdslOptionsOptionQueryKey = (option: PricePackXdslOptionsEnumOVH,) => {
    return [`/price/pack/xdsl/options/${option}`] as const;
    }

    
export const getGetPricePackXdslOptionsOptionQueryOptions = <TData = Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>, TError = unknown>(option: PricePackXdslOptionsEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPricePackXdslOptionsOptionQueryKey(option);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>> = ({ signal }) => getPricePackXdslOptionsOption(option, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(option), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPricePackXdslOptionsOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>>
export type GetPricePackXdslOptionsOptionQueryError = unknown


export function useGetPricePackXdslOptionsOption<TData = Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>, TError = unknown>(
 option: PricePackXdslOptionsEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPricePackXdslOptionsOption<TData = Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>, TError = unknown>(
 option: PricePackXdslOptionsEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPricePackXdslOptionsOption<TData = Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>, TError = unknown>(
 option: PricePackXdslOptionsEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price of pack xdsl options
 */

export function useGetPricePackXdslOptionsOption<TData = Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>, TError = unknown>(
 option: PricePackXdslOptionsEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPricePackXdslOptionsOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPricePackXdslOptionsOptionQueryOptions(option,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the monthly price for an Office 365 license
 */
export const getPriceSaasCsp2LicenseLicenseName = (
    licenseName: PriceSaasCsp2LicenseEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/saas/csp2/license/${licenseName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceSaasCsp2LicenseLicenseNameQueryKey = (licenseName: PriceSaasCsp2LicenseEnumOVH,) => {
    return [`/price/saas/csp2/license/${licenseName}`] as const;
    }

    
export const getGetPriceSaasCsp2LicenseLicenseNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>, TError = unknown>(licenseName: PriceSaasCsp2LicenseEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceSaasCsp2LicenseLicenseNameQueryKey(licenseName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>> = ({ signal }) => getPriceSaasCsp2LicenseLicenseName(licenseName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(licenseName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceSaasCsp2LicenseLicenseNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>>
export type GetPriceSaasCsp2LicenseLicenseNameQueryError = unknown


export function useGetPriceSaasCsp2LicenseLicenseName<TData = Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>, TError = unknown>(
 licenseName: PriceSaasCsp2LicenseEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceSaasCsp2LicenseLicenseName<TData = Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>, TError = unknown>(
 licenseName: PriceSaasCsp2LicenseEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceSaasCsp2LicenseLicenseName<TData = Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>, TError = unknown>(
 licenseName: PriceSaasCsp2LicenseEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the monthly price for an Office 365 license
 */

export function useGetPriceSaasCsp2LicenseLicenseName<TData = Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>, TError = unknown>(
 licenseName: PriceSaasCsp2LicenseEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceSaasCsp2LicenseLicenseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceSaasCsp2LicenseLicenseNameQueryOptions(licenseName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price of telephony offers
 */
export const getPriceTelephonyOfferOfferName = (
    offerName: PriceTelephonyOfferEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/telephony/offer/${offerName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceTelephonyOfferOfferNameQueryKey = (offerName: PriceTelephonyOfferEnumOVH,) => {
    return [`/price/telephony/offer/${offerName}`] as const;
    }

    
export const getGetPriceTelephonyOfferOfferNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>, TError = unknown>(offerName: PriceTelephonyOfferEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceTelephonyOfferOfferNameQueryKey(offerName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>> = ({ signal }) => getPriceTelephonyOfferOfferName(offerName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(offerName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceTelephonyOfferOfferNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>>
export type GetPriceTelephonyOfferOfferNameQueryError = unknown


export function useGetPriceTelephonyOfferOfferName<TData = Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>, TError = unknown>(
 offerName: PriceTelephonyOfferEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceTelephonyOfferOfferName<TData = Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>, TError = unknown>(
 offerName: PriceTelephonyOfferEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceTelephonyOfferOfferName<TData = Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>, TError = unknown>(
 offerName: PriceTelephonyOfferEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price of telephony offers
 */

export function useGetPriceTelephonyOfferOfferName<TData = Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>, TError = unknown>(
 offerName: PriceTelephonyOfferEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceTelephonyOfferOfferName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceTelephonyOfferOfferNameQueryOptions(offerName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud 2013
 */
export const getPriceVps2013v1ClassicModelModelName = (
    modelName: PriceVps2013v1ClassicModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2013v1/classic/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2013v1ClassicModelModelNameQueryKey = (modelName: PriceVps2013v1ClassicModelEnumOVH,) => {
    return [`/price/vps/2013v1/classic/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2013v1ClassicModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>, TError = unknown>(modelName: PriceVps2013v1ClassicModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2013v1ClassicModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>> = ({ signal }) => getPriceVps2013v1ClassicModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2013v1ClassicModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>>
export type GetPriceVps2013v1ClassicModelModelNameQueryError = unknown


export function useGetPriceVps2013v1ClassicModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>, TError = unknown>(
 modelName: PriceVps2013v1ClassicModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2013v1ClassicModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>, TError = unknown>(
 modelName: PriceVps2013v1ClassicModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2013v1ClassicModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>, TError = unknown>(
 modelName: PriceVps2013v1ClassicModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud 2013
 */

export function useGetPriceVps2013v1ClassicModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>, TError = unknown>(
 modelName: PriceVps2013v1ClassicModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1ClassicModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2013v1ClassicModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Classic 2013
 */
export const getPriceVps2013v1CloudModelModelName = (
    modelName: PriceVps2013v1CloudModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2013v1/cloud/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2013v1CloudModelModelNameQueryKey = (modelName: PriceVps2013v1CloudModelEnumOVH,) => {
    return [`/price/vps/2013v1/cloud/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2013v1CloudModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>, TError = unknown>(modelName: PriceVps2013v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2013v1CloudModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>> = ({ signal }) => getPriceVps2013v1CloudModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2013v1CloudModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>>
export type GetPriceVps2013v1CloudModelModelNameQueryError = unknown


export function useGetPriceVps2013v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2013v1CloudModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2013v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2013v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2013v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2013v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Classic 2013
 */

export function useGetPriceVps2013v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2013v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2013v1CloudModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud Options 2013
 */
export const getPriceVps2013v1CloudOptionOptionName = (
    optionName: PriceVps2013v1CloudOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2013v1/cloud/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2013v1CloudOptionOptionNameQueryKey = (optionName: PriceVps2013v1CloudOptionEnumOVH,) => {
    return [`/price/vps/2013v1/cloud/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2013v1CloudOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>, TError = unknown>(optionName: PriceVps2013v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2013v1CloudOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>> = ({ signal }) => getPriceVps2013v1CloudOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2013v1CloudOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>>
export type GetPriceVps2013v1CloudOptionOptionNameQueryError = unknown


export function useGetPriceVps2013v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2013v1CloudOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2013v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2013v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2013v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2013v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud Options 2013
 */

export function useGetPriceVps2013v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2013v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2013v1CloudOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Low Latency 2013
 */
export const getPriceVps2013v1LowlatModelModelName = (
    modelName: PriceVps2013v1LowlatModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2013v1/lowlat/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2013v1LowlatModelModelNameQueryKey = (modelName: PriceVps2013v1LowlatModelEnumOVH,) => {
    return [`/price/vps/2013v1/lowlat/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2013v1LowlatModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>, TError = unknown>(modelName: PriceVps2013v1LowlatModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2013v1LowlatModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>> = ({ signal }) => getPriceVps2013v1LowlatModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2013v1LowlatModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>>
export type GetPriceVps2013v1LowlatModelModelNameQueryError = unknown


export function useGetPriceVps2013v1LowlatModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>, TError = unknown>(
 modelName: PriceVps2013v1LowlatModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2013v1LowlatModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>, TError = unknown>(
 modelName: PriceVps2013v1LowlatModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2013v1LowlatModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>, TError = unknown>(
 modelName: PriceVps2013v1LowlatModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Low Latency 2013
 */

export function useGetPriceVps2013v1LowlatModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>, TError = unknown>(
 modelName: PriceVps2013v1LowlatModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2013v1LowlatModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2013v1LowlatModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Classic 2014
 */
export const getPriceVps2014v1ClassicModelModelName = (
    modelName: PriceVps2014v1ClassicModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2014v1/classic/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2014v1ClassicModelModelNameQueryKey = (modelName: PriceVps2014v1ClassicModelEnumOVH,) => {
    return [`/price/vps/2014v1/classic/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2014v1ClassicModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>, TError = unknown>(modelName: PriceVps2014v1ClassicModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2014v1ClassicModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>> = ({ signal }) => getPriceVps2014v1ClassicModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2014v1ClassicModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>>
export type GetPriceVps2014v1ClassicModelModelNameQueryError = unknown


export function useGetPriceVps2014v1ClassicModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>, TError = unknown>(
 modelName: PriceVps2014v1ClassicModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2014v1ClassicModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>, TError = unknown>(
 modelName: PriceVps2014v1ClassicModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2014v1ClassicModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>, TError = unknown>(
 modelName: PriceVps2014v1ClassicModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Classic 2014
 */

export function useGetPriceVps2014v1ClassicModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>, TError = unknown>(
 modelName: PriceVps2014v1ClassicModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1ClassicModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2014v1ClassicModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud 2014
 */
export const getPriceVps2014v1CloudModelModelName = (
    modelName: PriceVps2014v1CloudModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2014v1/cloud/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2014v1CloudModelModelNameQueryKey = (modelName: PriceVps2014v1CloudModelEnumOVH,) => {
    return [`/price/vps/2014v1/cloud/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2014v1CloudModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>, TError = unknown>(modelName: PriceVps2014v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2014v1CloudModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>> = ({ signal }) => getPriceVps2014v1CloudModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2014v1CloudModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>>
export type GetPriceVps2014v1CloudModelModelNameQueryError = unknown


export function useGetPriceVps2014v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2014v1CloudModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2014v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2014v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2014v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2014v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud 2014
 */

export function useGetPriceVps2014v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2014v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2014v1CloudModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud Options 2014
 */
export const getPriceVps2014v1CloudOptionOptionName = (
    optionName: PriceVps2014v1CloudOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2014v1/cloud/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2014v1CloudOptionOptionNameQueryKey = (optionName: PriceVps2014v1CloudOptionEnumOVH,) => {
    return [`/price/vps/2014v1/cloud/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2014v1CloudOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>, TError = unknown>(optionName: PriceVps2014v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2014v1CloudOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>> = ({ signal }) => getPriceVps2014v1CloudOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2014v1CloudOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>>
export type GetPriceVps2014v1CloudOptionOptionNameQueryError = unknown


export function useGetPriceVps2014v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2014v1CloudOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2014v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2014v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2014v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2014v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud Options 2014
 */

export function useGetPriceVps2014v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2014v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2014v1CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2014v1CloudOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud 2015
 */
export const getPriceVps2015v1CloudModelModelName = (
    modelName: PriceVps2015v1CloudModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2015v1/cloud/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2015v1CloudModelModelNameQueryKey = (modelName: PriceVps2015v1CloudModelEnumOVH,) => {
    return [`/price/vps/2015v1/cloud/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2015v1CloudModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>, TError = unknown>(modelName: PriceVps2015v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2015v1CloudModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>> = ({ signal }) => getPriceVps2015v1CloudModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2015v1CloudModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>>
export type GetPriceVps2015v1CloudModelModelNameQueryError = unknown


export function useGetPriceVps2015v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2015v1CloudModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2015v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2015v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2015v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2015v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud 2015
 */

export function useGetPriceVps2015v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2015v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2015v1CloudModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud Options 2015/2016
 */
export const getPriceVps2015v1CloudOptionOptionName = (
    optionName: PriceVps2015v1CloudOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2015v1/cloud/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2015v1CloudOptionOptionNameQueryKey = (optionName: PriceVps2015v1CloudOptionEnumOVH,) => {
    return [`/price/vps/2015v1/cloud/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2015v1CloudOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>, TError = unknown>(optionName: PriceVps2015v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2015v1CloudOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>> = ({ signal }) => getPriceVps2015v1CloudOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2015v1CloudOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>>
export type GetPriceVps2015v1CloudOptionOptionNameQueryError = unknown


export function useGetPriceVps2015v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2015v1CloudOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2015v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2015v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2015v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2015v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud Options 2015/2016
 */

export function useGetPriceVps2015v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2015v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2015v1CloudOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud RAM 2016
 */
export const getPriceVps2015v1CloudramModelModelName = (
    modelName: PriceVps2015v1CloudramModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2015v1/cloudram/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2015v1CloudramModelModelNameQueryKey = (modelName: PriceVps2015v1CloudramModelEnumOVH,) => {
    return [`/price/vps/2015v1/cloudram/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2015v1CloudramModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>, TError = unknown>(modelName: PriceVps2015v1CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2015v1CloudramModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>> = ({ signal }) => getPriceVps2015v1CloudramModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2015v1CloudramModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>>
export type GetPriceVps2015v1CloudramModelModelNameQueryError = unknown


export function useGetPriceVps2015v1CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2015v1CloudramModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2015v1CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2015v1CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2015v1CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2015v1CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud RAM 2016
 */

export function useGetPriceVps2015v1CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2015v1CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudramModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2015v1CloudramModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud RAM Options 2015/2016
 */
export const getPriceVps2015v1CloudramOptionOptionName = (
    optionName: PriceVps2015v1CloudramOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2015v1/cloudram/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2015v1CloudramOptionOptionNameQueryKey = (optionName: PriceVps2015v1CloudramOptionEnumOVH,) => {
    return [`/price/vps/2015v1/cloudram/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2015v1CloudramOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>, TError = unknown>(optionName: PriceVps2015v1CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2015v1CloudramOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>> = ({ signal }) => getPriceVps2015v1CloudramOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2015v1CloudramOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>>
export type GetPriceVps2015v1CloudramOptionOptionNameQueryError = unknown


export function useGetPriceVps2015v1CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2015v1CloudramOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2015v1CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2015v1CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2015v1CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2015v1CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud RAM Options 2015/2016
 */

export function useGetPriceVps2015v1CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2015v1CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1CloudramOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2015v1CloudramOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS SSD 2015
 */
export const getPriceVps2015v1SsdModelModelName = (
    modelName: PriceVps2015v1SsdModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2015v1/ssd/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2015v1SsdModelModelNameQueryKey = (modelName: PriceVps2015v1SsdModelEnumOVH,) => {
    return [`/price/vps/2015v1/ssd/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2015v1SsdModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>, TError = unknown>(modelName: PriceVps2015v1SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2015v1SsdModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>> = ({ signal }) => getPriceVps2015v1SsdModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2015v1SsdModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>>
export type GetPriceVps2015v1SsdModelModelNameQueryError = unknown


export function useGetPriceVps2015v1SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2015v1SsdModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2015v1SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2015v1SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2015v1SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2015v1SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS SSD 2015
 */

export function useGetPriceVps2015v1SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2015v1SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2015v1SsdModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS SSD Options 2015/2016
 */
export const getPriceVps2015v1SsdOptionOptionName = (
    optionName: PriceVps2015v1SsdOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2015v1/ssd/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2015v1SsdOptionOptionNameQueryKey = (optionName: PriceVps2015v1SsdOptionEnumOVH,) => {
    return [`/price/vps/2015v1/ssd/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2015v1SsdOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>, TError = unknown>(optionName: PriceVps2015v1SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2015v1SsdOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>> = ({ signal }) => getPriceVps2015v1SsdOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2015v1SsdOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>>
export type GetPriceVps2015v1SsdOptionOptionNameQueryError = unknown


export function useGetPriceVps2015v1SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2015v1SsdOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2015v1SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2015v1SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2015v1SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2015v1SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS SSD Options 2015/2016
 */

export function useGetPriceVps2015v1SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2015v1SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2015v1SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2015v1SsdOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS SSD Discovery 2017
 */
export const getPriceVps2017v1SsdModelModelName = (
    modelName: PriceVps2017v1SsdModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v1/ssd/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v1SsdModelModelNameQueryKey = (modelName: PriceVps2017v1SsdModelEnumOVH,) => {
    return [`/price/vps/2017v1/ssd/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2017v1SsdModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>, TError = unknown>(modelName: PriceVps2017v1SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v1SsdModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>> = ({ signal }) => getPriceVps2017v1SsdModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v1SsdModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>>
export type GetPriceVps2017v1SsdModelModelNameQueryError = unknown


export function useGetPriceVps2017v1SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v1SsdModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v1SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v1SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v1SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v1SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS SSD Discovery 2017
 */

export function useGetPriceVps2017v1SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v1SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v1SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v1SsdModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS SSD Discovery Options 2017
 */
export const getPriceVps2017v1SsdOptionOptionName = (
    optionName: PriceVps2017v1SsdOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v1/ssd/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v1SsdOptionOptionNameQueryKey = (optionName: PriceVps2017v1SsdOptionEnumOVH,) => {
    return [`/price/vps/2017v1/ssd/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2017v1SsdOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>, TError = unknown>(optionName: PriceVps2017v1SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v1SsdOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>> = ({ signal }) => getPriceVps2017v1SsdOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v1SsdOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>>
export type GetPriceVps2017v1SsdOptionOptionNameQueryError = unknown


export function useGetPriceVps2017v1SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v1SsdOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v1SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v1SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v1SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v1SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS SSD Discovery Options 2017
 */

export function useGetPriceVps2017v1SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v1SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v1SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v1SsdOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud 2017
 */
export const getPriceVps2017v2CloudModelModelName = (
    modelName: PriceVps2017v2CloudModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v2/cloud/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v2CloudModelModelNameQueryKey = (modelName: PriceVps2017v2CloudModelEnumOVH,) => {
    return [`/price/vps/2017v2/cloud/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2017v2CloudModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>, TError = unknown>(modelName: PriceVps2017v2CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v2CloudModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>> = ({ signal }) => getPriceVps2017v2CloudModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v2CloudModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>>
export type GetPriceVps2017v2CloudModelModelNameQueryError = unknown


export function useGetPriceVps2017v2CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v2CloudModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v2CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v2CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v2CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v2CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud 2017
 */

export function useGetPriceVps2017v2CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v2CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v2CloudModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud Options 2015/2016
 */
export const getPriceVps2017v2CloudOptionOptionName = (
    optionName: PriceVps2017v2CloudOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v2/cloud/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v2CloudOptionOptionNameQueryKey = (optionName: PriceVps2017v2CloudOptionEnumOVH,) => {
    return [`/price/vps/2017v2/cloud/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2017v2CloudOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>, TError = unknown>(optionName: PriceVps2017v2CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v2CloudOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>> = ({ signal }) => getPriceVps2017v2CloudOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v2CloudOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>>
export type GetPriceVps2017v2CloudOptionOptionNameQueryError = unknown


export function useGetPriceVps2017v2CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v2CloudOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v2CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v2CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v2CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v2CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud Options 2015/2016
 */

export function useGetPriceVps2017v2CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v2CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v2CloudOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud RAM 2017
 */
export const getPriceVps2017v2CloudramModelModelName = (
    modelName: PriceVps2017v2CloudramModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v2/cloudram/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v2CloudramModelModelNameQueryKey = (modelName: PriceVps2017v2CloudramModelEnumOVH,) => {
    return [`/price/vps/2017v2/cloudram/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2017v2CloudramModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>, TError = unknown>(modelName: PriceVps2017v2CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v2CloudramModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>> = ({ signal }) => getPriceVps2017v2CloudramModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v2CloudramModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>>
export type GetPriceVps2017v2CloudramModelModelNameQueryError = unknown


export function useGetPriceVps2017v2CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v2CloudramModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v2CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v2CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v2CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v2CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud RAM 2017
 */

export function useGetPriceVps2017v2CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v2CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudramModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v2CloudramModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud RAM Options 2015/2016
 */
export const getPriceVps2017v2CloudramOptionOptionName = (
    optionName: PriceVps2017v2CloudramOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v2/cloudram/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v2CloudramOptionOptionNameQueryKey = (optionName: PriceVps2017v2CloudramOptionEnumOVH,) => {
    return [`/price/vps/2017v2/cloudram/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2017v2CloudramOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>, TError = unknown>(optionName: PriceVps2017v2CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v2CloudramOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>> = ({ signal }) => getPriceVps2017v2CloudramOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v2CloudramOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>>
export type GetPriceVps2017v2CloudramOptionOptionNameQueryError = unknown


export function useGetPriceVps2017v2CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v2CloudramOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v2CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v2CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v2CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v2CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud RAM Options 2015/2016
 */

export function useGetPriceVps2017v2CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v2CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2CloudramOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v2CloudramOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS SSD 2017
 */
export const getPriceVps2017v2SsdModelModelName = (
    modelName: PriceVps2017v2SsdModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v2/ssd/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v2SsdModelModelNameQueryKey = (modelName: PriceVps2017v2SsdModelEnumOVH,) => {
    return [`/price/vps/2017v2/ssd/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2017v2SsdModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>, TError = unknown>(modelName: PriceVps2017v2SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v2SsdModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>> = ({ signal }) => getPriceVps2017v2SsdModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v2SsdModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>>
export type GetPriceVps2017v2SsdModelModelNameQueryError = unknown


export function useGetPriceVps2017v2SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v2SsdModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v2SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v2SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v2SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v2SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS SSD 2017
 */

export function useGetPriceVps2017v2SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v2SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v2SsdModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS SSD Options 2015/2016
 */
export const getPriceVps2017v2SsdOptionOptionName = (
    optionName: PriceVps2017v2SsdOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v2/ssd/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v2SsdOptionOptionNameQueryKey = (optionName: PriceVps2017v2SsdOptionEnumOVH,) => {
    return [`/price/vps/2017v2/ssd/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2017v2SsdOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>, TError = unknown>(optionName: PriceVps2017v2SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v2SsdOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>> = ({ signal }) => getPriceVps2017v2SsdOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v2SsdOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>>
export type GetPriceVps2017v2SsdOptionOptionNameQueryError = unknown


export function useGetPriceVps2017v2SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v2SsdOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v2SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v2SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v2SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v2SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS SSD Options 2015/2016
 */

export function useGetPriceVps2017v2SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v2SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v2SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v2SsdOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud 2017
 */
export const getPriceVps2017v3CloudModelModelName = (
    modelName: PriceVps2017v3CloudModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v3/cloud/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v3CloudModelModelNameQueryKey = (modelName: PriceVps2017v3CloudModelEnumOVH,) => {
    return [`/price/vps/2017v3/cloud/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2017v3CloudModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>, TError = unknown>(modelName: PriceVps2017v3CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v3CloudModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>> = ({ signal }) => getPriceVps2017v3CloudModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v3CloudModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>>
export type GetPriceVps2017v3CloudModelModelNameQueryError = unknown


export function useGetPriceVps2017v3CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v3CloudModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v3CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v3CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v3CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v3CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud 2017
 */

export function useGetPriceVps2017v3CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v3CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v3CloudModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud Options 2015/2016
 */
export const getPriceVps2017v3CloudOptionOptionName = (
    optionName: PriceVps2017v3CloudOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v3/cloud/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v3CloudOptionOptionNameQueryKey = (optionName: PriceVps2017v3CloudOptionEnumOVH,) => {
    return [`/price/vps/2017v3/cloud/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2017v3CloudOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>, TError = unknown>(optionName: PriceVps2017v3CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v3CloudOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>> = ({ signal }) => getPriceVps2017v3CloudOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v3CloudOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>>
export type GetPriceVps2017v3CloudOptionOptionNameQueryError = unknown


export function useGetPriceVps2017v3CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v3CloudOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v3CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v3CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v3CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v3CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud Options 2015/2016
 */

export function useGetPriceVps2017v3CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v3CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v3CloudOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud RAM 2017
 */
export const getPriceVps2017v3CloudramModelModelName = (
    modelName: PriceVps2017v3CloudramModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v3/cloudram/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v3CloudramModelModelNameQueryKey = (modelName: PriceVps2017v3CloudramModelEnumOVH,) => {
    return [`/price/vps/2017v3/cloudram/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2017v3CloudramModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>, TError = unknown>(modelName: PriceVps2017v3CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v3CloudramModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>> = ({ signal }) => getPriceVps2017v3CloudramModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v3CloudramModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>>
export type GetPriceVps2017v3CloudramModelModelNameQueryError = unknown


export function useGetPriceVps2017v3CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v3CloudramModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v3CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v3CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v3CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v3CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud RAM 2017
 */

export function useGetPriceVps2017v3CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v3CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudramModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v3CloudramModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud RAM Options 2015/2016
 */
export const getPriceVps2017v3CloudramOptionOptionName = (
    optionName: PriceVps2017v3CloudramOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v3/cloudram/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v3CloudramOptionOptionNameQueryKey = (optionName: PriceVps2017v3CloudramOptionEnumOVH,) => {
    return [`/price/vps/2017v3/cloudram/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2017v3CloudramOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>, TError = unknown>(optionName: PriceVps2017v3CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v3CloudramOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>> = ({ signal }) => getPriceVps2017v3CloudramOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v3CloudramOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>>
export type GetPriceVps2017v3CloudramOptionOptionNameQueryError = unknown


export function useGetPriceVps2017v3CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v3CloudramOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v3CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v3CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v3CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v3CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud RAM Options 2015/2016
 */

export function useGetPriceVps2017v3CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v3CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3CloudramOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v3CloudramOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS SSD 2017
 */
export const getPriceVps2017v3SsdModelModelName = (
    modelName: PriceVps2017v3SsdModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v3/ssd/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v3SsdModelModelNameQueryKey = (modelName: PriceVps2017v3SsdModelEnumOVH,) => {
    return [`/price/vps/2017v3/ssd/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2017v3SsdModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>, TError = unknown>(modelName: PriceVps2017v3SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v3SsdModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>> = ({ signal }) => getPriceVps2017v3SsdModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v3SsdModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>>
export type GetPriceVps2017v3SsdModelModelNameQueryError = unknown


export function useGetPriceVps2017v3SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v3SsdModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v3SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v3SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v3SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v3SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS SSD 2017
 */

export function useGetPriceVps2017v3SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2017v3SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v3SsdModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS SSD Options 2015/2016
 */
export const getPriceVps2017v3SsdOptionOptionName = (
    optionName: PriceVps2017v3SsdOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2017v3/ssd/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2017v3SsdOptionOptionNameQueryKey = (optionName: PriceVps2017v3SsdOptionEnumOVH,) => {
    return [`/price/vps/2017v3/ssd/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2017v3SsdOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>, TError = unknown>(optionName: PriceVps2017v3SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2017v3SsdOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>> = ({ signal }) => getPriceVps2017v3SsdOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2017v3SsdOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>>
export type GetPriceVps2017v3SsdOptionOptionNameQueryError = unknown


export function useGetPriceVps2017v3SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v3SsdOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v3SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v3SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2017v3SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v3SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS SSD Options 2015/2016
 */

export function useGetPriceVps2017v3SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2017v3SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2017v3SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2017v3SsdOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud 2017
 */
export const getPriceVps2018v1CloudModelModelName = (
    modelName: PriceVps2018v1CloudModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2018v1/cloud/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2018v1CloudModelModelNameQueryKey = (modelName: PriceVps2018v1CloudModelEnumOVH,) => {
    return [`/price/vps/2018v1/cloud/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2018v1CloudModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>, TError = unknown>(modelName: PriceVps2018v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2018v1CloudModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>> = ({ signal }) => getPriceVps2018v1CloudModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2018v1CloudModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>>
export type GetPriceVps2018v1CloudModelModelNameQueryError = unknown


export function useGetPriceVps2018v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v1CloudModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud 2017
 */

export function useGetPriceVps2018v1CloudModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v1CloudModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2018v1CloudModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud Options 2015/2016
 */
export const getPriceVps2018v1CloudOptionOptionName = (
    optionName: PriceVps2018v1CloudOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2018v1/cloud/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2018v1CloudOptionOptionNameQueryKey = (optionName: PriceVps2018v1CloudOptionEnumOVH,) => {
    return [`/price/vps/2018v1/cloud/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2018v1CloudOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>, TError = unknown>(optionName: PriceVps2018v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2018v1CloudOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>> = ({ signal }) => getPriceVps2018v1CloudOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2018v1CloudOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>>
export type GetPriceVps2018v1CloudOptionOptionNameQueryError = unknown


export function useGetPriceVps2018v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v1CloudOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud Options 2015/2016
 */

export function useGetPriceVps2018v1CloudOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v1CloudOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2018v1CloudOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud RAM 2017
 */
export const getPriceVps2018v1CloudramModelModelName = (
    modelName: PriceVps2018v1CloudramModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2018v1/cloudram/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2018v1CloudramModelModelNameQueryKey = (modelName: PriceVps2018v1CloudramModelEnumOVH,) => {
    return [`/price/vps/2018v1/cloudram/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2018v1CloudramModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>, TError = unknown>(modelName: PriceVps2018v1CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2018v1CloudramModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>> = ({ signal }) => getPriceVps2018v1CloudramModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2018v1CloudramModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>>
export type GetPriceVps2018v1CloudramModelModelNameQueryError = unknown


export function useGetPriceVps2018v1CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v1CloudramModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v1CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v1CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v1CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v1CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud RAM 2017
 */

export function useGetPriceVps2018v1CloudramModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v1CloudramModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudramModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2018v1CloudramModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS Cloud RAM Options 2015/2016
 */
export const getPriceVps2018v1CloudramOptionOptionName = (
    optionName: PriceVps2018v1CloudramOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2018v1/cloudram/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2018v1CloudramOptionOptionNameQueryKey = (optionName: PriceVps2018v1CloudramOptionEnumOVH,) => {
    return [`/price/vps/2018v1/cloudram/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2018v1CloudramOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>, TError = unknown>(optionName: PriceVps2018v1CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2018v1CloudramOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>> = ({ signal }) => getPriceVps2018v1CloudramOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2018v1CloudramOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>>
export type GetPriceVps2018v1CloudramOptionOptionNameQueryError = unknown


export function useGetPriceVps2018v1CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v1CloudramOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v1CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v1CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v1CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v1CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS Cloud RAM Options 2015/2016
 */

export function useGetPriceVps2018v1CloudramOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v1CloudramOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1CloudramOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2018v1CloudramOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS SSD 2018
 */
export const getPriceVps2018v1SsdModelModelName = (
    modelName: PriceVps2018v1SsdModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2018v1/ssd/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2018v1SsdModelModelNameQueryKey = (modelName: PriceVps2018v1SsdModelEnumOVH,) => {
    return [`/price/vps/2018v1/ssd/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2018v1SsdModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>, TError = unknown>(modelName: PriceVps2018v1SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2018v1SsdModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>> = ({ signal }) => getPriceVps2018v1SsdModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2018v1SsdModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>>
export type GetPriceVps2018v1SsdModelModelNameQueryError = unknown


export function useGetPriceVps2018v1SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v1SsdModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v1SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v1SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v1SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v1SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS SSD 2018
 */

export function useGetPriceVps2018v1SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v1SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2018v1SsdModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS SSD Options 2015/2016
 */
export const getPriceVps2018v1SsdOptionOptionName = (
    optionName: PriceVps2018v1SsdOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2018v1/ssd/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2018v1SsdOptionOptionNameQueryKey = (optionName: PriceVps2018v1SsdOptionEnumOVH,) => {
    return [`/price/vps/2018v1/ssd/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2018v1SsdOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>, TError = unknown>(optionName: PriceVps2018v1SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2018v1SsdOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>> = ({ signal }) => getPriceVps2018v1SsdOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2018v1SsdOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>>
export type GetPriceVps2018v1SsdOptionOptionNameQueryError = unknown


export function useGetPriceVps2018v1SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v1SsdOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v1SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v1SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v1SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v1SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS SSD Options 2015/2016
 */

export function useGetPriceVps2018v1SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v1SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v1SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2018v1SsdOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS SSD APAC
 */
export const getPriceVps2018v2SsdModelModelName = (
    modelName: PriceVps2018v2SsdModelEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2018v2/ssd/model/${modelName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2018v2SsdModelModelNameQueryKey = (modelName: PriceVps2018v2SsdModelEnumOVH,) => {
    return [`/price/vps/2018v2/ssd/model/${modelName}`] as const;
    }

    
export const getGetPriceVps2018v2SsdModelModelNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>, TError = unknown>(modelName: PriceVps2018v2SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2018v2SsdModelModelNameQueryKey(modelName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>> = ({ signal }) => getPriceVps2018v2SsdModelModelName(modelName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2018v2SsdModelModelNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>>
export type GetPriceVps2018v2SsdModelModelNameQueryError = unknown


export function useGetPriceVps2018v2SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v2SsdModelEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v2SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v2SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v2SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v2SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS SSD APAC
 */

export function useGetPriceVps2018v2SsdModelModelName<TData = Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>, TError = unknown>(
 modelName: PriceVps2018v2SsdModelEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v2SsdModelModelName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2018v2SsdModelModelNameQueryOptions(modelName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get price of VPS SSD APAC Options
 */
export const getPriceVps2018v2SsdOptionOptionName = (
    optionName: PriceVps2018v2SsdOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/vps/2018v2/ssd/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceVps2018v2SsdOptionOptionNameQueryKey = (optionName: PriceVps2018v2SsdOptionEnumOVH,) => {
    return [`/price/vps/2018v2/ssd/option/${optionName}`] as const;
    }

    
export const getGetPriceVps2018v2SsdOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>, TError = unknown>(optionName: PriceVps2018v2SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceVps2018v2SsdOptionOptionNameQueryKey(optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>> = ({ signal }) => getPriceVps2018v2SsdOptionOptionName(optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceVps2018v2SsdOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>>
export type GetPriceVps2018v2SsdOptionOptionNameQueryError = unknown


export function useGetPriceVps2018v2SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v2SsdOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v2SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v2SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceVps2018v2SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v2SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price of VPS SSD APAC Options
 */

export function useGetPriceVps2018v2SsdOptionOptionName<TData = Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>, TError = unknown>(
 optionName: PriceVps2018v2SsdOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceVps2018v2SsdOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceVps2018v2SsdOptionOptionNameQueryOptions(optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price of address move option fee
 */
export const getPriceXdslAddressMoveFeeOption = (
    option: PriceXdslAddressMoveFeeEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/xdsl/addressMove/fee/${option}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceXdslAddressMoveFeeOptionQueryKey = (option: PriceXdslAddressMoveFeeEnumOVH,) => {
    return [`/price/xdsl/addressMove/fee/${option}`] as const;
    }

    
export const getGetPriceXdslAddressMoveFeeOptionQueryOptions = <TData = Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>, TError = unknown>(option: PriceXdslAddressMoveFeeEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceXdslAddressMoveFeeOptionQueryKey(option);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>> = ({ signal }) => getPriceXdslAddressMoveFeeOption(option, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(option), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceXdslAddressMoveFeeOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>>
export type GetPriceXdslAddressMoveFeeOptionQueryError = unknown


export function useGetPriceXdslAddressMoveFeeOption<TData = Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>, TError = unknown>(
 option: PriceXdslAddressMoveFeeEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceXdslAddressMoveFeeOption<TData = Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>, TError = unknown>(
 option: PriceXdslAddressMoveFeeEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceXdslAddressMoveFeeOption<TData = Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>, TError = unknown>(
 option: PriceXdslAddressMoveFeeEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price of address move option fee
 */

export function useGetPriceXdslAddressMoveFeeOption<TData = Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>, TError = unknown>(
 option: PriceXdslAddressMoveFeeEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslAddressMoveFeeOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceXdslAddressMoveFeeOptionQueryOptions(option,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price of options installation fee
 */
export const getPriceXdslInstallationOffer = (
    offer: PriceXdslInstallationEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/xdsl/installation/${offer}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceXdslInstallationOfferQueryKey = (offer: PriceXdslInstallationEnumOVH,) => {
    return [`/price/xdsl/installation/${offer}`] as const;
    }

    
export const getGetPriceXdslInstallationOfferQueryOptions = <TData = Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>, TError = unknown>(offer: PriceXdslInstallationEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceXdslInstallationOfferQueryKey(offer);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>> = ({ signal }) => getPriceXdslInstallationOffer(offer, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(offer), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceXdslInstallationOfferQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>>
export type GetPriceXdslInstallationOfferQueryError = unknown


export function useGetPriceXdslInstallationOffer<TData = Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>, TError = unknown>(
 offer: PriceXdslInstallationEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceXdslInstallationOffer<TData = Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>, TError = unknown>(
 offer: PriceXdslInstallationEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceXdslInstallationOffer<TData = Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>, TError = unknown>(
 offer: PriceXdslInstallationEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price of options installation fee
 */

export function useGetPriceXdslInstallationOffer<TData = Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>, TError = unknown>(
 offer: PriceXdslInstallationEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslInstallationOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceXdslInstallationOfferQueryOptions(offer,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price of xdsl offers
 */
export const getPriceXdslOffersOffersName = (
    offersName: PriceXdslOffersEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/xdsl/offers/${offersName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceXdslOffersOffersNameQueryKey = (offersName: PriceXdslOffersEnumOVH,) => {
    return [`/price/xdsl/offers/${offersName}`] as const;
    }

    
export const getGetPriceXdslOffersOffersNameQueryOptions = <TData = Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>, TError = unknown>(offersName: PriceXdslOffersEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceXdslOffersOffersNameQueryKey(offersName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>> = ({ signal }) => getPriceXdslOffersOffersName(offersName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(offersName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceXdslOffersOffersNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>>
export type GetPriceXdslOffersOffersNameQueryError = unknown


export function useGetPriceXdslOffersOffersName<TData = Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>, TError = unknown>(
 offersName: PriceXdslOffersEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceXdslOffersOffersName<TData = Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>, TError = unknown>(
 offersName: PriceXdslOffersEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceXdslOffersOffersName<TData = Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>, TError = unknown>(
 offersName: PriceXdslOffersEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price of xdsl offers
 */

export function useGetPriceXdslOffersOffersName<TData = Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>, TError = unknown>(
 offersName: PriceXdslOffersEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOffersOffersName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceXdslOffersOffersNameQueryOptions(offersName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price of options installation fee
 */
export const getPriceXdslOptionsInstallationOption = (
    option: PriceXdslOptionsInstallationEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/xdsl/options/installation/${option}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceXdslOptionsInstallationOptionQueryKey = (option: PriceXdslOptionsInstallationEnumOVH,) => {
    return [`/price/xdsl/options/installation/${option}`] as const;
    }

    
export const getGetPriceXdslOptionsInstallationOptionQueryOptions = <TData = Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>, TError = unknown>(option: PriceXdslOptionsInstallationEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceXdslOptionsInstallationOptionQueryKey(option);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>> = ({ signal }) => getPriceXdslOptionsInstallationOption(option, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(option), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceXdslOptionsInstallationOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>>
export type GetPriceXdslOptionsInstallationOptionQueryError = unknown


export function useGetPriceXdslOptionsInstallationOption<TData = Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>, TError = unknown>(
 option: PriceXdslOptionsInstallationEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceXdslOptionsInstallationOption<TData = Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>, TError = unknown>(
 option: PriceXdslOptionsInstallationEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceXdslOptionsInstallationOption<TData = Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>, TError = unknown>(
 option: PriceXdslOptionsInstallationEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price of options installation fee
 */

export function useGetPriceXdslOptionsInstallationOption<TData = Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>, TError = unknown>(
 option: PriceXdslOptionsInstallationEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsInstallationOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceXdslOptionsInstallationOptionQueryOptions(option,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price of IPv4 options
 */
export const getPriceXdslOptionsIpv4IpRange = (
    ipRange: PriceXdslOptionsIpv4EnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/xdsl/options/ipv4/${ipRange}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceXdslOptionsIpv4IpRangeQueryKey = (ipRange: PriceXdslOptionsIpv4EnumOVH,) => {
    return [`/price/xdsl/options/ipv4/${ipRange}`] as const;
    }

    
export const getGetPriceXdslOptionsIpv4IpRangeQueryOptions = <TData = Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>, TError = unknown>(ipRange: PriceXdslOptionsIpv4EnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceXdslOptionsIpv4IpRangeQueryKey(ipRange);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>> = ({ signal }) => getPriceXdslOptionsIpv4IpRange(ipRange, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ipRange), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceXdslOptionsIpv4IpRangeQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>>
export type GetPriceXdslOptionsIpv4IpRangeQueryError = unknown


export function useGetPriceXdslOptionsIpv4IpRange<TData = Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>, TError = unknown>(
 ipRange: PriceXdslOptionsIpv4EnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceXdslOptionsIpv4IpRange<TData = Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>, TError = unknown>(
 ipRange: PriceXdslOptionsIpv4EnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceXdslOptionsIpv4IpRange<TData = Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>, TError = unknown>(
 ipRange: PriceXdslOptionsIpv4EnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price of IPv4 options
 */

export function useGetPriceXdslOptionsIpv4IpRange<TData = Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>, TError = unknown>(
 ipRange: PriceXdslOptionsIpv4EnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsIpv4IpRange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceXdslOptionsIpv4IpRangeQueryOptions(ipRange,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the price of line action
 */
export const getPriceXdslOptionsLineLineAction = (
    lineAction: PriceXdslOptionsLineEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderPriceOVH>(
      {url: `/price/xdsl/options/line/${lineAction}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceXdslOptionsLineLineActionQueryKey = (lineAction: PriceXdslOptionsLineEnumOVH,) => {
    return [`/price/xdsl/options/line/${lineAction}`] as const;
    }

    
export const getGetPriceXdslOptionsLineLineActionQueryOptions = <TData = Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>, TError = unknown>(lineAction: PriceXdslOptionsLineEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceXdslOptionsLineLineActionQueryKey(lineAction);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>> = ({ signal }) => getPriceXdslOptionsLineLineAction(lineAction, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(lineAction), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPriceXdslOptionsLineLineActionQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>>
export type GetPriceXdslOptionsLineLineActionQueryError = unknown


export function useGetPriceXdslOptionsLineLineAction<TData = Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>, TError = unknown>(
 lineAction: PriceXdslOptionsLineEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceXdslOptionsLineLineAction<TData = Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>, TError = unknown>(
 lineAction: PriceXdslOptionsLineEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPriceXdslOptionsLineLineAction<TData = Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>, TError = unknown>(
 lineAction: PriceXdslOptionsLineEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the price of line action
 */

export function useGetPriceXdslOptionsLineLineAction<TData = Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>, TError = unknown>(
 lineAction: PriceXdslOptionsLineEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceXdslOptionsLineLineAction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPriceXdslOptionsLineLineActionQueryOptions(lineAction,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





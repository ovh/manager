/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLicenseHycuParams,
  HycuActivateLicensePayloadOVH,
  HycuLicenseFileOVH,
  HycuRefreshLicensePayloadOVH,
  HycuStateWithIAMOVH,
  LicenseHycuHycuOVH,
  PostLicenseHycuServiceNameConfirmTerminationBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get list of owned HYCU licenses
 */
export const getLicenseHycu = (
    params?: GetLicenseHycuParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/hycu`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseHycuQueryKey = (params?: GetLicenseHycuParams,) => {
    return [`/license/hycu`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseHycuQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseHycu>>, TError = unknown>(params?: GetLicenseHycuParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseHycuQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseHycu>>> = ({ signal }) => getLicenseHycu(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycu>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseHycuQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseHycu>>>
export type GetLicenseHycuQueryError = unknown


export function useGetLicenseHycu<TData = Awaited<ReturnType<typeof getLicenseHycu>>, TError = unknown>(
 params: undefined |  GetLicenseHycuParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycu>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseHycu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseHycu<TData = Awaited<ReturnType<typeof getLicenseHycu>>, TError = unknown>(
 params?: GetLicenseHycuParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycu>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseHycu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseHycu<TData = Awaited<ReturnType<typeof getLicenseHycu>>, TError = unknown>(
 params?: GetLicenseHycuParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of owned HYCU licenses
 */

export function useGetLicenseHycu<TData = Awaited<ReturnType<typeof getLicenseHycu>>, TError = unknown>(
 params?: GetLicenseHycuParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseHycuQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get HYCU license info
 */
export const getLicenseHycuServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HycuStateWithIAMOVH>(
      {url: `/license/hycu/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseHycuServiceNameQueryKey = (serviceName: string,) => {
    return [`/license/hycu/${serviceName}`] as const;
    }

    
export const getGetLicenseHycuServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseHycuServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseHycuServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseHycuServiceName>>> = ({ signal }) => getLicenseHycuServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseHycuServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseHycuServiceName>>>
export type GetLicenseHycuServiceNameQueryError = unknown


export function useGetLicenseHycuServiceName<TData = Awaited<ReturnType<typeof getLicenseHycuServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseHycuServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseHycuServiceName<TData = Awaited<ReturnType<typeof getLicenseHycuServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseHycuServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseHycuServiceName<TData = Awaited<ReturnType<typeof getLicenseHycuServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get HYCU license info
 */

export function useGetLicenseHycuServiceName<TData = Awaited<ReturnType<typeof getLicenseHycuServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseHycuServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putLicenseHycuServiceName = (
    serviceName: string,
    licenseHycuHycuOVH: NonReadonly<LicenseHycuHycuOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/hycu/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: licenseHycuHycuOVH
    },
      options);
    }
  


export const getPutLicenseHycuServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseHycuServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseHycuHycuOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseHycuServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseHycuHycuOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseHycuServiceName>>, {serviceName: string;data: NonReadonly<LicenseHycuHycuOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseHycuServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseHycuServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseHycuServiceName>>>
    export type PutLicenseHycuServiceNameMutationBody = NonReadonly<LicenseHycuHycuOVH>
    export type PutLicenseHycuServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutLicenseHycuServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseHycuServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseHycuHycuOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseHycuServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<LicenseHycuHycuOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseHycuServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Activate the HYCU license
 */
export const postLicenseHycuServiceNameActivate = (
    serviceName: string,
    hycuActivateLicensePayloadOVH: HycuActivateLicensePayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/hycu/${serviceName}/activate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hycuActivateLicensePayloadOVH, signal
    },
      options);
    }
  


export const getPostLicenseHycuServiceNameActivateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseHycuServiceNameActivate>>, TError,{serviceName: string;data: HycuActivateLicensePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseHycuServiceNameActivate>>, TError,{serviceName: string;data: HycuActivateLicensePayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseHycuServiceNameActivate>>, {serviceName: string;data: HycuActivateLicensePayloadOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseHycuServiceNameActivate(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseHycuServiceNameActivateMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseHycuServiceNameActivate>>>
    export type PostLicenseHycuServiceNameActivateMutationBody = HycuActivateLicensePayloadOVH
    export type PostLicenseHycuServiceNameActivateMutationError = unknown

    /**
 * @summary Activate the HYCU license
 */
export const usePostLicenseHycuServiceNameActivate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseHycuServiceNameActivate>>, TError,{serviceName: string;data: HycuActivateLicensePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseHycuServiceNameActivate>>,
        TError,
        {serviceName: string;data: HycuActivateLicensePayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostLicenseHycuServiceNameActivateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postLicenseHycuServiceNameConfirmTermination = (
    serviceName: string,
    postLicenseHycuServiceNameConfirmTerminationBody: PostLicenseHycuServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/hycu/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseHycuServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostLicenseHycuServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseHycuServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseHycuServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseHycuServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseHycuServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseHycuServiceNameConfirmTermination>>, {serviceName: string;data: PostLicenseHycuServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseHycuServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseHycuServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseHycuServiceNameConfirmTermination>>>
    export type PostLicenseHycuServiceNameConfirmTerminationMutationBody = PostLicenseHycuServiceNameConfirmTerminationBody
    export type PostLicenseHycuServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostLicenseHycuServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseHycuServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseHycuServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseHycuServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostLicenseHycuServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseHycuServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the HYCU license file
 */
export const getLicenseHycuServiceNameLicense = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HycuLicenseFileOVH>(
      {url: `/license/hycu/${serviceName}/license`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseHycuServiceNameLicenseQueryKey = (serviceName: string,) => {
    return [`/license/hycu/${serviceName}/license`] as const;
    }

    
export const getGetLicenseHycuServiceNameLicenseQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseHycuServiceNameLicenseQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>> = ({ signal }) => getLicenseHycuServiceNameLicense(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseHycuServiceNameLicenseQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>>
export type GetLicenseHycuServiceNameLicenseQueryError = unknown


export function useGetLicenseHycuServiceNameLicense<TData = Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseHycuServiceNameLicense<TData = Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseHycuServiceNameLicense<TData = Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the HYCU license file
 */

export function useGetLicenseHycuServiceNameLicense<TData = Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceNameLicense>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseHycuServiceNameLicenseQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Manually refresh the HYCU license
 */
export const postLicenseHycuServiceNameRefresh = (
    serviceName: string,
    hycuRefreshLicensePayloadOVH: HycuRefreshLicensePayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/hycu/${serviceName}/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hycuRefreshLicensePayloadOVH, signal
    },
      options);
    }
  


export const getPostLicenseHycuServiceNameRefreshMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseHycuServiceNameRefresh>>, TError,{serviceName: string;data: HycuRefreshLicensePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseHycuServiceNameRefresh>>, TError,{serviceName: string;data: HycuRefreshLicensePayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseHycuServiceNameRefresh>>, {serviceName: string;data: HycuRefreshLicensePayloadOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseHycuServiceNameRefresh(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseHycuServiceNameRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseHycuServiceNameRefresh>>>
    export type PostLicenseHycuServiceNameRefreshMutationBody = HycuRefreshLicensePayloadOVH
    export type PostLicenseHycuServiceNameRefreshMutationError = unknown

    /**
 * @summary Manually refresh the HYCU license
 */
export const usePostLicenseHycuServiceNameRefresh = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseHycuServiceNameRefresh>>, TError,{serviceName: string;data: HycuRefreshLicensePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseHycuServiceNameRefresh>>,
        TError,
        {serviceName: string;data: HycuRefreshLicensePayloadOVH},
        TContext
      > => {

      const mutationOptions = getPostLicenseHycuServiceNameRefreshMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getLicenseHycuServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/license/hycu/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseHycuServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/license/hycu/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetLicenseHycuServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseHycuServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>> = ({ signal }) => getLicenseHycuServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseHycuServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>>
export type GetLicenseHycuServiceNameServiceInfosQueryError = unknown


export function useGetLicenseHycuServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseHycuServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseHycuServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetLicenseHycuServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseHycuServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseHycuServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putLicenseHycuServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/hycu/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutLicenseHycuServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseHycuServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseHycuServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseHycuServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseHycuServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseHycuServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseHycuServiceNameServiceInfos>>>
    export type PutLicenseHycuServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutLicenseHycuServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutLicenseHycuServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseHycuServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseHycuServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseHycuServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postLicenseHycuServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/hycu/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicenseHycuServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseHycuServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseHycuServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseHycuServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicenseHycuServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseHycuServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseHycuServiceNameTerminate>>>
    
    export type PostLicenseHycuServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostLicenseHycuServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseHycuServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseHycuServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicenseHycuServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

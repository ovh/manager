/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DedicatedClusterAvailabilitiesRawOVH,
  DedicatedClusterAvailabilityOVH,
  DedicatedClusterClusterWithIAMOVH,
  GetDedicatedClusterAvailabilitiesParams,
  GetDedicatedClusterAvailabilitiesRawParams,
  GetDedicatedClusterParams,
  ServicesChangeContactOVH,
  ServicesConfirmTerminationOVH,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List dedicated clusters
 */
export const getDedicatedCluster = (
    params?: GetDedicatedClusterParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/cluster`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedClusterQueryKey = (params?: GetDedicatedClusterParams,) => {
    return [`/dedicated/cluster`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedClusterQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCluster>>, TError = unknown>(params?: GetDedicatedClusterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCluster>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedClusterQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCluster>>> = ({ signal }) => getDedicatedCluster(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCluster>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedClusterQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCluster>>>
export type GetDedicatedClusterQueryError = unknown


export function useGetDedicatedCluster<TData = Awaited<ReturnType<typeof getDedicatedCluster>>, TError = unknown>(
 params: undefined |  GetDedicatedClusterParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCluster>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCluster>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCluster<TData = Awaited<ReturnType<typeof getDedicatedCluster>>, TError = unknown>(
 params?: GetDedicatedClusterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCluster>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCluster>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCluster<TData = Awaited<ReturnType<typeof getDedicatedCluster>>, TError = unknown>(
 params?: GetDedicatedClusterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCluster>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List dedicated clusters
 */

export function useGetDedicatedCluster<TData = Awaited<ReturnType<typeof getDedicatedCluster>>, TError = unknown>(
 params?: GetDedicatedClusterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCluster>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedClusterQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Fetch the availabilities for a given cluster configuration
 */
export const getDedicatedClusterAvailabilities = (
    params: GetDedicatedClusterAvailabilitiesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedClusterAvailabilityOVH[]>(
      {url: `/dedicated/cluster/availabilities`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedClusterAvailabilitiesQueryKey = (params: GetDedicatedClusterAvailabilitiesParams,) => {
    return [`/dedicated/cluster/availabilities`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedClusterAvailabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>, TError = unknown>(params: GetDedicatedClusterAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedClusterAvailabilitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>> = ({ signal }) => getDedicatedClusterAvailabilities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedClusterAvailabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>>
export type GetDedicatedClusterAvailabilitiesQueryError = unknown


export function useGetDedicatedClusterAvailabilities<TData = Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>, TError = unknown>(
 params: GetDedicatedClusterAvailabilitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedClusterAvailabilities<TData = Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>, TError = unknown>(
 params: GetDedicatedClusterAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedClusterAvailabilities<TData = Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>, TError = unknown>(
 params: GetDedicatedClusterAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Fetch the availabilities for a given cluster configuration
 */

export function useGetDedicatedClusterAvailabilities<TData = Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>, TError = unknown>(
 params: GetDedicatedClusterAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedClusterAvailabilitiesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List the raw availability for cluster
 */
export const getDedicatedClusterAvailabilitiesRaw = (
    params: GetDedicatedClusterAvailabilitiesRawParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedClusterAvailabilitiesRawOVH[]>(
      {url: `/dedicated/cluster/availabilities/raw`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedClusterAvailabilitiesRawQueryKey = (params: GetDedicatedClusterAvailabilitiesRawParams,) => {
    return [`/dedicated/cluster/availabilities/raw`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedClusterAvailabilitiesRawQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>, TError = unknown>(params: GetDedicatedClusterAvailabilitiesRawParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedClusterAvailabilitiesRawQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>> = ({ signal }) => getDedicatedClusterAvailabilitiesRaw(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedClusterAvailabilitiesRawQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>>
export type GetDedicatedClusterAvailabilitiesRawQueryError = unknown


export function useGetDedicatedClusterAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>, TError = unknown>(
 params: GetDedicatedClusterAvailabilitiesRawParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedClusterAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>, TError = unknown>(
 params: GetDedicatedClusterAvailabilitiesRawParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedClusterAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>, TError = unknown>(
 params: GetDedicatedClusterAvailabilitiesRawParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the raw availability for cluster
 */

export function useGetDedicatedClusterAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>, TError = unknown>(
 params: GetDedicatedClusterAvailabilitiesRawParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterAvailabilitiesRaw>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedClusterAvailabilitiesRawQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get cluster info
 */
export const getDedicatedClusterServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedClusterClusterWithIAMOVH>(
      {url: `/dedicated/cluster/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedClusterServiceNameQueryKey = (serviceName: string,) => {
    return [`/dedicated/cluster/${serviceName}`] as const;
    }

    
export const getGetDedicatedClusterServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedClusterServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedClusterServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedClusterServiceName>>> = ({ signal }) => getDedicatedClusterServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedClusterServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedClusterServiceName>>>
export type GetDedicatedClusterServiceNameQueryError = unknown


export function useGetDedicatedClusterServiceName<TData = Awaited<ReturnType<typeof getDedicatedClusterServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedClusterServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedClusterServiceName<TData = Awaited<ReturnType<typeof getDedicatedClusterServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedClusterServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedClusterServiceName<TData = Awaited<ReturnType<typeof getDedicatedClusterServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get cluster info
 */

export function useGetDedicatedClusterServiceName<TData = Awaited<ReturnType<typeof getDedicatedClusterServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedClusterServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a contact change procedure
 */
export const postDedicatedClusterServiceNameChangeContact = (
    serviceName: string,
    servicesChangeContactOVH: ServicesChangeContactOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/cluster/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesChangeContactOVH, signal
    },
      options);
    }
  


export const getPostDedicatedClusterServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedClusterServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedClusterServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedClusterServiceNameChangeContact>>, {serviceName: string;data: ServicesChangeContactOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedClusterServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedClusterServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedClusterServiceNameChangeContact>>>
    export type PostDedicatedClusterServiceNameChangeContactMutationBody = ServicesChangeContactOVH
    export type PostDedicatedClusterServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostDedicatedClusterServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedClusterServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedClusterServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: ServicesChangeContactOVH},
        TContext
      > => {

      const mutationOptions = getPostDedicatedClusterServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postDedicatedClusterServiceNameConfirmTermination = (
    serviceName: string,
    servicesConfirmTerminationOVH: ServicesConfirmTerminationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/cluster/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesConfirmTerminationOVH, signal
    },
      options);
    }
  


export const getPostDedicatedClusterServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedClusterServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedClusterServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedClusterServiceNameConfirmTermination>>, {serviceName: string;data: ServicesConfirmTerminationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedClusterServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedClusterServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedClusterServiceNameConfirmTermination>>>
    export type PostDedicatedClusterServiceNameConfirmTerminationMutationBody = ServicesConfirmTerminationOVH
    export type PostDedicatedClusterServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostDedicatedClusterServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedClusterServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedClusterServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: ServicesConfirmTerminationOVH},
        TContext
      > => {

      const mutationOptions = getPostDedicatedClusterServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getDedicatedClusterServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/dedicated/cluster/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedClusterServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/dedicated/cluster/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetDedicatedClusterServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedClusterServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>> = ({ signal }) => getDedicatedClusterServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedClusterServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>>
export type GetDedicatedClusterServiceNameServiceInfosQueryError = unknown


export function useGetDedicatedClusterServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedClusterServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedClusterServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetDedicatedClusterServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedClusterServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedClusterServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putDedicatedClusterServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/cluster/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutDedicatedClusterServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedClusterServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedClusterServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedClusterServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedClusterServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedClusterServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedClusterServiceNameServiceInfos>>>
    export type PutDedicatedClusterServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutDedicatedClusterServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutDedicatedClusterServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedClusterServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedClusterServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedClusterServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ask for the termination of your service
 */
export const postDedicatedClusterServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/cluster/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedClusterServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedClusterServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedClusterServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedClusterServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedClusterServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedClusterServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedClusterServiceNameTerminate>>>
    
    export type PostDedicatedClusterServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostDedicatedClusterServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedClusterServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedClusterServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedClusterServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

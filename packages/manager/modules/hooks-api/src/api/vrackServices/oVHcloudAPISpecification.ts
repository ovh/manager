/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CommonTaskOVH,
  GetVrackServicesResourceParams,
  GetVrackServicesResourceVrackServicesId404,
  GetVrackServicesResourceVrackServicesIdTaskTaskId400,
  PutVrackServicesResourceVrackServicesId400,
  PutVrackServicesResourceVrackServicesId404,
  PutVrackServicesResourceVrackServicesId412,
  PutVrackServicesResourceVrackServicesId423,
  VrackServicesEligibleManagedServiceOVH,
  VrackServicesRegionOVH,
  VrackServicesVrackServicesInputOVH,
  VrackServicesVrackServicesOVH,
  VrackServicesVrackServicesWithIAMOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV2 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * The compatible managed service types are represented here by their IAM resource types.
 * @summary List all managed service types that are compatible with vRack Services (IAM resource types)
 */
export const getVrackServicesReferenceCompatibleManagedServiceType = (
    
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<string[]>(
      {url: `/vrackServices/reference/compatibleManagedServiceType`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServicesReferenceCompatibleManagedServiceTypeQueryKey = () => {
    return [`/vrackServices/reference/compatibleManagedServiceType`] as const;
    }

    
export const getGetVrackServicesReferenceCompatibleManagedServiceTypeQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServicesReferenceCompatibleManagedServiceTypeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>> = ({ signal }) => getVrackServicesReferenceCompatibleManagedServiceType(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServicesReferenceCompatibleManagedServiceTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>>
export type GetVrackServicesReferenceCompatibleManagedServiceTypeQueryError = unknown


export function useGetVrackServicesReferenceCompatibleManagedServiceType<TData = Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesReferenceCompatibleManagedServiceType<TData = Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesReferenceCompatibleManagedServiceType<TData = Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all managed service types that are compatible with vRack Services (IAM resource types)
 */

export function useGetVrackServicesReferenceCompatibleManagedServiceType<TData = Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesReferenceCompatibleManagedServiceType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServicesReferenceCompatibleManagedServiceTypeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all vRack Services regions
 */
export const getVrackServicesReferenceRegion = (
    
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VrackServicesRegionOVH[]>(
      {url: `/vrackServices/reference/region`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServicesReferenceRegionQueryKey = () => {
    return [`/vrackServices/reference/region`] as const;
    }

    
export const getGetVrackServicesReferenceRegionQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServicesReferenceRegionQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>> = ({ signal }) => getVrackServicesReferenceRegion(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServicesReferenceRegionQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>>
export type GetVrackServicesReferenceRegionQueryError = unknown


export function useGetVrackServicesReferenceRegion<TData = Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesReferenceRegion<TData = Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesReferenceRegion<TData = Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all vRack Services regions
 */

export function useGetVrackServicesReferenceRegion<TData = Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesReferenceRegion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServicesReferenceRegionQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all vRack Services
 */
export const getVrackServicesResource = (
    params?: GetVrackServicesResourceParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VrackServicesVrackServicesWithIAMOVH[]>(
      {url: `/vrackServices/resource`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVrackServicesResourceQueryKey = (params?: GetVrackServicesResourceParams,) => {
    return [`/vrackServices/resource`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVrackServicesResourceQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServicesResource>>, TError = unknown>(params?: GetVrackServicesResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResource>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServicesResourceQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServicesResource>>> = ({ signal }) => getVrackServicesResource(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResource>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServicesResourceQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServicesResource>>>
export type GetVrackServicesResourceQueryError = unknown


export function useGetVrackServicesResource<TData = Awaited<ReturnType<typeof getVrackServicesResource>>, TError = unknown>(
 params: undefined |  GetVrackServicesResourceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResource>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesResource>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesResource<TData = Awaited<ReturnType<typeof getVrackServicesResource>>, TError = unknown>(
 params?: GetVrackServicesResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResource>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesResource>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesResource<TData = Awaited<ReturnType<typeof getVrackServicesResource>>, TError = unknown>(
 params?: GetVrackServicesResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResource>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all vRack Services
 */

export function useGetVrackServicesResource<TData = Awaited<ReturnType<typeof getVrackServicesResource>>, TError = unknown>(
 params?: GetVrackServicesResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResource>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServicesResourceQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve a vRack Services
 */
export const getVrackServicesResourceVrackServicesId = (
    vrackServicesId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VrackServicesVrackServicesWithIAMOVH>(
      {url: `/vrackServices/resource/${vrackServicesId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServicesResourceVrackServicesIdQueryKey = (vrackServicesId: string,) => {
    return [`/vrackServices/resource/${vrackServicesId}`] as const;
    }

    
export const getGetVrackServicesResourceVrackServicesIdQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>, TError = GetVrackServicesResourceVrackServicesId404>(vrackServicesId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServicesResourceVrackServicesIdQueryKey(vrackServicesId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>> = ({ signal }) => getVrackServicesResourceVrackServicesId(vrackServicesId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(vrackServicesId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServicesResourceVrackServicesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>>
export type GetVrackServicesResourceVrackServicesIdQueryError = GetVrackServicesResourceVrackServicesId404


export function useGetVrackServicesResourceVrackServicesId<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>, TError = GetVrackServicesResourceVrackServicesId404>(
 vrackServicesId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesResourceVrackServicesId<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>, TError = GetVrackServicesResourceVrackServicesId404>(
 vrackServicesId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesResourceVrackServicesId<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>, TError = GetVrackServicesResourceVrackServicesId404>(
 vrackServicesId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve a vRack Services
 */

export function useGetVrackServicesResourceVrackServicesId<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>, TError = GetVrackServicesResourceVrackServicesId404>(
 vrackServicesId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServicesResourceVrackServicesIdQueryOptions(vrackServicesId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * It is the unique route handling any update on the vRack Services configuration. It works as following:
1. You define a new target specification in the request payload,
2. If this specification is validated, you get the resource with updated `targetSpec` and `checksum` values in return,
3. The request is processed by one or several **asynchronous** tasks that aims to reconciliate the `currentState` with the `targetSpec`

### Asynchronous processing
* To follow this processing, the VrackServices resource can be polled with `GET /vrackServices/resource/{vrackServicesId}`<br>As soon as its `resourceStatus` is *READY*, the requested specification can be considered as applied to the vRack Services.
* The `checksum` helps on detecting concurrency cases on update requests. If the polled `checksum` value differs from the one returned in response of your initial request, it means that processing of your request is completed and another request is being processed.
* In case of processing error (i.e. `resourceStatus` in *ERROR*), the current vRack Services configuration is still active, but modification requests will be refused until the intervention of the support.
* An overview on the asynchronous task(s) is available via the `currentTasks` attribute.<br>More details on a task are provided by the route `GET /vrackServices/resource/{vrackServicesId}/task/{taskId}`

### Seamless configuration actions
The request can combine any of the following seamless actions (meaning there won't be any cut of the service while updating):
* create a Subnet
* delete a Subnet without any Service Endpoint
* update a Subnet:
  * create one or several Service Endpoints

**Note** that a Subnet with several Service Endpoints can be created in the same payload

### Not seamless configuration actions
The modification of the Subnet characteristics listed below **WILL** result in a service cut while processing the update as they are interpreted as the deletion of the existing Subnet and creation of a new Subnet with provided characteristics. The IPs that were given to the Managed Services will be reelected and may as a result change:
* modifications on the Subnet `ServiceRange`
* modifications on the Subnet `Vlan`
* modifications on the Subnet `CIDR` 

The embedded Service Endpoints will be also deleted and re-created which implies a flapping accessibility in the vRack for every related managed services.  
**Note** that deleting a Subnet will also delete embedded Service Endpoints

The `vrackId` is a read-only attribute as the association vRack/vRackServices is handled by the [vRack API](console-preview/?section=%2Fvrack&branch=v1)
 * @summary Request updates on the vRack Services configuration
 */
export const putVrackServicesResourceVrackServicesId = (
    vrackServicesId: string,
    vrackServicesVrackServicesInputOVH: VrackServicesVrackServicesInputOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<VrackServicesVrackServicesOVH>(
      {url: `/vrackServices/resource/${vrackServicesId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vrackServicesVrackServicesInputOVH
    },
      options);
    }
  


export const getPutVrackServicesResourceVrackServicesIdMutationOptions = <TError = PutVrackServicesResourceVrackServicesId400 | PutVrackServicesResourceVrackServicesId404 | PutVrackServicesResourceVrackServicesId412 | PutVrackServicesResourceVrackServicesId423,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVrackServicesResourceVrackServicesId>>, TError,{vrackServicesId: string;data: VrackServicesVrackServicesInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putVrackServicesResourceVrackServicesId>>, TError,{vrackServicesId: string;data: VrackServicesVrackServicesInputOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVrackServicesResourceVrackServicesId>>, {vrackServicesId: string;data: VrackServicesVrackServicesInputOVH}> = (props) => {
          const {vrackServicesId,data} = props ?? {};

          return  putVrackServicesResourceVrackServicesId(vrackServicesId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVrackServicesResourceVrackServicesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putVrackServicesResourceVrackServicesId>>>
    export type PutVrackServicesResourceVrackServicesIdMutationBody = VrackServicesVrackServicesInputOVH
    export type PutVrackServicesResourceVrackServicesIdMutationError = PutVrackServicesResourceVrackServicesId400 | PutVrackServicesResourceVrackServicesId404 | PutVrackServicesResourceVrackServicesId412 | PutVrackServicesResourceVrackServicesId423

    /**
 * @summary Request updates on the vRack Services configuration
 */
export const usePutVrackServicesResourceVrackServicesId = <TError = PutVrackServicesResourceVrackServicesId400 | PutVrackServicesResourceVrackServicesId404 | PutVrackServicesResourceVrackServicesId412 | PutVrackServicesResourceVrackServicesId423,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVrackServicesResourceVrackServicesId>>, TError,{vrackServicesId: string;data: VrackServicesVrackServicesInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVrackServicesResourceVrackServicesId>>,
        TError,
        {vrackServicesId: string;data: VrackServicesVrackServicesInputOVH},
        TContext
      > => {

      const mutationOptions = getPutVrackServicesResourceVrackServicesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List every managed service eligible to the requested vRack Services
 */
export const getVrackServicesResourceVrackServicesIdEligibleManagedService = (
    vrackServicesId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<VrackServicesEligibleManagedServiceOVH[]>(
      {url: `/vrackServices/resource/${vrackServicesId}/eligibleManagedService`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServicesResourceVrackServicesIdEligibleManagedServiceQueryKey = (vrackServicesId: string,) => {
    return [`/vrackServices/resource/${vrackServicesId}/eligibleManagedService`] as const;
    }

    
export const getGetVrackServicesResourceVrackServicesIdEligibleManagedServiceQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>, TError = unknown>(vrackServicesId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServicesResourceVrackServicesIdEligibleManagedServiceQueryKey(vrackServicesId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>> = ({ signal }) => getVrackServicesResourceVrackServicesIdEligibleManagedService(vrackServicesId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(vrackServicesId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServicesResourceVrackServicesIdEligibleManagedServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>>
export type GetVrackServicesResourceVrackServicesIdEligibleManagedServiceQueryError = unknown


export function useGetVrackServicesResourceVrackServicesIdEligibleManagedService<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>, TError = unknown>(
 vrackServicesId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesResourceVrackServicesIdEligibleManagedService<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>, TError = unknown>(
 vrackServicesId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesResourceVrackServicesIdEligibleManagedService<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>, TError = unknown>(
 vrackServicesId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List every managed service eligible to the requested vRack Services
 */

export function useGetVrackServicesResourceVrackServicesIdEligibleManagedService<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>, TError = unknown>(
 vrackServicesId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdEligibleManagedService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServicesResourceVrackServicesIdEligibleManagedServiceQueryOptions(vrackServicesId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all asynchronous operations related to the vRack Services
 */
export const getVrackServicesResourceVrackServicesIdTask = (
    vrackServicesId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH[]>(
      {url: `/vrackServices/resource/${vrackServicesId}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServicesResourceVrackServicesIdTaskQueryKey = (vrackServicesId: string,) => {
    return [`/vrackServices/resource/${vrackServicesId}/task`] as const;
    }

    
export const getGetVrackServicesResourceVrackServicesIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>, TError = unknown>(vrackServicesId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServicesResourceVrackServicesIdTaskQueryKey(vrackServicesId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>> = ({ signal }) => getVrackServicesResourceVrackServicesIdTask(vrackServicesId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(vrackServicesId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServicesResourceVrackServicesIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>>
export type GetVrackServicesResourceVrackServicesIdTaskQueryError = unknown


export function useGetVrackServicesResourceVrackServicesIdTask<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>, TError = unknown>(
 vrackServicesId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesResourceVrackServicesIdTask<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>, TError = unknown>(
 vrackServicesId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesResourceVrackServicesIdTask<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>, TError = unknown>(
 vrackServicesId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all asynchronous operations related to the vRack Services
 */

export function useGetVrackServicesResourceVrackServicesIdTask<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>, TError = unknown>(
 vrackServicesId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServicesResourceVrackServicesIdTaskQueryOptions(vrackServicesId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the task
 */
export const getVrackServicesResourceVrackServicesIdTaskTaskId = (
    vrackServicesId: string,
    taskId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH>(
      {url: `/vrackServices/resource/${vrackServicesId}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServicesResourceVrackServicesIdTaskTaskIdQueryKey = (vrackServicesId: string,
    taskId: string,) => {
    return [`/vrackServices/resource/${vrackServicesId}/task/${taskId}`] as const;
    }

    
export const getGetVrackServicesResourceVrackServicesIdTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>, TError = GetVrackServicesResourceVrackServicesIdTaskTaskId400>(vrackServicesId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServicesResourceVrackServicesIdTaskTaskIdQueryKey(vrackServicesId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>> = ({ signal }) => getVrackServicesResourceVrackServicesIdTaskTaskId(vrackServicesId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(vrackServicesId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServicesResourceVrackServicesIdTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>>
export type GetVrackServicesResourceVrackServicesIdTaskTaskIdQueryError = GetVrackServicesResourceVrackServicesIdTaskTaskId400


export function useGetVrackServicesResourceVrackServicesIdTaskTaskId<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>, TError = GetVrackServicesResourceVrackServicesIdTaskTaskId400>(
 vrackServicesId: string,
    taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesResourceVrackServicesIdTaskTaskId<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>, TError = GetVrackServicesResourceVrackServicesIdTaskTaskId400>(
 vrackServicesId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServicesResourceVrackServicesIdTaskTaskId<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>, TError = GetVrackServicesResourceVrackServicesIdTaskTaskId400>(
 vrackServicesId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the task
 */

export function useGetVrackServicesResourceVrackServicesIdTaskTaskId<TData = Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>, TError = GetVrackServicesResourceVrackServicesIdTaskTaskId400>(
 vrackServicesId: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServicesResourceVrackServicesIdTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServicesResourceVrackServicesIdTaskTaskIdQueryOptions(vrackServicesId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





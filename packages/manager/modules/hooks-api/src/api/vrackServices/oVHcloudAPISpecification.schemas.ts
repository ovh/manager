/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
/**
 * Common error model
 */
export type GetVrackServicesResourceVrackServicesIdTaskTaskId400 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type PutVrackServicesResourceVrackServicesId423 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type PutVrackServicesResourceVrackServicesId412 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type PutVrackServicesResourceVrackServicesId404 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type PutVrackServicesResourceVrackServicesId400 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

/**
 * Common error model
 */
export type GetVrackServicesResourceVrackServicesId404 = {
  /** Class of the error */
  class?: string;
  /** Error message */
  message?: string;
};

export type GetVrackServicesResourceParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * IAM resource metadata
 * @nullable
 */
export type VrackServicesVrackServicesWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Target specification of the vRack Services
 */
export interface VrackServicesVrackServicesTargetSpecOVH {
  /** Target specification of the subnets. Maximum one subnet per vRack Services */
  subnets: VrackServicesTargetSubnetOVH[];
}

/**
 * A vRack Services input payload
 */
export interface VrackServicesVrackServicesInputOVH {
  /** Computed hash used to control concurrent modification requests. Here, it represents the target specification value the request is based on */
  checksum: string;
  /** Requested target specification */
  targetSpec: VrackServicesVrackServicesTargetSpecOVH;
}

/**
 * Current state of the vRack Services
 */
export interface VrackServicesVrackServicesCurrentStateOVH {
  /** Product status of the vRack Services */
  readonly productStatus?: VrackServicesProductStatusEnumOVH;
  /** Region of the vRack Services. List of compatible regions can be retrieved from /reference/region */
  readonly region?: string;
  /** Subnets of the current vRack Services */
  readonly subnets?: readonly VrackServicesSubnetOVH[];
  /**
   * vRack associated to the vRack Services
   * @nullable
   */
  readonly vrackId?: string | null;
}

/**
 * A vRack Services
 */
export interface VrackServicesVrackServicesOVH {
  /** Computed hash used to control concurrent modification requests. Here, it represents the current target specification value */
  readonly checksum?: string;
  /** Date of the vRack Services delivery */
  readonly createdAt?: string;
  /** Current configuration applied to the vRack Services */
  readonly currentState?: VrackServicesVrackServicesCurrentStateOVH;
  /**
   * Asynchronous operations ongoing on the vRack Services
   * @nullable
   */
  readonly currentTasks?: readonly CommonCurrentTaskOVH[] | null;
  /** Unique identifier */
  readonly id?: string;
  /** Reflects the readiness of the vRack Services. A new target specification request will be accepted only in `READY` status */
  readonly resourceStatus?: VrackServicesResourceStatusEnumOVH;
  /** Last target specification of the vRack Services */
  readonly targetSpec?: VrackServicesVrackServicesTargetSpecOVH;
  /** Date of the Last vRack Services update */
  readonly updatedAt?: string;
}

/**
 * Target specification of the range dedicated to the subnet's services
 */
export interface VrackServicesTargetServiceRangeOVH {
  /** IP address range dedicated to the subnet's services in CIDR format. Must be a private network address (RFC1918). Must be a sub-network of the subnet. Authorized range for prefix length: /27 to /29 */
  cidr: Ipv4BlockOVH;
}

/**
 * Target specification of a Service Endpoint. A Service Endpoint provides an access to a managed service directly from one or several private IPs in the associated vRack
 */
export interface VrackServicesTargetServiceEndpointOVH {
  /** IAM Resource URN of the managed service. Managed service Region must match vRack Services Region. Compatible managed service types are listed by /reference/compatibleManagedServiceType call */
  managedServiceURN: string;
}

/**
 * Target specification of a subnet
 */
export interface VrackServicesTargetSubnetOVH {
  /** IP address range of the subnet in CIDR format. Must be a private network address (RFC1918). Authorized range for prefix length: /16 to /24 */
  cidr: Ipv4BlockOVH;
  /**
   * Display name of the subnet. Format must follow `^[ a-zA-Z0-9-_.]{0,40}$`
   * @nullable
   */
  displayName?: string | null;
  /** Target specification of the Service Endpoints */
  serviceEndpoints: VrackServicesTargetServiceEndpointOVH[];
  /** Defines a smaller subnet dedicated to the managed service IPs */
  serviceRange: VrackServicesTargetServiceRangeOVH;
  /**
   * Unique inner VLAN that allows subnets segregation. Authorized values: [2 - 4094] and `null` (untagged traffic)
   * @nullable
   */
  vlan?: number | null;
}

/**
 * Definition of the range dedicated to the subnet's services
 */
export interface VrackServicesServiceRangeOVH {
  /** CIDR dedicated to the subnet's services */
  readonly cidr?: Ipv4BlockOVH;
  /** Number of remaining IPs in the service range */
  readonly remainingIps?: number;
  /** Number of service range IPs reserved by OVHcloud */
  readonly reservedIps?: number;
  /** Number of service range IPs assigned to the managed services */
  readonly usedIps?: number;
}

/**
 * A network segment of the associated vRack. It represents an IP addressing scheme inside the private network
 */
export interface VrackServicesSubnetOVH {
  /** IP address range of the subnet in CIDR format */
  readonly cidr?: Ipv4BlockOVH;
  /**
   * Display name of the subnet
   * @nullable
   */
  readonly displayName?: string | null;
  /** Service endpoints of the subnet */
  readonly serviceEndpoints?: readonly VrackServicesServiceEndpointOVH[];
  /** Defines a smaller subnet dedicated to the managed services IPs */
  readonly serviceRange?: VrackServicesServiceRangeOVH;
  /**
   * Unique inner VLAN that allows subnets segregation
   * @nullable
   */
  readonly vlan?: number | null;
}

/**
 * It reflects the readiness of the vRack Services resource. The status `READY` indicates that the vRack Services state is stable. It guarantees that the `currentState` is fully aligned with the `targetSpec`. A new target specification request will be accepted only in this status.
 */
export type VrackServicesResourceStatusEnumOVH = typeof VrackServicesResourceStatusEnumOVH[keyof typeof VrackServicesResourceStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VrackServicesResourceStatusEnumOVH = {
  CREATING: 'CREATING',
  DELETING: 'DELETING',
  ERROR: 'ERROR',
  READY: 'READY',
  UPDATING: 'UPDATING',
} as const;

/**
 * A vRack Services
 */
export interface VrackServicesVrackServicesWithIAMOVH {
  /** Computed hash used to control concurrent modification requests. Here, it represents the current target specification value */
  readonly checksum?: string;
  /** Date of the vRack Services delivery */
  readonly createdAt?: string;
  /** Current configuration applied to the vRack Services */
  readonly currentState?: VrackServicesVrackServicesCurrentStateOVH;
  /**
   * Asynchronous operations ongoing on the vRack Services
   * @nullable
   */
  readonly currentTasks?: readonly CommonCurrentTaskOVH[] | null;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: VrackServicesVrackServicesWithIAMOVHIam;
  /** Unique identifier */
  readonly id?: string;
  /** Reflects the readiness of the vRack Services. A new target specification request will be accepted only in `READY` status */
  readonly resourceStatus?: VrackServicesResourceStatusEnumOVH;
  /** Last target specification of the vRack Services */
  readonly targetSpec?: VrackServicesVrackServicesTargetSpecOVH;
  /** Date of the Last vRack Services update */
  readonly updatedAt?: string;
}

/**
 * A vRack Services compatible localization
 */
export interface VrackServicesRegionOVH {
  /** Region name */
  readonly name?: string;
}

/**
 * ProductStatusEnum
 */
export type VrackServicesProductStatusEnumOVH = typeof VrackServicesProductStatusEnumOVH[keyof typeof VrackServicesProductStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VrackServicesProductStatusEnumOVH = {
  ACTIVE: 'ACTIVE',
  DRAFT: 'DRAFT',
  SUSPENDED: 'SUSPENDED',
} as const;

/**
 * Endpoint holding a managed service IP
 */
export interface VrackServicesEndpointOVH {
  /** IP description defined in the managed service */
  readonly description?: string;
  /** IP address assigned by OVHcloud */
  readonly ip?: Ipv4OVH;
}

/**
 * A Service Endpoint provides an access to managed services directly from one or several private IPs in the associated vRack
 */
export interface VrackServicesServiceEndpointOVH {
  /** Endpoints representing the IPs assigned to the managed services */
  readonly endpoints?: readonly VrackServicesEndpointOVH[];
  /** IAM Resource URN of the managed service. Compatible managed service types are listed by /reference/compatibleManagedServiceType call. */
  readonly managedServiceURN?: string;
}

/**
 * List of managed services eligible to the requested vRack Services
 */
export interface VrackServicesEligibleManagedServiceOVH {
  /** IAM resource type. Compatible managed service types are listed by /reference/compatibleManagedServiceType call. */
  readonly managedServiceType?: string;
  /** List of IAM resource URNs */
  readonly managedServiceURNs?: readonly string[];
}

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;

/**
 * TaskStatusEnum
 */
export type CommonTaskStatusEnumOVH = typeof CommonTaskStatusEnumOVH[keyof typeof CommonTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommonTaskStatusEnumOVH = {
  DONE: 'DONE',
  ERROR: 'ERROR',
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  SCHEDULED: 'SCHEDULED',
} as const;

/**
 * Detailed information about an asynchronous operation progress steps
 */
export interface CommonTaskProgressOVH {
  /** Progress step name */
  readonly name?: string;
  /** Current status of the progress step */
  readonly status?: CommonTaskStatusEnumOVH;
}

/**
 * Errors that occured on the task
 */
export interface CommonTaskErrorOVH {
  /** Error description */
  readonly message?: string;
}

/**
 * Asynchronous operation
 */
export interface CommonTaskOVH {
  /** Creation date of the task */
  readonly createdAt?: string;
  /**
   * Errors that occured on the task
   * @nullable
   */
  readonly errors?: readonly CommonTaskErrorOVH[] | null;
  /**
   * Ending date of the task
   * @nullable
   */
  readonly finishedAt?: string | null;
  /** Identifier of the task */
  readonly id?: string;
  /** Link to the related resource */
  readonly link?: string;
  /** Description of the task */
  readonly message?: string;
  /** Progress steps of the asynchronous operation */
  readonly progress?: readonly CommonTaskProgressOVH[];
  /**
   * Starting date of the task
   * @nullable
   */
  readonly startedAt?: string | null;
  /** Current global status of the task */
  readonly status?: CommonTaskStatusEnumOVH;
  /** Type of the task */
  readonly type?: string;
  /** Last update of the task */
  readonly updatedAt?: string;
}

/**
 * Current status of a task. A task in ERROR cannot be retried without your inputs. PENDING tasks will be executed as soon as possible. A RUNNING task is currently executing your original request. SCHEDULED is used for tasks that will be executed in the future
 */
export type CommonCurrentTaskStatusEnumOVH = typeof CommonCurrentTaskStatusEnumOVH[keyof typeof CommonCurrentTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommonCurrentTaskStatusEnumOVH = {
  ERROR: 'ERROR',
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  SCHEDULED: 'SCHEDULED',
} as const;

/**
 * Current global status of the current task
 * @nullable
 */
export type CommonCurrentTaskOVHStatus = CommonCurrentTaskStatusEnumOVH | null;

/**
 * Asynchronous operation currently running
 */
export interface CommonCurrentTaskOVH {
  /** Identifier of the current task */
  readonly id?: string;
  /** Link to the task details */
  readonly link?: string;
  /**
   * Current global status of the current task
   * @nullable
   */
  readonly status?: CommonCurrentTaskOVHStatus;
  /** Type of the current task */
  readonly type?: string;
}


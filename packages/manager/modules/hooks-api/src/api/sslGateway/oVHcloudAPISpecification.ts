/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetSslGatewayEligibilityParams,
  GetSslGatewayParams,
  PostSslGatewayServiceNameChangeContactBody,
  PostSslGatewayServiceNameConfirmTerminationBody,
  PostSslGatewayServiceNameDomainBody,
  PostSslGatewayServiceNameRenewCertificateBody,
  PostSslGatewayServiceNameServerBody,
  ServicesServiceOVH,
  SslGatewayDomainOVH,
  SslGatewayEligibilityStatusOVH,
  SslGatewayNatIpsOVH,
  SslGatewayServerOVH,
  SslGatewaySslGatewayOVH,
  SslGatewaySslGatewayWithIAMOVH,
  SslGatewayTaskOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List of your SSL Gateways
 */
export const getSslGateway = (
    params?: GetSslGatewayParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/sslGateway`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSslGatewayQueryKey = (params?: GetSslGatewayParams,) => {
    return [`/sslGateway`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSslGatewayQueryOptions = <TData = Awaited<ReturnType<typeof getSslGateway>>, TError = unknown>(params?: GetSslGatewayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSslGatewayQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSslGateway>>> = ({ signal }) => getSslGateway(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSslGateway>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSslGatewayQueryResult = NonNullable<Awaited<ReturnType<typeof getSslGateway>>>
export type GetSslGatewayQueryError = unknown


export function useGetSslGateway<TData = Awaited<ReturnType<typeof getSslGateway>>, TError = unknown>(
 params: undefined |  GetSslGatewayParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGateway>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGateway>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGateway<TData = Awaited<ReturnType<typeof getSslGateway>>, TError = unknown>(
 params?: GetSslGatewayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGateway>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGateway>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGateway<TData = Awaited<ReturnType<typeof getSslGateway>>, TError = unknown>(
 params?: GetSslGatewayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of your SSL Gateways
 */

export function useGetSslGateway<TData = Awaited<ReturnType<typeof getSslGateway>>, TError = unknown>(
 params?: GetSslGatewayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSslGatewayQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of zone available for an SSL Gateway
 */
export const getSslGatewayAvailableZones = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/sslGateway/availableZones`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSslGatewayAvailableZonesQueryKey = () => {
    return [`/sslGateway/availableZones`] as const;
    }

    
export const getGetSslGatewayAvailableZonesQueryOptions = <TData = Awaited<ReturnType<typeof getSslGatewayAvailableZones>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayAvailableZones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSslGatewayAvailableZonesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSslGatewayAvailableZones>>> = ({ signal }) => getSslGatewayAvailableZones(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayAvailableZones>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSslGatewayAvailableZonesQueryResult = NonNullable<Awaited<ReturnType<typeof getSslGatewayAvailableZones>>>
export type GetSslGatewayAvailableZonesQueryError = unknown


export function useGetSslGatewayAvailableZones<TData = Awaited<ReturnType<typeof getSslGatewayAvailableZones>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayAvailableZones>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayAvailableZones>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayAvailableZones<TData = Awaited<ReturnType<typeof getSslGatewayAvailableZones>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayAvailableZones>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayAvailableZones>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayAvailableZones<TData = Awaited<ReturnType<typeof getSslGatewayAvailableZones>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayAvailableZones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of zone available for an SSL Gateway
 */

export function useGetSslGatewayAvailableZones<TData = Awaited<ReturnType<typeof getSslGatewayAvailableZones>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayAvailableZones>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSslGatewayAvailableZonesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check domain eligibility. Return list of eligible IP(s) for this domain.
 */
export const getSslGatewayEligibility = (
    params: GetSslGatewayEligibilityParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SslGatewayEligibilityStatusOVH>(
      {url: `/sslGateway/eligibility`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSslGatewayEligibilityQueryKey = (params: GetSslGatewayEligibilityParams,) => {
    return [`/sslGateway/eligibility`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSslGatewayEligibilityQueryOptions = <TData = Awaited<ReturnType<typeof getSslGatewayEligibility>>, TError = unknown>(params: GetSslGatewayEligibilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayEligibility>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSslGatewayEligibilityQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSslGatewayEligibility>>> = ({ signal }) => getSslGatewayEligibility(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayEligibility>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSslGatewayEligibilityQueryResult = NonNullable<Awaited<ReturnType<typeof getSslGatewayEligibility>>>
export type GetSslGatewayEligibilityQueryError = unknown


export function useGetSslGatewayEligibility<TData = Awaited<ReturnType<typeof getSslGatewayEligibility>>, TError = unknown>(
 params: GetSslGatewayEligibilityParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayEligibility>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayEligibility>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayEligibility<TData = Awaited<ReturnType<typeof getSslGatewayEligibility>>, TError = unknown>(
 params: GetSslGatewayEligibilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayEligibility>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayEligibility>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayEligibility<TData = Awaited<ReturnType<typeof getSslGatewayEligibility>>, TError = unknown>(
 params: GetSslGatewayEligibilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayEligibility>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check domain eligibility. Return list of eligible IP(s) for this domain.
 */

export function useGetSslGatewayEligibility<TData = Awaited<ReturnType<typeof getSslGatewayEligibility>>, TError = unknown>(
 params: GetSslGatewayEligibilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayEligibility>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSslGatewayEligibilityQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getSslGatewayServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SslGatewaySslGatewayWithIAMOVH>(
      {url: `/sslGateway/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSslGatewayServiceNameQueryKey = (serviceName: string,) => {
    return [`/sslGateway/${serviceName}`] as const;
    }

    
export const getGetSslGatewayServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getSslGatewayServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSslGatewayServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSslGatewayServiceName>>> = ({ signal }) => getSslGatewayServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSslGatewayServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getSslGatewayServiceName>>>
export type GetSslGatewayServiceNameQueryError = unknown


export function useGetSslGatewayServiceName<TData = Awaited<ReturnType<typeof getSslGatewayServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceName<TData = Awaited<ReturnType<typeof getSslGatewayServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceName<TData = Awaited<ReturnType<typeof getSslGatewayServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSslGatewayServiceName<TData = Awaited<ReturnType<typeof getSslGatewayServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSslGatewayServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putSslGatewayServiceName = (
    serviceName: string,
    sslGatewaySslGatewayOVH: NonReadonly<SslGatewaySslGatewayOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sslGateway/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: sslGatewaySslGatewayOVH
    },
      options);
    }
  


export const getPutSslGatewayServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSslGatewayServiceName>>, TError,{serviceName: string;data: NonReadonly<SslGatewaySslGatewayOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSslGatewayServiceName>>, TError,{serviceName: string;data: NonReadonly<SslGatewaySslGatewayOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSslGatewayServiceName>>, {serviceName: string;data: NonReadonly<SslGatewaySslGatewayOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putSslGatewayServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSslGatewayServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putSslGatewayServiceName>>>
    export type PutSslGatewayServiceNameMutationBody = NonReadonly<SslGatewaySslGatewayOVH>
    export type PutSslGatewayServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutSslGatewayServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSslGatewayServiceName>>, TError,{serviceName: string;data: NonReadonly<SslGatewaySslGatewayOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSslGatewayServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<SslGatewaySslGatewayOVH>},
        TContext
      > => {

      const mutationOptions = getPutSslGatewayServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postSslGatewayServiceNameChangeContact = (
    serviceName: string,
    postSslGatewayServiceNameChangeContactBody: PostSslGatewayServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sslGateway/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSslGatewayServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostSslGatewayServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameChangeContact>>, TError,{serviceName: string;data: PostSslGatewayServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameChangeContact>>, TError,{serviceName: string;data: PostSslGatewayServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSslGatewayServiceNameChangeContact>>, {serviceName: string;data: PostSslGatewayServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSslGatewayServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSslGatewayServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postSslGatewayServiceNameChangeContact>>>
    export type PostSslGatewayServiceNameChangeContactMutationBody = PostSslGatewayServiceNameChangeContactBody
    export type PostSslGatewayServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostSslGatewayServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameChangeContact>>, TError,{serviceName: string;data: PostSslGatewayServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSslGatewayServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostSslGatewayServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostSslGatewayServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postSslGatewayServiceNameConfirmTermination = (
    serviceName: string,
    postSslGatewayServiceNameConfirmTerminationBody: PostSslGatewayServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/sslGateway/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSslGatewayServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostSslGatewayServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostSslGatewayServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostSslGatewayServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSslGatewayServiceNameConfirmTermination>>, {serviceName: string;data: PostSslGatewayServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSslGatewayServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSslGatewayServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postSslGatewayServiceNameConfirmTermination>>>
    export type PostSslGatewayServiceNameConfirmTerminationMutationBody = PostSslGatewayServiceNameConfirmTerminationBody
    export type PostSslGatewayServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostSslGatewayServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostSslGatewayServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSslGatewayServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostSslGatewayServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostSslGatewayServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Domains attached to your SSL Gateway
 */
export const getSslGatewayServiceNameDomain = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sslGateway/${serviceName}/domain`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSslGatewayServiceNameDomainQueryKey = (serviceName: string,) => {
    return [`/sslGateway/${serviceName}/domain`] as const;
    }

    
export const getGetSslGatewayServiceNameDomainQueryOptions = <TData = Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSslGatewayServiceNameDomainQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>> = ({ signal }) => getSslGatewayServiceNameDomain(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSslGatewayServiceNameDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>>
export type GetSslGatewayServiceNameDomainQueryError = unknown


export function useGetSslGatewayServiceNameDomain<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameDomain<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameDomain<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Domains attached to your SSL Gateway
 */

export function useGetSslGatewayServiceNameDomain<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSslGatewayServiceNameDomainQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Attach a new domain to your SSL Gateway
 */
export const postSslGatewayServiceNameDomain = (
    serviceName: string,
    postSslGatewayServiceNameDomainBody: PostSslGatewayServiceNameDomainBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SslGatewayDomainOVH>(
      {url: `/sslGateway/${serviceName}/domain`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSslGatewayServiceNameDomainBody, signal
    },
      options);
    }
  


export const getPostSslGatewayServiceNameDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameDomain>>, TError,{serviceName: string;data: PostSslGatewayServiceNameDomainBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameDomain>>, TError,{serviceName: string;data: PostSslGatewayServiceNameDomainBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSslGatewayServiceNameDomain>>, {serviceName: string;data: PostSslGatewayServiceNameDomainBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSslGatewayServiceNameDomain(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSslGatewayServiceNameDomainMutationResult = NonNullable<Awaited<ReturnType<typeof postSslGatewayServiceNameDomain>>>
    export type PostSslGatewayServiceNameDomainMutationBody = PostSslGatewayServiceNameDomainBody
    export type PostSslGatewayServiceNameDomainMutationError = unknown

    /**
 * @summary Attach a new domain to your SSL Gateway
 */
export const usePostSslGatewayServiceNameDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameDomain>>, TError,{serviceName: string;data: PostSslGatewayServiceNameDomainBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSslGatewayServiceNameDomain>>,
        TError,
        {serviceName: string;data: PostSslGatewayServiceNameDomainBody},
        TContext
      > => {

      const mutationOptions = getPostSslGatewayServiceNameDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Detach a domain from your SSL Gateway
 */
export const deleteSslGatewayServiceNameDomainId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sslGateway/${serviceName}/domain/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSslGatewayServiceNameDomainIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSslGatewayServiceNameDomainId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSslGatewayServiceNameDomainId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSslGatewayServiceNameDomainId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteSslGatewayServiceNameDomainId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSslGatewayServiceNameDomainIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSslGatewayServiceNameDomainId>>>
    
    export type DeleteSslGatewayServiceNameDomainIdMutationError = unknown

    /**
 * @summary Detach a domain from your SSL Gateway
 */
export const useDeleteSslGatewayServiceNameDomainId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSslGatewayServiceNameDomainId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSslGatewayServiceNameDomainId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSslGatewayServiceNameDomainIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSslGatewayServiceNameDomainId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SslGatewayDomainOVH>(
      {url: `/sslGateway/${serviceName}/domain/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSslGatewayServiceNameDomainIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/sslGateway/${serviceName}/domain/${id}`] as const;
    }

    
export const getGetSslGatewayServiceNameDomainIdQueryOptions = <TData = Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSslGatewayServiceNameDomainIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>> = ({ signal }) => getSslGatewayServiceNameDomainId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSslGatewayServiceNameDomainIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>>
export type GetSslGatewayServiceNameDomainIdQueryError = unknown


export function useGetSslGatewayServiceNameDomainId<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameDomainId<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameDomainId<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSslGatewayServiceNameDomainId<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameDomainId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSslGatewayServiceNameDomainIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ip subnet used by OVH to nat requests to your SSL Gateway backends.
 */
export const getSslGatewayServiceNameNatIp = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SslGatewayNatIpsOVH[]>(
      {url: `/sslGateway/${serviceName}/natIp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSslGatewayServiceNameNatIpQueryKey = (serviceName: string,) => {
    return [`/sslGateway/${serviceName}/natIp`] as const;
    }

    
export const getGetSslGatewayServiceNameNatIpQueryOptions = <TData = Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSslGatewayServiceNameNatIpQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>> = ({ signal }) => getSslGatewayServiceNameNatIp(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSslGatewayServiceNameNatIpQueryResult = NonNullable<Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>>
export type GetSslGatewayServiceNameNatIpQueryError = unknown


export function useGetSslGatewayServiceNameNatIp<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameNatIp<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameNatIp<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ip subnet used by OVH to nat requests to your SSL Gateway backends.
 */

export function useGetSslGatewayServiceNameNatIp<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameNatIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSslGatewayServiceNameNatIpQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Renew your SSL certificates
 */
export const postSslGatewayServiceNameRenewCertificate = (
    serviceName: string,
    postSslGatewayServiceNameRenewCertificateBody: PostSslGatewayServiceNameRenewCertificateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/sslGateway/${serviceName}/renewCertificate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSslGatewayServiceNameRenewCertificateBody, signal
    },
      options);
    }
  


export const getPostSslGatewayServiceNameRenewCertificateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameRenewCertificate>>, TError,{serviceName: string;data: PostSslGatewayServiceNameRenewCertificateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameRenewCertificate>>, TError,{serviceName: string;data: PostSslGatewayServiceNameRenewCertificateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSslGatewayServiceNameRenewCertificate>>, {serviceName: string;data: PostSslGatewayServiceNameRenewCertificateBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSslGatewayServiceNameRenewCertificate(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSslGatewayServiceNameRenewCertificateMutationResult = NonNullable<Awaited<ReturnType<typeof postSslGatewayServiceNameRenewCertificate>>>
    export type PostSslGatewayServiceNameRenewCertificateMutationBody = PostSslGatewayServiceNameRenewCertificateBody
    export type PostSslGatewayServiceNameRenewCertificateMutationError = unknown

    /**
 * @summary Renew your SSL certificates
 */
export const usePostSslGatewayServiceNameRenewCertificate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameRenewCertificate>>, TError,{serviceName: string;data: PostSslGatewayServiceNameRenewCertificateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSslGatewayServiceNameRenewCertificate>>,
        TError,
        {serviceName: string;data: PostSslGatewayServiceNameRenewCertificateBody},
        TContext
      > => {

      const mutationOptions = getPostSslGatewayServiceNameRenewCertificateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Servers attached to your SSL Gateway
 */
export const getSslGatewayServiceNameServer = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sslGateway/${serviceName}/server`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSslGatewayServiceNameServerQueryKey = (serviceName: string,) => {
    return [`/sslGateway/${serviceName}/server`] as const;
    }

    
export const getGetSslGatewayServiceNameServerQueryOptions = <TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSslGatewayServiceNameServerQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>> = ({ signal }) => getSslGatewayServiceNameServer(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSslGatewayServiceNameServerQueryResult = NonNullable<Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>>
export type GetSslGatewayServiceNameServerQueryError = unknown


export function useGetSslGatewayServiceNameServer<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameServer<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameServer<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Servers attached to your SSL Gateway
 */

export function useGetSslGatewayServiceNameServer<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSslGatewayServiceNameServerQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new server to your SSL Gateway
 */
export const postSslGatewayServiceNameServer = (
    serviceName: string,
    postSslGatewayServiceNameServerBody: PostSslGatewayServiceNameServerBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SslGatewayServerOVH>(
      {url: `/sslGateway/${serviceName}/server`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSslGatewayServiceNameServerBody, signal
    },
      options);
    }
  


export const getPostSslGatewayServiceNameServerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameServer>>, TError,{serviceName: string;data: PostSslGatewayServiceNameServerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameServer>>, TError,{serviceName: string;data: PostSslGatewayServiceNameServerBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSslGatewayServiceNameServer>>, {serviceName: string;data: PostSslGatewayServiceNameServerBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postSslGatewayServiceNameServer(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSslGatewayServiceNameServerMutationResult = NonNullable<Awaited<ReturnType<typeof postSslGatewayServiceNameServer>>>
    export type PostSslGatewayServiceNameServerMutationBody = PostSslGatewayServiceNameServerBody
    export type PostSslGatewayServiceNameServerMutationError = unknown

    /**
 * @summary Add a new server to your SSL Gateway
 */
export const usePostSslGatewayServiceNameServer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameServer>>, TError,{serviceName: string;data: PostSslGatewayServiceNameServerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSslGatewayServiceNameServer>>,
        TError,
        {serviceName: string;data: PostSslGatewayServiceNameServerBody},
        TContext
      > => {

      const mutationOptions = getPostSslGatewayServiceNameServerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove a server
 */
export const deleteSslGatewayServiceNameServerId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sslGateway/${serviceName}/server/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSslGatewayServiceNameServerIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSslGatewayServiceNameServerId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSslGatewayServiceNameServerId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSslGatewayServiceNameServerId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteSslGatewayServiceNameServerId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSslGatewayServiceNameServerIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSslGatewayServiceNameServerId>>>
    
    export type DeleteSslGatewayServiceNameServerIdMutationError = unknown

    /**
 * @summary Remove a server
 */
export const useDeleteSslGatewayServiceNameServerId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSslGatewayServiceNameServerId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSslGatewayServiceNameServerId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSslGatewayServiceNameServerIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getSslGatewayServiceNameServerId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SslGatewayServerOVH>(
      {url: `/sslGateway/${serviceName}/server/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSslGatewayServiceNameServerIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/sslGateway/${serviceName}/server/${id}`] as const;
    }

    
export const getGetSslGatewayServiceNameServerIdQueryOptions = <TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSslGatewayServiceNameServerIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>> = ({ signal }) => getSslGatewayServiceNameServerId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSslGatewayServiceNameServerIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>>
export type GetSslGatewayServiceNameServerIdQueryError = unknown


export function useGetSslGatewayServiceNameServerId<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameServerId<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameServerId<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSslGatewayServiceNameServerId<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServerId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSslGatewayServiceNameServerIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putSslGatewayServiceNameServerId = (
    serviceName: string,
    id: number,
    sslGatewayServerOVH: NonReadonly<SslGatewayServerOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sslGateway/${serviceName}/server/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: sslGatewayServerOVH
    },
      options);
    }
  


export const getPutSslGatewayServiceNameServerIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSslGatewayServiceNameServerId>>, TError,{serviceName: string;id: number;data: NonReadonly<SslGatewayServerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSslGatewayServiceNameServerId>>, TError,{serviceName: string;id: number;data: NonReadonly<SslGatewayServerOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSslGatewayServiceNameServerId>>, {serviceName: string;id: number;data: NonReadonly<SslGatewayServerOVH>}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  putSslGatewayServiceNameServerId(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSslGatewayServiceNameServerIdMutationResult = NonNullable<Awaited<ReturnType<typeof putSslGatewayServiceNameServerId>>>
    export type PutSslGatewayServiceNameServerIdMutationBody = NonReadonly<SslGatewayServerOVH>
    export type PutSslGatewayServiceNameServerIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutSslGatewayServiceNameServerId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSslGatewayServiceNameServerId>>, TError,{serviceName: string;id: number;data: NonReadonly<SslGatewayServerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSslGatewayServiceNameServerId>>,
        TError,
        {serviceName: string;id: number;data: NonReadonly<SslGatewayServerOVH>},
        TContext
      > => {

      const mutationOptions = getPutSslGatewayServiceNameServerIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getSslGatewayServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/sslGateway/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSslGatewayServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/sslGateway/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetSslGatewayServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSslGatewayServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>> = ({ signal }) => getSslGatewayServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSslGatewayServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>>
export type GetSslGatewayServiceNameServiceInfosQueryError = unknown


export function useGetSslGatewayServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetSslGatewayServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSslGatewayServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putSslGatewayServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/sslGateway/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutSslGatewayServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSslGatewayServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putSslGatewayServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSslGatewayServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putSslGatewayServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSslGatewayServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putSslGatewayServiceNameServiceInfos>>>
    export type PutSslGatewayServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutSslGatewayServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutSslGatewayServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSslGatewayServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSslGatewayServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutSslGatewayServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Task for this SSL Gateway
 */
export const getSslGatewayServiceNameTask = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/sslGateway/${serviceName}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSslGatewayServiceNameTaskQueryKey = (serviceName: string,) => {
    return [`/sslGateway/${serviceName}/task`] as const;
    }

    
export const getGetSslGatewayServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSslGatewayServiceNameTaskQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>> = ({ signal }) => getSslGatewayServiceNameTask(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSslGatewayServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>>
export type GetSslGatewayServiceNameTaskQueryError = unknown


export function useGetSslGatewayServiceNameTask<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameTask<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameTask<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Task for this SSL Gateway
 */

export function useGetSslGatewayServiceNameTask<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSslGatewayServiceNameTaskQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getSslGatewayServiceNameTaskId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SslGatewayTaskOVH>(
      {url: `/sslGateway/${serviceName}/task/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSslGatewayServiceNameTaskIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/sslGateway/${serviceName}/task/${id}`] as const;
    }

    
export const getGetSslGatewayServiceNameTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSslGatewayServiceNameTaskIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>> = ({ signal }) => getSslGatewayServiceNameTaskId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSslGatewayServiceNameTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>>
export type GetSslGatewayServiceNameTaskIdQueryError = unknown


export function useGetSslGatewayServiceNameTaskId<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameTaskId<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSslGatewayServiceNameTaskId<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetSslGatewayServiceNameTaskId<TData = Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSslGatewayServiceNameTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSslGatewayServiceNameTaskIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postSslGatewayServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/sslGateway/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostSslGatewayServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSslGatewayServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postSslGatewayServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSslGatewayServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postSslGatewayServiceNameTerminate>>>
    
    export type PostSslGatewayServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostSslGatewayServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSslGatewayServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSslGatewayServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostSslGatewayServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

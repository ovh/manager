/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLicenseWorklightOrderableVersionsParams,
  GetLicenseWorklightParams,
  GetLicenseWorklightServiceNameCanLicenseBeMovedToParams,
  GetLicenseWorklightServiceNameTasksParams,
  IpBlockOVH,
  LicenseChangeIpStatusOVH,
  LicenseTaskOVH,
  LicenseWorkLightOrderConfigurationOVH,
  LicenseWorklightWorkLightOVH,
  LicenseWorklightWorkLightWithIAMOVH,
  PostLicenseWorklightServiceNameChangeIpBody,
  PostLicenseWorklightServiceNameConfirmTerminationBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getLicenseWorklight = (
    params?: GetLicenseWorklightParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/worklight`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseWorklightQueryKey = (params?: GetLicenseWorklightParams,) => {
    return [`/license/worklight`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseWorklightQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWorklight>>, TError = unknown>(params?: GetLicenseWorklightParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWorklightQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWorklight>>> = ({ signal }) => getLicenseWorklight(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklight>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWorklightQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWorklight>>>
export type GetLicenseWorklightQueryError = unknown


export function useGetLicenseWorklight<TData = Awaited<ReturnType<typeof getLicenseWorklight>>, TError = unknown>(
 params: undefined |  GetLicenseWorklightParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklight>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklight>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklight<TData = Awaited<ReturnType<typeof getLicenseWorklight>>, TError = unknown>(
 params?: GetLicenseWorklightParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklight>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklight>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklight<TData = Awaited<ReturnType<typeof getLicenseWorklight>>, TError = unknown>(
 params?: GetLicenseWorklightParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetLicenseWorklight<TData = Awaited<ReturnType<typeof getLicenseWorklight>>, TError = unknown>(
 params?: GetLicenseWorklightParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWorklightQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the orderable WorkLight versions
 */
export const getLicenseWorklightOrderableVersions = (
    params: GetLicenseWorklightOrderableVersionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseWorkLightOrderConfigurationOVH[]>(
      {url: `/license/worklight/orderableVersions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseWorklightOrderableVersionsQueryKey = (params: GetLicenseWorklightOrderableVersionsParams,) => {
    return [`/license/worklight/orderableVersions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseWorklightOrderableVersionsQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>, TError = unknown>(params: GetLicenseWorklightOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWorklightOrderableVersionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>> = ({ signal }) => getLicenseWorklightOrderableVersions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWorklightOrderableVersionsQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>>
export type GetLicenseWorklightOrderableVersionsQueryError = unknown


export function useGetLicenseWorklightOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>, TError = unknown>(
 params: GetLicenseWorklightOrderableVersionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>, TError = unknown>(
 params: GetLicenseWorklightOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>, TError = unknown>(
 params: GetLicenseWorklightOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the orderable WorkLight versions
 */

export function useGetLicenseWorklightOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>, TError = unknown>(
 params: GetLicenseWorklightOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWorklightOrderableVersionsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseWorklightServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseWorklightWorkLightWithIAMOVH>(
      {url: `/license/worklight/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseWorklightServiceNameQueryKey = (serviceName: string,) => {
    return [`/license/worklight/${serviceName}`] as const;
    }

    
export const getGetLicenseWorklightServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWorklightServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWorklightServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWorklightServiceName>>> = ({ signal }) => getLicenseWorklightServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWorklightServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWorklightServiceName>>>
export type GetLicenseWorklightServiceNameQueryError = unknown


export function useGetLicenseWorklightServiceName<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightServiceName<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightServiceName<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseWorklightServiceName<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWorklightServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putLicenseWorklightServiceName = (
    serviceName: string,
    licenseWorklightWorkLightOVH: NonReadonly<LicenseWorklightWorkLightOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/worklight/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: licenseWorklightWorkLightOVH
    },
      options);
    }
  


export const getPutLicenseWorklightServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseWorklightServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseWorklightWorkLightOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseWorklightServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseWorklightWorkLightOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseWorklightServiceName>>, {serviceName: string;data: NonReadonly<LicenseWorklightWorkLightOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseWorklightServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseWorklightServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseWorklightServiceName>>>
    export type PutLicenseWorklightServiceNameMutationBody = NonReadonly<LicenseWorklightWorkLightOVH>
    export type PutLicenseWorklightServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutLicenseWorklightServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseWorklightServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseWorklightWorkLightOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseWorklightServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<LicenseWorklightWorkLightOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseWorklightServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns an array of ips where the license can be moved to
 */
export const getLicenseWorklightServiceNameAllowedDestinationIp = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/license/worklight/${serviceName}/allowedDestinationIp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseWorklightServiceNameAllowedDestinationIpQueryKey = (serviceName: string,) => {
    return [`/license/worklight/${serviceName}/allowedDestinationIp`] as const;
    }

    
export const getGetLicenseWorklightServiceNameAllowedDestinationIpQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWorklightServiceNameAllowedDestinationIpQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>> = ({ signal }) => getLicenseWorklightServiceNameAllowedDestinationIp(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWorklightServiceNameAllowedDestinationIpQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>>
export type GetLicenseWorklightServiceNameAllowedDestinationIpQueryError = unknown


export function useGetLicenseWorklightServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns an array of ips where the license can be moved to
 */

export function useGetLicenseWorklightServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWorklightServiceNameAllowedDestinationIpQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Will tell if the ip can accept the license
 */
export const getLicenseWorklightServiceNameCanLicenseBeMovedTo = (
    serviceName: string,
    params: GetLicenseWorklightServiceNameCanLicenseBeMovedToParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseChangeIpStatusOVH>(
      {url: `/license/worklight/${serviceName}/canLicenseBeMovedTo`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseWorklightServiceNameCanLicenseBeMovedToQueryKey = (serviceName: string,
    params: GetLicenseWorklightServiceNameCanLicenseBeMovedToParams,) => {
    return [`/license/worklight/${serviceName}/canLicenseBeMovedTo`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseWorklightServiceNameCanLicenseBeMovedToQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>, TError = unknown>(serviceName: string,
    params: GetLicenseWorklightServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWorklightServiceNameCanLicenseBeMovedToQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>> = ({ signal }) => getLicenseWorklightServiceNameCanLicenseBeMovedTo(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWorklightServiceNameCanLicenseBeMovedToQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>>
export type GetLicenseWorklightServiceNameCanLicenseBeMovedToQueryError = unknown


export function useGetLicenseWorklightServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseWorklightServiceNameCanLicenseBeMovedToParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseWorklightServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseWorklightServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Will tell if the ip can accept the license
 */

export function useGetLicenseWorklightServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseWorklightServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWorklightServiceNameCanLicenseBeMovedToQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Move this license to another Ip
 */
export const postLicenseWorklightServiceNameChangeIp = (
    serviceName: string,
    postLicenseWorklightServiceNameChangeIpBody: PostLicenseWorklightServiceNameChangeIpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/worklight/${serviceName}/changeIp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseWorklightServiceNameChangeIpBody, signal
    },
      options);
    }
  


export const getPostLicenseWorklightServiceNameChangeIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseWorklightServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicenseWorklightServiceNameChangeIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseWorklightServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicenseWorklightServiceNameChangeIpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseWorklightServiceNameChangeIp>>, {serviceName: string;data: PostLicenseWorklightServiceNameChangeIpBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseWorklightServiceNameChangeIp(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseWorklightServiceNameChangeIpMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseWorklightServiceNameChangeIp>>>
    export type PostLicenseWorklightServiceNameChangeIpMutationBody = PostLicenseWorklightServiceNameChangeIpBody
    export type PostLicenseWorklightServiceNameChangeIpMutationError = unknown

    /**
 * @summary Move this license to another Ip
 */
export const usePostLicenseWorklightServiceNameChangeIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseWorklightServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicenseWorklightServiceNameChangeIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseWorklightServiceNameChangeIp>>,
        TError,
        {serviceName: string;data: PostLicenseWorklightServiceNameChangeIpBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseWorklightServiceNameChangeIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postLicenseWorklightServiceNameConfirmTermination = (
    serviceName: string,
    postLicenseWorklightServiceNameConfirmTerminationBody: PostLicenseWorklightServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/worklight/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseWorklightServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostLicenseWorklightServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseWorklightServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseWorklightServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseWorklightServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseWorklightServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseWorklightServiceNameConfirmTermination>>, {serviceName: string;data: PostLicenseWorklightServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseWorklightServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseWorklightServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseWorklightServiceNameConfirmTermination>>>
    export type PostLicenseWorklightServiceNameConfirmTerminationMutationBody = PostLicenseWorklightServiceNameConfirmTerminationBody
    export type PostLicenseWorklightServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostLicenseWorklightServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseWorklightServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseWorklightServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseWorklightServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostLicenseWorklightServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseWorklightServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getLicenseWorklightServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/license/worklight/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseWorklightServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/license/worklight/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetLicenseWorklightServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWorklightServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>> = ({ signal }) => getLicenseWorklightServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWorklightServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>>
export type GetLicenseWorklightServiceNameServiceInfosQueryError = unknown


export function useGetLicenseWorklightServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetLicenseWorklightServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWorklightServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putLicenseWorklightServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/worklight/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutLicenseWorklightServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseWorklightServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseWorklightServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseWorklightServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseWorklightServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseWorklightServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseWorklightServiceNameServiceInfos>>>
    export type PutLicenseWorklightServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutLicenseWorklightServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutLicenseWorklightServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseWorklightServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseWorklightServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseWorklightServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Tasks linked to this license
 */
export const getLicenseWorklightServiceNameTasks = (
    serviceName: string,
    params?: GetLicenseWorklightServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/license/worklight/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseWorklightServiceNameTasksQueryKey = (serviceName: string,
    params?: GetLicenseWorklightServiceNameTasksParams,) => {
    return [`/license/worklight/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseWorklightServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetLicenseWorklightServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWorklightServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>> = ({ signal }) => getLicenseWorklightServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWorklightServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>>
export type GetLicenseWorklightServiceNameTasksQueryError = unknown


export function useGetLicenseWorklightServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicenseWorklightServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseWorklightServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseWorklightServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Tasks linked to this license
 */

export function useGetLicenseWorklightServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseWorklightServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWorklightServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseWorklightServiceNameTasksTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/worklight/${serviceName}/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseWorklightServiceNameTasksTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/license/worklight/${serviceName}/tasks/${taskId}`] as const;
    }

    
export const getGetLicenseWorklightServiceNameTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWorklightServiceNameTasksTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>> = ({ signal }) => getLicenseWorklightServiceNameTasksTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWorklightServiceNameTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>>
export type GetLicenseWorklightServiceNameTasksTaskIdQueryError = unknown


export function useGetLicenseWorklightServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWorklightServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseWorklightServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWorklightServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWorklightServiceNameTasksTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postLicenseWorklightServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/worklight/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicenseWorklightServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseWorklightServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseWorklightServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseWorklightServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicenseWorklightServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseWorklightServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseWorklightServiceNameTerminate>>>
    
    export type PostLicenseWorklightServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostLicenseWorklightServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseWorklightServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseWorklightServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicenseWorklightServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

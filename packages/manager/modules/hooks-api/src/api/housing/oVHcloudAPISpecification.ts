/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DedicatedHousingApcOrderableOVH,
  DedicatedHousingHaRoutingOrderableOVH,
  DedicatedHousingHousingWithIAMOVH,
  DedicatedHousingTaskOVH,
  DedicatedServerBackupFtpAclOVH,
  DedicatedServerBackupFtpOVH,
  DedicatedServerTaskOVH,
  GetDedicatedHousingParams,
  GetDedicatedHousingServiceNameTaskParams,
  IpBlockOVH,
  PostDedicatedHousingServiceNameFeaturesBackupFTPAccessBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getDedicatedHousing = (
    params?: GetDedicatedHousingParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/housing`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedHousingQueryKey = (params?: GetDedicatedHousingParams,) => {
    return [`/dedicated/housing`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedHousingQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedHousing>>, TError = unknown>(params?: GetDedicatedHousingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedHousingQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedHousing>>> = ({ signal }) => getDedicatedHousing(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedHousingQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedHousing>>>
export type GetDedicatedHousingQueryError = unknown


export function useGetDedicatedHousing<TData = Awaited<ReturnType<typeof getDedicatedHousing>>, TError = unknown>(
 params: undefined |  GetDedicatedHousingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousing<TData = Awaited<ReturnType<typeof getDedicatedHousing>>, TError = unknown>(
 params?: GetDedicatedHousingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousing<TData = Awaited<ReturnType<typeof getDedicatedHousing>>, TError = unknown>(
 params?: GetDedicatedHousingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetDedicatedHousing<TData = Awaited<ReturnType<typeof getDedicatedHousing>>, TError = unknown>(
 params?: GetDedicatedHousingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedHousingQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedHousingServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedHousingHousingWithIAMOVH>(
      {url: `/dedicated/housing/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedHousingServiceNameQueryKey = (serviceName: string,) => {
    return [`/dedicated/housing/${serviceName}`] as const;
    }

    
export const getGetDedicatedHousingServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedHousingServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedHousingServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedHousingServiceName>>> = ({ signal }) => getDedicatedHousingServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedHousingServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedHousingServiceName>>>
export type GetDedicatedHousingServiceNameQueryError = unknown


export function useGetDedicatedHousingServiceName<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceName<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceName<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedHousingServiceName<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedHousingServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Terminate your Backup FTP service, ALL DATA WILL BE PERMANENTLY DELETED
 */
export const deleteDedicatedHousingServiceNameFeaturesBackupFTP = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/housing/${serviceName}/features/backupFTP`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedHousingServiceNameFeaturesBackupFTPMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedHousingServiceNameFeaturesBackupFTP>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedHousingServiceNameFeaturesBackupFTP>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedHousingServiceNameFeaturesBackupFTP>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteDedicatedHousingServiceNameFeaturesBackupFTP(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedHousingServiceNameFeaturesBackupFTPMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedHousingServiceNameFeaturesBackupFTP>>>
    
    export type DeleteDedicatedHousingServiceNameFeaturesBackupFTPMutationError = unknown

    /**
 * @summary Terminate your Backup FTP service, ALL DATA WILL BE PERMANENTLY DELETED
 */
export const useDeleteDedicatedHousingServiceNameFeaturesBackupFTP = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedHousingServiceNameFeaturesBackupFTP>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedHousingServiceNameFeaturesBackupFTP>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedHousingServiceNameFeaturesBackupFTPMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedHousingServiceNameFeaturesBackupFTP = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBackupFtpOVH>(
      {url: `/dedicated/housing/${serviceName}/features/backupFTP`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedHousingServiceNameFeaturesBackupFTPQueryKey = (serviceName: string,) => {
    return [`/dedicated/housing/${serviceName}/features/backupFTP`] as const;
    }

    
export const getGetDedicatedHousingServiceNameFeaturesBackupFTPQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedHousingServiceNameFeaturesBackupFTPQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>> = ({ signal }) => getDedicatedHousingServiceNameFeaturesBackupFTP(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedHousingServiceNameFeaturesBackupFTPQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>>
export type GetDedicatedHousingServiceNameFeaturesBackupFTPQueryError = unknown


export function useGetDedicatedHousingServiceNameFeaturesBackupFTP<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameFeaturesBackupFTP<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameFeaturesBackupFTP<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedHousingServiceNameFeaturesBackupFTP<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTP>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedHousingServiceNameFeaturesBackupFTPQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new Backup FTP space
 */
export const postDedicatedHousingServiceNameFeaturesBackupFTP = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/housing/${serviceName}/features/backupFTP`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedHousingServiceNameFeaturesBackupFTPMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTP>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTP>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTP>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedHousingServiceNameFeaturesBackupFTP(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedHousingServiceNameFeaturesBackupFTPMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTP>>>
    
    export type PostDedicatedHousingServiceNameFeaturesBackupFTPMutationError = unknown

    /**
 * @summary Create a new Backup FTP space
 */
export const usePostDedicatedHousingServiceNameFeaturesBackupFTP = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTP>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTP>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedHousingServiceNameFeaturesBackupFTPMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of IP blocks (and protocols to allow on these blocks) authorized on your backup FTP
 */
export const getDedicatedHousingServiceNameFeaturesBackupFTPAccess = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/dedicated/housing/${serviceName}/features/backupFTP/access`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedHousingServiceNameFeaturesBackupFTPAccessQueryKey = (serviceName: string,) => {
    return [`/dedicated/housing/${serviceName}/features/backupFTP/access`] as const;
    }

    
export const getGetDedicatedHousingServiceNameFeaturesBackupFTPAccessQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedHousingServiceNameFeaturesBackupFTPAccessQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>> = ({ signal }) => getDedicatedHousingServiceNameFeaturesBackupFTPAccess(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedHousingServiceNameFeaturesBackupFTPAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>>
export type GetDedicatedHousingServiceNameFeaturesBackupFTPAccessQueryError = unknown


export function useGetDedicatedHousingServiceNameFeaturesBackupFTPAccess<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameFeaturesBackupFTPAccess<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameFeaturesBackupFTPAccess<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of IP blocks (and protocols to allow on these blocks) authorized on your backup FTP
 */

export function useGetDedicatedHousingServiceNameFeaturesBackupFTPAccess<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedHousingServiceNameFeaturesBackupFTPAccessQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new Backup FTP ACL
 */
export const postDedicatedHousingServiceNameFeaturesBackupFTPAccess = (
    serviceName: string,
    postDedicatedHousingServiceNameFeaturesBackupFTPAccessBody: PostDedicatedHousingServiceNameFeaturesBackupFTPAccessBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/housing/${serviceName}/features/backupFTP/access`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedHousingServiceNameFeaturesBackupFTPAccessBody, signal
    },
      options);
    }
  


export const getPostDedicatedHousingServiceNameFeaturesBackupFTPAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError,{serviceName: string;data: PostDedicatedHousingServiceNameFeaturesBackupFTPAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError,{serviceName: string;data: PostDedicatedHousingServiceNameFeaturesBackupFTPAccessBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, {serviceName: string;data: PostDedicatedHousingServiceNameFeaturesBackupFTPAccessBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedHousingServiceNameFeaturesBackupFTPAccess(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedHousingServiceNameFeaturesBackupFTPAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTPAccess>>>
    export type PostDedicatedHousingServiceNameFeaturesBackupFTPAccessMutationBody = PostDedicatedHousingServiceNameFeaturesBackupFTPAccessBody
    export type PostDedicatedHousingServiceNameFeaturesBackupFTPAccessMutationError = unknown

    /**
 * @summary Create a new Backup FTP ACL
 */
export const usePostDedicatedHousingServiceNameFeaturesBackupFTPAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTPAccess>>, TError,{serviceName: string;data: PostDedicatedHousingServiceNameFeaturesBackupFTPAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTPAccess>>,
        TError,
        {serviceName: string;data: PostDedicatedHousingServiceNameFeaturesBackupFTPAccessBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedHousingServiceNameFeaturesBackupFTPAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Revoke this ACL
 */
export const deleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock = (
    serviceName: string,
    ipBlock: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/housing/${serviceName}/features/backupFTP/access/${ipBlock}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, {serviceName: string;ipBlock: IpBlockOVH}> = (props) => {
          const {serviceName,ipBlock} = props ?? {};

          return  deleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock(serviceName,ipBlock,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>>
    
    export type DeleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockMutationError = unknown

    /**
 * @summary Revoke this ACL
 */
export const useDeleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>,
        TError,
        {serviceName: string;ipBlock: IpBlockOVH},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock = (
    serviceName: string,
    ipBlock: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBackupFtpAclOVH>(
      {url: `/dedicated/housing/${serviceName}/features/backupFTP/access/${ipBlock}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockQueryKey = (serviceName: string,
    ipBlock: IpBlockOVH,) => {
    return [`/dedicated/housing/${serviceName}/features/backupFTP/access/${ipBlock}`] as const;
    }

    
export const getGetDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError = unknown>(serviceName: string,
    ipBlock: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockQueryKey(serviceName,ipBlock);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>> = ({ signal }) => getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock(serviceName,ipBlock, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ipBlock), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>>
export type GetDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockQueryError = unknown


export function useGetDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError = unknown>(
 serviceName: string,
    ipBlock: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError = unknown>(
 serviceName: string,
    ipBlock: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError = unknown>(
 serviceName: string,
    ipBlock: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError = unknown>(
 serviceName: string,
    ipBlock: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockQueryOptions(serviceName,ipBlock,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock = (
    serviceName: string,
    ipBlock: IpBlockOVH,
    dedicatedServerBackupFtpAclOVH: NonReadonly<DedicatedServerBackupFtpAclOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/housing/${serviceName}/features/backupFTP/access/${ipBlock}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedServerBackupFtpAclOVH
    },
      options);
    }
  


export const getPutDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, {serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>}> = (props) => {
          const {serviceName,ipBlock,data} = props ?? {};

          return  putDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock(serviceName,ipBlock,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>>
    export type PutDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockMutationBody = NonReadonly<DedicatedServerBackupFtpAclOVH>
    export type PutDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlock>>,
        TError,
        {serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all IP blocks that can be used in the ACL
 */
export const getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/dedicated/housing/${serviceName}/features/backupFTP/authorizableBlocks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocksQueryKey = (serviceName: string,) => {
    return [`/dedicated/housing/${serviceName}/features/backupFTP/authorizableBlocks`] as const;
    }

    
export const getGetDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocksQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocksQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>> = ({ signal }) => getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocksQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>>
export type GetDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocksQueryError = unknown


export function useGetDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all IP blocks that can be used in the ACL
 */

export function useGetDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocksQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change your Backup FTP password
 */
export const postDedicatedHousingServiceNameFeaturesBackupFTPPassword = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/housing/${serviceName}/features/backupFTP/password`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedHousingServiceNameFeaturesBackupFTPPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTPPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTPPassword>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTPPassword>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedHousingServiceNameFeaturesBackupFTPPassword(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedHousingServiceNameFeaturesBackupFTPPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTPPassword>>>
    
    export type PostDedicatedHousingServiceNameFeaturesBackupFTPPasswordMutationError = unknown

    /**
 * @summary Change your Backup FTP password
 */
export const usePostDedicatedHousingServiceNameFeaturesBackupFTPPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTPPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedHousingServiceNameFeaturesBackupFTPPassword>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedHousingServiceNameFeaturesBackupFTPPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Is an APC orderable for this housing bay
 */
export const getDedicatedHousingServiceNameOrderableAPC = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedHousingApcOrderableOVH>(
      {url: `/dedicated/housing/${serviceName}/orderable/APC`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedHousingServiceNameOrderableAPCQueryKey = (serviceName: string,) => {
    return [`/dedicated/housing/${serviceName}/orderable/APC`] as const;
    }

    
export const getGetDedicatedHousingServiceNameOrderableAPCQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedHousingServiceNameOrderableAPCQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>> = ({ signal }) => getDedicatedHousingServiceNameOrderableAPC(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedHousingServiceNameOrderableAPCQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>>
export type GetDedicatedHousingServiceNameOrderableAPCQueryError = unknown


export function useGetDedicatedHousingServiceNameOrderableAPC<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameOrderableAPC<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameOrderableAPC<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Is an APC orderable for this housing bay
 */

export function useGetDedicatedHousingServiceNameOrderableAPC<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableAPC>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedHousingServiceNameOrderableAPCQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Is High Availability routing service orderable for this housing bay
 */
export const getDedicatedHousingServiceNameOrderableHighAvailabilityRouting = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedHousingHaRoutingOrderableOVH>(
      {url: `/dedicated/housing/${serviceName}/orderable/highAvailabilityRouting`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedHousingServiceNameOrderableHighAvailabilityRoutingQueryKey = (serviceName: string,) => {
    return [`/dedicated/housing/${serviceName}/orderable/highAvailabilityRouting`] as const;
    }

    
export const getGetDedicatedHousingServiceNameOrderableHighAvailabilityRoutingQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedHousingServiceNameOrderableHighAvailabilityRoutingQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>> = ({ signal }) => getDedicatedHousingServiceNameOrderableHighAvailabilityRouting(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedHousingServiceNameOrderableHighAvailabilityRoutingQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>>
export type GetDedicatedHousingServiceNameOrderableHighAvailabilityRoutingQueryError = unknown


export function useGetDedicatedHousingServiceNameOrderableHighAvailabilityRouting<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameOrderableHighAvailabilityRouting<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameOrderableHighAvailabilityRouting<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Is High Availability routing service orderable for this housing bay
 */

export function useGetDedicatedHousingServiceNameOrderableHighAvailabilityRouting<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameOrderableHighAvailabilityRouting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedHousingServiceNameOrderableHighAvailabilityRoutingQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getDedicatedHousingServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/dedicated/housing/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedHousingServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/dedicated/housing/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetDedicatedHousingServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedHousingServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>> = ({ signal }) => getDedicatedHousingServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedHousingServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>>
export type GetDedicatedHousingServiceNameServiceInfosQueryError = unknown


export function useGetDedicatedHousingServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetDedicatedHousingServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedHousingServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putDedicatedHousingServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/housing/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutDedicatedHousingServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedHousingServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedHousingServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedHousingServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedHousingServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedHousingServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedHousingServiceNameServiceInfos>>>
    export type PutDedicatedHousingServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutDedicatedHousingServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutDedicatedHousingServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedHousingServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedHousingServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedHousingServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary View task list
 */
export const getDedicatedHousingServiceNameTask = (
    serviceName: string,
    params?: GetDedicatedHousingServiceNameTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/housing/${serviceName}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedHousingServiceNameTaskQueryKey = (serviceName: string,
    params?: GetDedicatedHousingServiceNameTaskParams,) => {
    return [`/dedicated/housing/${serviceName}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedHousingServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedHousingServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedHousingServiceNameTaskQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>> = ({ signal }) => getDedicatedHousingServiceNameTask(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedHousingServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>>
export type GetDedicatedHousingServiceNameTaskQueryError = unknown


export function useGetDedicatedHousingServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedHousingServiceNameTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedHousingServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedHousingServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary View task list
 */

export function useGetDedicatedHousingServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedHousingServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedHousingServiceNameTaskQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedHousingServiceNameTaskTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedHousingTaskOVH>(
      {url: `/dedicated/housing/${serviceName}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedHousingServiceNameTaskTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/dedicated/housing/${serviceName}/task/${taskId}`] as const;
    }

    
export const getGetDedicatedHousingServiceNameTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedHousingServiceNameTaskTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>> = ({ signal }) => getDedicatedHousingServiceNameTaskTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedHousingServiceNameTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>>
export type GetDedicatedHousingServiceNameTaskTaskIdQueryError = unknown


export function useGetDedicatedHousingServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedHousingServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedHousingServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedHousingServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedHousingServiceNameTaskTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary this action stop the task progression if it's possible
 */
export const postDedicatedHousingServiceNameTaskTaskIdCancel = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/housing/${serviceName}/task/${taskId}/cancel`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedHousingServiceNameTaskTaskIdCancelMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedHousingServiceNameTaskTaskIdCancel>>, TError,{serviceName: string;taskId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedHousingServiceNameTaskTaskIdCancel>>, TError,{serviceName: string;taskId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedHousingServiceNameTaskTaskIdCancel>>, {serviceName: string;taskId: number}> = (props) => {
          const {serviceName,taskId} = props ?? {};

          return  postDedicatedHousingServiceNameTaskTaskIdCancel(serviceName,taskId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedHousingServiceNameTaskTaskIdCancelMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedHousingServiceNameTaskTaskIdCancel>>>
    
    export type PostDedicatedHousingServiceNameTaskTaskIdCancelMutationError = unknown

    /**
 * @summary this action stop the task progression if it's possible
 */
export const usePostDedicatedHousingServiceNameTaskTaskIdCancel = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedHousingServiceNameTaskTaskIdCancel>>, TError,{serviceName: string;taskId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedHousingServiceNameTaskTaskIdCancel>>,
        TError,
        {serviceName: string;taskId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedHousingServiceNameTaskTaskIdCancelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  BillingAccountAsyncBillingAccountOVH,
  BillingAccountAsyncCreateBillingAccountOVH,
  BillingAccountSubscriptionAsyncSubscriptionOVH,
  CommonEventOVH,
  CommonTaskOVH,
  DeleteBillingAccountIdBillingAccountId400,
  GetBillingAccountIdBillingAccountIdSubscriptionParams,
  GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionId404,
  GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent404,
  GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask404,
  PostBillingAccountId400,
  PutBillingAccountIdBillingAccountId400,
  PutBillingAccountIdBillingAccountId412,
  PutBillingAccountIdBillingAccountIdSubscriptionSubscriptionId404
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV2 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List billing accounts
 */
export const getBillingAccountId = (
    
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<BillingAccountAsyncBillingAccountOVH[]>(
      {url: `/billingAccount/id`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBillingAccountIdQueryKey = () => {
    return [`/billingAccount/id`] as const;
    }

    
export const getGetBillingAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getBillingAccountId>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBillingAccountIdQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBillingAccountId>>> = ({ signal }) => getBillingAccountId(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetBillingAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getBillingAccountId>>>
export type GetBillingAccountIdQueryError = unknown


export function useGetBillingAccountId<TData = Awaited<ReturnType<typeof getBillingAccountId>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountId<TData = Awaited<ReturnType<typeof getBillingAccountId>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountId<TData = Awaited<ReturnType<typeof getBillingAccountId>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List billing accounts
 */

export function useGetBillingAccountId<TData = Awaited<ReturnType<typeof getBillingAccountId>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetBillingAccountIdQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a billing account
 */
export const postBillingAccountId = (
    billingAccountAsyncCreateBillingAccountOVH: BillingAccountAsyncCreateBillingAccountOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<BillingAccountAsyncBillingAccountOVH>(
      {url: `/billingAccount/id`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: billingAccountAsyncCreateBillingAccountOVH, signal
    },
      options);
    }
  


export const getPostBillingAccountIdMutationOptions = <TError = PostBillingAccountId400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postBillingAccountId>>, TError,{data: BillingAccountAsyncCreateBillingAccountOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postBillingAccountId>>, TError,{data: BillingAccountAsyncCreateBillingAccountOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postBillingAccountId>>, {data: BillingAccountAsyncCreateBillingAccountOVH}> = (props) => {
          const {data} = props ?? {};

          return  postBillingAccountId(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostBillingAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof postBillingAccountId>>>
    export type PostBillingAccountIdMutationBody = BillingAccountAsyncCreateBillingAccountOVH
    export type PostBillingAccountIdMutationError = PostBillingAccountId400

    /**
 * @summary Create a billing account
 */
export const usePostBillingAccountId = <TError = PostBillingAccountId400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postBillingAccountId>>, TError,{data: BillingAccountAsyncCreateBillingAccountOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postBillingAccountId>>,
        TError,
        {data: BillingAccountAsyncCreateBillingAccountOVH},
        TContext
      > => {

      const mutationOptions = getPostBillingAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a billing account
 */
export const deleteBillingAccountIdBillingAccountId = (
    billingAccountId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<BillingAccountAsyncBillingAccountOVH>(
      {url: `/billingAccount/id/${billingAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteBillingAccountIdBillingAccountIdMutationOptions = <TError = DeleteBillingAccountIdBillingAccountId400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBillingAccountIdBillingAccountId>>, TError,{billingAccountId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteBillingAccountIdBillingAccountId>>, TError,{billingAccountId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteBillingAccountIdBillingAccountId>>, {billingAccountId: string}> = (props) => {
          const {billingAccountId} = props ?? {};

          return  deleteBillingAccountIdBillingAccountId(billingAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteBillingAccountIdBillingAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteBillingAccountIdBillingAccountId>>>
    
    export type DeleteBillingAccountIdBillingAccountIdMutationError = DeleteBillingAccountIdBillingAccountId400

    /**
 * @summary Delete a billing account
 */
export const useDeleteBillingAccountIdBillingAccountId = <TError = DeleteBillingAccountIdBillingAccountId400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBillingAccountIdBillingAccountId>>, TError,{billingAccountId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteBillingAccountIdBillingAccountId>>,
        TError,
        {billingAccountId: string},
        TContext
      > => {

      const mutationOptions = getDeleteBillingAccountIdBillingAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a billing account
 */
export const getBillingAccountIdBillingAccountId = (
    billingAccountId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<BillingAccountAsyncBillingAccountOVH>(
      {url: `/billingAccount/id/${billingAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBillingAccountIdBillingAccountIdQueryKey = (billingAccountId: string,) => {
    return [`/billingAccount/id/${billingAccountId}`] as const;
    }

    
export const getGetBillingAccountIdBillingAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>, TError = unknown>(billingAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBillingAccountIdBillingAccountIdQueryKey(billingAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>> = ({ signal }) => getBillingAccountIdBillingAccountId(billingAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetBillingAccountIdBillingAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>>
export type GetBillingAccountIdBillingAccountIdQueryError = unknown


export function useGetBillingAccountIdBillingAccountId<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>, TError = unknown>(
 billingAccountId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountId<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>, TError = unknown>(
 billingAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountId<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>, TError = unknown>(
 billingAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a billing account
 */

export function useGetBillingAccountIdBillingAccountId<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>, TError = unknown>(
 billingAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetBillingAccountIdBillingAccountIdQueryOptions(billingAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify a billing account
 */
export const putBillingAccountIdBillingAccountId = (
    billingAccountId: string,
    billingAccountAsyncBillingAccountOVH: NonReadonly<BillingAccountAsyncBillingAccountOVH>,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<BillingAccountAsyncBillingAccountOVH>(
      {url: `/billingAccount/id/${billingAccountId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: billingAccountAsyncBillingAccountOVH
    },
      options);
    }
  


export const getPutBillingAccountIdBillingAccountIdMutationOptions = <TError = PutBillingAccountIdBillingAccountId400 | PutBillingAccountIdBillingAccountId412,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putBillingAccountIdBillingAccountId>>, TError,{billingAccountId: string;data: NonReadonly<BillingAccountAsyncBillingAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putBillingAccountIdBillingAccountId>>, TError,{billingAccountId: string;data: NonReadonly<BillingAccountAsyncBillingAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putBillingAccountIdBillingAccountId>>, {billingAccountId: string;data: NonReadonly<BillingAccountAsyncBillingAccountOVH>}> = (props) => {
          const {billingAccountId,data} = props ?? {};

          return  putBillingAccountIdBillingAccountId(billingAccountId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutBillingAccountIdBillingAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof putBillingAccountIdBillingAccountId>>>
    export type PutBillingAccountIdBillingAccountIdMutationBody = NonReadonly<BillingAccountAsyncBillingAccountOVH>
    export type PutBillingAccountIdBillingAccountIdMutationError = PutBillingAccountIdBillingAccountId400 | PutBillingAccountIdBillingAccountId412

    /**
 * @summary Modify a billing account
 */
export const usePutBillingAccountIdBillingAccountId = <TError = PutBillingAccountIdBillingAccountId400 | PutBillingAccountIdBillingAccountId412,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putBillingAccountIdBillingAccountId>>, TError,{billingAccountId: string;data: NonReadonly<BillingAccountAsyncBillingAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putBillingAccountIdBillingAccountId>>,
        TError,
        {billingAccountId: string;data: NonReadonly<BillingAccountAsyncBillingAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutBillingAccountIdBillingAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a list of events
 */
export const getBillingAccountIdBillingAccountIdEvent = (
    billingAccountId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonEventOVH[]>(
      {url: `/billingAccount/id/${billingAccountId}/event`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBillingAccountIdBillingAccountIdEventQueryKey = (billingAccountId: string,) => {
    return [`/billingAccount/id/${billingAccountId}/event`] as const;
    }

    
export const getGetBillingAccountIdBillingAccountIdEventQueryOptions = <TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>, TError = unknown>(billingAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBillingAccountIdBillingAccountIdEventQueryKey(billingAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>> = ({ signal }) => getBillingAccountIdBillingAccountIdEvent(billingAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetBillingAccountIdBillingAccountIdEventQueryResult = NonNullable<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>>
export type GetBillingAccountIdBillingAccountIdEventQueryError = unknown


export function useGetBillingAccountIdBillingAccountIdEvent<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>, TError = unknown>(
 billingAccountId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountIdEvent<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>, TError = unknown>(
 billingAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountIdEvent<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>, TError = unknown>(
 billingAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of events
 */

export function useGetBillingAccountIdBillingAccountIdEvent<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>, TError = unknown>(
 billingAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetBillingAccountIdBillingAccountIdEventQueryOptions(billingAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List subscriptions in current billing account
 */
export const getBillingAccountIdBillingAccountIdSubscription = (
    billingAccountId: string,
    params?: GetBillingAccountIdBillingAccountIdSubscriptionParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<BillingAccountSubscriptionAsyncSubscriptionOVH[]>(
      {url: `/billingAccount/id/${billingAccountId}/subscription`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetBillingAccountIdBillingAccountIdSubscriptionQueryKey = (billingAccountId: string,
    params?: GetBillingAccountIdBillingAccountIdSubscriptionParams,) => {
    return [`/billingAccount/id/${billingAccountId}/subscription`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBillingAccountIdBillingAccountIdSubscriptionQueryOptions = <TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>, TError = unknown>(billingAccountId: string,
    params?: GetBillingAccountIdBillingAccountIdSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBillingAccountIdBillingAccountIdSubscriptionQueryKey(billingAccountId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>> = ({ signal }) => getBillingAccountIdBillingAccountIdSubscription(billingAccountId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetBillingAccountIdBillingAccountIdSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>>
export type GetBillingAccountIdBillingAccountIdSubscriptionQueryError = unknown


export function useGetBillingAccountIdBillingAccountIdSubscription<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>, TError = unknown>(
 billingAccountId: string,
    params: undefined |  GetBillingAccountIdBillingAccountIdSubscriptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountIdSubscription<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>, TError = unknown>(
 billingAccountId: string,
    params?: GetBillingAccountIdBillingAccountIdSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountIdSubscription<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>, TError = unknown>(
 billingAccountId: string,
    params?: GetBillingAccountIdBillingAccountIdSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List subscriptions in current billing account
 */

export function useGetBillingAccountIdBillingAccountIdSubscription<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>, TError = unknown>(
 billingAccountId: string,
    params?: GetBillingAccountIdBillingAccountIdSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetBillingAccountIdBillingAccountIdSubscriptionQueryOptions(billingAccountId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a subscription
 */
export const getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId = (
    billingAccountId: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<BillingAccountSubscriptionAsyncSubscriptionOVH>(
      {url: `/billingAccount/id/${billingAccountId}/subscription/${subscriptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdQueryKey = (billingAccountId: string,
    subscriptionId: string,) => {
    return [`/billingAccount/id/${billingAccountId}/subscription/${subscriptionId}`] as const;
    }

    
export const getGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionId404>(billingAccountId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdQueryKey(billingAccountId,subscriptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>> = ({ signal }) => getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId(billingAccountId,subscriptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccountId && subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>>
export type GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdQueryError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionId404


export function useGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionId404>(
 billingAccountId: string,
    subscriptionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionId404>(
 billingAccountId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionId404>(
 billingAccountId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a subscription
 */

export function useGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionId404>(
 billingAccountId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdQueryOptions(billingAccountId,subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Move a subscription from the current billing account to another one with the same owner
 */
export const putBillingAccountIdBillingAccountIdSubscriptionSubscriptionId = (
    billingAccountId: string,
    subscriptionId: string,
    billingAccountSubscriptionAsyncSubscriptionOVH: NonReadonly<BillingAccountSubscriptionAsyncSubscriptionOVH>,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<BillingAccountSubscriptionAsyncSubscriptionOVH>(
      {url: `/billingAccount/id/${billingAccountId}/subscription/${subscriptionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: billingAccountSubscriptionAsyncSubscriptionOVH
    },
      options);
    }
  


export const getPutBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdMutationOptions = <TError = PutBillingAccountIdBillingAccountIdSubscriptionSubscriptionId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError,{billingAccountId: string;subscriptionId: string;data: NonReadonly<BillingAccountSubscriptionAsyncSubscriptionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError,{billingAccountId: string;subscriptionId: string;data: NonReadonly<BillingAccountSubscriptionAsyncSubscriptionOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, {billingAccountId: string;subscriptionId: string;data: NonReadonly<BillingAccountSubscriptionAsyncSubscriptionOVH>}> = (props) => {
          const {billingAccountId,subscriptionId,data} = props ?? {};

          return  putBillingAccountIdBillingAccountIdSubscriptionSubscriptionId(billingAccountId,subscriptionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdMutationResult = NonNullable<Awaited<ReturnType<typeof putBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>>
    export type PutBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdMutationBody = NonReadonly<BillingAccountSubscriptionAsyncSubscriptionOVH>
    export type PutBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdMutationError = PutBillingAccountIdBillingAccountIdSubscriptionSubscriptionId404

    /**
 * @summary Move a subscription from the current billing account to another one with the same owner
 */
export const usePutBillingAccountIdBillingAccountIdSubscriptionSubscriptionId = <TError = PutBillingAccountIdBillingAccountIdSubscriptionSubscriptionId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>, TError,{billingAccountId: string;subscriptionId: string;data: NonReadonly<BillingAccountSubscriptionAsyncSubscriptionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putBillingAccountIdBillingAccountIdSubscriptionSubscriptionId>>,
        TError,
        {billingAccountId: string;subscriptionId: string;data: NonReadonly<BillingAccountSubscriptionAsyncSubscriptionOVH>},
        TContext
      > => {

      const mutationOptions = getPutBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a list of events
 */
export const getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent = (
    billingAccountId: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonEventOVH[]>(
      {url: `/billingAccount/id/${billingAccountId}/subscription/${subscriptionId}/event`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEventQueryKey = (billingAccountId: string,
    subscriptionId: string,) => {
    return [`/billingAccount/id/${billingAccountId}/subscription/${subscriptionId}/event`] as const;
    }

    
export const getGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEventQueryOptions = <TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent404>(billingAccountId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEventQueryKey(billingAccountId,subscriptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>> = ({ signal }) => getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent(billingAccountId,subscriptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccountId && subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEventQueryResult = NonNullable<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>>
export type GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEventQueryError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent404


export function useGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent404>(
 billingAccountId: string,
    subscriptionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent404>(
 billingAccountId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent404>(
 billingAccountId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of events
 */

export function useGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent404>(
 billingAccountId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdEventQueryOptions(billingAccountId,subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a list of tasks
 */
export const getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask = (
    billingAccountId: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH[]>(
      {url: `/billingAccount/id/${billingAccountId}/subscription/${subscriptionId}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTaskQueryKey = (billingAccountId: string,
    subscriptionId: string,) => {
    return [`/billingAccount/id/${billingAccountId}/subscription/${subscriptionId}/task`] as const;
    }

    
export const getGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask404>(billingAccountId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTaskQueryKey(billingAccountId,subscriptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>> = ({ signal }) => getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask(billingAccountId,subscriptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccountId && subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>>
export type GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTaskQueryError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask404


export function useGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask404>(
 billingAccountId: string,
    subscriptionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask404>(
 billingAccountId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask404>(
 billingAccountId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of tasks
 */

export function useGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>, TError = GetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask404>(
 billingAccountId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetBillingAccountIdBillingAccountIdSubscriptionSubscriptionIdTaskQueryOptions(billingAccountId,subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a list of tasks
 */
export const getBillingAccountIdBillingAccountIdTask = (
    billingAccountId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommonTaskOVH[]>(
      {url: `/billingAccount/id/${billingAccountId}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBillingAccountIdBillingAccountIdTaskQueryKey = (billingAccountId: string,) => {
    return [`/billingAccount/id/${billingAccountId}/task`] as const;
    }

    
export const getGetBillingAccountIdBillingAccountIdTaskQueryOptions = <TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>, TError = unknown>(billingAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBillingAccountIdBillingAccountIdTaskQueryKey(billingAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>> = ({ signal }) => getBillingAccountIdBillingAccountIdTask(billingAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetBillingAccountIdBillingAccountIdTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>>
export type GetBillingAccountIdBillingAccountIdTaskQueryError = unknown


export function useGetBillingAccountIdBillingAccountIdTask<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>, TError = unknown>(
 billingAccountId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountIdTask<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>, TError = unknown>(
 billingAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetBillingAccountIdBillingAccountIdTask<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>, TError = unknown>(
 billingAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of tasks
 */

export function useGetBillingAccountIdBillingAccountIdTask<TData = Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>, TError = unknown>(
 billingAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBillingAccountIdBillingAccountIdTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetBillingAccountIdBillingAccountIdTaskQueryOptions(billingAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





import { UnitAndValueLong } from '@/types/complexType/UnitAndValueLong';

/** Cloud database postgresql single query statistic definition */
export interface Query {
  /** Time spent reading data file blocks by backends in this database, in milliseconds */
  blkReadTime?: number;
  /** Time spent writing data file blocks by backends in this database, in milliseconds */
  blkWriteTime?: number;
  /** Number of times this function has been called */
  calls?: number;
  /** Name of the database */
  databaseName?: string;
  /** Total number of local blocks dirtied by the statement */
  localBlksDirtied?: number;
  /** Total number of local block cache hits by the statement */
  localBlksHit?: number;
  /** Total number of local blocks read by the statement */
  localBlksRead?: number;
  /** Total number of local blocks written by the statement */
  localBlksWritten?: number;
  /** Maximum time spent planning the statement, in milliseconds */
  maxPlanTime?: number;
  /** Maximum time spent for the statement, in milliseconds */
  maxTime?: number;
  /** Mean time spent planning the statement, in milliseconds */
  meanPlanTime?: number;
  /** Mean time spent for the statement, in milliseconds */
  meanTime?: number;
  /** Minimum time spent planning the statement, in milliseconds */
  minPlanTime?: number;
  /** Minimum time spent for the statement, in milliseconds */
  minTime?: number;
  /** Text of a representative statement */
  query?: string;
  /** Total number of rows retrieved or affected by the statement */
  rows?: number;
  /** Total number of shared blocks dirtied by the statement */
  sharedBlksDirtied?: number;
  /** Total number of shared block cache hits by the statement */
  sharedBlksHit?: number;
  /** Total number of shared blocks read by the statement */
  sharedBlksRead?: number;
  /** Total number of shared blocks written by the statement */
  sharedBlksWritten?: number;
  /** Population standard deviation of time spent planning the statement, in milliseconds */
  stddevPlanTime?: number;
  /** Population standard deviation of time spent for the statement, in milliseconds */
  stddevTime?: number;
  /** Total number of temp blocks read by the statement */
  tempBlksRead?: number;
  /** Total number of temp blocks written by the statement */
  tempBlksWritten?: number;
  /** Total time spent planning the statement, in milliseconds */
  totalPlanTime?: number;
  /** Total time spent for the statement, in milliseconds */
  totalTime?: number;
  /** Name of the user who executed the statement */
  username?: string;
  /** Total amount of WAL generated by the statement in bytes */
  walBytes?: UnitAndValueLong;
  /** Total number of WAL full page images generated by the statement */
  walFpi?: number;
  /** Total number of WAL records generated by the statement */
  walRecords?: number;
}

import { useEffect } from 'react';
import { useFormContext } from 'react-hook-form';
import { TGateway, TGatewayCatalog } from '@/types/gateway.type';
import { getAutoGeneratedName } from '@/utils/utils';
import { NewPrivateNetworkForm } from '@/types/private-network-form.type';

type GetInitialValuesProps = {
  searching: boolean;
  gateway?: TGateway;
  region: string;
  catalog: TGatewayCatalog;
};

type PrepareGatewayCreationProps = GetInitialValuesProps & {
  createGateway: boolean;
};

function getInitialValues({
  searching,
  gateway,
  catalog,
  region,
}: GetInitialValuesProps) {
  if (searching) {
    return { existingGatewayId: false };
  }

  if (gateway) {
    return { existingGatewayId: gateway.id };
  }

  return {
    gateway: {
      model: catalog.size,
      name: getAutoGeneratedName(`gateway-${region.toLowerCase()}`),
    },
  };
}

export default function usePrepareGatewayCreation({
  createGateway,
  ...props
}: PrepareGatewayCreationProps) {
  const { setValue, unregister } = useFormContext<NewPrivateNetworkForm>();
  const { searching, gateway, catalog } = props;

  useEffect(() => {
    unregister('existingGatewayId');
    unregister('gateway');

    if (createGateway) {
      const initialValues = getInitialValues(props);

      Object.entries(initialValues).forEach(([key, value]) => {
        setValue(key as keyof NewPrivateNetworkForm, value, {
          shouldValidate: true,
        });
      });
    }
  }, [createGateway, searching, gateway, catalog]);
}

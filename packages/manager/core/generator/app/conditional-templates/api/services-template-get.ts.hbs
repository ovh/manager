import { fetchIcebergV2, fetchIcebergV6, apiClient } from '@ovh-ux/manager-core-api';

{{!-- {{#if unknownTypeList}}
{{#each unknownTypeList}}
type {{this}} = unknown;
{{/each}}
{{/if}} --}}
{{#each operationList}}

{{#if this.params}}
export type {{pascalCase this.functionName}}Params = {
  {{#each this.params}}
  /** {{this.description}} */
  '{{this.name}}'{{#if this.required}}?{{/if}}: any;
  {{/each}}
};

{{/if}}
export const {{this.functionName}}QueryKey = {{#if this.urlParams}}(params: {{pascalCase this.functionName}}Params) => [`{{this.httpMethod}}{{this.url}}`]{{else}}['{{this.httpMethod}}{{this.url}}']{{/if}};

{{#if this.description}}
/**
 * {{this.description}}
 */
{{/if}}
export const {{this.functionName}} = async ({{#if this.params}}params: {{pascalCase this.functionName}}Params{{/if}}): Promise<any> =>
  apiClient.{{this.apiVersion}}.{{this.httpMethod}}({{#if this.urlParams}}`{{this.url}}`{{else}}'{{this.url}}'{{/if}}{{#if this.bodyParams}}, { data: params }{{/if}});
{{/each}}
{{#ifEq arg1=apiVersion arg2=mainApiPathApiVersion}}

{{#if this.isApiV6}}
/**
 *  Get listing with iceberg V6
 */
export const getListingIcebergV6 = async ({ {{#if this.isPCI }}projectId, {{/if}}pageSize, page }: { {{#if this.isPCI }}projectId: string, {{/if}}pageSize: number, page: number }) => {
  try {
    const List = await fetchIcebergV6({
      route: `{{#if this.isPCI }}{{this.mainApiPathPci}}{{else}}{{this.mainApiPath}}{{/if}}`,
      pageSize,
      page
    }).then(
      ({ data, status, totalCount }) => ({ data, status, totalCount }),
    );
    return List;
  } catch (error) {
    return null;
  }
};
{{/if}}

{{#if this.isApiV2}}
/**
 *  Get listing with iceberg V2
 */

export const getListingIcebergV2 = async ({ {{#if this.isPCI }}projectId, {{/if}}pageSize, cursor }: { {{#if this.isPCI }}projectId: string, {{/if}}pageSize: number, cursor?: string }) => {
  try {
    const List = await fetchIcebergV2({
      route: `{{#if this.isPCI }}{{this.mainApiPathPci}}{{else}}{{this.mainApiPath}}{{/if}}`,
      pageSize,
      cursor
    }).then(
      ({ data, status, cursorNext }) => ({ data, status, cursorNext }),
    );
    return List;
  } catch (error) {
    return null;
  }
};
{{/if}}

{{/ifEq}}

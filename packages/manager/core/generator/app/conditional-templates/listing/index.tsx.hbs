import React, { Suspense } from 'react';
import { useTranslation } from 'react-i18next';
import {
  Await,
  defer,
  Link,
  Navigate,
  Outlet,
  useLoaderData,
} from 'react-router-dom';

import { {{listingEndpoint}} } from '@/api';

export function loader() {
  return defer({
    services: {{listingEndpoint}}(),
  });
}

export default function Listing() {
  const results: any = useQueries({
    queries: [
      { queryKey: ['servicesListingIceberg'], queryFn: getListingIceberg, staleTime: Infinity, },
      {{#if this.pimID}}{ queryKey: ['pimService'], queryFn: getPIMService, staleTime: Infinity },{{/if}}
    ],
  });

  const servicesListingIcebergResult = results[0];
  {{#if this.pimID}}const pimServiceResult = results[1];{{/if}}

  const isError = servicesListingIcebergResult.error{{#if this.pimID}} || pimServiceResult.error{{/if}};
  const isLoading = servicesListingIcebergResult.isLoading{{#if this.pimID}} || pimServiceResult.isLoading{{/if}};

  if (isLoading) {
    return <p>Loading...</p>;
  }

  if (isError || results[0].data.status !== 200) {
    return <Navigate to="onboarding" />;
  }

  return (
    <div>
      <h1>{t('title')}</h1>
      <Suspense fallback="">
        <Await resolve={data.services}>
          {(services) => {
            const count = services.length;
            if (count === 0) {
              return <Navigate to="onboarding" />;
            }
            if (count === 1) {
              return (
                <>
                  <Outlet />
                  <Navigate to={services[0]} />
                </>
              );
            }
            return (
              <>
                <h2>
                  Services list
                </h2>
                <ul>
                  {services.map((serviceName: string) => (
                    <li key={serviceName}>
                      <Link to={`/dashboard/${serviceName}`}>{serviceName}</Link>
                    </li>
                  ))}

                </ul>
              </>
            );
          }}
        </Await>
      </Suspense>
    </div>
  );
}

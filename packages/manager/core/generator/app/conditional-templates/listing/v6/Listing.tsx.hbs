import React, { useEffect, useState, startTransition } from 'react';
import { useTranslation } from 'react-i18next';
import { FilterCategories } from '@ovh-ux/manager-core-api';
import { {{#if isPCI}}useParams,{{/if}} useNavigate, useLocation } from 'react-router-dom';

import { OdsButton, OdsSpinner, OdsIcon } from '@ovhcloud/ods-components/react';
import {
  ODS_BUTTON_VARIANT,
  ODS_BUTTON_SIZE,
  ODS_ICON_NAME,
} from '@ovhcloud/ods-components';
import {
  Breadcrumb,
  Datagrid,
  DataGridTextCell,
  ErrorBanner,
  useResourcesIcebergV6,
  dataType,
  BaseLayout,
  DatagridColumn,
} from '@ovh-ux/manager-react-components';

import appConfig from '@/{{appName}}.config';
import { mapDataTypeToFilterType } from '@/utils/datagrid-helpers';

export default function Listing() {
  const myConfig = appConfig;
  const serviceKey = myConfig.listing?.datagrid?.serviceKey;
  const [columns, setColumns] = useState<DatagridColumn<Record<string, unknown>>[]>([]);
  const navigate = useNavigate();
  const location = useLocation();
  const { t } = useTranslation('listing');
  {{#if isPCI}}
  const { projectId } = useParams();
  {{/if}}
  const {
    flattenData,
    isError,
    error,
    totalCount,
    hasNextPage,
    fetchNextPage,
    isLoading,
    status,
    search,
    sorting,
    setSorting,
    filters,
  } = useResourcesIcebergV6({
    columns,
    route: `{{#if this.isPCI }}{{this.mainApiPathPci}}{{else}}{{this.mainApiPath}}{{/if}}`,
    queryKey: ['{{appName}}', `{{#if this.isPCI }}{{this.mainApiPathPci}}{{else}}{{this.mainApiPath}}{{/if}}`],
  });

  const navigateToDashboard = (label: string) => {
    const path =
      location.pathname.indexOf('pci') > -1 ? `${location.pathname}/` : '/';
    startTransition(() => navigate(`${path}${label}`));
  };

  // Helper function to generate columns from data
  function generateColumns(
    data: Record<string, unknown>[]
  ): DatagridColumn<Record<string, unknown>>[] {
    if (!data || data.length === 0) return [];
    return Object.keys(data[0])
      .filter((element) => element !== 'iam')
      .map((element) => {
        const type = dataType(data[0][element]);
        const filterType = mapDataTypeToFilterType(type);
        return {
          id: element,
          label: element,
          isFilterable: true,
          isSearchable: true,
          type: filterType,
          comparator: FilterCategories[filterType],
          cell: (props: Record<string, unknown>) => {
            const label = props[element] as string | number;
            if (typeof label === 'string' || typeof label === 'number') {
              if (serviceKey === element)
                return (
                  <DataGridTextCell>
                    <OdsButton
                      variant={ODS_BUTTON_VARIANT.ghost}
                      onClick={() => navigateToDashboard(label.toString())}
                      label={label.toString()}
                    >
                      {label.toString()}
                    </OdsButton>
                  </DataGridTextCell>
                );
              return <DataGridTextCell>{label.toString()}</DataGridTextCell>;
            }
            return <DataGridTextCell>-</DataGridTextCell>;
          },
        };
      });
  }

  useEffect(() => {
    // Only generate columns if not already set, data is loaded, and data is available
    if (columns.length > 0) return;
    if (status !== 'success') return;
    if (!flattenData || flattenData.length === 0) return;
    setColumns(generateColumns(flattenData));
  }, [flattenData, serviceKey, status]);

  if (isError) {
    const { response }: any = error;
    const errorObj = {
      data: error,
      headers: response?.headers,
      status: response?.status,
    };
    return <ErrorBanner error={errorObj} />;
  }

  if (isLoading && !flattenData) {
    return (
      <div
        className="flex justify-center"
        data-testid="listing-spinner-container"
      >
        <OdsSpinner />
      </div>
    );
  }

  const header = {
    title: t('title'),
  };

  const TopbarCTA = () => (
    <div>
      <OdsButton
        variant={ODS_BUTTON_VARIANT.ghost}
        size={ODS_BUTTON_SIZE.sm}
        label="Add service"
      >
        <OdsIcon name={ODS_ICON_NAME.plus} />
        Add service
      </OdsButton>
    </div>
  );

  return (
    <BaseLayout
      breadcrumb={
        <Breadcrumb
          rootLabel={appConfig.rootLabel}
          appName="{{appName}}"
        />
      }
      header={header}
    >
      <React.Suspense>
        {columns && (
          <Datagrid
            columns={columns}
            items={flattenData || []}
            totalItems={totalCount || 0}
            hasNextPage={hasNextPage && !isLoading}
            onFetchNextPage={fetchNextPage}
            sorting={sorting}
            onSortChange={setSorting}
            isLoading={isLoading}
            filters={filters}
            search={search}
            topbar={<TopbarCTA />}
          />
        )}
      </React.Suspense>
    </BaseLayout>
  );
}
